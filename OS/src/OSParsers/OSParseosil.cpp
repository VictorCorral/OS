#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 224
#define YY_END_OF_BUFFER 225
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1575] =
    {   0,
        1,    1,    0,    0,  221,  221,  222,  222,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  225,  223,
        1,    1,    2,  211,    2,  211,    6,  211,    5,  223,
        4,  211,  211,    2,  224,  221,  222,  212,  214,  215,
      214,  218,  219,  218,    1,  211,  211,    6,  211,    5,
        0,    4,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,    3,    6,    6,  211,    7,    5,
        0,    0,  217,  201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  211,  211,  221,  222,  212,    0,  220,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  203,    0,    0,
        0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    6,  216,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  213,    0,  202,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  187,    0,    0,
        0,    0,    0,    0,    0,  171,    0,    0,    0,    0,
        0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   55,  211,
      211,  211,  211,  211,  211,   26,   27,  211,   15,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      202,    0,  204,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   70,    0,    0,    0,    0,    0,    0,
      188,    0,    0,    0,    0,    0,    0,    0,  172,    0,
        0,    0,    0,    0,    0,  158,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  183,    0,    0,    0,
        0,    0,    0,    0,  179,    0,    0,    0,    0,  185,
        0,  181,    0,    0,  187,    0,    0,    0,    0,    0,
        0,  171,    0,    0,  189,    0,  191,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  177,    0,    0,    0,    0,    0,  193,    0,
        0,    0,    0,    0,  211,  211,  154,  211,  211,  211,
       24,   25,   15,  211,  211,  211,   18,  211,   19,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  204,    0,
      184,    0,    0,    0,    0,    0,   58,    0,    0,    0,
      180,    0,    0,   70,    0,    0,  186,    0,  182,    0,
        0,  188,    0,    0,    0,    0,    0,    0,  172,    0,
        0,  190,    0,  192,    0,    0,    0,  158,    0,    0,
        0,    0,   60,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  178,    0,    0,    0,    0,    0,  194,
        0,    0,    0,   56,    0,    0,    0,  183,    0,    0,
        0,  119,    0,   65,    0,  179,    0,    0,    0,  185,
      181,    0,    0,    0,    0,    0,    0,    0,   72,    0,
        0,    0,  189,  191,    0,    0,    0,   78,    0,    0,
        0,    0,    0,    0,    0,  163,    0,    0,   41,    0,
        0,  177,    0,    0,   47,  137,  193,    0,    0,    0,
        0,    0,    0,  211,  154,  211,  211,  211,  211,  211,
       18,   19,  211,   30,   31,  211,  211,  211,   22,  211,
      211,  211,   34,   35,  211,   23,  184,    0,    0,    0,

        0,    0,   58,    0,    0,  180,    0,    0,    0,  186,
      182,    0,    0,    0,    0,    0,    0,   73,    0,    0,
        0,  190,  192,    0,    0,   79,    0,    0,    0,    0,
       60,    0,    0,    0,   36,    0,  164,    0,    0,    0,
        0,    0,  178,    0,    0,    0,    0,  194,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,  117,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       74,   72,    0,    0,    0,    0,  113,    0,  165,   80,
       78,    0,    0,    0,    0,  199,    0,    0,  163,    0,
      169,    0,    0,    0,    0,    0,   45,    0,    0,  159,

        0,  149,    0,    0,  211,  211,  211,  211,  211,   16,
      211,   17,   28,   29,  211,  211,   22,  211,  211,   32,
       33,   23,    0,    0,    0,    0,  120,    0,    0,    0,
       66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   73,    0,    0,    0,    0,    0,  166,   79,    0,
        0,    0,    0,    0,    0,   36,  164,    0,  170,    0,
        0,   42,    0,    0,    0,    0,    0,   48,    0,    0,
      138,    0,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
      141,    0,    0,   74,    0,    0,    0,    0,    0,  165,

       80,    0,    0,  167,    0,    0,    0,    0,  169,    0,
        0,    0,    0,    0,   82,    0,  175,    0,    0,  159,
        0,    0,    0,  211,  211,  211,  211,   21,   16,   17,
      211,  211,  211,  211,    0,    0,    0,  120,    0,  118,
        0,   66,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  114,    0,  166,
        0,  168,    0,    0,    0,  200,    0,    0,  170,    0,
       42,    0,    0,    0,   83,    0,  176,    0,   48,    0,
       46,  138,    0,  160,    0,    0,  150,    0,    0,    0,
      195,    0,    0,    0,    0,    0,    0,  161,  121,    0,

        0,    0,   61,    0,    0,    0,   94,    0,   63,    0,
        0,    0,  167,    0,  139,    0,    0,    0,  197,    0,
        0,   84,   82,    0,  175,    0,    0,    0,    0,  205,
      211,  211,  108,  211,   21,  211,  211,  211,  211,  211,
      211,  211,  211,  211,   20,  211,    0,  196,    0,    0,
      118,    0,    0,    0,    0,  162,    0,    0,    0,    0,
      142,    0,    0,    0,   95,    0,    0,  114,    0,    0,
      168,    0,    0,  200,    0,    0,    0,  198,    0,    0,
       83,  176,    0,   46,    0,    0,  150,    0,    0,  195,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       96,   94,    0,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,   84,    0,    0,    0,    0,    0,   49,
      211,  108,  211,  211,  211,  211,  211,  211,  211,  211,
      211,   20,  211,  196,    0,    0,    0,    0,    0,    0,
        0,  122,    0,    0,  142,    0,    0,   62,   95,    0,
        0,   64,    0,    0,    0,    0,  140,    0,    0,  198,
        0,    0,    0,    0,    0,    0,    0,  206,    0,    0,
      115,  145,    0,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,    0,    0,    0,   53,    0,    0,  147,
        0,    0,   43,    0,    0,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,    0,    0,
        0,    0,    0,    0,  122,    0,    0,    0,   62,    0,
       64,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,  206,    0,   50,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,  207,    0,    0,
        0,    0,    0,    0,  173,    0,    0,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,    0,    0,  116,    0,  146,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,  148,    0,  174,    0,   44,    0,    0,   50,    0,

        0,    0,    0,   86,    0,    0,   90,    0,    0,    0,
       71,    0,    0,    0,    0,   77,    0,   75,    0,    0,
      173,    0,    0,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,    0,  116,  146,
        0,    0,   52,    0,   87,    0,   91,    0,    0,    0,
        0,    0,  208,    0,   54,    0,    0,  148,  174,   44,
        0,    0,    0,    0,   88,   86,    0,   92,   90,    0,
        0,    0,    0,   71,    0,    0,    0,   77,    0,    0,
        0,    0,    0,  211,  211,  211,   97,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,    0,

        0,   52,   87,   91,    0,    0,   37,    0,    0,  208,
        0,    0,   76,    0,    0,    0,    0,    0,   88,    0,
       92,    0,    0,   38,    0,  131,  209,    0,    0,    0,
      151,    0,  211,  211,   97,  211,  211,  211,  211,  211,
      211,  211,  211,   12,  211,  107,  211,  211,  211,    0,
        0,    0,   37,    0,    0,    0,   76,    0,    0,    0,
        0,    0,    0,    0,  133,   38,    0,    0,    0,    0,
        0,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,   12,  107,  211,  211,  211,    0,    0,    0,    0,
      132,    0,  210,    0,    0,    0,  152,    0,   67,  123,

        0,    0,    0,    0,    0,    0,   81,    0,  211,  103,
      211,  102,  211,  211,  211,  211,  211,   13,  211,  211,
      211,  211,  211,  104,  211,    0,    0,    0,  134,  132,
      210,    0,    0,  152,    0,    0,    0,    0,    0,    0,
       81,    0,  103,  102,  211,  211,  211,  211,   13,  211,
      211,  211,  211,    8,  104,  211,  211,    0,   68,    0,
      124,  134,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,  211,  101,  211,  100,  211,  211,  211,  211,
       10,  211,    8,  211,  211,   68,  124,    0,    0,    0,
        0,    0,   93,    0,    0,    0,  101,  100,  211,  211,

      211,    9,  211,   10,  211,  211,  211,    0,    0,    0,
        0,    0,  155,    0,  125,  211,  111,  112,    9,  211,
      211,  211,   99,  211,   98,    0,    0,    0,    0,    0,
       39,  109,  110,  211,  211,   99,   98,    0,  156,    0,
        0,  126,    0,    0,  211,  211,   11,  156,    0,   40,
      126,    0,    0,  211,   11,   40,    0,    0,  211,    0,
        0,  211,    0,   85,    0,   89,  211,   85,   89,  211,
      211,  153,  153,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,    6,    6,    6,   26,   27,   28,   29,
       30,   31,   32,   33,    6,   34,    6,   35,    6,    6,
        1,    6,    1,    1,    6,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1586] =
    {   0,
        0,   62,    0,    0, 3374, 3373, 3370, 3369,    0,    0,
        0,    0, 3360, 3359,   13,   17,    3,    5, 3373, 3380,
      123,  179, 3367,   13, 3364,   19,   38,   20,  235,  272,
     3380,   30,   66, 3380, 3380,    0,    0,    0, 3380, 3380,
     3361, 3380, 3380, 3352,    0,   31,   78,  105,   39,  328,
       20, 3380,   67,   94,   95,   89,   82,   99,  136,   44,
      106,  159,  169,  129, 3380,  153,  229,  246, 3380,  196,
     3359,  347, 3380, 3380, 3342,    2,   49, 3316,   61,  105,
     3321, 3324,  146,  110,  164,  230,   78,  162,  146, 3313,
      212,  177, 3326,  203,  257,    0,    0,    0, 3344, 3380,

      264,  256,  317,  280,  344,  320,  270,  334,  357,  337,
      375,  283,  362,  363,  350,  404, 3351,  222, 3334,   21,
      242, 3308,  103,  361, 3313, 3316,  374,  191,  255,  386,
      302,  377,  232, 3305,  388,  249, 3318, 3380, 3299, 3305,
     3297, 3300,  392, 3295, 3291, 3307, 3305, 3294, 3297, 3294,
      432,  398, 3302,  254,  445,  114, 3292, 3292, 3297, 3380,
     3289, 3289, 3291, 3280, 3278, 3275, 3282, 3291, 3294, 3271,
     3279, 3271, 3270, 3289, 3276, 3275, 3286, 3268,  448, 3380,
      439,  440,  443,  444,  449,  467,  470,  486,  459,  289,
      475,  463,  479,  489,  490,  493,  494, 3380,  496,   40,

      514, 3266, 3272, 3264, 3267,  471, 3262, 3258,  519, 3273,
     3262, 3265, 3262,  521,  489, 3270,  332,  532,  148, 3260,
     3260, 3265,  537, 3257, 3257, 3259, 3248, 3258, 3245, 3242,
     3249, 3258, 3261, 3238, 3246, 3238, 3237, 3256, 3243, 3242,
     3253, 3235,  543, 3266, 3246, 3247, 3256,  317,  545, 3245,
     3238, 3233,  549,  553, 3240, 3239,  555,  465, 3238, 3222,
     3236, 3227, 3234, 3233,  561,  527, 3219,  565,  571, 3231,
     3234,  384, 3232, 3228, 3223, 3212, 3225, 3225, 3210, 3223,
     3233,  573, 3207, 3223,  527,  581, 3218, 3208,  556,  576,
      592,  562,  582,  586,  608, 3251, 3248,  603,  619,  597,

      609,  626,  637,  642,  615,  620,  616,  633,  659,  648,
      583,  666,  675,  677, 3233, 3213, 3214, 3223,  679,  682,
     3212, 3205,  684,  687, 3200,  689,  695, 3207, 3206,  700,
      702, 3205, 3189, 3203, 3194, 3201, 3200,  705,  707, 3186,
      711,  713, 3198, 3201,  718,  721,  480, 3199,  723, 3191,
     3187, 3179, 3192, 3192, 3177, 3190, 3200,  729, 3174, 3190,
      607,  734, 3185, 3175,  736,  739,  741, 3179,   72, 3176,
     3180, 3166, 3164,  745,  747, 3165, 3178, 3176,  755,  752,
      757,  762, 3195, 3161,  768, 3154, 3176, 3158,  773, 3161,
     3173,  775, 3164,  779,  783,  785,  789, 3153,  792, 3151,

     3161, 3164, 3163, 3164, 3151,  795, 3147, 3143, 3150, 3144,
     3155,  797,  802, 3157, 3141, 3153, 3137,  804,  808,  261,
     3137, 3151, 3149, 3152,  798,  814,  820,  803,  809,  751,
     3380, 3380,  825,  655,  821,  830,  841,  847,  850,  857,
      873,  840,  851,  867,  862,  883,  903,  899,  892,  894,
      910, 3143,  539, 3140, 3144,  919,  921, 3130, 3128,  923,
      925, 3129, 3142,  927, 3140,  929,  931,  935,  939, 3159,
     3125,  941, 3118, 3140, 3122,  945, 3125, 3137,  947, 3128,
      951,  953,  955,  957, 3117,  961, 3115,  963, 3125, 3128,
     3127,  967,  971, 3128, 3115,  973,  977, 3111, 3107, 3114,

     3108, 3119,  979,  983, 3121, 3105, 3117, 3101,  985,  989,
      550, 3101,  995,  997, 3133, 3113, 3116, 1001, 3110, 3137,
     3113, 3094, 3106, 3380,  772, 1003, 3102, 3105, 3095, 1005,
     1007, 3090, 3106, 3101, 3091, 3082, 1011, 3121, 1014, 3099,
     3083,  269, 1016, 1018, 1021, 1023, 3118, 1028, 3094, 3084,
     3079, 3078, 3075, 3080, 1030, 1033, 1039, 3090, 3380, 3091,
     3085, 1042, 3085, 3084, 3069, 3380, 1046, 3072, 1048, 3080,
     3061, 3078, 3081, 1022, 1051,  978,  712, 1040, 1056, 1059,
     1067, 1076, 1083, 3112, 3109, 1066, 1080, 1099, 1102, 1092,
     1095, 1120, 3110, 3107, 1126, 1130, 1061, 3072, 3099, 3075,

     1136, 3069, 1146, 1148, 1060, 1152, 3065, 3068, 3058, 1154,
     1156, 3053, 3069, 3064, 3054, 3045, 1158, 1160, 3063, 3047,
     1008, 1164, 1166, 1168, 1170, 1174, 3059, 3049, 3044, 3043,
     1176, 3040, 3045, 1178, 1180, 1186, 1189, 1191, 3055, 1194,
     3056, 3050, 1196, 3050, 3049, 1198, 1202, 1204, 3038, 1207,
     3046, 1210, 3051, 3044, 3047, 3042, 3063, 3026, 3380, 3026,
     3030, 3042, 3026, 1214, 3021, 3035, 3027, 3019, 3034, 3035,
     1218, 1220, 3059, 3029, 3046, 3027, 3033, 1223, 1225, 1227,
     1230, 3054, 1234, 3024, 3013, 3380, 3018, 3037, 1236, 1239,
     1241, 3005, 3004, 3004, 1244, 1246, 3380, 3009, 1251, 1255,

     3006, 3380, 3015, 3007,  892, 1109, 1245, 1263, 1267, 1270,
     1273, 1289, 3380, 3380, 1103, 1278, 1294, 1283, 1284, 3380,
     3380, 1300, 3012, 3033, 2996, 1305, 1310, 1316, 2996, 1321,
     1323, 3000, 3012, 2996, 1326, 2991, 3005, 2997, 2989, 3004,
     3005, 1328, 3000, 3017, 2998, 1333, 1337, 1342, 1344, 1346,
     2997, 2986, 1350, 2991, 3010, 1353, 1355, 1357, 1359, 2978,
     1362, 1366, 2977, 2977, 1368, 1370, 1373, 1375, 1378, 1380,
     1386, 2982, 1389, 1391, 2979, 1396, 2988, 2980, 1400, 2982,
     2972, 2984, 2968, 2978, 2966, 1402, 1405, 2966, 2983, 2996,
     3380, 2977, 2969, 1407, 2971, 1409, 2967, 2959,  359, 1412,

     1419, 2963, 1421, 1425, 2975, 2956, 2952, 2968, 1427, 1429,
     2963, 2966, 1431, 2988, 1434, 1437, 1441, 2954, 2967, 1448,
     2949, 2948, 2960,  649, 1450,  872, 1453, 1456, 1459, 1475,
     1467, 1369, 1500, 1119, 1483, 2955, 2945, 1461, 1502, 1477,
     2957, 1486, 2941, 2951, 2939, 1504, 1506, 2939, 2956, 2969,
     1508, 2950, 2942, 1510, 2941, 2933, 1520, 1526,  375, 1528,
     1530, 1532, 2950, 2931, 1536, 1538, 2927, 2943, 1540, 1542,
     1546, 2938, 2941, 1548, 1552, 1554, 1558, 2930, 1560, 1564,
     1566, 1570, 2943, 1572, 2925, 1574, 1576, 2924, 2936, 1580,
     1582, 2926, 2930, 2918, 2950, 2922, 2926, 1584, 3380, 2914,

     2921, 2946, 3380, 2911, 1587, 2948, 1590, 2924, 3380, 2931,
     2926, 2925, 1592, 2907, 3380, 2919, 2922, 1597, 1599, 2919,
     2901, 1604, 1606, 2944, 1608, 2904, 2909, 2904, 2911, 2896,
     1598, 1614, 1617, 1607, 1623, 1618, 1622, 1626, 1481, 1627,
     1509, 1631, 1634, 1657, 1660, 1430, 1652, 1625, 2900, 2904,
     1650, 2887, 2914, 2883, 2887, 1662, 1668, 2835, 2838, 1676,
     1678, 2857, 1684, 1688, 1692, 2835, 1694, 1696, 2836, 2823,
     1700, 2795, 1704, 1706, 2803, 2801, 1710, 1712, 2793, 2772,
     1714, 1716, 2762, 1720, 2764, 2751, 1722, 2741, 1726, 1728,
     2742, 2715, 2716, 2705, 2679, 2672, 2670, 2675, 2672, 2665,

     1730, 1732, 2688, 2648, 2653, 2641, 2628, 2647, 2610, 2597,
     1734, 2613, 2576, 1736, 2573, 2559, 2559, 2568, 2548, 3380,
     1727, 1738, 1731, 1169, 1739, 1743, 1746, 1747, 1750, 1667,
     1751, 1767, 1756, 1748, 2546, 2517, 2516, 2513, 2499, 2501,
     1772, 1774, 2486, 2492, 1785, 2488, 1794, 1796, 1799, 2462,
     1801, 1803, 2456, 2451, 2463, 1805, 1807, 2423, 2424, 1810,
     2437, 2399, 2394, 2381, 2391, 2374, 1812, 1814, 1817, 2363,
     3380, 3380, 2346,   16,   64,   75,  109,  128,  162, 1821,
      206,  308,  330,  335,  353,  412, 3380,  446,  445, 3380,
      487, 1823, 3380,  506,  551, 1813, 1816, 1820, 1821, 1824,

     1827, 1830, 1831, 1834, 1299, 1835, 1839, 1842,  539, 1864,
     1866,  556,  562,  602, 1861,  647,  663,  663, 1882,  694,
     1884,  709,  733,  720, 1886, 1889,  743,  739, 1891, 1893,
     1895,  738,  781, 1897, 1900, 1902,  781,  803, 3380, 1911,
     1913,  814,  825, 1916,  837,  842,  856, 3380, 1918,  884,
      886,  911,  905, 1923, 1929,  923,  931, 1912, 1894, 1919,
     1922, 1926, 1929, 1930, 1937, 1933, 1942, 1941, 1947, 1946,
     1859,  917, 1967, 1963, 1974, 1965,  935, 1985, 1987, 1992,
      949,  965,  962,  968, 1994, 1001, 1996, 1976, 1007, 1040,
     1998, 2003, 2005, 2014, 2016, 2018, 1043, 1052, 2021, 1078,

     1063, 2023, 1091, 2026, 2028, 1094, 2033, 1081, 2035, 2040,
     2047, 1102, 1091, 1116, 2049, 2051, 1149, 3380, 1173, 1181,
     2053, 1200, 1237, 2043, 2062, 2044, 2052, 2053, 2056, 1995,
     2065, 2066, 2069, 2070, 2073, 2074, 2078, 1243, 2073, 2096,
     1231, 2098, 2101, 2109, 2106, 2111, 2114, 1225, 2122, 1226,
     1250, 2128, 2130, 1241, 2132, 2134, 1264, 2138, 2140, 2144,
     1260, 1299, 1291, 1283, 2146, 2150, 1326, 2152, 2154, 1340,
     1341, 2156, 1383, 2158, 1378, 1371, 1382, 2160, 1401, 1416,
     1422, 1423, 1428, 2149, 2153, 2169, 2172, 2161, 2165, 2162,
     2104, 2166, 2176, 2177, 2193, 2198, 2187, 2190, 2202, 1445,

     1442, 2209, 2219, 2221, 1459, 2223, 2225, 1466, 1483, 2233,
     1506, 2235, 2239, 1511, 1509, 1523, 1525, 1533, 2241, 1557,
     2243, 1562, 1558, 2245, 1569, 3380, 3380, 1569, 1592, 1605,
     3380, 1610, 2214, 2234, 2251, 2242, 2241, 2250, 2254, 2255,
     2259, 2260, 2281, 2278, 2284, 2300, 2273, 2290, 2294, 1601,
     1606, 1612, 2261, 2316, 2318, 1634, 2276, 1648, 2320, 1660,
     1668, 1656, 1686, 1701, 3380, 2322, 1719, 1718, 1740, 2324,
     1733, 2329, 2336, 2297, 2313, 2325, 2319, 2356, 2339, 2345,
     2349, 2367, 2373, 2350, 2378, 2362, 1749, 1736, 2394, 2396,
     2347, 2398, 2400, 1739, 1783, 2403, 2405, 1779, 3380, 3380,

     1778, 1796, 1813, 1814, 1821, 2407, 2416, 1830, 2419, 2423,
     2426, 2429, 2422, 2397, 2430, 2433, 2449, 2456, 2439, 2445,
     2457, 2465, 2476, 2481, 2480, 2484, 2500, 2502, 2473, 2504,
     2506, 1828, 1863, 2510, 1883, 1900, 1902, 2512, 1899, 1920,
     2518, 1923, 2520, 2523, 2528, 2531, 2501, 2524, 2547, 2374,
     2550, 2540, 2556, 2566, 2572, 2546, 2562, 2525, 2582, 2588,
     2590, 2592, 1935, 1952, 1954, 1961, 2007, 2596, 2598, 1983,
     1998, 2007, 2600, 2604, 2607, 2623, 2626, 2629, 2603, 2632,
     2648, 2622, 2653, 2642, 2643, 2650, 2659, 2023, 2043, 2041,
     2061, 2074, 2664, 2084, 2095, 2119, 2669, 2675, 2678, 2695,

     2701, 2704, 2670, 2711, 2694, 2722, 2728, 2134, 2142, 2164,
     2182, 2199, 3380, 2196, 3380, 2744, 2255, 2278, 2733, 2571,
     2712, 2738, 2754, 2760, 2765, 2671, 2235, 2762, 2251, 2274,
     3380, 3380, 3380, 2743, 2770, 2781, 2786, 2788, 2680, 2790,
     2792, 2730, 2285, 2300, 2785, 2808, 2811, 2813, 2815, 2817,
     2819, 2311, 2324, 2789, 2827, 2832, 2329, 2330, 2821, 2838,
     2843, 2832, 2848, 2850, 2855, 2859, 2839, 2861, 2864, 2867,
     2871, 2874, 2877, 3380, 2894, 2899, 2904, 2909, 2914, 2919,
     2924, 2928, 2933, 2938, 2943
    } ;

static yyconst flex_int16_t yy_def[1586] =
    {   0,
     1575, 1575, 1576, 1576, 1577, 1577, 1578, 1578, 1576, 1576,
     1576, 1576, 1579, 1579, 1580, 1580, 1581, 1581, 1574, 1574,
     1582, 1582, 1574, 1582, 1574, 1582, 1582, 1582, 1582, 1574,
     1574, 1582, 1582, 1574, 1574, 1583, 1584, 1585, 1574, 1574,
     1574, 1574, 1574, 1574,   22, 1582, 1582, 1582, 1582, 1582,
       30, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1574, 1582, 1582, 1582, 1574, 1582,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1583, 1584, 1585, 1574, 1574,

     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1582, 1574,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1582,
     1582, 1582, 1582, 1582, 1582, 1574, 1574, 1582, 1582, 1582,

     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582,
     1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1574, 1574, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1574, 1574, 1582, 1582, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1574,
     1574, 1582, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582,

     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1582, 1582, 1582, 1582,

     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1582, 1574, 1574, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1582, 1582, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1582, 1582, 1582, 1574, 1574, 1574,
     1574, 1574, 1574, 1582, 1582, 1574, 1574, 1574, 1582, 1574,
     1574, 1582, 1574, 1574, 1574, 1574, 1582, 1574, 1574, 1582,
     1582, 1582, 1582,    0, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574
    } ;

static yyconst flex_int16_t yy_nxt[3443] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20, 1574,   40,
       44,   41,   44, 1574,   32,   41,   33, 1574,   48, 1574,
       50,   50,   50, 1574, 1574, 1574,   69, 1574,  139,   66,
       66,  311,  311,   53, 1574, 1574, 1574, 1574,  140,   67,
       67,   67, 1574, 1574, 1574,   69,   94,  202, 1574,   68,
     1574,   34,   20,   21,   22,   20,   23,  203,   25, 1139,
       26,   27,   28,   29,   29,   29,   30,   68,   31,   20,
     1574, 1574, 1574, 1574,  141,  520,   32,   48,   33,   50,
       50,   50, 1574,   94, 1574,  142, 1574,  521, 1574,  107,

      144,   95,   53, 1574,  145, 1574,   66,   66, 1574, 1574,
     1574, 1574, 1140, 1574,  163, 1574,   67,   67,   67, 1574,
     1574, 1574, 1574,   34,   45,   45,   68, 1141,  164,   95,
      101,   47,   48,   49,   50,   50,   50,   51,  102,   52,
      103,  108,  207, 1574,   68, 1574,  208,   53,  104,   54,
     1574,  146, 1574,  154,   66,   66, 1142,  147,  155,   55,
       56,  109,   57,  148,  114,   58,   59, 1574,  267, 1574,
       60,   61,  268, 1574,  105, 1574,   62,   63,  168,   64,
       45,   45, 1143, 1574,  106, 1574,  151,   47,   48,   49,
       50,   50,   50,   51,  152,   52,  110,   70,   70,  156,

      153,  169,  340,   53,  112,   54,  341,  157,  165, 1144,
     1574,  166, 1574,  111,  167,   55,   56, 1574,   57, 1574,
      176,   58,   59,  199,  199,  179,   60,   61,  113,  177,
       66,   66,   62,   63,  217,   64,   70,   70,  200,  218,
       67,   67,   67, 1574,   48, 1574,   50,   50,   50, 1574,
       68, 1574, 1145,  115,  115,  171,   68,  116,  116,  116,
     1574,  172, 1574,  173,  232,  158,  174,  175,   68,  159,
     1574, 1574, 1574, 1574,   68,   71,  160,  204, 1574,  161,
     1574,  568,   72,  179, 1574,  162, 1574,  233,  205,   73,
      219,  263,  240,   74, 1574,  182, 1574, 1574,  220, 1574,

       75,  241,  264, 1574,  183, 1574,  676,   76,   77,   78,
       79,   80,   81,   82,  569,   83,  190,  181,   84,   85,
       86,   87,   88,   89,   90,   91,   92,  677,   93,   70,
       70, 1574,  185, 1574, 1574,  195, 1574,   48,  226,   50,
       50,   50, 1574,  303, 1574,  186,  186, 1146, 1574,   68,
     1574, 1574,  227, 1574,  184,  228,  372,  189, 1574,  187,
     1574,  116,  116,  116, 1574, 1147, 1574,   68,  118,  336,
      373, 1574,  193, 1574, 1148,  119, 1574, 1574, 1574, 1574,
      337,  191,  120,  121,  122,  123,  124,  125,  126, 1574,
      127, 1574, 1149,  128,  129,  130,  131,  132,  133,  134,

      135,  136,  188,  137,  192,   66,   66,  209,  910,  197,
      194,  911,  196,  210,  214,  116,  116,  116, 1574,  211,
     1574,  221,  215,  229,  969,  222,  230,  970,  216,  231,
      401,  235,  223,  257,  257,  224,  259,  236,  247,  237,
      248,  225,  238,  239,  402,  249,  265,  265,  258,   66,
       66,  260,  261, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574,  266, 1574, 1574, 1574, 1574,  385,  385,  186,  186,
     1150,  295,  295, 1574,  296, 1574,  297, 1574,  290, 1574,
      291, 1574,  187, 1574, 1574, 1151, 1574,  298,  298, 1574,
      293, 1574,  294, 1574, 1152, 1574,  292,  199,  199,  305,

     1574,  299, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574,  302,  200,  300,  304,  312,  312,  318,  301,  319,
      323,  323,  330,  330,  320,  306,  489,  332,  392,  392,
      313,  308,  309,  338,  338,  324, 1153,  331,  345,  345,
      490,  307,  333,  334,  366,  366,  374,  374,  339,  310,
      379,  379,  599,  346,  381,  381,  257,  257,  325,  367,
     1156,  375,  265,  265,  600,  380,  394,  394,  416,  382,
      649,  258,  396,  396,  412,  412, 1574,  266, 1574,  417,
      422,  395,  418,  418,  311,  311,  423,  397, 1157,  413,
     1574, 1172, 1574,  426,  426, 1177, 1574,  419, 1574,  424,

     1574,  425, 1574,  650,  298,  298, 1574,  427, 1574,  295,
      295, 1574,  296, 1574,  297, 1178,  428, 1574,  299, 1574,
      433,  433, 1574, 1574, 1574, 1574,  398,  436,  436, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574,  429,  438,  438,
     1574,  437, 1574,  440,  440,  434,  430, 1574,  507, 1574,
     1179, 1574,  439, 1574,  442,  443, 1574,  441, 1574,  508,
      446,  446, 1574, 1574, 1574, 1574,  435,  312,  312, 1574,
      444, 1574,  445, 1574,  447, 1574,  449,  449,  450,  450,
      456,  456,  313,  460,  460,  323,  323,  448,  464,  464,
      466,  466,  931,  451,  579,  457,  468,  468,  461, 1180,

      324,  330,  330,  472,  472,  467,  338,  338,  479,  479,
     1181,  469,  481,  481,  483,  483,  331, 1182,  458,  345,
      345,  339,  488,  488,  492,  492, 1574,  482, 1574,  484,
      503,  503,  459, 1183,  346,  509,  509,  513,  513,  493,
      366,  366,  518,  518, 1184,  504,  374,  374,  526,  526,
      510,  707,  514,  530,  530,  367,  379,  379,  381,  381,
      515,  375,  494,  531,  531, 1574,  516, 1574,  485,  385,
      385,  380, 1185,  382,  537,  537,  392,  392, 1186,  517,
      394,  394, 1189,  538,  543,  543,  396,  396, 1190,  539,
      544,  544, 1197,  546,  546,  395,  555,  555,  412,  412,

      578,  397,  547,  562,  562,  418,  418,  661,  548,  567,
      567,  556, 1574,  413, 1574,  426,  426, 1574, 1198, 1574,
      419,  575,  575, 1574,  662, 1574,  433,  433, 1574,  427,
     1574,  436,  436,  574, 1574, 1574, 1574, 1574,  576, 1574,
     1200, 1574,  581,  581, 1574,  437, 1574,  577,  438,  438,
     1201,  582,  582, 1208, 1574, 1574, 1574, 1574,  440,  440,
     1209, 1574,  439, 1574, 1574, 1574, 1574, 1574,  588,  588,
      580, 1574,  441, 1574,  583,  583, 1574,  584, 1574,  585,
     1212, 1574,  589, 1574,  446,  446, 1574, 1574, 1574, 1574,
     1213,  590,  586,  449,  449,  450,  450, 1574,  447, 1574,

      595,  595, 1214,  587,  592,  592, 1574,  593, 1574,  594,
      451,  597,  597, 1574,  596, 1574,  591, 1574,  934, 1574,
      456,  456,  603,  603,  460,  460,  606,  606,  464,  464,
      466,  466,  610,  610, 1217,  457,  468,  468, 1218,  461,
      611,  611,  472,  472,  824,  467,  617,  617,  479,  479,
     1219,  469,  481,  481,  622,  622,  483,  483,  623,  623,
     1220,  618,  625,  625,  488,  488, 1222,  482,  492,  492,
     1223,  484,  631,  631,  634,  634, 1238,  626,  636,  636,
      503,  503, 1241,  493,  643,  643,  509,  509, 1248,  635,
      648,  648, 1574,  637, 1574,  504,  513,  513,  652,  652,

     1249,  510,  518,  518,  526,  526,  530,  530,  531,  531,
     1250,  514,  537,  537, 1251,  672,  672,  543,  543,  544,
      544,  538,  678,  678,  546,  546,  706,  539,  673,  681,
      681,  555,  555,  547,  689,  689, 1574,  679, 1574,  548,
      690,  690,  682,  562,  562,  745,  556,  567,  567,  699,
      699, 1254,  575,  575, 1574,  691, 1574,  709,  709, 1256,
      711,  711,  597,  597,  700, 1574,  746, 1574,  581,  581,
     1574,  710, 1574, 1574,  712, 1574,  705,  582,  582, 1257,
     1574, 1574, 1574, 1574,  583,  583, 1261,  584,  708,  585,
     1574, 1262, 1574,  715, 1574,  732, 1574, 1574, 1263, 1574,

      588,  588, 1264,  717,  717,  716, 1574, 1265, 1574, 1574,
     1268, 1574,  733, 1574,  589, 1574, 1574, 1574, 1574, 1574,
      719,  592,  592, 1574,  593, 1574,  594,  595,  595, 1271,
      718,  722,  722, 1574, 1574, 1574, 1574,  726,  726, 1275,
     1574,  596, 1574,  831, 1574, 1276, 1574,  603,  603,  730,
      730, 1277,  727,  606,  606,  610,  610,  611,  611,  617,
      617,  742,  742,  825,  731,  622,  622,  623,  623,  747,
      747,  625,  625,  946,  618,  749,  749,  631,  631,  634,
      634,  756,  756, 1574,  748, 1574,  626,  636,  636,  728,
      757,  757,  758,  758,  635,  761,  761,  643,  643,  767,

      767, 1279,  637,  770,  770,  648,  648,  759,  773,  773,
      762,  652,  652, 1280,  768,  786,  786, 1100,  771,  794,
      794,  672,  672,  774,  678,  678,  800,  800,  801,  801,
      787,  681,  681, 1281,  673,  803,  803,  689,  689,  679,
      690,  690,  809,  809,  682,  813,  813,  816,  816, 1282,
      804,  769,  699,  699,  814,  691,  820,  820, 1283, 1574,
      815, 1574,  817, 1300,  827,  827,  826,  700,  709,  709,
     1301,  829,  829, 1305,  711,  711,  818, 1574,  828, 1574,
     1308, 1574,  710, 1574, 1574, 1309, 1574, 1574,  712, 1574,
      830,  830, 1574, 1311, 1574,  717,  717, 1574, 1574, 1574,

     1574,  722,  722, 1574, 1314, 1574,  726,  726, 1574, 1315,
     1574,  838,  838, 1574, 1574, 1574, 1574,  839,  839,  834,
     1316,  727,  730,  730,  842,  842, 1317,  846,  846,  742,
      742, 1318,  840,  832,  857,  857, 1320,  731,  747,  747,
     1167,  833,  847,  860,  860,  749,  749,  861,  861,  858,
     1322,  865,  865,  748,  756,  756,  757,  757,  758,  758,
      869,  869,  862,  761,  761,  859,  866,  871,  871,  874,
      874,  876,  876,  759,  767,  767,  879,  879,  762,  880,
      880,  770,  770, 1574,  875, 1574,  877,  882,  882,  768,
      773,  773,  884,  884,  881, 1323,  771,  886,  886, 1324,

      878,  890,  890,  786,  786,  774,  898,  898,  794,  794,
      905,  905,  887,  800,  800,  943,  891, 1325,  787,  906,
      801,  801,  803,  803, 1326,  907,  913,  913,  809,  809,
      918,  918,  813,  813, 1327,  923,  923,  804,  816,  816,
     1328,  814,  925,  925, 1574,  919, 1574,  815,  924,  820,
      820,  932,  932,  817,  827,  827, 1329,  935,  935, 1330,
      829,  829,  838,  838, 1574,  933, 1574, 1574,  828, 1574,
     1574, 1331, 1574, 1574, 1332, 1574,  830,  830,  951,  951,
     1350, 1574, 1033, 1574,  947,  947,  936,  842,  842, 1574,
     1351, 1574,  937,  938,  939, 1574,  940, 1574,  941,  948,

      942,  944,  944,  839,  839,  846,  846,  956,  956,  960,
      960,  964,  964, 1352, 1574,  945, 1574, 1027,  840, 1354,
      847,  857,  857, 1574,  961, 1574,  965,  968,  968,  860,
      860,  861,  861,  971,  971, 1355,  858,  865,  865,  974,
      974,  869,  869,  977,  977, 1356,  862,  871,  871,  874,
      874, 1358,  866,  981,  981,  876,  876, 1359,  978,  982,
      982,  879,  879, 1029,  875,  880,  880,  984,  984, 1360,
      877,  882,  882,  884,  884,  886,  886,  987,  987, 1361,
      881,  890,  890,  990,  990,  898,  898, 1362,  905,  905,
      887, 1002, 1002,  913,  913, 1363,  891,  906,  918,  918,

     1011, 1011, 1364,  907, 1003, 1014, 1014,  923,  923,  925,
      925, 1365, 1574,  919, 1574,  932,  932, 1367, 1022, 1022,
      924, 1574, 1368, 1574,  935,  935, 1034, 1034, 1574,  933,
     1574, 1574, 1574, 1574, 1574, 1369, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1370, 1574, 1023, 1574, 1574, 1371,
     1574,  951,  951,  947,  947, 1387, 1021, 1025,  944,  944,
     1388, 1032, 1032,  956,  956, 1389, 1030, 1024,  948, 1041,
     1041, 1574,  945, 1574, 1574, 1026, 1574,  960,  960, 1045,
     1045, 1574, 1028, 1574, 1042, 1047, 1047, 1394, 1031,  964,
      964, 1395,  961, 1049, 1049, 1051, 1051,  968,  968, 1398,

     1048,  971,  971, 1399,  965, 1056, 1056,  974,  974, 1400,
     1052,  977,  977, 1060, 1060,  981,  981,  982,  982, 1106,
     1057,  984,  984,  987,  987, 1401,  978, 1067, 1067,  990,
      990, 1080, 1080, 1002, 1002, 1011, 1011, 1014, 1014, 1022,
     1022, 1574, 1068, 1574, 1402, 1574, 1003, 1574, 1096, 1034,
     1034, 1097, 1574, 1574, 1574, 1574, 1403, 1574, 1098, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1032, 1032,
     1574, 1404, 1574, 1041, 1041, 1115, 1115, 1405, 1099, 1069,
     1408, 1574, 1104, 1574, 1426, 1105, 1045, 1045, 1042, 1427,
     1103, 1102, 1432, 1101, 1107, 1047, 1047, 1119, 1119, 1108,

     1049, 1049, 1051, 1051, 1121, 1121, 1056, 1056, 1125, 1125,
     1048, 1060, 1060, 1067, 1067, 1134, 1134, 1052, 1135, 1135,
     1433, 1057, 1080, 1080, 1154, 1154, 1435, 1574, 1068, 1574,
     1574, 1436, 1574, 1136, 1574, 1574, 1574, 1574, 1574, 1155,
     1574, 1574, 1437, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1438, 1574, 1159, 1574, 1574, 1439, 1574, 1168,
     1161, 1158, 1115, 1115, 1440, 1173, 1173, 1175, 1175, 1442,
     1165, 1463, 1166, 1574, 1160, 1574, 1164, 1162, 1169, 1163,
     1174, 1237, 1176, 1119, 1119, 1121, 1121, 1125, 1125, 1170,
     1187, 1187, 1191, 1191, 1193, 1193, 1195, 1195, 1134, 1134,

     1171, 1135, 1135, 1199, 1199, 1188, 1464, 1192, 1574, 1194,
     1574, 1196, 1202, 1202, 1205, 1205, 1136, 1210, 1210, 1215,
     1215, 1203, 1465, 1206, 1154, 1154, 1574, 1204, 1574, 1207,
     1221, 1221, 1211, 1574, 1216, 1574, 1574, 1466, 1574, 1155,
     1574, 1467, 1574, 1574, 1574, 1574, 1574, 1574, 1470, 1574,
     1224, 1574, 1225, 1574, 1226, 1574, 1574, 1574, 1574, 1471,
     1574, 1574, 1574, 1574, 1239, 1239, 1240, 1240, 1173, 1173,
     1227, 1472, 1229, 1230, 1231, 1175, 1175, 1255, 1255, 1234,
     1228, 1233, 1235, 1174, 1488, 1232, 1242, 1242, 1244, 1244,
     1176, 1489, 1236, 1246, 1246, 1252, 1252, 1187, 1187, 1191,

     1191, 1243, 1490, 1245, 1258, 1258, 1193, 1193, 1247, 1574,
     1253, 1574, 1188, 1491, 1192, 1259, 1259, 1195, 1195, 1260,
     1260, 1194, 1199, 1199, 1202, 1202, 1492, 1266, 1266, 1205,
     1205, 1494, 1196, 1203, 1269, 1269, 1272, 1272, 1206, 1204,
     1267, 1210, 1210, 1292, 1207, 1273, 1495, 1270, 1274, 1274,
     1215, 1215, 1278, 1278, 1221, 1221, 1211, 1574, 1574, 1574,
     1574, 1496, 1284, 1286, 1286, 1216, 1574, 1574, 1574, 1574,
     1574, 1508, 1574, 1285, 1239, 1239, 1574, 1287, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1509, 1574, 1291, 1574, 1510, 1288, 1240, 1240, 1242,

     1242, 1294, 1302, 1302, 1511, 1290, 1289, 1303, 1303, 1297,
     1244, 1244, 1246, 1246, 1243, 1304, 1304, 1298, 1574, 1293,
     1574, 1299, 1295, 1306, 1306, 1245, 1512, 1247, 1296, 1252,
     1252, 1310, 1310, 1255, 1255, 1312, 1312, 1513, 1307, 1258,
     1258, 1259, 1259, 1339, 1253, 1260, 1260, 1319, 1319, 1514,
     1313, 1266, 1266, 1321, 1321, 1269, 1269, 1272, 1272, 1274,
     1274, 1278, 1278, 1574, 1267, 1574, 1273, 1574, 1270, 1574,
     1286, 1286, 1515, 1335, 1335, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1287, 1574, 1574, 1526, 1574, 1337,
     1574, 1574, 1574, 1574, 1343, 1343, 1527, 1338, 1333, 1345,

     1345, 1574, 1334, 1574, 1574, 1340, 1574, 1574, 1344, 1574,
     1302, 1302, 1574, 1346, 1574, 1336, 1574, 1528, 1574, 1341,
     1303, 1303, 1304, 1304, 1306, 1306, 1353, 1353, 1574, 1348,
     1574, 1342, 1529, 1347, 1310, 1310, 1312, 1312, 1530, 1307,
     1357, 1357, 1319, 1319, 1321, 1321, 1366, 1366, 1574, 1531,
     1574, 1313, 1335, 1335, 1349, 1574, 1574, 1574, 1574, 1532,
     1372, 1374, 1353, 1353, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1375, 1574, 1574, 1574, 1574, 1357, 1357, 1382,
     1382, 1376, 1343, 1343, 1533, 1345, 1345, 1574, 1540, 1574,
     1379, 1373, 1574, 1377, 1574, 1574, 1344, 1574, 1574, 1346,

     1574, 1383, 1383, 1381, 1574, 1543, 1574, 1378, 1574, 1544,
     1574, 1574, 1384, 1574, 1574, 1380, 1574, 1390, 1390, 1392,
     1392, 1396, 1396, 1366, 1366, 1406, 1406, 1574, 1552, 1574,
     1409, 1409, 1391, 1574, 1393, 1574, 1397, 1411, 1411, 1574,
     1407, 1574, 1385, 1574, 1410, 1574, 1413, 1386, 1430, 1430,
     1574, 1412, 1574, 1574, 1553, 1574, 1415, 1417, 1417, 1574,
     1557, 1574, 1414, 1574, 1574, 1574, 1574, 1416, 1382, 1382,
     1574, 1418, 1574, 1558, 1383, 1383, 1574, 1560, 1574, 1423,
     1423, 1574, 1561, 1574, 1420, 1138, 1421, 1574, 1574, 1574,
     1574, 1419, 1574, 1424, 1574, 1428, 1428, 1390, 1390, 1392,

     1392, 1431, 1431, 1422, 1396, 1396, 1434, 1434, 1406, 1406,
     1429, 1574, 1391, 1574, 1393, 1137, 1425, 1441, 1441, 1397,
     1409, 1409, 1133, 1407, 1443, 1443, 1132, 1411, 1411, 1131,
     1444, 1444, 1479, 1574, 1410, 1574, 1574, 1574, 1574, 1574,
     1574, 1412, 1574, 1574, 1574, 1574, 1574, 1574, 1130, 1574,
     1417, 1417, 1129, 1574, 1446, 1574, 1128, 1449, 1449, 1574,
     1450, 1574, 1127, 1574, 1418, 1574, 1453, 1453, 1445, 1447,
     1574, 1574, 1574, 1574, 1462, 1462, 1126, 1423, 1423, 1574,
     1454, 1574, 1455, 1455, 1124, 1458, 1458, 1448, 1123, 1452,
     1574, 1424, 1574, 1122, 1574, 1574, 1574, 1574, 1451, 1456,

     1459, 1460, 1460, 1428, 1428, 1430, 1430, 1431, 1431, 1120,
     1457, 1434, 1434, 1468, 1468, 1574, 1461, 1574, 1429, 1441,
     1441, 1443, 1443, 1118, 1444, 1444, 1458, 1458, 1469, 1473,
     1473, 1117, 1475, 1475, 1574, 1116, 1574, 1574, 1574, 1574,
     1574, 1459, 1574, 1474, 1574, 1574, 1476, 1574, 1449, 1449,
     1114, 1480, 1480, 1113, 1574, 1477, 1574, 1453, 1453, 1112,
     1574, 1574, 1574, 1574, 1574, 1481, 1574, 1483, 1483, 1111,
     1574, 1454, 1574, 1455, 1455, 1110, 1574, 1478, 1574, 1482,
     1574, 1109, 1574, 1486, 1486, 1574, 1574, 1574, 1574, 1460,
     1460, 1487, 1487, 1462, 1462, 1484, 1095, 1468, 1468, 1493,

     1493, 1473, 1473, 1094, 1461, 1497, 1497, 1093, 1475, 1475,
     1534, 1485, 1469, 1092, 1574, 1474, 1574, 1574, 1574, 1574,
     1574, 1574, 1476, 1574, 1498, 1498, 1091, 1499, 1499, 1090,
     1501, 1501, 1089, 1480, 1480, 1088, 1574, 1574, 1574, 1574,
     1574, 1500, 1574, 1574, 1502, 1574, 1574, 1481, 1574, 1504,
     1504, 1486, 1486, 1503, 1483, 1483, 1574, 1574, 1574, 1574,
     1487, 1487, 1574, 1087, 1574, 1493, 1493, 1574, 1086, 1574,
     1497, 1497, 1538, 1538, 1505, 1085, 1498, 1498, 1084, 1499,
     1499, 1548, 1548, 1574, 1574, 1574, 1574, 1539, 1506, 1574,
     1083, 1574, 1574, 1500, 1574, 1082, 1516, 1516, 1081, 1517,

     1507, 1518, 1501, 1501, 1079, 1519, 1519, 1078, 1574, 1574,
     1574, 1574, 1504, 1504, 1077, 1574, 1502, 1574, 1574, 1076,
     1574, 1075, 1520, 1522, 1522, 1574, 1574, 1574, 1574, 1524,
     1524, 1551, 1551, 1074, 1519, 1519, 1574, 1523, 1574, 1522,
     1522, 1521, 1574, 1525, 1574, 1516, 1516, 1574, 1517, 1574,
     1518, 1073, 1574, 1523, 1574, 1536, 1536, 1574, 1574, 1574,
     1574, 1524, 1524, 1541, 1541, 1535, 1537, 1537, 1574, 1072,
     1574, 1546, 1546, 1071, 1574, 1525, 1574, 1070, 1542, 1574,
     1066, 1574, 1536, 1536, 1574, 1547, 1574, 1537, 1537, 1538,
     1538, 1549, 1549, 1541, 1541, 1574, 1545, 1574, 1065, 1574,

     1574, 1574, 1574, 1574, 1539, 1574, 1550, 1064, 1542, 1546,
     1546, 1063, 1555, 1555, 1548, 1548, 1549, 1549, 1556, 1556,
     1551, 1551, 1574, 1547, 1574, 1574, 1062, 1574, 1555, 1555,
     1061, 1550, 1559, 1556, 1556, 1574, 1059, 1574, 1554, 1563,
     1563, 1574, 1058, 1574, 1565, 1565, 1574, 1055, 1574, 1563,
     1563, 1568, 1568, 1574, 1564, 1574, 1565, 1565, 1054, 1566,
     1569, 1569, 1568, 1568, 1564, 1569, 1569, 1053, 1571, 1571,
     1562, 1566, 1571, 1571, 1050, 1573, 1573, 1046, 1573, 1573,
     1567, 1574, 1572, 1574, 1044, 1574, 1572, 1574, 1574, 1043,
     1574, 1574, 1570, 1574,   24,   24,   24,   24,   24,   35,

       35,   35,   35,   35,   36,   36,   36,   36,   36,   37,
       37,   37,   37,   37,   38,   38,   38,   38,   38,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   46,
     1040, 1039,   46,   96,   96, 1038,   96,   96,   97,   97,
       97, 1037,   97,   98,   98,   98,   98, 1036, 1035, 1020,
     1019, 1018, 1017, 1016, 1015, 1013, 1012, 1010, 1009, 1008,
     1007, 1006, 1005, 1004, 1001, 1000,  999,  998,  997,  996,
      995,  994,  993,  992,  991,  989,  988,  986,  985,  983,
      980,  979,  976,  975,  973,  972,  967,  966,  963,  962,
      959,  958,  957,  955,  954,  953,  952,  950,  949,  930,

      929,  928,  927,  926,  922,  921,  920,  917,  916,  915,
      914,  912,  909,  908,  904,  903,  902,  901,  900,  899,
      897,  896,  895,  894,  893,  892,  889,  888,  885,  883,
      873,  872,  870,  868,  867,  864,  863,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  845,  844,  843,  841,
      837,  836,  835,  823,  822,  821,  819,  812,  811,  810,
      808,  807,  806,  805,  802,  799,  798,  797,  796,  795,
      793,  792,  791,  790,  789,  788,  785,  784,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  772,  766,  765,
      764,  763,  760,  755,  754,  753,  752,  751,  750,  744,

      743,  741,  740,  739,  738,  737,  736,  735,  734,  729,
      725,  724,  723,  721,  720,  714,  713,  704,  703,  702,
      701,  698,  697,  696,  695,  694,  693,  692,  688,  687,
      686,  685,  684,  683,  680,  675,  674,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  660,  659,  658,  657,
      656,  655,  654,  653,  651,  647,  646,  645,  644,  642,
      641,  640,  639,  638,  633,  632,  630,  629,  628,  627,
      624,  621,  620,  619,  616,  615,  614,  613,  612,  609,
      608,  607,  605,  604,  602,  601,  598,  573,  572,  571,
      570,  566,  565,  564,  563,  561,  560,  559,  558,  557,

      554,  553,  552,  551,  550,  549,  545,  542,  541,  540,
      536,  535,  534,  533,  532,  529,  528,  527,  525,  524,
      523,  522,  519,  512,  511,  506,  505,  502,  501,  500,
      499,  498,  497,  496,  495,  491,  487,  486,  480,  478,
      477,  476,  475,  474,  473,  471,  470,  465,  463,  462,
      455,  454,  453,  452,  432,  431,  421,  420,  415,  414,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  400,
      399,  393,  391,  390,  389,  388,  387,  386,  384,  383,
      378,  377,  376,  371,  370,  369,  368,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,

      352,  351,  350,  349,  348,  347,  344,  343,  342,  335,
      329,  328,  327,  326,  322,  321,  317,  316,  315,  314,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  262,  256,  255,  254,  253,  252,  251,  250,  246,
      245,  244,  243,  242,  234,  213,  212,  206,  201,  198,
      180,  178,  170,  150,  149,  143,  138,  117,  100,   99,
       65,   65, 1574,   35,   35,   35,   35,   35,   35,   19,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574
    } ;

static yyconst flex_int16_t yy_chk[3443] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,   51,    1,   16,    1,   24,   26,   24,
       26,   26,   26,   26,   28,   26,   28,   51,   76,   27,
       27,  200,  200,   26,   32,   46,   32,   46,   76,   27,
       27,   27,   27,   49,   27,   49,   32,  120,   60,   27,
       60,    1,    2,    2,    2,    2,    2,  120,    2, 1074,
        2,    2,    2,    2,    2,    2,    2,   27,    2,    2,
       33,   53,   33,   53,   77,  369,    2,   47,    2,   47,
       47,   47,   47,   53,   47,   77,   57,  369,   57,   60,

       79,   33,   47,   56,   79,   56,   48,   48,   54,   55,
       54,   55, 1075,   58,   87,   58,   48,   48,   48,   48,
       61,   48,   61,    2,   21,   21,   48, 1076,   87,   54,
       55,   21,   21,   21,   21,   21,   21,   21,   56,   21,
       57,   61,  123,   64,   48,   64,  123,   21,   58,   21,
       59,   80,   59,   84,   66,   66, 1077,   80,   84,   21,
       21,   61,   21,   80,   64,   21,   21,   66,  156,   66,
       21,   21,  156,   62,   59,   62,   21,   21,   89,   21,
       22,   22, 1078,   63,   59,   63,   83,   22,   22,   22,
       22,   22,   22,   22,   83,   22,   62,   70,   70,   85,

       83,   89,  219,   22,   63,   22,  219,   85,   88, 1079,
       70,   88,   70,   62,   88,   22,   22,   94,   22,   94,
       92,   22,   22,  118,  118,   94,   22,   22,   63,   92,
       67,   67,   22,   22,  128,   22,   29,   29,  118,  128,
       67,   67,   67,   67,   29,   67,   29,   29,   29,   29,
       67,   29, 1081,   68,   68,   91,   29,   68,   68,   68,
       68,   91,   68,   91,  133,   86,   91,   91,   67,   86,
      102,   95,  102,   95,   29,   30,   86,  121,  101,   86,
      101,  420,   30,   95,  107,   86,  107,  133,  121,   30,
      129,  154,  136,   30,  104,  102,  104,  112,  129,  112,

       30,  136,  154,  190,  102,  190,  542,   30,   30,   30,
       30,   30,   30,   30,  420,   30,  107,  101,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  542,   30,   50,
       50,  103,  104,  103,  106,  112,  106,   50,  131,   50,
       50,   50,   50,  190,   50,  105,  105, 1082,  108,   50,
      108,  110,  131,  110,  103,  131,  248,  106,  105,  105,
      105,  115,  115,  115,  115, 1083,  115,   50,   72,  217,
      248,  109,  110,  109, 1084,   72,  113,  114,  113,  114,
      217,  108,   72,   72,   72,   72,   72,   72,   72,  111,
       72,  111, 1085,   72,   72,   72,   72,   72,   72,   72,

       72,   72,  105,   72,  109,  116,  116,  124,  799,  114,
      111,  799,  113,  124,  127,  116,  116,  116,  116,  124,
      116,  130,  127,  132,  859,  130,  132,  859,  127,  132,
      272,  135,  130,  151,  151,  130,  152,  135,  143,  135,
      143,  130,  135,  135,  272,  143,  155,  155,  151,  179,
      179,  152,  152,  181,  182,  181,  182,  183,  184,  183,
      184,  155,  179,  185,  179,  185,  258,  258,  186,  186,
     1086,  187,  187,  189,  187,  189,  187,  192,  181,  192,
      182,  186,  186,  186,  187, 1088,  187,  188,  188,  191,
      184,  191,  185,  193, 1089,  193,  183,  199,  199,  192,

      188,  188,  188,  194,  195,  194,  195,  196,  197,  196,
      197,  189,  199,  188,  191,  201,  201,  206,  188,  206,
      209,  209,  214,  214,  206,  193,  347,  215,  266,  266,
      201,  195,  196,  218,  218,  209, 1091,  214,  223,  223,
      347,  194,  215,  215,  243,  243,  249,  249,  218,  197,
      253,  253,  453,  223,  254,  254,  257,  257,  209,  243,
     1094,  249,  265,  265,  453,  253,  268,  268,  285,  254,
      511,  257,  269,  269,  282,  282,  292,  265,  292,  285,
      289,  268,  286,  286,  311,  311,  289,  269, 1095,  282,
      290, 1109,  290,  291,  291, 1112,  293,  286,  293,  289,

      294,  290,  294,  511,  298,  298,  291,  291,  291,  295,
      295,  300,  295,  300,  295, 1113,  292,  298,  298,  298,
      299,  299,  295,  301,  295,  301,  269,  302,  302,  305,
      307,  305,  307,  299,  306,  299,  306,  293,  303,  303,
      302,  302,  302,  304,  304,  300,  294,  308,  361,  308,
     1114,  303,  303,  303,  305,  306,  304,  304,  304,  361,
      309,  309,  310,  824,  310,  824,  301,  312,  312,  434,
      307,  434,  308,  309,  309,  309,  313,  313,  314,  314,
      319,  319,  312,  320,  320,  323,  323,  310,  324,  324,
      326,  326,  824,  314,  434,  319,  327,  327,  320, 1116,

      323,  330,  330,  331,  331,  326,  338,  338,  339,  339,
     1117,  327,  341,  341,  342,  342,  330, 1118,  319,  345,
      345,  338,  346,  346,  349,  349,  577,  341,  577,  342,
      358,  358,  319, 1120,  345,  362,  362,  365,  365,  349,
      366,  366,  367,  367, 1122,  358,  374,  374,  375,  375,
      362,  577,  365,  380,  380,  366,  379,  379,  381,  381,
      365,  374,  349,  382,  382,  430,  365,  430,  342,  385,
      385,  379, 1123,  381,  389,  389,  392,  392, 1124,  365,
      394,  394, 1127,  389,  395,  395,  396,  396, 1128,  389,
      397,  397, 1132,  399,  399,  394,  406,  406,  412,  412,

      430,  396,  399,  413,  413,  418,  418,  525,  399,  419,
      419,  406,  425,  412,  425,  426,  426,  428, 1133,  428,
      418,  427,  427,  429,  525,  429,  433,  433,  426,  426,
      426,  436,  436,  425,  427,  435,  427,  435,  428,  433,
     1137,  433,  437,  437,  436,  436,  436,  429,  438,  438,
     1138,  439,  439, 1142,  442,  437,  442,  437,  440,  440,
     1143,  438,  438,  438,  439,  443,  439,  443,  444,  444,
      435,  440,  440,  440,  441,  441,  445,  441,  445,  441,
     1145,  444,  444,  444,  446,  446,  826,  441,  826,  441,
     1146,  444,  442,  449,  449,  450,  450,  446,  446,  446,

      448,  448, 1147,  443,  447,  447,  705,  447,  705,  447,
      450,  451,  451,  448,  448,  448,  445,  447,  826,  447,
      456,  456,  457,  457,  460,  460,  461,  461,  464,  464,
      466,  466,  467,  467, 1150,  456,  468,  468, 1151,  460,
      469,  469,  472,  472,  705,  466,  476,  476,  479,  479,
     1152,  468,  481,  481,  482,  482,  483,  483,  484,  484,
     1153,  476,  486,  486,  488,  488, 1156,  481,  492,  492,
     1157,  483,  493,  493,  496,  496, 1172,  486,  497,  497,
      503,  503, 1177,  492,  504,  504,  509,  509, 1181,  496,
      510,  510,  576,  497,  576,  503,  513,  513,  514,  514,

     1182,  509,  518,  518,  526,  526,  530,  530,  531,  531,
     1183,  513,  537,  537, 1184,  539,  539,  543,  543,  544,
      544,  537,  545,  545,  546,  546,  576,  537,  539,  548,
      548,  555,  555,  546,  556,  556,  574,  545,  574,  546,
      557,  557,  548,  562,  562,  621,  555,  567,  567,  569,
      569, 1186,  575,  575,  578,  557,  578,  579,  579, 1189,
      580,  580,  597,  597,  569,  575,  621,  575,  581,  581,
      579,  579,  579,  580,  580,  580,  574,  582,  582, 1190,
      586,  581,  586,  581,  583,  583, 1197,  583,  578,  583,
      582, 1198,  582,  586,  587,  605,  587,  583, 1200,  583,

      588,  588, 1201,  589,  589,  587,  590, 1203,  590,  591,
     1206,  591,  605,  588,  588,  588,  589,  715,  589,  715,
      591,  592,  592,  706,  592,  706,  592,  595,  595, 1208,
      590,  596,  596,  834,  592,  834,  592,  601,  601, 1212,
      595,  595,  595,  715,  596, 1213,  596,  603,  603,  604,
      604, 1214,  601,  606,  606,  610,  610,  611,  611,  617,
      617,  618,  618,  706,  604,  622,  622,  623,  623,  624,
      624,  625,  625,  834,  617,  626,  626,  631,  631,  634,
      634,  635,  635, 1024,  624, 1024,  625,  636,  636,  601,
      637,  637,  638,  638,  634,  640,  640,  643,  643,  646,

      646, 1217,  636,  647,  647,  648,  648,  638,  650,  650,
      640,  652,  652, 1219,  646,  664,  664, 1024,  647,  671,
      671,  672,  672,  650,  678,  678,  679,  679,  680,  680,
      664,  681,  681, 1220,  672,  683,  683,  689,  689,  678,
      690,  690,  691,  691,  681,  695,  695,  696,  696, 1222,
      683,  646,  699,  699,  695,  690,  700,  700, 1223,  707,
      695,  707,  696, 1238,  708,  708,  707,  699,  709,  709,
     1241,  710,  710, 1248,  711,  711,  696,  708,  708,  708,
     1250,  709,  709,  709,  710, 1251,  710,  711,  711,  711,
      712,  712,  716, 1254,  716,  717,  717,  718,  719,  718,

      719,  722,  722,  712, 1257,  712,  726,  726,  717, 1261,
      717,  727,  727, 1105,  722, 1105,  722,  728,  728,  719,
     1262,  726,  730,  730,  731,  731, 1263,  735,  735,  742,
      742, 1264,  728,  716,  746,  746, 1267,  730,  747,  747,
     1105,  718,  735,  748,  748,  749,  749,  750,  750,  746,
     1270,  753,  753,  747,  756,  756,  757,  757,  758,  758,
      759,  759,  750,  761,  761,  746,  753,  762,  762,  765,
      765,  766,  766,  758,  767,  767,  768,  768,  761,  769,
      769,  770,  770,  832,  765,  832,  766,  771,  771,  767,
      773,  773,  774,  774,  769, 1271,  770,  776,  776, 1273,

      766,  779,  779,  786,  786,  773,  787,  787,  794,  794,
      796,  796,  776,  800,  800,  832,  779, 1275,  786,  796,
      801,  801,  803,  803, 1276,  796,  804,  804,  809,  809,
      810,  810,  813,  813, 1277,  815,  815,  803,  816,  816,
     1279,  813,  817,  817,  946,  810,  946,  813,  815,  820,
      820,  825,  825,  816,  827,  827, 1280,  828,  828, 1281,
      829,  829,  838,  838,  825,  825,  825,  827,  827,  827,
      828, 1282,  828,  829, 1283,  829,  830,  830,  840,  840,
     1300,  831,  946,  831,  835,  835,  831,  842,  842,  830,
     1301,  830,  831,  831,  831,  939,  831,  939,  831,  835,

      831,  833,  833,  839,  839,  846,  846,  847,  847,  851,
      851,  854,  854, 1305,  833,  833,  833,  939,  839, 1308,
      846,  857,  857,  941,  851,  941,  854,  858,  858,  860,
      860,  861,  861,  862,  862, 1309,  857,  865,  865,  866,
      866,  869,  869,  870,  870, 1311,  861,  871,  871,  874,
      874, 1314,  865,  875,  875,  876,  876, 1315,  870,  877,
      877,  879,  879,  941,  874,  880,  880,  881,  881, 1316,
      876,  882,  882,  884,  884,  886,  886,  887,  887, 1317,
      880,  890,  890,  891,  891,  898,  898, 1318,  905,  905,
      886,  907,  907,  913,  913, 1320,  890,  905,  918,  918,

      919,  919, 1322,  905,  907,  922,  922,  923,  923,  925,
      925, 1323,  931,  918,  931,  932,  932, 1325,  933,  933,
      923,  934, 1328,  934,  935,  935,  948,  948,  932,  932,
      932,  933,  936,  933,  936, 1329,  937,  935,  937,  935,
      938,  940,  938,  940, 1330,  942,  934,  942,  943, 1332,
      943,  951,  951,  947,  947, 1350,  931,  937,  944,  944,
     1351,  945,  945,  956,  956, 1352,  942,  936,  947,  957,
      957,  944,  944,  944,  945,  938,  945,  960,  960,  961,
      961, 1030,  940, 1030,  957,  963,  963, 1356,  943,  964,
      964, 1358,  960,  965,  965,  967,  967,  968,  968, 1360,

      963,  971,  971, 1361,  964,  973,  973,  974,  974, 1362,
      967,  977,  977,  978,  978,  981,  981,  982,  982, 1030,
      973,  984,  984,  987,  987, 1363,  977,  989,  989,  990,
      990, 1001, 1001, 1002, 1002, 1011, 1011, 1014, 1014, 1022,
     1022, 1021,  989, 1021, 1364, 1023, 1002, 1023, 1021, 1034,
     1034, 1021, 1022, 1025, 1022, 1025, 1367, 1026, 1021, 1026,
     1027, 1028, 1027, 1028, 1029, 1031, 1029, 1031, 1032, 1032,
     1033, 1368, 1033, 1041, 1041, 1042, 1042, 1369, 1023,  989,
     1371, 1032, 1028, 1032, 1387, 1029, 1045, 1045, 1041, 1388,
     1027, 1026, 1394, 1025, 1031, 1047, 1047, 1048, 1048, 1033,

     1049, 1049, 1051, 1051, 1052, 1052, 1056, 1056, 1057, 1057,
     1047, 1060, 1060, 1067, 1067, 1068, 1068, 1051, 1069, 1069,
     1395, 1056, 1080, 1080, 1092, 1092, 1398, 1096, 1067, 1096,
     1097, 1401, 1097, 1069, 1098, 1099, 1098, 1099, 1100, 1092,
     1100, 1101, 1402, 1101, 1102, 1103, 1102, 1103, 1104, 1106,
     1104, 1106, 1403, 1107, 1097, 1107, 1108, 1404, 1108, 1106,
     1099, 1096, 1115, 1115, 1405, 1110, 1110, 1111, 1111, 1408,
     1103, 1432, 1104, 1171, 1098, 1171, 1102, 1100, 1106, 1101,
     1110, 1171, 1111, 1119, 1119, 1121, 1121, 1125, 1125, 1107,
     1126, 1126, 1129, 1129, 1130, 1130, 1131, 1131, 1134, 1134,

     1108, 1135, 1135, 1136, 1136, 1126, 1433, 1129, 1159, 1130,
     1159, 1131, 1140, 1140, 1141, 1141, 1135, 1144, 1144, 1149,
     1149, 1140, 1435, 1141, 1154, 1154, 1158, 1140, 1158, 1141,
     1155, 1155, 1144, 1160, 1149, 1160, 1161, 1436, 1161, 1154,
     1162, 1437, 1162, 1163, 1164, 1163, 1164, 1166, 1439, 1166,
     1158, 1165, 1159, 1165, 1160, 1168, 1167, 1168, 1167, 1440,
     1170, 1169, 1170, 1169, 1174, 1174, 1176, 1176, 1173, 1173,
     1161, 1442, 1163, 1164, 1165, 1175, 1175, 1188, 1188, 1168,
     1162, 1167, 1169, 1173, 1463, 1166, 1178, 1178, 1179, 1179,
     1175, 1464, 1170, 1180, 1180, 1185, 1185, 1187, 1187, 1191,

     1191, 1178, 1465, 1179, 1192, 1192, 1193, 1193, 1180, 1230,
     1185, 1230, 1187, 1466, 1191, 1194, 1194, 1195, 1195, 1196,
     1196, 1193, 1199, 1199, 1202, 1202, 1467, 1204, 1204, 1205,
     1205, 1470, 1195, 1202, 1207, 1207, 1209, 1209, 1205, 1202,
     1204, 1210, 1210, 1230, 1205, 1209, 1471, 1207, 1211, 1211,
     1215, 1215, 1216, 1216, 1221, 1221, 1210, 1224, 1226, 1224,
     1226, 1472, 1224, 1225, 1225, 1215, 1227, 1228, 1227, 1228,
     1229, 1488, 1229, 1224, 1239, 1239, 1225, 1225, 1225, 1231,
     1232, 1231, 1232, 1233, 1234, 1233, 1234, 1235, 1236, 1235,
     1236, 1489, 1237, 1229, 1237, 1490, 1226, 1240, 1240, 1242,

     1242, 1232, 1243, 1243, 1491, 1228, 1227, 1245, 1245, 1235,
     1244, 1244, 1246, 1246, 1242, 1247, 1247, 1236, 1291, 1231,
     1291, 1237, 1233, 1249, 1249, 1244, 1492, 1246, 1234, 1252,
     1252, 1253, 1253, 1255, 1255, 1256, 1256, 1494, 1249, 1258,
     1258, 1259, 1259, 1291, 1252, 1260, 1260, 1265, 1265, 1495,
     1256, 1266, 1266, 1268, 1268, 1269, 1269, 1272, 1272, 1274,
     1274, 1278, 1278, 1284, 1266, 1284, 1272, 1285, 1269, 1285,
     1286, 1286, 1496, 1287, 1287, 1288, 1290, 1288, 1290, 1289,
     1292, 1289, 1292, 1286, 1286, 1286, 1287, 1508, 1287, 1289,
     1293, 1294, 1293, 1294, 1295, 1295, 1509, 1290, 1284, 1296,

     1296, 1297, 1285, 1297, 1298, 1292, 1298, 1295, 1295, 1295,
     1302, 1302, 1296, 1296, 1296, 1288, 1299, 1510, 1299, 1293,
     1303, 1303, 1304, 1304, 1306, 1306, 1307, 1307, 1333, 1298,
     1333, 1294, 1511, 1297, 1310, 1310, 1312, 1312, 1512, 1306,
     1313, 1313, 1319, 1319, 1321, 1321, 1324, 1324, 1334, 1514,
     1334, 1312, 1335, 1335, 1299, 1337, 1336, 1337, 1336, 1517,
     1333, 1336, 1353, 1353, 1338, 1335, 1338, 1335, 1339, 1340,
     1339, 1340, 1336, 1341, 1342, 1341, 1342, 1357, 1357, 1344,
     1344, 1337, 1343, 1343, 1518, 1345, 1345, 1347, 1527, 1347,
     1340, 1334, 1344, 1338, 1344, 1343, 1343, 1343, 1345, 1345,

     1345, 1346, 1346, 1342, 1348, 1529, 1348, 1339, 1349, 1530,
     1349, 1374, 1347, 1374, 1346, 1341, 1346, 1354, 1354, 1355,
     1355, 1359, 1359, 1366, 1366, 1370, 1370, 1375, 1543, 1375,
     1372, 1372, 1354, 1377, 1355, 1377, 1359, 1373, 1373, 1376,
     1370, 1376, 1348, 1372, 1372, 1372, 1374, 1349, 1391, 1391,
     1373, 1373, 1373, 1379, 1544, 1379, 1376, 1378, 1378, 1380,
     1552, 1380, 1375, 1381, 1384, 1381, 1384, 1377, 1382, 1382,
     1378, 1378, 1378, 1553, 1383, 1383, 1386, 1557, 1386, 1385,
     1385, 1382, 1558, 1382, 1380, 1073, 1381, 1383, 1450, 1383,
     1450, 1379, 1385, 1385, 1385, 1389, 1389, 1390, 1390, 1392,

     1392, 1393, 1393, 1384, 1396, 1396, 1397, 1397, 1406, 1406,
     1389, 1414, 1390, 1414, 1392, 1070, 1386, 1407, 1407, 1396,
     1409, 1409, 1066, 1406, 1410, 1410, 1065, 1411, 1411, 1064,
     1412, 1412, 1450, 1409, 1409, 1409, 1413, 1410, 1413, 1410,
     1411, 1411, 1411, 1412, 1415, 1412, 1415, 1416, 1063, 1416,
     1417, 1417, 1062, 1419, 1414, 1419, 1061, 1418, 1418, 1420,
     1419, 1420, 1059, 1417, 1417, 1417, 1422, 1422, 1413, 1415,
     1418, 1421, 1418, 1421, 1429, 1429, 1058, 1423, 1423, 1422,
     1422, 1422, 1424, 1424, 1055, 1426, 1426, 1416, 1054, 1421,
     1423, 1423, 1423, 1053, 1425, 1424, 1425, 1424, 1420, 1425,

     1426, 1427, 1427, 1428, 1428, 1430, 1430, 1431, 1431, 1050,
     1425, 1434, 1434, 1438, 1438, 1447, 1427, 1447, 1428, 1441,
     1441, 1443, 1443, 1046, 1444, 1444, 1458, 1458, 1438, 1445,
     1445, 1044, 1446, 1446, 1443, 1043, 1443, 1444, 1448, 1444,
     1448, 1458, 1445, 1445, 1445, 1446, 1446, 1446, 1449, 1449,
     1040, 1451, 1451, 1039, 1452, 1447, 1452, 1453, 1453, 1038,
     1456, 1449, 1456, 1449, 1451, 1451, 1451, 1454, 1454, 1037,
     1453, 1453, 1453, 1455, 1455, 1036, 1457, 1448, 1457, 1452,
     1454, 1035, 1454, 1459, 1459, 1520, 1455, 1520, 1455, 1460,
     1460, 1461, 1461, 1462, 1462, 1456, 1019, 1468, 1468, 1469,

     1469, 1473, 1473, 1018, 1460, 1474, 1474, 1017, 1475, 1475,
     1520, 1457, 1468, 1016, 1473, 1473, 1473, 1479, 1474, 1479,
     1474, 1475, 1475, 1475, 1476, 1476, 1015, 1477, 1477, 1013,
     1478, 1478, 1012, 1480, 1480, 1010, 1482, 1476, 1482, 1476,
     1477, 1477, 1477, 1478, 1478, 1478, 1480, 1480, 1480, 1481,
     1481, 1486, 1486, 1479, 1483, 1483, 1484, 1485, 1484, 1485,
     1487, 1487, 1481, 1009, 1481, 1493, 1493, 1483, 1008, 1483,
     1497, 1497, 1526, 1526, 1482, 1007, 1498, 1498, 1006, 1499,
     1499, 1539, 1539, 1497, 1503, 1497, 1503, 1526, 1484, 1498,
     1005, 1498, 1499, 1499, 1499, 1004, 1500, 1500, 1003, 1500,

     1485, 1500, 1501, 1501, 1000, 1502, 1502,  999, 1505, 1500,
     1505, 1500, 1504, 1504,  998, 1501, 1501, 1501, 1502,  997,
     1502,  996, 1503, 1506, 1506, 1504, 1521, 1504, 1521, 1507,
     1507, 1542, 1542,  995, 1519, 1519, 1506, 1506, 1506, 1522,
     1522, 1505, 1507, 1507, 1507, 1516, 1516, 1519, 1516, 1519,
     1516,  994, 1522, 1522, 1522, 1523, 1523, 1534, 1516, 1534,
     1516, 1524, 1524, 1528, 1528, 1521, 1525, 1525, 1523,  993,
     1523, 1535, 1535,  992, 1524, 1524, 1524,  991, 1528, 1525,
      988, 1525, 1536, 1536, 1535, 1535, 1535, 1537, 1537, 1538,
     1538, 1540, 1540, 1541, 1541, 1536, 1534, 1536,  986, 1545,

     1537, 1545, 1537, 1554, 1538, 1554, 1540,  985, 1541, 1546,
     1546,  983, 1547, 1547, 1548, 1548, 1549, 1549, 1550, 1550,
     1551, 1551, 1546, 1546, 1546, 1547,  980, 1547, 1555, 1555,
      979, 1549, 1554, 1556, 1556, 1559,  976, 1559, 1545, 1560,
     1560, 1555,  975, 1555, 1561, 1561, 1562,  972, 1562, 1563,
     1563, 1564, 1564, 1567, 1560, 1567, 1565, 1565,  970, 1561,
     1566, 1566, 1568, 1568, 1563, 1569, 1569,  969, 1570, 1570,
     1559, 1565, 1571, 1571,  966, 1572, 1572,  962, 1573, 1573,
     1562, 1570, 1570, 1570,  959, 1571, 1571, 1571, 1572,  958,
     1572, 1573, 1567, 1573, 1575, 1575, 1575, 1575, 1575, 1576,

     1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1578,
     1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1580,
     1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1582,
      955,  954, 1582, 1583, 1583,  953, 1583, 1583, 1584, 1584,
     1584,  952, 1584, 1585, 1585, 1585, 1585,  950,  949,  930,
      929,  928,  927,  926,  924,  921,  920,  917,  916,  914,
      912,  911,  910,  908,  906,  904,  902,  901,  900,  897,
      896,  895,  894,  893,  892,  889,  888,  885,  883,  878,
      873,  872,  868,  867,  864,  863,  856,  855,  853,  852,
      850,  849,  848,  845,  844,  843,  841,  837,  836,  823,

      822,  821,  819,  818,  814,  812,  811,  808,  807,  806,
      805,  802,  798,  797,  795,  793,  792,  790,  789,  788,
      785,  784,  783,  782,  781,  780,  778,  777,  775,  772,
      764,  763,  760,  755,  754,  752,  751,  745,  744,  743,
      741,  740,  739,  738,  737,  736,  734,  733,  732,  729,
      725,  724,  723,  704,  703,  701,  698,  694,  693,  692,
      688,  687,  685,  684,  682,  677,  676,  675,  674,  673,
      670,  669,  668,  667,  666,  665,  663,  662,  661,  660,
      658,  657,  656,  655,  654,  653,  651,  649,  645,  644,
      642,  641,  639,  633,  632,  630,  629,  628,  627,  620,

      619,  616,  615,  614,  613,  612,  609,  608,  607,  602,
      600,  599,  598,  594,  593,  585,  584,  573,  572,  571,
      570,  568,  565,  564,  563,  561,  560,  558,  554,  553,
      552,  551,  550,  549,  547,  541,  540,  538,  536,  535,
      534,  533,  532,  529,  528,  527,  523,  522,  521,  520,
      519,  517,  516,  515,  512,  508,  507,  506,  505,  502,
      501,  500,  499,  498,  495,  494,  491,  490,  489,  487,
      485,  480,  478,  477,  475,  474,  473,  471,  470,  465,
      463,  462,  459,  458,  455,  454,  452,  424,  423,  422,
      421,  417,  416,  415,  414,  411,  410,  409,  408,  407,

      405,  404,  403,  402,  401,  400,  398,  393,  391,  390,
      388,  387,  386,  384,  383,  378,  377,  376,  373,  372,
      371,  370,  368,  364,  363,  360,  359,  357,  356,  355,
      354,  353,  352,  351,  350,  348,  344,  343,  340,  337,
      336,  335,  334,  333,  332,  329,  328,  325,  322,  321,
      318,  317,  316,  315,  297,  296,  288,  287,  284,  283,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  271,
      270,  267,  264,  263,  262,  261,  260,  259,  256,  255,
      252,  251,  250,  247,  246,  245,  244,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,

      229,  228,  227,  226,  225,  224,  222,  221,  220,  216,
      213,  212,  211,  210,  208,  207,  205,  204,  203,  202,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  159,  158,
      157,  153,  150,  149,  148,  147,  146,  145,  144,  142,
      141,  140,  139,  137,  134,  126,  125,  122,  119,  117,
       99,   93,   90,   82,   81,   78,   75,   71,   44,   41,
       25,   23,   19,   14,   13,    8,    7,    6,    5, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[225] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;

//#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 1852 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 2107 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1575 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3380 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} */
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 214:
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 218:
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 3576 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1575 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1575 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1574);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"




