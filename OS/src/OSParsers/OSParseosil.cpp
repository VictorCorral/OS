#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 357
#define YY_END_OF_BUFFER 358
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2972] =
    {   0,
        1,    1,    0,    0,  354,  354,  355,  355,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  358,  356,
        1,    1,    2,  344,    2,  344,    6,  344,    5,  356,
        4,  344,  344,    2,  357,  354,  355,  345,  347,  348,
      347,  351,  352,  351,    1,  344,  344,    6,  344,    5,
        0,    4,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
        3,    6,    6,  344,    7,    5,    0,    0,  350,  288,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  344,

      344,  354,  355,  345,    0,  353,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  290,    0,
        0,    0,    0,    0,    0,    0,    0,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  242,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    6,  349,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  346,    0,  289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  118,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  274,    0,    0,    0,    0,    0,    0,    0,
      256,    0,    0,    0,    0,    0,    0,    0,  120,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  116,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
       43,   44,  344,  171,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  289,    0,  291,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,    0,    0,    0,    0,  275,    0,
        0,    0,    0,    0,    0,    0,  257,    0,    0,    0,
        0,    0,    0,  243,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      266,    0,    0,    0,    0,    0,    0,  272,    0,  268,
      297,    0,    0,    0,    0,  274,    0,    0,    0,    0,
        0,    0,  256,    0,    0,  276,    0,  278,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  264,    0,    0,    0,    0,    0,    0,  280,    0,
        0,    0,    0,    0,    0,  344,  344,  344,  344,  344,
      174,  344,  344,  344,  344,  344,   41,   42,  171,  344,
      344,  344,  344,  172,  344,  344,  344,  344,  173,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  291,    0,  271,    0,    0,    0,    0,    0,
        0,  119,    0,    0,    0,    0,  267,    0,    0,    0,

        0,  127,    0,    0,  273,    0,  269,    0,    0,    0,
        0,    0,  275,    0,    0,    0,    0,    0,    0,  257,
        0,    0,  277,    0,  279,    0,    0,    0,  243,    0,
        0,    0,    0,    0,    0,  121,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  265,    0,    0,    0,    0,    0,    0,  281,
        0,    0,    0,    0,  117,    0,    0,    0,  270,    0,
        0,    0,  205,    0,    0,    0,   60,    0,  266,    0,
        0,    0,    0,    0,  272,  268,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  129,    0,    0,    0,  276,

      278,    0,    0,    0,  135,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  248,    0,    0,    0,
        0,   56,    0,    0,    0,    0,  264,    0,    0,  260,
        0,  108,  223,  280,    0,    0,    0,    0,    0,    0,
        0,  344,  344,  344,  344,  344,  174,  344,  344,  344,
      344,  344,  344,  344,  344,  172,  344,  344,  344,  173,
      344,  181,  182,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,   22,  344,  344,  344,  344,
      344,  197,  198,  344,  344,  344,   23,  344,  344,  271,
        0,    0,    0,    0,    0,    0,  119,    0,    0,    0,

      267,    0,    0,    0,    0,    0,  273,  269,    0,  298,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,    0,  277,  279,    0,    0,  136,    0,    0,    0,
        0,    0,    0,  121,    0,    0,    0,    0,   51,    0,
        0,  249,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  265,    0,    0,  261,    0,    0,    0,  281,    0,
        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,
      203,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
      129,    0,    0,    0,    0,  199,    0,  250,  137,  135,

        0,    0,    0,    0,    0,    0,  286,    0,    0,    0,
        0,  248,    0,    0,    0,  254,    0,    0,    0,    0,
        0,    0,  260,    0,  106,    0,    0,  244,    0,  229,
      235,    0,    0,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   18,  344,   19,  344,  344,  344,
      344,  179,  180,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  189,  190,   22,  344,  344,  344,  344,
      195,  196,  344,  344,   23,  344,  344,    0,    0,    0,
        0,  206,    0,    0,    0,    0,    0,   61,    0,    0,
        0,    0,    0,    0,    0,  298,    0,    0,    0,    0,

        0,    0,    0,    0,  130,    0,    0,    0,    0,    0,
      251,  136,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   51,    0,  249,    0,    0,    0,  255,    0,    0,
       57,    0,    0,    0,    0,    0,  261,    0,    0,  109,
        0,    0,  224,    0,    0,  245,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  246,    0,    0,   86,    0,    0,    0,  227,
        0,    0,    0,  131,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  250,  137,    0,    0,  252,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  254,    0,    0,
        0,    0,    0,    0,    0,  139,    0,  262,    0,    0,
      244,    0,    0,    0,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   21,   18,   19,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      187,  188,  344,  344,  344,  344,  344,  344,  344,  344,
      344,    0,    0,    0,  206,    0,  204,    0,    0,    0,
       61,    0,    0,    0,    0,    0,  247,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  200,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  251,    0,  253,    0,
        0,    0,    0,    0,  287,    0,    0,    0,    0,    0,
        0,  255,    0,   57,    0,    0,    0,    0,    0,  140,
        0,  263,    0,  109,    0,  107,  224,    0,  245,    0,
        0,  230,    0,  236,    0,    0,    0,  282,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  246,   80,  207,
        0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
      151,    0,   58,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  252,    0,    0,    0,

      225,    0,    0,    0,    0,    0,    0,    0,  284,    0,
        0,    0,    0,    0,  141,  139,    0,  262,    0,    0,
        0,    0,  292,  344,  344,  344,  344,  344,  344,  344,
      170,  344,  344,  344,   21,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,   20,
      344,  344,  344,  344,  344,  344,  344,  344,   45,   46,
        0,  283,    0,    0,  204,    0,    0,    0,    0,    0,
        0,    0,  247,    0,    0,    0,   87,    0,    0,    0,
        0,    0,  228,    0,    0,    0,    0,  152,    0,    0,

      200,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  253,    0,    0,    0,    0,  287,    0,
        0,    0,    0,    0,    0,    0,  285,    0,    0,    0,
        0,    0,  140,  263,    0,  107,    0,    0,  230,  236,
        0,    0,  282,    0,    0,    0,    0,    0,    0,    0,
        0,   84,    0,    0,    0,    0,    0,    0,    0,  153,
      151,    0,    0,  102,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   94,    0,    0,    0,    0,    0,

        0,    0,    0,   82,    0,  284,    0,    0,    0,    0,
        0,  141,    0,    0,    0,    0,    0,  110,  344,  344,
      344,  344,  344,  344,  170,  344,  344,  344,  344,  344,
       26,  344,  344,   24,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      185,  186,  344,  344,  344,   20,  344,  193,  194,  344,
      344,  344,   28,  344,  344,  283,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,    0,  208,   87,
        0,    0,    0,    0,  228,    0,    0,    0,  123,  152,
        0,    0,   59,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  226,
        0,    0,    0,    0,    0,    0,  285,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  293,    0,    0,
      201,  231,   88,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  306,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
        0,    0,    0,  233,    0,    0,    0,  104,    0,    0,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,   26,  344,   24,  344,  344,  344,  344,  344,
      154,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  183,  184,  344,  344,  344,  191,  192,
      344,  344,   28,  344,  344,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,   81,  208,    0,    0,    0,
        0,    0,    0,  123,    0,   59,    0,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   95,    0,    0,    0,    0,  226,

        0,    0,    0,    0,    0,   83,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  293,    0,  111,    0,
        0,    0,  112,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      320,    0,    0,    0,    0,  326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
        0,  258,    0,    0,  344,  344,  344,  344,  344,  344,
      169,  344,  168,  344,  344,  344,  344,  344,  344,   25,
      344,  344,  344,  344,  344,  154,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,   27,  344,    0,    0,  202,
        0,  232,    0,   89,    0,    0,    0,    0,   85,    0,
        0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   99,    0,    0,
      327,    0,    0,    0,    0,    0,    0,  307,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
      115,    0,    0,   83,    0,    0,    0,    0,    0,  234,
        0,    0,  259,    0,  105,    0,    0,  111,    0,    0,
        0,    0,    0,  143,    0,    0,  147,    0,    0,    0,

        0,    0,    0,  128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  322,    0,    0,  326,    0,    0,
        0,    0,    0,    0,  328,    0,    0,  301,    0,    0,
        0,    0,  134,    0,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,  258,    0,    0,  344,  344,
      344,  344,  344,  169,  168,  344,  344,  344,  344,  344,
       25,  344,  344,  344,  344,  344,  344,  296,  344,  344,
      344,  344,  344,  155,  344,  344,  344,  344,  344,  344,
       34,  344,  344,  344,  344,  344,  344,   27,  344,    0,
      202,  232,   89,    0,    0,    0,  113,    0,  144,    0,

      148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  321,    0,  323,    0,    0,
      327,    0,    0,    0,    0,    0,  307,    0,  329,    0,
        0,  302,    0,    0,    0,    0,    0,    0,    0,  115,
        0,    0,    0,    0,   77,    0,    0,    0,  234,    0,
      259,  105,    0,    0,    0,    0,    0,  145,  143,    0,
      149,  147,    0,    0,    0,    0,    0,    0,    0,  128,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  322,
        0,  324,    0,    0,    0,    0,    0,    0,  328,    0,
      301,    0,    0,    0,  134,    0,    0,    0,    0,    0,

        0,    0,   70,    0,    0,    0,    0,    0,  344,   38,
      344,  344,  344,  160,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,   14,  344,  296,  344,
      344,  344,  344,  344,  155,  344,  344,  344,  344,  344,
       34,  344,  344,  344,  344,  344,  344,  344,    0,    0,
        0,  113,  144,  148,    0,    0,    0,    0,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  321,  323,
        0,  325,    0,    0,    0,    0,    0,    0,  329,    0,
      302,    0,    0,    0,    0,    0,    0,    0,    0,  133,
        0,    0,   77,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  145,    0,  149,    0,    0,    0,    0,   53,
        0,    0,  217,    0,    0,    0,    0,    0,    0,  314,
        0,  324,    0,    0,  330,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
        0,    0,    0,  237,    0,   38,  344,  344,  160,  344,
      344,  177,  178,  344,  344,  344,  344,  344,  344,  344,
      157,  344,   14,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,   12,  344,  158,  344,  159,  344,  344,
      344,  344,  344,  344,  344,  344,  344,    0,    0,    0,
        0,    0,    0,   52,    0,    0,    0,    0,    0,    0,

        0,    0,  315,    0,  325,    0,    0,  331,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      133,    0,    0,    0,    0,   71,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  219,    0,    0,  338,   53,
        0,    0,    0,    0,    0,  310,    0,  312,    0,  314,
        0,    0,  330,    0,  308,    0,    0,    0,  303,    0,
        0,   92,    0,   62,   64,    0,  221,    0,    0,    0,
        0,    0,  344,  344,  344,  344,  175,  176,  344,  344,
      344,  344,  344,  344,  344,   36,  157,  344,  156,  344,
      344,  344,  344,  344,  344,  344,  344,  344,   12,  158,

      159,  344,  344,  344,  344,  344,  344,  344,  344,  344,
        0,    0,    0,    0,    0,    0,  339,    0,    0,  218,
        0,    0,    0,  311,    0,  313,    0,  315,    0,    0,
      331,    0,    0,    0,    0,    0,  304,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,   71,    0,
        0,    0,  238,    0,  124,    0,  209,    0,    0,    0,
      338,   78,    0,    0,    0,  310,  312,    0,    0,   96,
        0,    0,    0,  303,    0,  336,    0,    0,    0,    0,
        0,   74,    0,  138,    0,  344,  166,  344,  165,  344,
      344,  344,  344,  344,  344,  344,  342,  343,   36,  156,

      344,  344,   13,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  167,  344,  344,  344,  344,  344,
      344,    0,    0,    0,    0,  220,    0,  339,    0,  218,
        0,    0,  311,  313,    0,    0,    0,    0,    0,  309,
        0,    0,  304,    0,  337,    0,    0,   93,    0,    0,
       63,    0,   65,    0,    0,  222,   69,    0,    0,    0,
      238,    0,    0,    0,    0,    0,    0,  100,    0,  294,
        0,   90,    0,    0,  336,    0,    0,    0,    0,    0,
      138,    0,  166,  165,  344,  344,  344,  344,   35,  344,
      344,  340,  341,  344,   13,  344,   17,  344,   16,  344,

      344,   15,  344,  344,  344,  344,    8,  344,  344,  167,
      344,  344,   49,   50,  344,  344,  344,   29,  344,    0,
      125,    0,    0,  210,  220,    0,    0,   79,    0,    0,
        0,    0,    0,   97,    0,  309,    0,    0,  337,    0,
       93,    0,   63,   65,    0,  222,    0,    0,    0,   75,
        0,    0,    0,    0,   66,    0,  150,    0,  299,    0,
        0,  332,    0,  334,    0,    0,    0,    0,    0,    0,
      344,  164,  344,  163,  344,   35,  344,  344,   39,  344,
       17,   16,  344,   15,  344,  344,   10,  344,    8,  344,
      344,   30,  344,   47,   48,  344,  344,   29,  344,  125,

        0,  210,    0,   79,    0,  101,    0,  300,    0,  295,
        0,   97,    0,   91,    0,  333,    0,  335,    0,    0,
        0,    0,    0,   75,    0,    0,    0,    0,  150,  299,
      316,  332,  334,  318,    0,    0,    0,    0,    0,  164,
      163,  344,  344,   37,   39,  344,    9,  344,  305,  344,
       10,  344,  344,   30,  344,   40,  344,  344,  344,    0,
        0,   67,  101,  300,  295,    0,   91,  333,  335,    0,
        0,    0,    0,    0,    0,  215,    0,    0,  239,  213,
        0,   72,  211,  344,   37,    9,  305,  344,  344,  344,
       40,  344,  162,  344,  161,  344,    0,   67,    0,  317,

        0,  319,    0,    0,    0,    0,    0,    0,    0,   54,
      344,   33,  344,  344,  344,   32,  162,  161,  344,   31,
        0,  216,  317,  319,    0,  240,    0,  214,    0,    0,
       73,    0,  212,    0,    0,   33,  344,  344,   11,   32,
       31,  216,  240,  214,    0,   55,   73,  212,    0,    0,
      344,   11,   55,    0,    0,  344,    0,    0,  344,    0,
      142,    0,  146,  344,  142,  146,  344,  344,  241,  241,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2982] =
    {   0,
        0,   64,    0,    0, 4801, 4800, 4797, 4796,    0,    0,
        0,    0, 4787, 4786,   13,   16,    3,    5, 4800, 4807,
      127,    0, 4794,  189, 4791,   18,   38, 4780,   82,  245,
     4807, 4767, 4757, 4807, 4807,    0,    0,    0, 4807, 4807,
     4785, 4807, 4807, 4776,    0,    0,   23,   85, 4775,  210,
       16, 4807, 4762, 4752, 4728,    4, 4736, 4741, 4740, 4733,
        4, 4745,    0,    5,    7,   18,   61,   69, 4744, 4744,
     4807,   45,  248,  101, 4807,  114, 4772,  282, 4807, 4807,
     4754,   63,   34, 4727,  151,   71,  170, 4736,  216,    8,
      173,  302,   47,  217,   87, 4725,  301,   79, 4738, 4751,

     4745,    0,    0,    0, 4756, 4807, 4726, 4715, 4718,  154,
     4713, 4713, 4712,  313, 4726,  186, 4708, 4715, 4713, 4707,
     4711, 4713, 4718, 4715, 4697, 4718,  181, 4717, 4716, 4703,
     4697, 4701, 4697,  189,  187,  265,  305, 4740,  346, 4722,
      204,  188, 4695,  212,  301,  236, 4704,  324,  229,  265,
      319,  253,  331,  329, 4693,  336,  324, 4706, 4807, 4687,
     4693, 4685, 4688,  346, 4683,  255, 4700, 4695, 4693, 4682,
     4694, 4684, 4681, 4689,  382,  289, 4688,  349,  389,  315,
     4678, 4678, 4683, 4807, 4675, 4675, 4677, 4666, 4665, 4663,
      349, 4668, 4677, 4680,  344, 4667, 4665, 4657,  350, 4676,

     4663, 4662, 4673,  358,  192, 4807, 4654, 4667, 4668, 4664,
      370, 4649, 4649, 4658,  408,  412,  418,  363, 4651, 4664,
     4646, 4643, 4657, 4648, 4658, 4663, 4653, 4652, 4665, 4643,
     4639, 4644, 4636, 4633, 4637, 4642, 4632, 4642, 4631, 4644,
     4623,   56, 4807,  420,  262,  425, 4624, 4630, 4622, 4625,
      380, 4620,  380, 4637,  430, 4631, 4620, 4632, 4622, 4619,
     4627,  438,  402, 4626,  398,  443,  393, 4616, 4616, 4621,
      449, 4613, 4613, 4615, 4604, 4614, 4602, 4600,  407, 4605,
     4614, 4617,  404, 4604, 4602, 4594,  407, 4613, 4600, 4599,
     4610,  408,  466, 4625, 4604, 4605, 4614, 4590,  437,  471,

     4602, 4599, 4594, 4590, 4588,  473,  475, 4580, 4594, 4593,
     4583,  478,  482, 4591, 4575, 4589, 4580, 4587, 4586,  484,
      494, 4572,  496,  500, 4584, 4587,  455, 4585,  383, 4577,
     4565, 4565,  304, 4578, 4578, 4563, 4576, 4578, 4585, 4568,
      507, 4558, 4555, 4573,  427,  509, 4568, 4558, 4550,  474,
     4585,  486, 4558,  513, 4563, 4547, 4551, 4545, 4538,  520,
     4595, 4592,  529,  531, 4547, 4537, 4538,  533, 4544, 4537,
     4547,  535,  537, 4558, 4549, 4548, 4534, 4533, 4549, 4548,
     4534, 4543, 4541, 4525, 4539, 4538, 4530,  539, 4527, 4520,
     4534, 4533, 4512,  541,  544,  554,  557, 4551, 4530, 4531,

     4540, 4516,  560,  562, 4528, 4525, 4520, 4516,  564,  566,
     4514,  568,  570, 4506, 4520, 4519, 4509,  573,  580, 4517,
     4501, 4515, 4506, 4513, 4512,  586,  589, 4498,  592,  594,
     4510, 4513,  596,  598,  555, 4511,  612, 4503, 4499, 4490,
     4490,  490, 4503, 4503, 4488, 4501, 4503, 4510, 4493,  617,
     4483, 4480, 4498,  450,  619, 4493, 4483, 4475,  624,  621,
      628, 4486,  614, 4483, 4487, 4477, 4486, 4471, 4469,  630,
      637, 4470, 4484, 4482, 4501, 4479,  641,  646,  657,  653,
     4807, 4468, 4498, 4463, 4460,  659, 4455, 4477, 4459,  661,
     4462, 4474,  663, 4465,  665,  673,  677,  681, 4454,  684,

     4452, 4462, 4465, 4454, 4463, 4462, 4461, 4462, 4449, 4458,
      686, 4444, 4453, 4442, 4438, 4445, 4439, 4436, 4449, 4450,
      688,  690, 4450,  694, 4434, 4446, 4430,  696,  704,  271,
     4430, 4443, 4443, 4441, 4444, 4435, 4442, 4424,    6,  706,
      712, 4435, 4439, 4421, 4456, 4422, 4807, 4807,  714, 4431,
     4420, 4430,  716,  718, 4428, 4414, 4407,  721,  723,  725,
      728, 4427, 4411, 4422, 4443, 4421, 4415, 4406, 4419, 4417,
      736,  740, 4401, 4400, 4418,  742,  744, 4413, 4399,  751,
     4410, 4399,  757,  759,  761, 4405,  623, 4402, 4406, 4396,
      766,  768, 4405, 4390, 4388,  770,  772, 4389, 4403, 4401,

     4420,  775, 4398,  777,  779,  782,  786,  788, 4387, 4417,
     4382, 4379,  790, 4374, 4396, 4378,  793, 4381, 4393,  795,
     4384,  798,  800,  804,  806, 4373,  809, 4371,  811, 4381,
     4384, 4373, 4382, 4381,  814,  816, 4380, 4381, 4368,  820,
     4377,  822, 4363, 4372, 4361, 4357, 4364, 4358, 4355, 4368,
     4369,  825,  827, 4369,  830, 4353, 4365, 4349,  832,  838,
      528, 4349, 4362,  841,  843, 4362, 4360, 4363,  848, 4357,
     4386, 4360, 4341, 4353, 4344, 4351, 4807,   66,  850, 4347,
     4335, 4349, 4338, 4338,  852,  854, 4333, 4332, 4348, 4339,
     4342, 4332,  551,  857, 4365,  860, 4341, 4325,  312,  862,

      864,  867,  869, 4362,  874, 4336, 4326, 4332, 4319, 4319,
     4318, 4329, 4314, 4319, 4314,  876,  879, 4347, 4325,  885,
     4326, 4807, 4327, 4322, 4320, 4320,  888, 4319,  892,  894,
     4318, 4303, 4807,  896, 4306,  898, 4314, 4300, 4294, 4311,
     4314, 4297, 4294, 4312, 4297, 4296,  901, 4305, 4295, 4288,
     4283, 4292,  903,  905, 4300,  908, 4315, 4294, 4313,  910,
      915, 4333, 4330, 4298, 4305, 4292, 4281, 4281, 4279, 4302,
     4310, 4285,  921,  923,  929,  931, 4286, 4271, 4297, 4267,
      933, 4318, 4315, 4295, 4274,  939,  941, 4273, 4268,  944,
     4236, 4264, 4238,  946, 4232, 4223,  948, 4230,  950,  647,

      954, 4226, 4205, 4216, 4204,    5,  956,  958,  962,  966,
       64,  170,  243,  266,  402,  438,  914,  969,  972,  451,
      464,  689,  974,  978,  980,  982,  985,  506,  503,  534,
      524,  531,  550,  987,  569,  560,  584,  989,  991,  591,
      993,  998,  632,  627, 1001,  631, 1005,  635,  635,  638,
      658, 1009,  662, 1011, 1013,  668, 1017, 1021, 1023,  660,
     1027,  691,  680, 1029,  679,  705,  716,  714,  745,  729,
     4807,  748,  778,  794,  787,  810,  808,  827, 1033,  832,
      828,  836,  872,  867,  870,  873,  899,  912,  924, 1037,
     1039,  955,  936,  975,  963, 1053, 1043, 1045, 1049, 1053,

      998, 1055,  975,  983,  981,  981, 4807,  995,  997, 1024,
     1002, 1059, 1007, 1022, 1068, 1062, 1009, 1010, 1028, 1021,
     1035, 1089, 1091, 1093, 4807, 1047, 1096, 1099, 1051, 4807,
     4807, 1062, 1056, 1065, 1053, 1058, 1062, 1052, 1059, 1058,
     1070, 1071, 1116, 1118, 1120, 1122, 1125, 1107, 1089, 1070,
     1092, 4807, 4807, 1086, 1093, 1082, 1088, 1100, 1086, 1084,
     1082, 1098, 1143, 1142, 1142, 1149, 1092, 1092, 1117, 1114,
     4807, 4807, 1116, 1097, 1157, 1106, 1160, 1121, 1145, 1109,
     1165, 1167, 1169, 1117, 1132, 1133, 1175, 1177, 1130, 1145,
     1131, 1139, 1185, 1138, 1133, 1191, 1135, 1153, 1147, 1140,

     1142, 1159, 1158, 1163, 1201, 1163, 1183, 1165, 1206, 1208,
     1210, 1212, 1214, 1176, 1181, 1174, 1169, 1242, 1180, 1178,
     1201, 1244, 1179, 1246, 1186, 1209, 1249, 1251, 1198, 1254,
     1258, 1201, 1221, 1207, 1221, 1265, 1267, 1270, 1272, 1274,
     1276, 1278, 1281, 1215, 1283, 1288, 1236, 1294, 1296, 1250,
     1245, 1299, 1258, 1250, 1264, 1256, 1253, 1252, 1264, 1255,
     1262, 1315, 1317, 1273, 1265, 4807, 1284, 1300, 1262, 4807,
     1283, 1286, 1278, 1326, 1285, 1331, 1286, 1280, 1285, 1297,
     1277, 1289, 1289, 1304, 1302, 1306, 1298, 1309, 1312, 1312,
     1302, 1318, 1357, 1359, 1306, 1363, 1366, 1325, 1314, 1315,

     1317, 1319, 1316, 1334, 1354, 1327, 1324, 1379, 1381, 1339,
     1354, 1345, 1342, 1388, 1372, 1391, 1393, 1398, 1340, 1359,
     1401, 1352, 1353, 1367, 1371, 1366, 1357, 1388, 1389, 1374,
     1415, 1367, 1364, 1419, 1421, 1423, 1425, 1383, 1369, 1406,
     1372, 1392, 1424, 1394, 1395, 1396, 1439, 1390, 1394, 1395,
     4807, 4807, 1446, 1448, 1402, 1432, 1402, 1439, 1424, 1465,
     1467, 1473, 1425, 1418, 1475, 1477, 1480, 1442, 1434, 1431,
     1485, 1432, 1445, 1435, 1441, 1493, 1495, 1457, 1444, 1499,
     1465, 1481, 1443, 1504, 1466, 1469, 1463, 1511, 1466, 1461,
     1516, 1520, 1468, 1483, 1463, 1475, 1475, 1488, 1489, 1493,

     1487, 1495, 1498, 1497, 1487, 1503, 1542, 1544, 1548, 1510,
     1496, 1497, 1499, 1555, 1557, 1507, 1504, 1522, 1542, 1515,
     1512, 1566, 1568, 1571, 1529, 1544, 1535, 1532, 1577, 1579,
     1581, 1584, 1536, 1588, 1590, 1593, 1597, 1559, 1599, 1548,
     1602, 1606, 1608, 1610, 1551, 1572, 1613, 1615, 1569, 1575,
     1565, 1566, 1582, 1603, 1576, 1582, 1578, 1629, 4807, 4807,
     1576, 1585, 1580, 1608, 1615, 1581, 4807, 1582, 1638, 1625,
     1641, 1603, 4807, 1595, 1590, 1610, 1593, 1598, 1593, 1593,
     1599, 1606, 1614, 1612, 1602, 1609, 1619, 1625, 1625, 1610,
     1616, 1633, 1630, 1616, 1615, 1633, 1670, 1619, 1629, 1630,

     4807, 1635, 1636, 1641, 1631, 1639, 1644, 1681, 1683, 1635,
     1648, 1631, 1633, 1640, 1690, 1692, 1685, 1697, 1645, 1655,
     1652, 1661, 1648, 1648, 1645, 1655, 1668, 1669, 1660, 1710,
     1712, 1678, 1666, 1696, 1717, 1683, 1720, 1683, 1725, 1701,
     1680, 1678, 1682, 1694, 1681, 1695, 1677, 1685, 1681, 1701,
     1689, 1716, 1716, 1743, 1745, 1692, 1695, 1707, 1752, 1754,
     1758, 1760, 1703, 1726, 1767, 1725, 1720, 1770, 4807, 4807,
     1776, 1778, 1725, 1736, 1782, 1729, 1730, 1746, 1766, 1739,
     1745, 1741, 1792, 1794, 1796, 1798, 1800, 1747, 1756, 1751,
     1779, 1806, 1814, 1788, 1755, 1816, 1818, 1822, 1772, 1824,

     1826, 1771, 1773, 1793, 1775, 1781, 1777, 1777, 1783, 1788,
     1796, 1795, 1785, 1792, 1802, 1808, 1808, 1793, 1799, 1816,
     1813, 1799, 1798, 1852, 1801, 1811, 1812, 1857, 1859, 1821,
     1822, 1827, 1817, 1825, 1830, 1867, 1869, 1821, 1835, 1818,
     1820, 1827, 1877, 1879, 1831, 1883, 1841, 1838, 1887, 1889,
     1851, 1892, 1894, 1860, 1838, 1844, 1845, 1851, 1854, 1847,
     1853, 4807, 1854, 1865, 1851, 1872, 1873, 1866, 1871, 1912,
     1914, 1907, 1869, 1864, 1879, 1878, 1888, 1869, 1883, 1884,
     1883, 1870, 1892, 1889, 1876, 1892, 1892, 1886, 1887, 1888,
     1897, 1900, 1901, 1900, 1897, 1894, 1922, 1887, 1888, 1898,

     1894, 1910, 1911, 4807, 1905, 1953, 1906, 1937, 1921, 1904,
     1915, 1960, 1908, 1908, 1915, 1929, 1917, 4807, 1923, 1947,
     1919, 1911, 1913, 1935, 1974, 1921, 1951, 1934, 1938, 1981,
     1983, 1926, 1986, 1988, 1954, 1941, 1945, 1996, 1942, 1943,
     1950, 1956, 1966, 1945, 1968, 1958, 1968, 1968, 1972, 2012,
     2006, 2009, 1972, 1998, 1964, 2020, 2022, 2021, 2021, 1984,
     1974, 2030, 2032, 1975, 1997, 2036, 2002, 1980, 1986, 1987,
     1993, 1996, 1990, 1996, 2047, 2049, 2051, 2053, 2055, 2057,
     2009, 2020, 2006, 2027, 2065, 2031, 2025, 2070, 2072, 2074,
     2028, 2077, 2079, 2081, 2043, 2042, 2053, 2034, 2048, 2049,

     2048, 2035, 2057, 2094, 2043, 2059, 2059, 2053, 2054, 2055,
     2064, 2067, 2068, 2067, 2110, 2087, 2055, 2056, 2114, 2118,
     2067, 2066, 2082, 2082, 2123, 2079, 2127, 2081, 2112, 2096,
     2079, 2092, 2082, 2090, 2104, 2092, 2142, 2144, 2146, 2095,
     4807, 4807, 4807, 2111, 2110, 2097, 2103, 2100, 2107, 2113,
     2103, 2104, 2110, 2114, 2163, 2118, 2126, 2112, 2115, 2119,
     2126, 2131, 2119, 2120, 2134, 2121, 2121, 2139, 2178, 2124,
     2128, 2129, 2147, 2148, 4807, 2131, 2150, 2147, 2134, 2136,
     2154, 2151, 2133, 2154, 2155, 2158, 4807, 2157, 2150, 2180,
     2160, 2151, 2163, 4807, 2148, 2154, 2205, 4807, 2152, 2170,

     2159, 2161, 2172, 2157, 2159, 2214, 2216, 2178, 2166, 2185,
     2169, 2173, 2224, 2226, 2231, 2191, 2195, 2178, 2195, 2236,
     2238, 2188, 2189, 2196, 2204, 2206, 2192, 2205, 2192, 2227,
     2212, 2194, 2199, 4807, 4807, 2204, 2212, 2217, 4807, 4807,
     2199, 2206, 2260, 2262, 2224, 2212, 2266, 2268, 2272, 2232,
     2234, 2221, 2228, 2278, 2284, 2288, 2290, 2227, 2234, 2243,
     2237, 2239, 2245, 2296, 2258, 2299, 2301, 2303, 2250, 2253,
     2257, 2264, 2269, 2257, 2258, 2272, 2259, 2259, 2317, 2319,
     2277, 2321, 2267, 2271, 2272, 2290, 2291, 2328, 2276, 2295,
     2293, 2280, 2282, 2337, 2339, 2305, 2283, 2304, 2305, 2346,

     2310, 2349, 2311, 2305, 2354, 2356, 2339, 2319, 2310, 2322,
     2362, 2310, 2366, 2370, 2313, 2334, 2373, 2375, 2378, 2320,
     2342, 2335, 4807, 2386, 2388, 2344, 2355, 2339, 2357, 2345,
     2398, 2352, 2351, 2349, 2356, 2356, 2358, 2353, 2354, 2376,
     4807, 2410, 2372, 2359, 2415, 2417, 2381, 2384, 2381, 2369,
     2368, 2426, 2377, 2428, 2380, 2399, 2396, 2434, 2385, 2418,
     2419, 2399, 2387, 2402, 2394, 4807, 2405, 2393, 2407, 2392,
     2450, 2452, 2411, 2416, 2408, 2419, 2400, 2424, 2421, 2462,
     2466, 2468, 2470, 2438, 2428, 2418, 2434, 2426, 2477, 2479,
     2426, 2437, 2436, 2431, 2431, 2487, 2489, 2448, 2449, 2456,

     2442, 2496, 2458, 2459, 2461, 2465, 2476, 2504, 2453, 2460,
     2455, 2460, 2489, 2468, 2513, 2515, 2491, 2459, 2520, 2522,
     2524, 2528, 2530, 2532, 2486, 2486, 2536, 2540, 2542, 2546,
     2498, 2508, 2495, 2513, 2501, 2503, 2553, 2503, 2509, 2509,
     2511, 2506, 2508, 2530, 2564, 2566, 2528, 2569, 2516, 2572,
     2574, 2538, 2541, 2538, 2527, 2527, 2583, 2585, 2588, 2543,
     2591, 2542, 2561, 2595, 2560, 2548, 2581, 2582, 2562, 2604,
     2607, 2556, 2570, 2611, 2563, 2614, 2576, 2564, 2620, 2622,
     2578, 2626, 2630, 2632, 2636, 2580, 2588, 2638, 2614, 2619,
     2602, 2643, 2630, 2648, 2650, 2631, 2653, 2606, 2607, 2613,

     2662, 2641, 2667, 2669, 2626, 2617, 2637, 2630, 2639, 2636,
     2623, 2638, 2626, 2680, 2683, 2685, 2643, 2688, 2635, 2643,
     2643, 2660, 2641, 2696, 2698, 2665, 2702, 2704, 2656, 2654,
     2661, 2709, 2712, 2661, 2665, 2666, 2697, 4807, 2670, 2671,
     2680, 2682, 2687, 2706, 2673, 2727, 2679, 2709, 2731, 2715,
     2735, 2680, 2737, 2739, 2741, 2707, 2685, 2694, 2710, 2714,
     2752, 2704, 2701, 2707, 2757, 2706, 2760, 2762, 2726, 2716,
     2711, 2731, 2768, 2772, 2716, 2721, 2717, 2740, 2742, 2779,
     2783, 2737, 2742, 2747, 2748, 2745, 2731, 2791, 2758, 2775,
     2796, 2798, 2800, 2781, 2763, 2804, 2806, 2808, 2810, 2812,

     2814, 2767, 2768, 2774, 2820, 2803, 2769, 2789, 2782, 2792,
     2789, 2776, 2791, 2779, 2833, 2836, 2838, 2840, 2842, 2800,
     2845, 2792, 2801, 2801, 2818, 2799, 2854, 2858, 2860, 2820,
     2862, 2864, 2816, 2814, 2821, 2816, 2820, 2821, 2851, 2874,
     2878, 2827, 2831, 2881, 2883, 2844, 2846, 2851, 2888, 2871,
     2891, 2894, 2847, 2877, 2863, 2853, 2852, 2902, 2904, 2897,
     2907, 2909, 2902, 2857, 2858, 2855, 2915, 2903, 2869, 2920,
     2883, 2871, 2882, 2878, 2881, 2875, 2886, 2931, 2889, 2934,
     2936, 2938, 2883, 2941, 2895, 2906, 2901, 2903, 2948, 2897,
     2952, 2900, 2911, 2917, 2958, 2920, 2912, 2913, 2916, 2909,

     2925, 2925, 4807, 2912, 2918, 2931, 2921, 2924, 2972, 2974,
     2926, 2927, 2978, 2980, 2927, 2983, 2988, 2930, 2963, 2946,
     2939, 2948, 2943, 2998, 2946, 3001, 3003, 2969, 3006, 2968,
     2990, 2970, 2967, 2958, 3016, 3019, 3021, 3026, 2967, 2969,
     3028, 2971, 2991, 2994, 2980, 2983, 3013, 2983, 3003, 2994,
     2993, 3043, 3045, 3047, 2994, 2995, 2992, 3052, 3054, 3006,
     3003, 3014, 3010, 3013, 3007, 3018, 3063, 3021, 3068, 3070,
     3072, 3074, 3009, 3076, 3031, 3042, 3037, 3038, 3083, 3032,
     3088, 3032, 3046, 3052, 3053, 3045, 3046, 3049, 3097, 3099,
     3046, 3062, 3103, 3064, 3106, 3053, 3059, 3061, 3064, 3058,

     3074, 3060, 3116, 3079, 3119, 3081, 3069, 3105, 3125, 3127,
     3080, 3081, 4807, 3082, 3096, 3133, 3135, 3087, 3138, 3141,
     3107, 3144, 3106, 3151, 3154, 3103, 3109, 3108, 3098, 3158,
     3120, 3125, 3108, 3109, 3124, 3125, 3127, 3114, 4807, 3125,
     3126, 3122, 3132, 4807, 3134, 3175, 3130, 3120, 3179, 3162,
     3182, 3181, 3181, 3135, 3150, 3131, 3147, 3194, 3196, 3198,
     3200, 3202, 3204, 3148, 3152, 3157, 3172, 3171, 3177, 3178,
     3158, 3173, 3218, 3220, 3222, 3224, 3226, 3228, 3190, 3178,
     3209, 3181, 3180, 3183, 3184, 3200, 3188, 3187, 3203, 3189,
     3191, 3227, 3247, 3249, 3202, 3252, 3205, 3219, 3256, 3258,

     3210, 3263, 3265, 3225, 3268, 3230, 3274, 3276, 3228, 3239,
     3232, 3222, 3282, 3244, 3249, 3232, 3233, 3248, 3250, 3251,
     3292, 3240, 3295, 3254, 3299, 3301, 3259, 3255, 3305, 3267,
     3272, 3261, 3257, 3272, 3269, 4807, 3265, 3316, 3318, 3321,
     3283, 3286, 3270, 3277, 3327, 3329, 3332, 3334, 3287, 3337,
     3290, 3286, 3343, 3292, 4807, 3305, 3329, 3348, 3350, 3352,
     3305, 4807, 3301, 4807, 4807, 3308, 4807, 3319, 3320, 3319,
     3360, 3314, 3364, 3368, 3316, 3320, 4807, 4807, 3327, 3313,
     3349, 3324, 3376, 3380, 3386, 3388, 3391, 3393, 3395, 3330,
     3397, 3335, 3354, 3348, 3349, 3350, 3364, 3367, 3408, 3412,

     3414, 3352, 3366, 3377, 3417, 3375, 3420, 3367, 3364, 3380,
     3389, 3378, 3373, 3428, 3380, 3432, 3435, 3397, 3438, 3440,
     3387, 3395, 3445, 3448, 3450, 3454, 3403, 3456, 3409, 3405,
     3461, 3414, 3466, 3424, 3451, 3469, 3471, 3473, 3426, 3476,
     3424, 3479, 3482, 3437, 3486, 3489, 3492, 3457, 3498, 3458,
     3460, 3502, 3505, 3459, 4807, 3468, 4807, 3455, 3463, 3462,
     3512, 4807, 3474, 3461, 3461, 3518, 3520, 3468, 3481, 4807,
     3482, 3471, 3471, 3527, 3529, 3531, 3491, 3490, 3495, 3492,
     3518, 4807, 3538, 3540, 3502, 3545, 3547, 3549, 3551, 3496,
     3496, 3496, 3556, 3519, 3511, 3561, 3562, 3562, 3568, 3571,

     3518, 3574, 3576, 3578, 3580, 3534, 3583, 3564, 3532, 3554,
     3589, 3532, 3534, 3595, 3598, 3550, 3601, 3605, 3585, 3611,
     3548, 3613, 3577, 3618, 3620, 3622, 3575, 3626, 3629, 3631,
     3580, 3581, 3637, 3639, 3587, 3600, 3645, 3601, 3647, 3649,
     3597, 3597, 3653, 3655, 3657, 3617, 3663, 3665, 3617, 3667,
     3671, 3673, 3675, 3629, 3679, 3683, 3685, 3633, 3662, 3689,
     3691, 3647, 3644, 3657, 3656, 3657, 3698, 4807, 3700, 4807,
     3655, 4807, 3705, 3707, 3709, 3656, 3661, 3663, 3674, 3666,
     3717, 3670, 3723, 3725, 3727, 3729, 3697, 3731, 3733, 3676,
     3736, 4807, 4807, 3684, 3739, 3746, 3748, 3751, 3753, 3688,

     3755, 3757, 3685, 3761, 3719, 3763, 3766, 3744, 3770, 3772,
     3725, 3778, 3773, 3775, 3732, 3735, 3786, 3788, 3766, 3791,
     3793, 3746, 3796, 3798, 3801, 3763, 3804, 3807, 3809, 3812,
     3814, 3769, 3817, 3820, 3822, 3825, 3830, 3833, 3835, 3781,
     3838, 3790, 3841, 3843, 3797, 3849, 3807, 3801, 3852, 3854,
     3807, 3802, 3805, 3840, 4807, 3860, 3862, 3864, 3868, 3826,
     3870, 3872, 3876, 3880, 3834, 3829, 3827, 3834, 3835, 3831,
     3887, 3889, 3892, 3894, 3857, 3897, 3899, 3902, 3904, 3907,
     3909, 3911, 3914, 3917, 3868, 3922, 3924, 3867, 3926, 3890,
     3930, 3932, 3934, 4807, 4807, 3890, 3880, 3939, 3902, 3942,

     3890, 3946, 3949, 3951, 3953, 3955, 3957, 3959, 3961, 3965,
     3923, 3969, 3973, 3977, 3979, 3981, 3983, 3985, 3927, 3922,
     3920, 3938, 3940, 3990, 3937, 3939, 3951, 3943, 3999, 4001,
     4807, 4003, 4005, 4807, 3943, 3953, 3953, 3969, 3956, 4011,
     4013, 3956, 4016, 4018, 4020, 4022, 4024, 4026, 4028, 3978,
     4032, 3986, 3976, 4037, 4041, 4043, 4045, 4047, 3980, 3995,
     4050, 4052, 4056, 4062, 4066, 4068, 4070, 4072, 4074, 4076,
     4000, 4004, 4005, 4024, 4024, 4807, 4028, 4040, 4807, 4807,
     4027, 4807, 4807, 4084, 4086, 4088, 4092, 4042, 4036, 4094,
     4096, 4099, 4101, 4103, 4105, 4109, 4111, 4114, 4118, 4120,

     4124, 4127, 4129, 4131, 4053, 4134, 4136, 4061, 4086, 4807,
     4140, 4142, 4084, 4147, 4152, 4155, 4157, 4159, 4162, 4164,
     4167, 4169, 4171, 4173, 4177, 4179, 4183, 4185, 4187, 4189,
     4193, 4195, 4199, 4101, 4095, 4205, 4121, 4207, 4211, 4213,
     4215, 4217, 4219, 4222, 4224, 4226, 4228, 4230, 4131, 4141,
     4153, 4232, 4234, 4152, 4150, 4159, 4236, 4240, 4189, 4242,
     4244, 4246, 4248, 4196, 4252, 4258, 4262, 4264, 4266, 4268,
     4807, 4280, 4284, 4288, 4292, 4296, 4300, 4304, 4308, 4312,
     4316
    } ;

static yyconst flex_int16_t yy_def[2982] =
    {   0,
     2972, 2972, 2973, 2973, 2974, 2974, 2975, 2975, 2973, 2973,
     2973, 2973, 2976, 2976, 2977, 2977, 2978, 2978, 2971, 2971,
     2971,   21, 2971,   21, 2971,   24,   24,   24,   24, 2971,
     2971,   24,   24, 2971, 2971, 2979, 2980, 2981, 2971, 2971,
     2971, 2971, 2971, 2971,   21,   24,   24,   24,   24,   24,
       30, 2971,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971,   24,   24,   24, 2971,   24, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,   24,

       24, 2979, 2980, 2981, 2971, 2971,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971,   24, 2971,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971, 2971,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2971, 2971,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971,   24,   24,   24,   24,   24,   24, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2971, 2971,   24,   24,   24,   24,   24,
     2971, 2971,   24,   24,   24,   24,   24, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971, 2971,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971, 2971,   24,   24,   24,   24,   24, 2971, 2971,   24,
       24,   24,   24,   24,   24, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2971, 2971,   24,   24,   24, 2971, 2971,
       24,   24,   24,   24,   24, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,
       24, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971,   24,   24,   24,   24, 2971, 2971,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2971, 2971,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2971, 2971,   24,   24,   24,   24,   24, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2971, 2971,   24,   24,   24,   24, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2971, 2971, 2971, 2971,

     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971,   24,   24,   24,   24,   24,
       24, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
       24,   24, 2971, 2971, 2971,   24, 2971, 2971,   24, 2971,
     2971, 2971, 2971,   24, 2971, 2971,   24,   24,   24,   24,
        0, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971
    } ;

static yyconst flex_int16_t yy_nxt[4872] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2971,
       44,   41,   44, 2971,   41,   32,  745,   48,   33,   50,
       50,   50,   48, 2971,   50,   50,   50,  117,  746,   72,
       72,  108,  119,   53,  114,  122,   72,   72,   53,   73,
       73,   73,  109,  178,  115,  995,  120,  118,  179,  124,
       74,  123,  121,   34,   20,   21,   22,   20,   23,  125,
       25,  162,   26,   27,   28,   29,   29,   29,   30,   74,
       31,   20,  163,   76,   76,  187,   72,   72,  392,   32,
      393,   48,   33,   50,   50,   50,   73,   73,   73,  188,

      126,  160,  127,  875,   74,  128,  131,   74,  136,  136,
      132,  161,  137,  137,  137,   76,   76,  129,  997,  168,
      876,  193,  130,   74,  202,  169,   74,   34,   45,   45,
      133,  170,   46,  203,   46,   47,   48,   49,   50,   50,
       50,   51,   46,   52,  194,   46,   46,   46,   46,   46,
       46,   46,   53,   46,   46,   54,   46,   46,   46,   46,
       46,   46,   46,   46,   55,   56,   57,   58,   46,   59,
       46,   60,   61,   46,   46,   62,   63,   64,   65,   46,
       46,   66,   67,   68,   69,   70,   46,   46,   46,   46,
       46,   46,  165,   72,   72,  210,  166,   46,   46,   46,

       46,   46,   46, 2971,  211, 2971,  219,  171,  167,  239,
      180,   76,   76,  220,   46,  172,  240,   46,  181,   48,
      231,   50,   50,   50,  998,  249,   46,   46,   46,   46,
      232,   46,   74,   46,   46,  241,  250,   46,   46,   46,
       46,  242,  247,   46,   46,   46,   46,   46,   77,   72,
       72,   74,  248,  252,  189,   78,  174,  253,  175,   73,
       73,   73,   79,  394,  394,  190,  176,   80,  191,  254,
       74,  192,  177,  258,  265,   81,  137,  137,  137,  266,
      999,  259,   82,   83,   84,   85,   86,   87,   88,   74,
       89,  274,  735,   90,   91,   92,   93,   94,   95,   96,

       97,   98,  267,   99,  139,  275,   72,   72,  276,  302,
      268, 1000,  140,  303,  215,  215,  137,  137,  137,  141,
      142,  143,  144,  145,  146,  147,  736,  148,  216,  314,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  182,
      158,  512,  196,  183,  315,  316,  197,  244,  244,  255,
      184,  895,  198,  185,  199,  256,  269,  200,  201,  186,
      270,  257,  245,  281,  261,  513,  262,  271,  277,  290,
      272,  322,  896,  217,  263,  323,  273,  284,  291,  278,
      264,  285,  279,  312,  312,  280,  282,  286,  318,  287,
      320,  320,  288,  289,  297,  298,  299,  333,  313,  319,

      338,  300,  355,  339,  343,  321,  349,  344,  334,  215,
      215,  367,  350,  360,  360,  507,  361,  368,  362,  363,
      363,  244,  244,  216,  508,  356,  395,  395,  401,  402,
      403,  409,  409,  364,  406,  404,  245,  424,  407,  418,
      418,  396,  420, 1001,  426,  426,  410,  365,  425,  428,
      433,  433,  366,  429,  419,  442,  458,  421,  422,  427,
      447,  452,  459,  448,  453,  434,  443,  460,  460,  467,
      526,  411,  470,  470,  477,  477,  479,  479,  468,  312,
      312,  527,  461,  486,  486,  320,  320,  471, 1002,  478,
     1006,  480,  469,  657,  313,  493,  493,  495,  495,  533,

      321,  497,  497,  502,  658,  503,  534,  504,  521,  521,
      528,  528,  496,  537,  540,  540,  498,  505, 1007,  535,
      538,  360,  360,  522,  361,  529,  362,  643,  541,  481,
      363,  363,  549,  549,  553,  553,  558,  558,  560,  560,
      576,  576,  394,  394,  364,  395,  395, 1013,  554,  860,
      559,  644,  561, 1014,  577,  583,  583,  499,  584,  584,
      396,  591,  591,  596,  596,  409,  409,  602,  602,  604,
      604,  606,  606,  585,  418,  418,  592, 1015,  597, 1016,
      410,  613,  613,  861,  605, 1017,  607,  426,  426,  419,
      620,  620,  593,  622,  622,  624,  624,  433,  433,  629,

      629,  594,  427,  630, 1018,  631,  888,  632,  623,  889,
      625, 1019,  434,  635,  635,  595, 1020,  633,  652,  652,
      659,  659,  460,  460,  608,  664,  664,  671,  636,  669,
      669,  470,  470,  653, 1021,  660,  792,  461,  679,  679,
      665,  672,  477,  477,  637, 1023,  471,  685,  685,  666,
      793,  626, 1025,  638,  686,  686,  667,  478,  479,  479,
      486,  486,  694,  694,  493,  493,  495,  495, 1026,  668,
     1029,  695, 1032,  480,  700,  700, 1033,  696,  497,  497,
     1034,  496,  701,  701,  989,  703,  703,  716,  716,  521,
      521,  727,  727,  498,  704,  729,  729,  528,  528, 1035,

      705,  990,  717, 1036,  522,  734,  734,  540,  540, 1038,
      730, 1044,  529,  747,  747,  549,  549,  553,  553,  756,
      756,  541,  558,  558,  760,  760,  560,  560, 1008,  761,
      761,  554,  762, 1047,  763, 1048,  559,  773,  773, 1049,
      561,  775,  775,  576,  576,  781,  781, 1050,  782, 1009,
      783,  774,  786,  786, 1051,  776, 1052,  577,  583,  583,
      584,  584,  790,  790, 1053,  777,  787,  591,  591,  797,
      797,  596,  596,  801,  801,  585,  602,  602,  604,  604,
      807,  807,  592,  606,  606, 1054,  597,  808,  808,  809,
      809,  613,  613,  605,  818,  818,  620,  620,  607,  622,

      622,  823,  823, 1055,  810,  624,  624,  824,  824,  819,
      826,  826,  629,  629,  623,  635,  635,  834,  834, 1056,
      625,  838,  838,  841,  841,  827,  652,  652,  852,  852,
      636,  854,  854,  659,  659, 1057,  839, 1058,  842,  859,
      859,  653,  664,  664,  864,  864,  855, 1059,  660,  669,
      669,  679,  679,  685,  685,  686,  686,  665,  694,  694,
     1060,  891,  891,  700,  700,  701,  701,  695,  897,  897,
      703,  703, 1061,  696,  892,  900,  900,  716,  716,  704,
      912,  912, 1064,  898, 1065,  705,  915,  915,  901,  727,
      727, 1066,  717,  729,  729,  923,  923,  734,  734,  927,

      927,  916,  747,  747,  944,  944,  946,  946,  730,  756,
      756,  760,  760, 1067,  928, 1068,  761,  761,  945,  762,
      947,  763,  773,  773,  963,  963, 1069,  964, 1070,  965,
      775,  775,  966,  966,  781,  781,  774,  782, 1071,  783,
      786,  786,  975,  975,  776,  790,  790,  981,  981,  797,
      797,  987,  987, 1072,  787,  801,  801,  807,  807,  808,
      808, 1073,  982,  809,  809, 1075,  988,  996,  996, 1003,
      818,  818, 1004, 1005, 1005,  823,  823, 1076,  810,  824,
      824, 1010, 1010,  826,  826,  819, 1012, 1012,  834,  834,
      838,  838, 1022, 1022,  841,  841, 1011, 1077,  827, 1024,

     1024,  983, 1027, 1027, 1078,  839, 1030, 1030, 1095,  842,
      852,  852,  854,  854, 1037, 1037, 1098, 1028, 1039, 1039,
     1099, 1031, 1042, 1042,  859,  859, 1100,  855, 1045, 1045,
      864,  864, 1101, 1040, 1062, 1062, 1102, 1043, 1074, 1074,
      891,  891, 1103, 1046,  897,  897, 1093, 1093, 1104, 1063,
     1094, 1094, 1105,  892,  900,  900, 1096, 1096, 1106,  898,
      912,  912, 1107, 1108, 1108, 1109, 1110,  901, 1111,  915,
      915, 1097, 1041, 1079, 1080, 1081, 1112, 1113, 1082, 1083,
     1084, 1085, 1086, 1087,  916, 1088, 1089, 1090, 1091, 1092,
     1114, 1114,  923,  923, 1117, 1117, 1120,  927,  927, 1115,

     1121, 1121, 1122, 1123, 1124, 1116, 1125, 1126, 1127, 1118,
     1128, 1129,  928, 1130, 1131, 1132, 1133, 1134, 1134,  944,
      944, 1136, 1136,  946,  946, 1119, 1137, 1137, 1138, 1139,
     1140, 1135, 1141,  945, 1142, 1143, 1144,  947, 1145, 1146,
     1147, 1148, 1149, 1150,  963,  963, 1151,  964, 1152,  965,
      966,  966, 1153, 1154, 1155, 1156, 1157, 1158,  975,  975,
     1159, 1160, 1160, 1162, 1163, 1164,  981,  981, 1165, 1165,
     1166, 1166, 1168, 1169, 1170, 1161,  987,  987, 1171, 1171,
     1172,  982, 1173, 1174, 1175, 1167, 1176, 1176, 1178, 1179,
     1180,  988,  996,  996, 1181, 1182, 1183, 1184, 1185, 1186,

     1187, 1177, 1005, 1005, 1188, 1189, 1190, 1191, 1191, 1010,
     1010, 1207, 1207, 1012, 1012, 1208, 1208, 1210, 1211, 1212,
     1213, 1216, 1192, 1217, 1011, 1218, 1193, 1194, 1195, 1219,
     1209, 1196, 1197, 1198, 1199, 1200, 1201, 1220, 1202, 1203,
     1204, 1205, 1206, 1214, 1214, 1022, 1022, 1024, 1024, 1221,
     1027, 1027, 1222, 1222, 1223, 1030, 1030, 1225, 1215, 1224,
     1224, 1226, 1227, 1228, 1238, 1028, 1229, 1229, 1037, 1037,
     1031, 1231, 1231, 1039, 1039, 1234, 1234, 1235, 1235, 1042,
     1042, 1230, 1237, 1237, 1045, 1045, 1232, 1240, 1040, 1239,
     1239, 1245, 1236, 1246, 1043, 1241, 1241, 1243, 1243, 1046,

     1247, 1247, 1233, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1242, 1256, 1244, 1257, 1259, 1248, 1062, 1062, 1258, 1258,
     1260, 1261, 1262, 1264, 1265, 1266, 1267, 1074, 1074, 1263,
     1268, 1063, 1269, 1269, 1272, 1273, 1274, 1278, 1275, 1279,
     1280, 1270, 1276, 1283, 1284, 1281, 1285, 1271, 1277, 1282,
     1287, 1288, 1286, 1290, 1294, 1295, 1296, 1291, 1093, 1093,
     1094, 1094, 1298, 1292, 1096, 1096, 1293, 1297, 1297, 1289,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1097,
     1108, 1108, 1308, 1308, 1311, 1312, 1313, 1314, 1315, 1114,
     1114, 1319, 1316, 1316, 1117, 1117, 1320, 1309, 1115, 1318,

     1318, 1310, 1121, 1121, 1116, 1317, 1321, 1322, 1323, 1118,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1330, 1333, 1334,
     1134, 1134, 1335, 1335, 1136, 1136, 1137, 1137, 1336, 1337,
     1331, 1338, 1339, 1340, 1135, 1351, 1352, 1353, 1356, 1357,
     1354, 1354, 1332, 1341, 1342, 1358, 1343, 1359, 1359, 1361,
     1361, 1344, 1345, 1346, 1355, 1347, 1348, 1349, 1363, 1364,
     1350, 1360, 1365, 1362, 1366, 1367, 1160, 1160, 1368, 1368,
     1373, 1369, 1374, 1370, 1371, 1371, 1165, 1165, 1166, 1166,
     1161, 1375, 1375, 1376, 1377, 1378, 1171, 1171, 1379, 1372,
     1380, 1381, 1382, 1167, 1176, 1176, 1383, 1383, 1384, 1385,

     1386, 1386, 1388, 1389, 1391, 1392, 1392, 1394, 1395, 1177,
     1390, 1396, 1397, 1397, 1399, 1387, 1400, 1191, 1191, 1402,
     1393, 1401, 1401, 1406, 1403, 1407, 1408, 1398, 1404, 1409,
     1411, 1412, 1192, 1410, 1405, 1413, 1415, 1416, 1418, 1422,
     1423, 1414, 1419, 1207, 1207, 1208, 1208, 1425, 1420, 1424,
     1424, 1421, 1426, 1427, 1428, 1417, 1214, 1214, 1429, 1429,
     1209, 1430, 1431, 1432, 1433, 1434, 1435, 1222, 1222, 1436,
     1436, 1215, 1224, 1224, 1439, 1440, 1441, 1442, 1229, 1229,
     1443, 1443, 1231, 1231, 1437, 1444, 1444, 1445, 1438, 1234,
     1234, 1235, 1235, 1230, 1446, 1446, 1447, 1232, 1237, 1237,

     1239, 1239, 1448, 1241, 1241, 1451, 1236, 1449, 1449, 1243,
     1243, 1450, 1450, 1452, 1247, 1247, 1453, 1453, 1242, 1454,
     1455, 1456, 1457, 1458, 1244, 1459, 1460, 1461, 1462, 1248,
     1258, 1258, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1269,
     1269, 1470, 1471, 1471, 1473, 1474, 1475, 1476, 1270, 1477,
     1478, 1479, 1480, 1481, 1271, 1472, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1297, 1297, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1308, 1308, 1506, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1512, 1316, 1316, 1513, 1514, 1309, 1318, 1318,

     1515, 1516, 1517, 1518, 1519, 1520, 1317, 1521, 1522, 1523,
     1524, 1330, 1330, 1525, 1525, 1526, 1527, 1528, 1335, 1335,
     1529, 1530, 1530, 1532, 1535, 1331, 1533, 1533, 1536, 1537,
     1538, 1540, 1541, 1542, 1543, 1531, 1544, 1545, 1546, 1547,
     1534, 1548, 1539, 1549, 1354, 1354, 1550, 1550, 1553, 1551,
     1554, 1552, 1555, 1359, 1359, 1556, 1556, 1560, 1355, 1361,
     1361, 1557, 1557, 1561, 1558, 1564, 1559, 1360, 1562, 1562,
     1565, 1368, 1368, 1362, 1369, 1567, 1370, 1371, 1371, 1566,
     1566, 1568, 1563, 1375, 1375, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1372, 1383, 1383, 1576, 1576, 1578, 1578, 1386,

     1386, 1580, 1580, 1581, 1582, 1583, 1584, 1392, 1392, 1586,
     1577, 1587, 1579, 1591, 1387, 1585, 1585, 1588, 1588, 1397,
     1397, 1594, 1393, 1590, 1590, 1592, 1592, 1401, 1401, 1595,
     1596, 1597, 1589, 1598, 1398, 1599, 1600, 1601, 1602, 1603,
     1593, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1424, 1424, 1616, 1617, 1618, 1619, 1619,
     1429, 1429, 1621, 1622, 1623, 1624, 1625, 1626, 1436, 1436,
     1627, 1627, 1628, 1620, 1629, 1630, 1631, 1632, 1443, 1443,
     1444, 1444, 1633, 1437, 1446, 1446, 1634, 1635, 1449, 1449,
     1450, 1450, 1636, 1637, 1637, 1453, 1453, 1640, 1641, 1642,

     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1638, 1651,
     1652, 1653, 1654, 1655, 1655, 1471, 1471, 1656, 1657, 1658,
     1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1472, 1667,
     1668, 1669, 1670, 1672, 1673, 1671, 1674, 1675, 1676, 1677,
     1678, 1680, 1681, 1682, 1683, 1684, 1685, 1639, 1686, 1687,
     1688, 1679, 1689, 1690, 1506, 1506, 1691, 1692, 1693, 1694,
     1695, 1512, 1512, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
     1705, 1706, 1703, 1707, 1708, 1525, 1525, 1709, 1710, 1711,
     1704, 1712, 1530, 1530, 1713, 1713, 1714, 1533, 1533, 1715,
     1715, 1716, 1717, 1718, 1722, 1719, 1531, 1720, 1720, 1723,

     1724, 1534, 1725, 1726, 1727, 1728, 1729, 1731, 1732, 1733,
     1734, 1721, 1730, 1550, 1550, 1735, 1551, 1736, 1552, 1737,
     1738, 1556, 1556, 1557, 1557, 1739, 1558, 1740, 1559, 1741,
     1742, 1562, 1562, 1743, 1743, 1744, 1745, 1566, 1566, 1746,
     1747, 1748, 1749, 1750, 1751, 1563, 1752, 1753, 1754, 1754,
     1576, 1576, 1756, 1756, 1578, 1578, 1757, 1757, 1580, 1580,
     1758, 1759, 1760, 1755, 1761, 1577, 1585, 1585, 1762, 1579,
     1763, 1588, 1588, 1764, 1764, 1590, 1590, 1765, 1592, 1592,
     1766, 1766, 1767, 1767, 1770, 1771, 1589, 1772, 1773, 1774,
     1775, 1776, 1777, 1593, 1778, 1779, 1779, 1768, 1782, 1783,

     1785, 1786, 1784, 1787, 1788, 1789, 1790, 1791, 1793, 1797,
     1780, 1794, 1794, 1798, 1799, 1619, 1619, 1801, 1792, 1800,
     1800, 1802, 1803, 1804, 1805, 1805, 1795, 1807, 1627, 1627,
     1620, 1808, 1809, 1810, 1811, 1781, 1769, 1812, 1813, 1806,
     1814, 1815, 1816, 1637, 1637, 1817, 1817, 1818, 1818, 1820,
     1821, 1822, 1823, 1824, 1825, 1796, 1826, 1827, 1638, 1828,
     1829, 1830, 1819, 1831, 1655, 1655, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
     1845, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1858, 1859, 1846, 1860, 1861, 1862, 1863, 1864,

     1865, 1866, 1867, 1868, 1869, 1870, 1871, 1871, 1873, 1874,
     1875, 1876, 1877, 1878, 1879, 1880, 1880, 1882, 1882, 1884,
     1885, 1872, 1886, 1887, 1888, 1713, 1713, 1889, 1889, 1881,
     1891, 1883, 1715, 1715, 1892, 1893, 1894, 1720, 1720, 1896,
     1896, 1890, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
     1895, 1721, 1905, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
     1914, 1743, 1743, 1915, 1915, 1917, 1918, 1919, 1919, 1921,
     1921, 1925, 1906, 1923, 1923, 1926, 1927, 1916, 1928, 1754,
     1754, 1930, 1920, 1931, 1922, 1929, 1929, 1932, 1924, 1756,
     1756, 1757, 1757, 1933, 1755, 1934, 1935, 1764, 1764, 1936,

     1766, 1766, 1767, 1767, 1937, 1937, 1938, 1939, 1940, 1941,
     1942, 1943, 1944, 1945, 1946, 1947, 1949, 1768, 1779, 1779,
     1948, 1948, 1950, 1950, 1952, 1953, 1954, 1955, 1956, 1957,
     1957, 1959, 1960, 1780, 1961, 1962, 1963, 1951, 1794, 1794,
     1964, 1964, 1965, 1966, 1958, 1967, 1968, 1800, 1800, 1969,
     1970, 1970, 1972, 1795, 1973, 1805, 1805, 1974, 1974, 1975,
     1976, 1977, 1978, 1979, 1979, 1971, 1981, 1982, 1982, 1986,
     1806, 1984, 1984, 1987, 1817, 1817, 1818, 1818, 1980, 1988,
     1988, 1989, 1983, 1990, 1991, 1998, 1985, 1992, 1992, 1995,
     1995, 1819, 1999, 2000, 2001, 2002, 1993, 2005, 1996, 2003,

     2003, 2006, 1994, 2007, 1997, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 2014, 2016, 2004, 2017, 1845, 1845, 2018, 2018,
     2019, 2020, 2021, 2022, 2023, 2026, 2015, 2024, 2024, 2027,
     2027, 1846, 2029, 2030, 2031, 2032, 2032, 2034, 2035, 2036,
     2037, 2038, 2025, 2039, 2028, 2040, 2041, 2043, 2044, 2045,
     2033, 1871, 1871, 2046, 2046, 2042, 2047, 2048, 2049, 2050,
     2051, 2052, 2053, 1880, 1880, 2056, 1872, 2054, 2054, 1882,
     1882, 2055, 2055, 2057, 2058, 2059, 2060, 1881, 1889, 1889,
     2061, 2061, 2062, 1883, 2063, 2064, 2065, 2066, 1896, 1896,
     2067, 2067, 1890, 2069, 2070, 2071, 2072, 2073, 2073, 2075,

     2076, 2077, 2078, 2079, 2068, 2080, 2080, 2082, 2083, 2084,
     2085, 2074, 2086, 2087, 1915, 1915, 2088, 2088, 2089, 2081,
     2090, 1919, 1919, 2091, 2091, 1921, 1921, 2094, 1916, 2092,
     2092, 1923, 1923, 2093, 2093, 2095, 1920, 2096, 2096, 2102,
     1922, 2098, 2098, 1929, 1929, 2103, 1924, 2100, 2100, 2104,
     2105, 2106, 2097, 2107, 1937, 1937, 2099, 2108, 2109, 2110,
     2111, 2112, 2101, 2113, 2114, 2115, 2115, 2117, 2117, 2119,
     1948, 1948, 2120, 1950, 1950, 2121, 2121, 2122, 2123, 2124,
     2116, 2125, 2118, 2126, 1957, 1957, 2127, 2127, 1951, 2128,
     2128, 2130, 2131, 2131, 2133, 2134, 1964, 1964, 2135, 1958,

     2136, 2137, 2138, 2139, 2129, 1970, 1970, 2132, 2140, 2140,
     2141, 2142, 1974, 1974, 2143, 2144, 2144, 2146, 2148, 2150,
     1971, 1979, 1979, 2149, 2149, 2153, 2147, 1982, 1982, 2154,
     2145, 2151, 2151, 1984, 1984, 2155, 1980, 2152, 2152, 1988,
     1988, 2156, 1983, 2157, 1992, 1992, 2158, 2161, 1985, 2159,
     2159, 1995, 1995, 1993, 2162, 2162, 2164, 2165, 2166, 1994,
     1996, 2169, 2160, 2167, 2167, 2171, 1997, 2163, 2003, 2003,
     2170, 2170, 2168, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
     2179, 2014, 2014, 2004, 2180, 2180, 2181, 2181, 2183, 2018,
     2018, 2184, 2185, 2186, 2187, 2188, 2015, 2024, 2024, 2189,

     2189, 2182, 2190, 2027, 2027, 2191, 2191, 2192, 2193, 2194,
     2032, 2032, 2025, 2195, 2195, 2196, 2197, 2198, 2028, 2199,
     2200, 2201, 2202, 2203, 2204, 2033, 2205, 2206, 2046, 2046,
     2207, 2208, 2209, 2209, 2215, 2211, 2213, 2213, 2216, 2216,
     2054, 2054, 2055, 2055, 2218, 2219, 2210, 2212, 2220, 2221,
     2214, 2222, 2217, 2061, 2061, 2223, 2224, 2225, 2226, 2226,
     2228, 2067, 2067, 2229, 2229, 2230, 2232, 2233, 2234, 2073,
     2073, 2236, 2227, 2235, 2235, 2068, 2237, 2238, 2239, 2240,
     2080, 2080, 2242, 2074, 2241, 2241, 2231, 2243, 2244, 2245,
     2246, 2247, 2088, 2088, 2081, 2248, 2249, 2091, 2091, 2092,

     2092, 2093, 2093, 2250, 2251, 2096, 2096, 2252, 2252, 2098,
     2098, 2253, 2253, 2100, 2100, 2254, 2254, 2255, 2256, 2257,
     2097, 2258, 2258, 2260, 2099, 2261, 2262, 2263, 2101, 2264,
     2265, 2266, 2267, 2268, 2115, 2115, 2259, 2269, 2269, 2117,
     2117, 2270, 2270, 2271, 2271, 2273, 2121, 2121, 2274, 2116,
     2275, 2276, 2277, 2278, 2118, 2127, 2127, 2280, 2272, 2128,
     2128, 2279, 2279, 2131, 2131, 2281, 2281, 2282, 2283, 2284,
     2285, 2286, 2287, 2288, 2129, 2140, 2140, 2291, 2132, 2289,
     2289, 2292, 2144, 2144, 2293, 2293, 2294, 2295, 2296, 2149,
     2149, 2297, 2151, 2151, 2290, 2152, 2152, 2145, 2298, 2299,

     2300, 2301, 2302, 2303, 2303, 2159, 2159, 2304, 2305, 2305,
     2162, 2162, 2306, 2307, 2308, 2309, 2167, 2167, 2160, 2310,
     2311, 2170, 2170, 2163, 2312, 2168, 2313, 2314, 2315, 2316,
     2317, 2318, 2319, 2319, 2321, 2180, 2180, 2181, 2181, 2322,
     2322, 2323, 2324, 2324, 2326, 2327, 2328, 2320, 2329, 2189,
     2189, 2330, 2182, 2191, 2191, 2331, 2332, 2325, 2333, 2195,
     2195, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,
     2343, 2344, 2345, 2209, 2209, 2346, 2346, 2347, 2348, 2213,
     2213, 2349, 2349, 2350, 2216, 2216, 2354, 2210, 2355, 2351,
     2351, 2356, 2352, 2214, 2353, 2357, 2358, 2359, 2217, 2360,

     2360, 2362, 2226, 2226, 2363, 2363, 2364, 2229, 2229, 2365,
     2366, 2370, 2371, 2361, 2372, 2379, 2227, 2235, 2235, 2367,
     2373, 2373, 2375, 2375, 2368, 2380, 2369, 2377, 2377, 2241,
     2241, 2381, 2382, 2383, 2374, 2384, 2376, 2385, 2386, 2387,
     2388, 2378, 2389, 2390, 2252, 2252, 2253, 2253, 2254, 2254,
     2391, 2392, 2393, 2258, 2258, 2394, 2394, 2395, 2396, 2397,
     2398, 2399, 2400, 2401, 2402, 2402, 2404, 2406, 2259, 2269,
     2269, 2270, 2270, 2271, 2271, 2405, 2405, 2407, 2407, 2403,
     2409, 2410, 2411, 2412, 2279, 2279, 2413, 2414, 2272, 2281,
     2281, 2415, 2408, 2416, 2417, 2418, 2419, 2420, 2289, 2289,

     2421, 2421, 2422, 2423, 2293, 2293, 2424, 2425, 2425, 2427,
     2428, 2429, 2430, 2290, 2431, 2432, 2433, 2303, 2303, 2434,
     2305, 2305, 2426, 2435, 2436, 2437, 2438, 2438, 2440, 2440,
     2441, 2442, 2443, 2444, 2445, 2445, 2447, 2447, 2449, 2319,
     2319, 2439, 2450, 2450, 2451, 2322, 2322, 2452, 2454, 2446,
     2455, 2448, 2324, 2324, 2320, 2453, 2453, 2456, 2457, 2458,
     2458, 2460, 2461, 2462, 2463, 2464, 2465, 2325, 2466, 2467,
     2468, 2469, 2470, 2471, 2459, 2472, 2346, 2346, 2473, 2474,
     2349, 2349, 2475, 2351, 2351, 2477, 2352, 2478, 2353, 2479,
     2480, 2481, 2482, 2490, 2476, 2483, 2483, 2485, 2485, 2360,

     2360, 2487, 2487, 2488, 2488, 2363, 2363, 2491, 2492, 2484,
     2493, 2486, 2494, 2361, 2495, 2496, 2497, 2489, 2498, 2373,
     2373, 2499, 2499, 2375, 2375, 2500, 2500, 2377, 2377, 2501,
     2501, 2502, 2503, 2374, 2504, 2505, 2506, 2376, 2507, 2508,
     2509, 2378, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2516,
     2394, 2394, 2518, 2519, 2519, 2521, 2522, 2523, 2523, 2525,
     2525, 2527, 2529, 2517, 2402, 2402, 2528, 2528, 2520, 2405,
     2405, 2530, 2524, 2532, 2526, 2407, 2407, 2531, 2531, 2403,
     2533, 2534, 2535, 2536, 2536, 2538, 2539, 2540, 2541, 2542,
     2408, 2543, 2544, 2421, 2421, 2545, 2546, 2546, 2537, 2548,

     2425, 2425, 2549, 2549, 2550, 2551, 2552, 2552, 2554, 2555,
     2556, 2547, 2557, 2558, 2559, 2426, 2560, 2438, 2438, 2561,
     2561, 2553, 2440, 2440, 2562, 2563, 2564, 2565, 2445, 2445,
     2566, 2566, 2439, 2447, 2447, 2567, 2567, 2568, 2450, 2450,
     2569, 2570, 2571, 2446, 2453, 2453, 2572, 2573, 2448, 2458,
     2458, 2574, 2574, 2575, 2575, 2577, 2578, 2579, 2580, 2581,
     2582, 2583, 2583, 2585, 2459, 2586, 2586, 2590, 2576, 2588,
     2588, 2591, 2592, 2593, 2594, 2595, 2584, 2483, 2483, 2587,
     2601, 2596, 2596, 2589, 2597, 2604, 2598, 2485, 2485, 2599,
     2599, 2484, 2487, 2487, 2488, 2488, 2600, 2600, 2602, 2602,

     2605, 2486, 2606, 2607, 2608, 2609, 2610, 2611, 2489, 2499,
     2499, 2612, 2603, 2500, 2500, 2501, 2501, 2613, 2614, 2614,
     2616, 2617, 2617, 2619, 2620, 2621, 2622, 2623, 2624, 2625,
     2625, 2627, 2615, 2516, 2516, 2618, 2628, 2628, 2629, 2519,
     2519, 2630, 2630, 2631, 2626, 2632, 2523, 2523, 2517, 2633,
     2633, 2525, 2525, 2635, 2520, 2634, 2634, 2528, 2528, 2636,
     2637, 2524, 2531, 2531, 2638, 2641, 2526, 2639, 2639, 2642,
     2536, 2536, 2643, 2643, 2644, 2644, 2646, 2647, 2647, 2649,
     2650, 2650, 2640, 2652, 2652, 2537, 2654, 2655, 2655, 2645,
     2546, 2546, 2648, 2657, 2657, 2651, 2658, 2659, 2653, 2549,

     2549, 2660, 2656, 2552, 2552, 2547, 2661, 2661, 2662, 2663,
     2664, 2665, 2666, 2561, 2561, 2667, 2668, 2669, 2553, 2566,
     2566, 2567, 2567, 2670, 2671, 2672, 2673, 2674, 2574, 2574,
     2575, 2575, 2675, 2675, 2676, 2677, 2678, 2679, 2680, 2583,
     2583, 2681, 2681, 2682, 2685, 2576, 2586, 2586, 2683, 2683,
     2588, 2588, 2684, 2684, 2584, 2686, 2687, 2688, 2688, 2690,
     2587, 2691, 2596, 2596, 2589, 2597, 2692, 2598, 2693, 2599,
     2599, 2689, 2600, 2600, 2694, 2602, 2602, 2695, 2695, 2696,
     2696, 2698, 2698, 2700, 2701, 2701, 2703, 2704, 2705, 2603,
     2706, 2706, 2708, 2697, 2709, 2699, 2614, 2614, 2702, 2710,

     2710, 2711, 2617, 2617, 2707, 2715, 2712, 2712, 2719, 2713,
     2615, 2714, 2717, 2717, 2720, 2720, 2618, 2716, 2722, 2723,
     2723, 2625, 2625, 2725, 2725, 2726, 2718, 2628, 2628, 2721,
     2727, 2727, 2630, 2630, 2724, 2729, 2626, 2730, 2633, 2633,
     2634, 2634, 2731, 2732, 2735, 2728, 2733, 2733, 2639, 2639,
     2736, 2736, 2737, 2738, 2643, 2643, 2644, 2644, 2739, 2739,
     2740, 2734, 2742, 2640, 2647, 2647, 2741, 2741, 2650, 2650,
     2745, 2645, 2743, 2743, 2652, 2652, 2744, 2744, 2747, 2648,
     2655, 2655, 2748, 2651, 2746, 2746, 2657, 2657, 2751, 2653,
     2749, 2749, 2661, 2661, 2752, 2656, 2753, 2754, 2755, 2756,

     2756, 2758, 2758, 2760, 2765, 2750, 2761, 2761, 2763, 2763,
     2675, 2675, 2766, 2767, 2757, 2768, 2759, 2769, 2681, 2681,
     2770, 2762, 2775, 2764, 2683, 2683, 2684, 2684, 2771, 2771,
     2773, 2773, 2688, 2688, 2776, 2776, 2777, 2778, 2778, 2780,
     2695, 2695, 2772, 2783, 2774, 2785, 2689, 2696, 2696, 2781,
     2781, 2779, 2698, 2698, 2782, 2782, 2701, 2701, 2784, 2784,
     2788, 2697, 2786, 2786, 2706, 2706, 2699, 2789, 2789, 2790,
     2702, 2791, 2791, 2710, 2710, 2793, 2787, 2794, 2707, 2712,
     2712, 2795, 2713, 2796, 2714, 2792, 2797, 2717, 2717, 2798,
     2798, 2799, 2720, 2720, 2800, 2800, 2801, 2723, 2723, 2802,

     2802, 2718, 2725, 2725, 2803, 2727, 2727, 2721, 2804, 2804,
     2805, 2805, 2724, 2807, 2807, 2809, 2809, 2811, 2733, 2733,
     2728, 2812, 2812, 2813, 2813, 2806, 2736, 2736, 2808, 2819,
     2810, 2815, 2815, 2734, 2817, 2817, 2739, 2739, 2814, 2741,
     2741, 2820, 2743, 2743, 2744, 2744, 2816, 2821, 2822, 2818,
     2746, 2746, 2823, 2749, 2749, 2824, 2824, 2825, 2826, 2827,
     2828, 2756, 2756, 2829, 2829, 2758, 2758, 2831, 2750, 2830,
     2830, 2761, 2761, 2832, 2832, 2834, 2757, 2763, 2763, 2835,
     2759, 2833, 2833, 2836, 2837, 2838, 2762, 2839, 2771, 2771,
     2840, 2840, 2764, 2773, 2773, 2841, 2841, 2842, 2776, 2776,

     2843, 2843, 2772, 2778, 2778, 2845, 2845, 2774, 2846, 2846,
     2781, 2781, 2782, 2782, 2844, 2848, 2848, 2779, 2784, 2784,
     2850, 2852, 2847, 2786, 2786, 2851, 2851, 2789, 2789, 2849,
     2853, 2791, 2791, 2854, 2854, 2855, 2855, 2787, 2857, 2858,
     2798, 2798, 2859, 2800, 2800, 2792, 2860, 2802, 2802, 2856,
     2861, 2861, 2804, 2804, 2805, 2805, 2863, 2863, 2807, 2807,
     2864, 2864, 2809, 2809, 2866, 2862, 2865, 2865, 2870, 2806,
     2812, 2812, 2871, 2808, 2813, 2813, 2872, 2810, 2867, 2867,
     2815, 2815, 2868, 2868, 2817, 2817, 2869, 2869, 2873, 2814,
     2874, 2824, 2824, 2875, 2876, 2816, 2877, 2878, 2879, 2818,

     2829, 2829, 2830, 2830, 2832, 2832, 2833, 2833, 2880, 2881,
     2882, 2883, 2840, 2840, 2841, 2841, 2884, 2843, 2843, 2885,
     2885, 2845, 2845, 2846, 2846, 2886, 2886, 2848, 2848, 2887,
     2887, 2844, 2888, 2851, 2851, 2889, 2890, 2847, 2854, 2854,
     2896, 2849, 2855, 2855, 2891, 2891, 2892, 2892, 2894, 2894,
     2897, 2861, 2861, 2898, 2898, 2903, 2856, 2863, 2863, 2904,
     2893, 2905, 2895, 2864, 2864, 2906, 2862, 2865, 2865, 2899,
     2899, 2867, 2867, 2868, 2868, 2869, 2869, 2901, 2901, 2907,
     2908, 2909, 2910, 2913, 2900, 2911, 2911, 2885, 2885, 2886,
     2886, 2914, 2902, 2887, 2887, 2915, 2915, 2891, 2891, 2912,

     2892, 2892, 2917, 2917, 2894, 2894, 2918, 2918, 2929, 2916,
     2919, 2919, 2921, 2921, 2893, 2898, 2898, 2934, 2895, 2899,
     2899, 2923, 2923, 2935, 2920, 2901, 2901, 2922, 2924, 2924,
     2925, 2925, 2927, 2927, 2900, 2930, 2930, 2932, 2932, 2937,
     2902, 2911, 2911, 2936, 2936, 2926, 2949, 2928, 2938, 2938,
     2931, 2950, 2933, 2915, 2915, 2912, 2940, 2940, 2917, 2917,
     2918, 2918, 2939, 2919, 2919, 2941, 2941, 2916, 2921, 2921,
     2942, 2942, 2923, 2923, 2924, 2924, 2951, 2920, 2925, 2925,
     2943, 2943, 2954, 2922, 2927, 2927, 2944, 2944, 2945, 2945,
     2930, 2930, 2955, 2926, 2947, 2947, 2932, 2932, 2956, 2928,

     2948, 2948, 2957, 2946, 2958, 2931, 2936, 2936, 2938, 2938,
     2959, 2933, 2952, 2952, 2940, 2940, 2941, 2941, 2942, 2942,
     2943, 2943, 2939, 2944, 2944, 2945, 2945, 2953, 2953, 2947,
     2947, 2948, 2948, 2952, 2952, 2953, 2953, 2960, 2960, 2964,
     2946, 2962, 2962, 2960, 2960, 2965, 2965, 2962, 2962, 2966,
     2966, 2967, 2961, 2965, 2965,  994, 2963,  993, 2961, 2966,
     2966,  992, 2963, 2968, 2968, 2968, 2968, 2970, 2970, 2970,
     2970,  991,  986,  985,  984,  980,  979, 2969,  978, 2969,
       24,   24,   24,   24,   35,   35,   35,   35,   36,   36,
       36,   36,   37,   37,   37,   37,   38,   38,   38,   38,

       39,   39,   39,   39,   42,   42,   42,   42,  102,  977,
      102,  102,  103,  103,  976,  103,  104,  104,  104,  974,
      973,  972,  971,  970,  969,  968,  967,  962,  961,  960,
      959,  958,  957,  956,  955,  954,  953,  952,  951,  950,
      949,  948,  943,  942,  941,  940,  939,  938,  937,  936,
      935,  934,  933,  932,  931,  930,  929,  926,  925,  924,
      922,  921,  920,  919,  918,  917,  914,  913,  911,  910,
      909,  908,  907,  906,  905,  904,  903,  902,  899,  894,
      893,  890,  887,  886,  885,  884,  883,  882,  881,  880,
      879,  878,  877,  874,  873,  872,  871,  870,  869,  868,

      867,  866,  865,  863,  862,  858,  857,  856,  853,  851,
      850,  849,  848,  847,  846,  845,  844,  843,  840,  837,
      836,  835,  833,  832,  831,  830,  829,  828,  825,  822,
      821,  820,  817,  816,  815,  814,  813,  812,  811,  806,
      805,  804,  803,  802,  800,  799,  798,  796,  795,  794,
      791,  789,  788,  785,  784,  780,  779,  778,  772,  771,
      770,  769,  768,  767,  766,  765,  764,  759,  758,  757,
      755,  754,  753,  752,  751,  750,  749,  748,  744,  743,
      742,  741,  740,  739,  738,  737,  733,  732,  731,  728,
      726,  725,  724,  723,  722,  721,  720,  719,  718,  715,

      714,  713,  712,  711,  710,  709,  708,  707,  706,  702,
      699,  698,  697,  693,  692,  691,  690,  689,  688,  687,
      684,  683,  682,  681,  680,  678,  677,  676,  675,  674,
      673,  670,  663,  662,  661,  656,  655,  654,  651,  650,
      649,  648,  647,  646,  645,  642,  641,  640,  639,  634,
      628,  627,  621,  619,  618,  617,  616,  615,  614,  612,
      611,  610,  609,  603,  601,  600,  599,  598,  590,  589,
      588,  587,  586,  582,  581,  580,  579,  578,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  557,  556,  555,  552,  551,  550,  548,  547,

      546,  545,  544,  543,  542,  539,  536,  532,  531,  530,
      525,  524,  523,  520,  519,  518,  517,  516,  515,  514,
      511,  510,  509,  506,  501,  500,  494,  492,  491,  490,
      489,  488,  487,  485,  484,  483,  482,  476,  475,  474,
      473,  472,  466,  465,  464,  463,  462,  457,  456,  455,
      454,  451,  450,  449,  446,  445,  444,  441,  440,  439,
      438,  437,  436,  435,  432,  431,  430,  423,  417,  416,
      415,  414,  413,  412,  408,  405,  400,  399,  398,  397,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,

      371,  370,  369,  359,  358,  357,  354,  353,  352,  351,
      348,  347,  346,  345,  342,  341,  340,  337,  336,  335,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  317,
      311,  310,  309,  308,  307,  306,  305,  304,  301,  296,
      295,  294,  293,  292,  283,  260,  251,  246,  243,  238,
      237,  236,  235,  234,  233,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  218,  214,  213,  212,  209,
      208,  207,  206,  205,  205,  204,  195,  173,  164,  159,
      138,  135,  134,  116,  113,  112,  111,  110,  107,  101,
      100,   75,  106,  105,  101,  100,   75,   71,   71, 2971,

       35,   35,   35,   35,   35,   35,   19, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971
    } ;

static yyconst flex_int16_t yy_chk[4872] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,    0,   16,    1,  539,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,   63,  539,   27,
       27,   56,   64,   26,   61,   65,   72,   72,   47,   27,
       27,   27,   56,   90,   61,  806,   64,   63,   90,   66,
       27,   65,   64,    1,    2,    2,    2,    2,    2,   66,
        2,   83,    2,    2,    2,    2,    2,    2,    2,   27,
        2,    2,   83,   29,   29,   93,   48,   48,  242,    2,
      242,   29,    2,   29,   29,   29,   48,   48,   48,   93,

       67,   82,   67,  678,   29,   67,   68,   48,   74,   74,
       68,   82,   74,   74,   74,   76,   76,   67,  811,   86,
      678,   95,   67,   29,   98,   86,   48,    2,   21,   21,
       68,   86,   21,   98,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   95,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       24,   24,   85,  205,  205,  110,   85,   24,   24,   24,

       24,   24,   24,   24,  110,   24,  116,   87,   85,  134,
       91,   50,   50,  116,   24,   87,  134,   24,   91,   50,
      127,   50,   50,   50,  812,  142,   24,   24,   24,   24,
      127,   24,   50,   24,   24,  135,  142,   24,   24,   24,
       24,  135,  141,   24,   24,   24,   24,   24,   30,   73,
       73,   50,  141,  144,   94,   30,   89,  144,   89,   73,
       73,   73,   30,  245,  245,   94,   89,   30,   94,  144,
       73,   94,   89,  146,  149,   30,  136,  136,  136,  149,
      813,  146,   30,   30,   30,   30,   30,   30,   30,   73,
       30,  152,  530,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  150,   30,   78,  152,  137,  137,  152,  166,
      150,  814,   78,  166,  114,  114,  137,  137,  137,   78,
       78,   78,   78,   78,   78,   78,  530,   78,  114,  176,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   92,
       78,  333,   97,   92,  176,  176,   97,  139,  139,  145,
       92,  699,   97,   92,   97,  145,  151,   97,   97,   92,
      151,  145,  139,  154,  148,  333,  148,  151,  153,  157,
      151,  180,  699,  114,  148,  180,  151,  156,  157,  153,
      148,  156,  153,  175,  175,  153,  154,  156,  178,  156,
      179,  179,  156,  156,  164,  164,  164,  191,  175,  178,

      195,  164,  211,  195,  199,  179,  204,  199,  191,  215,
      215,  218,  204,  216,  216,  329,  216,  218,  216,  217,
      217,  244,  244,  215,  329,  211,  246,  246,  251,  251,
      251,  255,  255,  217,  253,  251,  244,  265,  253,  262,
      262,  246,  263,  815,  266,  266,  255,  217,  265,  267,
      271,  271,  217,  267,  262,  279,  292,  263,  263,  266,
      283,  287,  292,  283,  287,  271,  279,  293,  293,  299,
      345,  255,  300,  300,  306,  306,  307,  307,  299,  312,
      312,  345,  293,  313,  313,  320,  320,  300,  816,  306,
      820,  307,  299,  454,  312,  321,  321,  323,  323,  350,

      320,  324,  324,  327,  454,  327,  350,  327,  341,  341,
      346,  346,  323,  352,  354,  354,  324,  327,  821,  350,
      352,  360,  360,  341,  360,  346,  360,  442,  354,  307,
      363,  363,  364,  364,  368,  368,  372,  372,  373,  373,
      388,  388,  394,  394,  363,  395,  395,  828,  368,  661,
      372,  442,  373,  829,  388,  396,  396,  324,  397,  397,
      395,  403,  403,  404,  404,  409,  409,  410,  410,  412,
      412,  413,  413,  397,  418,  418,  403,  830,  404,  831,
      409,  419,  419,  661,  412,  832,  413,  426,  426,  418,
      427,  427,  403,  429,  429,  430,  430,  433,  433,  434,

      434,  403,  426,  435,  833,  435,  693,  435,  429,  693,
      430,  835,  433,  437,  437,  403,  836,  435,  450,  450,
      455,  455,  460,  460,  413,  459,  459,  463,  437,  461,
      461,  470,  470,  450,  837,  455,  587,  460,  471,  471,
      459,  463,  477,  477,  437,  840,  470,  478,  478,  459,
      587,  430,  843,  437,  480,  480,  459,  477,  479,  479,
      486,  486,  490,  490,  493,  493,  495,  495,  844,  459,
      846,  490,  848,  479,  496,  496,  849,  490,  497,  497,
      850,  495,  498,  498,  800,  500,  500,  511,  511,  521,
      521,  522,  522,  497,  500,  524,  524,  528,  528,  851,

      500,  800,  511,  853,  521,  529,  529,  540,  540,  856,
      524,  860,  528,  541,  541,  549,  549,  553,  553,  554,
      554,  540,  558,  558,  559,  559,  560,  560,  822,  561,
      561,  553,  561,  862,  561,  863,  558,  571,  571,  865,
      560,  572,  572,  576,  576,  577,  577,  866,  577,  822,
      577,  571,  580,  580,  867,  572,  868,  576,  583,  583,
      584,  584,  585,  585,  869,  572,  580,  591,  591,  592,
      592,  596,  596,  597,  597,  584,  602,  602,  604,  604,
      605,  605,  591,  606,  606,  870,  596,  607,  607,  608,
      608,  613,  613,  604,  617,  617,  620,  620,  606,  622,

      622,  623,  623,  872,  608,  624,  624,  625,  625,  617,
      627,  627,  629,  629,  622,  635,  635,  636,  636,  873,
      624,  640,  640,  642,  642,  627,  652,  652,  653,  653,
      635,  655,  655,  659,  659,  874,  640,  875,  642,  660,
      660,  652,  664,  664,  665,  665,  655,  876,  659,  669,
      669,  679,  679,  685,  685,  686,  686,  664,  694,  694,
      877,  696,  696,  700,  700,  701,  701,  694,  702,  702,
      703,  703,  878,  694,  696,  705,  705,  716,  716,  703,
      717,  717,  880,  702,  881,  703,  720,  720,  705,  727,
      727,  882,  716,  729,  729,  730,  730,  734,  734,  736,

      736,  720,  747,  747,  753,  753,  754,  754,  729,  756,
      756,  760,  760,  883,  736,  884,  761,  761,  753,  761,
      754,  761,  773,  773,  774,  774,  885,  774,  886,  774,
      775,  775,  776,  776,  781,  781,  773,  781,  887,  781,
      786,  786,  787,  787,  775,  790,  790,  794,  794,  797,
      797,  799,  799,  888,  786,  801,  801,  807,  807,  808,
      808,  889,  794,  809,  809,  892,  799,  810,  810,  817,
      818,  818,  817,  819,  819,  823,  823,  893,  809,  824,
      824,  825,  825,  826,  826,  818,  827,  827,  834,  834,
      838,  838,  839,  839,  841,  841,  825,  894,  826,  842,

      842,  794,  845,  845,  895,  838,  847,  847,  901,  841,
      852,  852,  854,  854,  855,  855,  903,  845,  857,  857,
      904,  847,  858,  858,  859,  859,  905,  854,  861,  861,
      864,  864,  906,  857,  879,  879,  908,  858,  890,  890,
      891,  891,  909,  861,  897,  897,  898,  898,  910,  879,
      899,  899,  911,  891,  900,  900,  902,  902,  913,  897,
      912,  912,  914,  916,  916,  917,  918,  900,  919,  915,
      915,  902,  857,  896,  896,  896,  920,  921,  896,  896,
      896,  896,  896,  896,  915,  896,  896,  896,  896,  896,
      922,  922,  923,  923,  924,  924,  926,  927,  927,  922,

      928,  928,  929,  932,  933,  922,  934,  935,  936,  924,
      937,  938,  927,  939,  940,  941,  942,  943,  943,  944,
      944,  945,  945,  946,  946,  924,  947,  947,  948,  949,
      950,  943,  951,  944,  954,  955,  956,  946,  957,  958,
      959,  960,  961,  962,  963,  963,  964,  963,  965,  963,
      966,  966,  967,  968,  969,  970,  973,  974,  975,  975,
      976,  977,  977,  978,  979,  980,  981,  981,  982,  982,
      983,  983,  984,  985,  986,  977,  987,  987,  988,  988,
      989,  981,  990,  991,  992,  983,  993,  993,  994,  995,
      997,  987,  996,  996,  998,  999, 1000, 1001, 1002, 1003,

     1004,  993, 1005, 1005, 1006, 1007, 1008, 1009, 1009, 1010,
     1010, 1011, 1011, 1012, 1012, 1013, 1013, 1014, 1015, 1016,
     1017, 1019, 1009, 1020, 1010, 1021, 1009, 1009, 1009, 1023,
     1013, 1009, 1009, 1009, 1009, 1009, 1009, 1025, 1009, 1009,
     1009, 1009, 1009, 1018, 1018, 1022, 1022, 1024, 1024, 1026,
     1027, 1027, 1028, 1028, 1029, 1030, 1030, 1032, 1018, 1031,
     1031, 1033, 1034, 1035, 1044, 1027, 1036, 1036, 1037, 1037,
     1030, 1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042,
     1042, 1036, 1043, 1043, 1045, 1045, 1038, 1047, 1039, 1046,
     1046, 1050, 1041, 1051, 1042, 1048, 1048, 1049, 1049, 1045,

     1052, 1052, 1038, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1048, 1060, 1049, 1061, 1064, 1052, 1062, 1062, 1063, 1063,
     1065, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1074, 1068,
     1075, 1062, 1076, 1076, 1077, 1078, 1079, 1081, 1080, 1082,
     1083, 1076, 1080, 1085, 1086, 1084, 1087, 1076, 1080, 1084,
     1088, 1089, 1087, 1090, 1091, 1092, 1095, 1090, 1093, 1093,
     1094, 1094, 1098, 1090, 1096, 1096, 1090, 1097, 1097, 1089,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1096,
     1108, 1108, 1109, 1109, 1110, 1111, 1112, 1113, 1115, 1114,
     1114, 1119, 1116, 1116, 1117, 1117, 1120, 1109, 1114, 1118,

     1118, 1109, 1121, 1121, 1114, 1116, 1122, 1123, 1124, 1117,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1131, 1132, 1133,
     1134, 1134, 1135, 1135, 1136, 1136, 1137, 1137, 1138, 1139,
     1131, 1140, 1141, 1142, 1134, 1144, 1145, 1146, 1148, 1149,
     1147, 1147, 1131, 1143, 1143, 1150, 1143, 1153, 1153, 1154,
     1154, 1143, 1143, 1143, 1147, 1143, 1143, 1143, 1155, 1156,
     1143, 1153, 1157, 1154, 1158, 1159, 1160, 1160, 1161, 1161,
     1163, 1161, 1164, 1161, 1162, 1162, 1165, 1165, 1166, 1166,
     1160, 1167, 1167, 1168, 1169, 1170, 1171, 1171, 1172, 1162,
     1173, 1174, 1175, 1166, 1176, 1176, 1177, 1177, 1178, 1179,

     1180, 1180, 1181, 1182, 1183, 1184, 1184, 1185, 1186, 1176,
     1182, 1187, 1188, 1188, 1189, 1180, 1190, 1191, 1191, 1193,
     1184, 1192, 1192, 1195, 1194, 1196, 1197, 1188, 1194, 1198,
     1199, 1200, 1191, 1198, 1194, 1201, 1202, 1203, 1204, 1205,
     1206, 1201, 1204, 1207, 1207, 1208, 1208, 1210, 1204, 1209,
     1209, 1204, 1211, 1212, 1213, 1203, 1214, 1214, 1215, 1215,
     1208, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1222, 1223,
     1223, 1214, 1224, 1224, 1225, 1226, 1227, 1228, 1229, 1229,
     1230, 1230, 1231, 1231, 1223, 1232, 1232, 1233, 1223, 1234,
     1234, 1235, 1235, 1229, 1236, 1236, 1238, 1231, 1237, 1237,

     1239, 1239, 1240, 1241, 1241, 1245, 1235, 1242, 1242, 1243,
     1243, 1244, 1244, 1246, 1247, 1247, 1248, 1248, 1241, 1249,
     1250, 1251, 1252, 1253, 1243, 1254, 1255, 1256, 1257, 1247,
     1258, 1258, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1269,
     1269, 1270, 1271, 1271, 1272, 1274, 1275, 1276, 1269, 1277,
     1278, 1279, 1280, 1281, 1269, 1271, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
     1296, 1297, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1308, 1309, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1315, 1316, 1316, 1317, 1319, 1308, 1318, 1318,

     1320, 1321, 1322, 1323, 1324, 1325, 1316, 1326, 1327, 1328,
     1329, 1330, 1330, 1331, 1331, 1332, 1333, 1334, 1335, 1335,
     1336, 1337, 1337, 1338, 1340, 1330, 1339, 1339, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1337, 1348, 1349, 1350, 1351,
     1339, 1352, 1343, 1353, 1354, 1354, 1355, 1355, 1356, 1355,
     1357, 1355, 1358, 1359, 1359, 1360, 1360, 1363, 1354, 1361,
     1361, 1362, 1362, 1364, 1362, 1366, 1362, 1359, 1365, 1365,
     1367, 1368, 1368, 1361, 1368, 1373, 1368, 1371, 1371, 1372,
     1372, 1374, 1365, 1375, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1371, 1383, 1383, 1384, 1384, 1385, 1385, 1386,

     1386, 1387, 1387, 1388, 1389, 1390, 1391, 1392, 1392, 1394,
     1384, 1395, 1385, 1399, 1386, 1393, 1393, 1396, 1396, 1397,
     1397, 1402, 1392, 1398, 1398, 1400, 1400, 1401, 1401, 1403,
     1404, 1405, 1396, 1406, 1397, 1407, 1408, 1409, 1410, 1411,
     1400, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1424, 1425, 1426, 1427, 1428, 1428,
     1429, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1436,
     1437, 1437, 1438, 1428, 1439, 1440, 1441, 1442, 1443, 1443,
     1444, 1444, 1445, 1436, 1446, 1446, 1447, 1448, 1449, 1449,
     1450, 1450, 1451, 1452, 1452, 1453, 1453, 1454, 1455, 1456,

     1457, 1458, 1459, 1460, 1461, 1463, 1464, 1465, 1452, 1466,
     1467, 1468, 1469, 1470, 1470, 1471, 1471, 1472, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1471, 1483,
     1484, 1485, 1486, 1487, 1488, 1486, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1452, 1500, 1501,
     1502, 1493, 1503, 1505, 1506, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1512, 1513, 1514, 1515, 1516, 1517, 1519, 1520,
     1521, 1522, 1520, 1523, 1524, 1525, 1525, 1526, 1527, 1528,
     1520, 1529, 1530, 1530, 1531, 1531, 1532, 1533, 1533, 1534,
     1534, 1535, 1536, 1537, 1539, 1537, 1530, 1538, 1538, 1540,

     1541, 1533, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
     1551, 1538, 1546, 1550, 1550, 1552, 1550, 1553, 1550, 1554,
     1555, 1556, 1556, 1557, 1557, 1558, 1557, 1559, 1557, 1560,
     1561, 1562, 1562, 1563, 1563, 1564, 1565, 1566, 1566, 1567,
     1568, 1569, 1570, 1571, 1572, 1562, 1573, 1574, 1575, 1575,
     1576, 1576, 1577, 1577, 1578, 1578, 1579, 1579, 1580, 1580,
     1581, 1582, 1583, 1575, 1584, 1576, 1585, 1585, 1586, 1578,
     1587, 1588, 1588, 1589, 1589, 1590, 1590, 1591, 1592, 1592,
     1593, 1593, 1594, 1594, 1595, 1596, 1588, 1597, 1598, 1599,
     1600, 1601, 1602, 1592, 1603, 1604, 1604, 1594, 1605, 1606,

     1607, 1608, 1606, 1609, 1610, 1611, 1612, 1613, 1614, 1616,
     1604, 1615, 1615, 1617, 1618, 1619, 1619, 1621, 1613, 1620,
     1620, 1622, 1623, 1624, 1625, 1625, 1615, 1626, 1627, 1627,
     1619, 1628, 1629, 1630, 1631, 1604, 1594, 1632, 1633, 1625,
     1634, 1635, 1636, 1637, 1637, 1638, 1638, 1639, 1639, 1640,
     1644, 1645, 1646, 1647, 1648, 1615, 1649, 1650, 1637, 1651,
     1652, 1653, 1639, 1654, 1655, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
     1669, 1670, 1671, 1672, 1673, 1674, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1683, 1669, 1684, 1685, 1686, 1688, 1689,

     1690, 1691, 1692, 1693, 1695, 1696, 1697, 1697, 1699, 1700,
     1701, 1702, 1703, 1704, 1705, 1706, 1706, 1707, 1707, 1708,
     1709, 1697, 1710, 1711, 1712, 1713, 1713, 1714, 1714, 1706,
     1716, 1707, 1715, 1715, 1717, 1718, 1719, 1720, 1720, 1721,
     1721, 1714, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1719, 1720, 1730, 1731, 1732, 1733, 1736, 1737, 1738, 1741,
     1742, 1743, 1743, 1744, 1744, 1745, 1746, 1747, 1747, 1748,
     1748, 1750, 1730, 1749, 1749, 1751, 1752, 1744, 1753, 1754,
     1754, 1758, 1747, 1759, 1748, 1755, 1755, 1760, 1749, 1756,
     1756, 1757, 1757, 1761, 1754, 1762, 1763, 1764, 1764, 1765,

     1766, 1766, 1767, 1767, 1768, 1768, 1769, 1770, 1771, 1772,
     1773, 1774, 1775, 1776, 1777, 1778, 1781, 1767, 1779, 1779,
     1780, 1780, 1782, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
     1788, 1789, 1790, 1779, 1791, 1792, 1793, 1782, 1794, 1794,
     1795, 1795, 1796, 1797, 1788, 1798, 1799, 1800, 1800, 1801,
     1802, 1802, 1803, 1794, 1804, 1805, 1805, 1806, 1806, 1807,
     1808, 1809, 1810, 1811, 1811, 1802, 1812, 1813, 1813, 1815,
     1805, 1814, 1814, 1816, 1817, 1817, 1818, 1818, 1811, 1819,
     1819, 1820, 1813, 1821, 1822, 1826, 1814, 1824, 1824, 1825,
     1825, 1818, 1827, 1828, 1829, 1830, 1824, 1832, 1825, 1831,

     1831, 1833, 1824, 1834, 1825, 1835, 1836, 1837, 1838, 1839,
     1840, 1842, 1842, 1843, 1831, 1844, 1845, 1845, 1846, 1846,
     1847, 1848, 1849, 1850, 1851, 1853, 1842, 1852, 1852, 1854,
     1854, 1845, 1855, 1856, 1857, 1858, 1858, 1859, 1860, 1861,
     1862, 1863, 1852, 1864, 1854, 1865, 1867, 1868, 1869, 1870,
     1858, 1871, 1871, 1872, 1872, 1867, 1873, 1874, 1875, 1876,
     1877, 1878, 1879, 1880, 1880, 1884, 1871, 1881, 1881, 1882,
     1882, 1883, 1883, 1885, 1886, 1887, 1888, 1880, 1889, 1889,
     1890, 1890, 1891, 1882, 1892, 1893, 1894, 1895, 1896, 1896,
     1897, 1897, 1889, 1898, 1899, 1900, 1901, 1902, 1902, 1903,

     1904, 1905, 1906, 1907, 1897, 1908, 1908, 1909, 1910, 1911,
     1912, 1902, 1913, 1914, 1915, 1915, 1916, 1916, 1917, 1908,
     1918, 1919, 1919, 1920, 1920, 1921, 1921, 1925, 1915, 1922,
     1922, 1923, 1923, 1924, 1924, 1926, 1919, 1927, 1927, 1931,
     1921, 1928, 1928, 1929, 1929, 1932, 1923, 1930, 1930, 1933,
     1934, 1935, 1927, 1936, 1937, 1937, 1928, 1938, 1939, 1940,
     1941, 1942, 1930, 1943, 1944, 1945, 1945, 1946, 1946, 1947,
     1948, 1948, 1949, 1950, 1950, 1951, 1951, 1952, 1953, 1954,
     1945, 1955, 1946, 1956, 1957, 1957, 1958, 1958, 1950, 1959,
     1959, 1960, 1961, 1961, 1962, 1963, 1964, 1964, 1965, 1957,

     1966, 1967, 1968, 1969, 1959, 1970, 1970, 1961, 1971, 1971,
     1972, 1973, 1974, 1974, 1975, 1976, 1976, 1977, 1978, 1981,
     1970, 1979, 1979, 1980, 1980, 1986, 1977, 1982, 1982, 1987,
     1976, 1983, 1983, 1984, 1984, 1989, 1979, 1985, 1985, 1988,
     1988, 1990, 1982, 1991, 1992, 1992, 1993, 1996, 1984, 1994,
     1994, 1995, 1995, 1992, 1997, 1997, 1998, 1999, 2000, 1992,
     1995, 2002, 1994, 2001, 2001, 2005, 1995, 1997, 2003, 2003,
     2004, 2004, 2001, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 2014, 2003, 2015, 2015, 2016, 2016, 2017, 2018,
     2018, 2019, 2020, 2021, 2022, 2023, 2014, 2024, 2024, 2025,

     2025, 2016, 2026, 2027, 2027, 2028, 2028, 2029, 2030, 2031,
     2032, 2032, 2024, 2033, 2033, 2034, 2035, 2036, 2027, 2037,
     2039, 2040, 2041, 2042, 2043, 2032, 2044, 2045, 2046, 2046,
     2047, 2048, 2049, 2049, 2052, 2050, 2051, 2051, 2053, 2053,
     2054, 2054, 2055, 2055, 2056, 2057, 2049, 2050, 2058, 2059,
     2051, 2060, 2053, 2061, 2061, 2062, 2063, 2064, 2065, 2065,
     2066, 2067, 2067, 2068, 2068, 2069, 2070, 2071, 2072, 2073,
     2073, 2075, 2065, 2074, 2074, 2067, 2076, 2077, 2078, 2079,
     2080, 2080, 2082, 2073, 2081, 2081, 2069, 2083, 2084, 2085,
     2086, 2087, 2088, 2088, 2080, 2089, 2090, 2091, 2091, 2092,

     2092, 2093, 2093, 2094, 2095, 2096, 2096, 2097, 2097, 2098,
     2098, 2099, 2099, 2100, 2100, 2101, 2101, 2102, 2103, 2104,
     2096, 2105, 2105, 2106, 2098, 2107, 2108, 2109, 2100, 2110,
     2111, 2112, 2113, 2114, 2115, 2115, 2105, 2116, 2116, 2117,
     2117, 2118, 2118, 2119, 2119, 2120, 2121, 2121, 2122, 2115,
     2123, 2124, 2125, 2126, 2117, 2127, 2127, 2130, 2119, 2128,
     2128, 2129, 2129, 2131, 2131, 2132, 2132, 2133, 2134, 2135,
     2136, 2137, 2138, 2139, 2128, 2140, 2140, 2142, 2131, 2141,
     2141, 2143, 2144, 2144, 2145, 2145, 2146, 2147, 2148, 2149,
     2149, 2150, 2151, 2151, 2141, 2152, 2152, 2144, 2153, 2154,

     2155, 2156, 2157, 2158, 2158, 2159, 2159, 2160, 2161, 2161,
     2162, 2162, 2163, 2164, 2165, 2166, 2167, 2167, 2159, 2168,
     2169, 2170, 2170, 2162, 2171, 2167, 2172, 2173, 2174, 2175,
     2176, 2177, 2178, 2178, 2179, 2180, 2180, 2181, 2181, 2182,
     2182, 2183, 2184, 2184, 2185, 2186, 2187, 2178, 2188, 2189,
     2189, 2190, 2181, 2191, 2191, 2192, 2193, 2184, 2194, 2195,
     2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2204, 2205,
     2206, 2207, 2208, 2209, 2209, 2210, 2210, 2211, 2212, 2213,
     2213, 2214, 2214, 2215, 2216, 2216, 2218, 2209, 2219, 2217,
     2217, 2220, 2217, 2213, 2217, 2221, 2222, 2223, 2216, 2224,

     2224, 2225, 2226, 2226, 2227, 2227, 2228, 2229, 2229, 2230,
     2231, 2232, 2233, 2224, 2234, 2239, 2226, 2235, 2235, 2231,
     2236, 2236, 2237, 2237, 2231, 2240, 2231, 2238, 2238, 2241,
     2241, 2242, 2243, 2244, 2236, 2245, 2237, 2246, 2247, 2248,
     2249, 2238, 2250, 2251, 2252, 2252, 2253, 2253, 2254, 2254,
     2255, 2256, 2257, 2258, 2258, 2259, 2259, 2260, 2261, 2262,
     2263, 2264, 2265, 2266, 2267, 2267, 2268, 2273, 2258, 2269,
     2269, 2270, 2270, 2271, 2271, 2272, 2272, 2274, 2274, 2267,
     2275, 2276, 2277, 2278, 2279, 2279, 2280, 2282, 2271, 2281,
     2281, 2283, 2274, 2284, 2285, 2286, 2287, 2288, 2289, 2289,

     2290, 2290, 2291, 2292, 2293, 2293, 2294, 2295, 2295, 2296,
     2297, 2298, 2299, 2289, 2300, 2301, 2302, 2303, 2303, 2304,
     2305, 2305, 2295, 2306, 2307, 2308, 2309, 2309, 2310, 2310,
     2311, 2312, 2314, 2315, 2316, 2316, 2317, 2317, 2318, 2319,
     2319, 2309, 2320, 2320, 2321, 2322, 2322, 2323, 2326, 2316,
     2327, 2317, 2324, 2324, 2319, 2325, 2325, 2328, 2329, 2330,
     2330, 2331, 2332, 2333, 2334, 2335, 2336, 2324, 2337, 2338,
     2340, 2341, 2342, 2343, 2330, 2345, 2346, 2346, 2347, 2348,
     2349, 2349, 2350, 2351, 2351, 2352, 2351, 2353, 2351, 2354,
     2355, 2356, 2357, 2364, 2350, 2358, 2358, 2359, 2359, 2360,

     2360, 2361, 2361, 2362, 2362, 2363, 2363, 2365, 2366, 2358,
     2367, 2359, 2368, 2360, 2369, 2370, 2371, 2362, 2372, 2373,
     2373, 2374, 2374, 2375, 2375, 2376, 2376, 2377, 2377, 2378,
     2378, 2379, 2380, 2373, 2381, 2382, 2383, 2375, 2384, 2385,
     2386, 2377, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2393,
     2394, 2394, 2395, 2396, 2396, 2397, 2398, 2399, 2399, 2400,
     2400, 2401, 2404, 2393, 2402, 2402, 2403, 2403, 2396, 2405,
     2405, 2406, 2399, 2409, 2400, 2407, 2407, 2408, 2408, 2402,
     2410, 2411, 2412, 2413, 2413, 2414, 2415, 2416, 2417, 2418,
     2407, 2419, 2420, 2421, 2421, 2422, 2423, 2423, 2413, 2424,

     2425, 2425, 2426, 2426, 2427, 2428, 2429, 2429, 2430, 2431,
     2432, 2423, 2433, 2434, 2435, 2425, 2437, 2438, 2438, 2439,
     2439, 2429, 2440, 2440, 2441, 2442, 2443, 2444, 2445, 2445,
     2446, 2446, 2438, 2447, 2447, 2448, 2448, 2449, 2450, 2450,
     2451, 2452, 2454, 2445, 2453, 2453, 2456, 2457, 2447, 2458,
     2458, 2459, 2459, 2460, 2460, 2461, 2463, 2466, 2468, 2469,
     2470, 2471, 2471, 2472, 2458, 2473, 2473, 2475, 2460, 2474,
     2474, 2476, 2479, 2480, 2481, 2482, 2471, 2483, 2483, 2473,
     2490, 2484, 2484, 2474, 2484, 2492, 2484, 2485, 2485, 2486,
     2486, 2483, 2487, 2487, 2488, 2488, 2489, 2489, 2491, 2491,

     2493, 2485, 2494, 2495, 2496, 2497, 2498, 2502, 2488, 2499,
     2499, 2503, 2491, 2500, 2500, 2501, 2501, 2504, 2505, 2505,
     2506, 2507, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514,
     2514, 2515, 2505, 2516, 2516, 2507, 2517, 2517, 2518, 2519,
     2519, 2520, 2520, 2521, 2514, 2522, 2523, 2523, 2516, 2524,
     2524, 2525, 2525, 2527, 2519, 2526, 2526, 2528, 2528, 2529,
     2530, 2523, 2531, 2531, 2532, 2534, 2525, 2533, 2533, 2535,
     2536, 2536, 2537, 2537, 2538, 2538, 2539, 2540, 2540, 2541,
     2542, 2542, 2533, 2543, 2543, 2536, 2544, 2545, 2545, 2538,
     2546, 2546, 2540, 2547, 2547, 2542, 2548, 2550, 2543, 2549,

     2549, 2551, 2545, 2552, 2552, 2546, 2553, 2553, 2554, 2556,
     2558, 2559, 2560, 2561, 2561, 2563, 2564, 2565, 2552, 2566,
     2566, 2567, 2567, 2568, 2569, 2571, 2572, 2573, 2574, 2574,
     2575, 2575, 2576, 2576, 2577, 2578, 2579, 2580, 2581, 2583,
     2583, 2584, 2584, 2585, 2590, 2575, 2586, 2586, 2587, 2587,
     2588, 2588, 2589, 2589, 2583, 2591, 2592, 2593, 2593, 2594,
     2586, 2595, 2596, 2596, 2588, 2596, 2597, 2596, 2598, 2599,
     2599, 2593, 2600, 2600, 2601, 2602, 2602, 2603, 2603, 2604,
     2604, 2605, 2605, 2606, 2607, 2607, 2608, 2609, 2610, 2602,
     2611, 2611, 2612, 2604, 2613, 2605, 2614, 2614, 2607, 2615,

     2615, 2616, 2617, 2617, 2611, 2619, 2618, 2618, 2621, 2618,
     2614, 2618, 2620, 2620, 2622, 2622, 2617, 2619, 2623, 2624,
     2624, 2625, 2625, 2626, 2626, 2627, 2620, 2628, 2628, 2622,
     2629, 2629, 2630, 2630, 2624, 2631, 2625, 2632, 2633, 2633,
     2634, 2634, 2635, 2636, 2638, 2629, 2637, 2637, 2639, 2639,
     2640, 2640, 2641, 2642, 2643, 2643, 2644, 2644, 2645, 2645,
     2646, 2637, 2649, 2639, 2647, 2647, 2648, 2648, 2650, 2650,
     2654, 2644, 2651, 2651, 2652, 2652, 2653, 2653, 2658, 2647,
     2655, 2655, 2659, 2650, 2656, 2656, 2657, 2657, 2662, 2652,
     2660, 2660, 2661, 2661, 2663, 2655, 2664, 2665, 2666, 2667,

     2667, 2669, 2669, 2671, 2676, 2660, 2673, 2673, 2674, 2674,
     2675, 2675, 2677, 2678, 2667, 2679, 2669, 2680, 2681, 2681,
     2682, 2673, 2687, 2674, 2683, 2683, 2684, 2684, 2685, 2685,
     2686, 2686, 2688, 2688, 2689, 2689, 2690, 2691, 2691, 2694,
     2695, 2695, 2685, 2700, 2686, 2703, 2688, 2696, 2696, 2697,
     2697, 2691, 2698, 2698, 2699, 2699, 2701, 2701, 2702, 2702,
     2705, 2696, 2704, 2704, 2706, 2706, 2698, 2707, 2707, 2708,
     2701, 2709, 2709, 2710, 2710, 2711, 2704, 2713, 2706, 2712,
     2712, 2714, 2712, 2715, 2712, 2709, 2716, 2717, 2717, 2718,
     2718, 2719, 2720, 2720, 2721, 2721, 2722, 2723, 2723, 2724,

     2724, 2717, 2725, 2725, 2726, 2727, 2727, 2720, 2728, 2728,
     2729, 2729, 2723, 2730, 2730, 2731, 2731, 2732, 2733, 2733,
     2727, 2734, 2734, 2735, 2735, 2729, 2736, 2736, 2730, 2740,
     2731, 2737, 2737, 2733, 2738, 2738, 2739, 2739, 2735, 2741,
     2741, 2742, 2743, 2743, 2744, 2744, 2737, 2745, 2747, 2738,
     2746, 2746, 2748, 2749, 2749, 2750, 2750, 2751, 2752, 2753,
     2754, 2756, 2756, 2757, 2757, 2758, 2758, 2760, 2749, 2759,
     2759, 2761, 2761, 2762, 2762, 2765, 2756, 2763, 2763, 2766,
     2758, 2764, 2764, 2767, 2768, 2769, 2761, 2770, 2771, 2771,
     2772, 2772, 2763, 2773, 2773, 2774, 2774, 2775, 2776, 2776,

     2777, 2777, 2771, 2778, 2778, 2779, 2779, 2773, 2780, 2780,
     2781, 2781, 2782, 2782, 2777, 2783, 2783, 2778, 2784, 2784,
     2785, 2788, 2780, 2786, 2786, 2787, 2787, 2789, 2789, 2783,
     2790, 2791, 2791, 2792, 2792, 2793, 2793, 2786, 2796, 2797,
     2798, 2798, 2799, 2800, 2800, 2791, 2801, 2802, 2802, 2793,
     2803, 2803, 2804, 2804, 2805, 2805, 2806, 2806, 2807, 2807,
     2808, 2808, 2809, 2809, 2811, 2803, 2810, 2810, 2819, 2805,
     2812, 2812, 2820, 2807, 2813, 2813, 2821, 2809, 2814, 2814,
     2815, 2815, 2816, 2816, 2817, 2817, 2818, 2818, 2822, 2813,
     2823, 2824, 2824, 2825, 2826, 2815, 2827, 2828, 2835, 2817,

     2829, 2829, 2830, 2830, 2832, 2832, 2833, 2833, 2836, 2837,
     2838, 2839, 2840, 2840, 2841, 2841, 2842, 2843, 2843, 2844,
     2844, 2845, 2845, 2846, 2846, 2847, 2847, 2848, 2848, 2849,
     2849, 2843, 2850, 2851, 2851, 2852, 2853, 2846, 2854, 2854,
     2859, 2848, 2855, 2855, 2856, 2856, 2857, 2857, 2858, 2858,
     2860, 2861, 2861, 2862, 2862, 2871, 2855, 2863, 2863, 2872,
     2857, 2873, 2858, 2864, 2864, 2874, 2861, 2865, 2865, 2866,
     2866, 2867, 2867, 2868, 2868, 2869, 2869, 2870, 2870, 2875,
     2877, 2878, 2881, 2888, 2866, 2884, 2884, 2885, 2885, 2886,
     2886, 2889, 2870, 2887, 2887, 2890, 2890, 2891, 2891, 2884,

     2892, 2892, 2893, 2893, 2894, 2894, 2895, 2895, 2905, 2890,
     2896, 2896, 2897, 2897, 2892, 2898, 2898, 2908, 2894, 2899,
     2899, 2900, 2900, 2909, 2896, 2901, 2901, 2897, 2902, 2902,
     2903, 2903, 2904, 2904, 2899, 2906, 2906, 2907, 2907, 2913,
     2901, 2911, 2911, 2912, 2912, 2903, 2934, 2904, 2914, 2914,
     2906, 2935, 2907, 2915, 2915, 2911, 2916, 2916, 2917, 2917,
     2918, 2918, 2914, 2919, 2919, 2920, 2920, 2915, 2921, 2921,
     2922, 2922, 2923, 2923, 2924, 2924, 2937, 2919, 2925, 2925,
     2926, 2926, 2949, 2921, 2927, 2927, 2928, 2928, 2929, 2929,
     2930, 2930, 2950, 2925, 2931, 2931, 2932, 2932, 2951, 2927,

     2933, 2933, 2954, 2929, 2955, 2930, 2936, 2936, 2938, 2938,
     2956, 2932, 2939, 2939, 2940, 2940, 2941, 2941, 2942, 2942,
     2943, 2943, 2938, 2944, 2944, 2945, 2945, 2946, 2946, 2947,
     2947, 2948, 2948, 2952, 2952, 2953, 2953, 2957, 2957, 2959,
     2945, 2958, 2958, 2960, 2960, 2961, 2961, 2962, 2962, 2963,
     2963, 2964, 2957, 2965, 2965,  805, 2958,  804, 2960, 2966,
     2966,  803, 2962, 2967, 2967, 2968, 2968, 2969, 2969, 2970,
     2970,  802,  798,  796,  795,  793,  792, 2967,  791, 2968,
     2972, 2972, 2972, 2972, 2973, 2973, 2973, 2973, 2974, 2974,
     2974, 2974, 2975, 2975, 2975, 2975, 2976, 2976, 2976, 2976,

     2977, 2977, 2977, 2977, 2978, 2978, 2978, 2978, 2979,  789,
     2979, 2979, 2980, 2980,  788, 2980, 2981, 2981, 2981,  785,
      784,  783,  782,  780,  779,  778,  777,  772,  771,  770,
      769,  768,  767,  766,  765,  764,  763,  762,  759,  758,
      757,  755,  752,  751,  750,  749,  748,  746,  745,  744,
      743,  742,  741,  740,  739,  738,  737,  735,  732,  731,
      728,  726,  725,  724,  723,  721,  719,  718,  715,  714,
      713,  712,  711,  710,  709,  708,  707,  706,  704,  698,
      697,  695,  692,  691,  690,  689,  688,  687,  684,  683,
      682,  681,  680,  676,  675,  674,  673,  672,  671,  670,

      668,  667,  666,  663,  662,  658,  657,  656,  654,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  641,  639,
      638,  637,  634,  633,  632,  631,  630,  628,  626,  621,
      619,  618,  616,  615,  614,  612,  611,  610,  609,  603,
      601,  600,  599,  598,  595,  594,  593,  590,  589,  588,
      586,  582,  581,  579,  578,  575,  574,  573,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  557,  556,  555,
      552,  551,  550,  546,  545,  544,  543,  542,  538,  537,
      536,  535,  534,  533,  532,  531,  527,  526,  525,  523,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  510,

      509,  508,  507,  506,  505,  504,  503,  502,  501,  499,
      494,  492,  491,  489,  488,  487,  485,  484,  483,  482,
      476,  475,  474,  473,  472,  469,  468,  467,  466,  465,
      464,  462,  458,  457,  456,  453,  452,  451,  449,  448,
      447,  446,  445,  444,  443,  441,  440,  439,  438,  436,
      432,  431,  428,  425,  424,  423,  422,  421,  420,  417,
      416,  415,  414,  411,  408,  407,  406,  405,  402,  401,
      400,  399,  398,  393,  392,  391,  390,  389,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  371,  370,  369,  367,  366,  365,  362,  361,

      359,  358,  357,  356,  355,  353,  351,  349,  348,  347,
      344,  343,  342,  340,  339,  338,  337,  336,  335,  334,
      332,  331,  330,  328,  326,  325,  322,  319,  318,  317,
      316,  315,  314,  311,  310,  309,  308,  305,  304,  303,
      302,  301,  298,  297,  296,  295,  294,  291,  290,  289,
      288,  286,  285,  284,  282,  281,  280,  278,  277,  276,
      275,  274,  273,  272,  270,  269,  268,  264,  261,  260,
      259,  258,  257,  256,  254,  252,  250,  249,  248,  247,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,

      221,  220,  219,  214,  213,  212,  210,  209,  208,  207,
      203,  202,  201,  200,  198,  197,  196,  194,  193,  192,
      190,  189,  188,  187,  186,  185,  183,  182,  181,  177,
      174,  173,  172,  171,  170,  169,  168,  167,  165,  163,
      162,  161,  160,  158,  155,  147,  143,  140,  138,  133,
      132,  131,  130,  129,  128,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  115,  113,  112,  111,  109,
      108,  107,  105,  101,  100,   99,   96,   88,   84,   81,
       77,   70,   69,   62,   60,   59,   58,   57,   55,   54,
       53,   49,   44,   41,   33,   32,   28,   25,   23,   19,

       14,   13,    8,    7,    6,    5, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[358] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[357] =
    {   0,
      131,  135,  136,  137,  138,  140,  156,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  171,  172,  173,
      174,  175,  176,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  189,  190,  192,  193,  194,  195,  196,
      201,  202,  203,  204,  205,  206,  209,  210,  211,  212,
      216,  217,  218,  219,  220,  221,  222,  225,  226,  227,
      228,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  256,  257,  260,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,

      271,  272,  273,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
      293,  294,  295,  308,  309,  310,  311,  316,  317,  318,
      319,  321,  322,  324,  325,  326,  327,  329,  330,  331,
      332,  334,  335,  336,  337,  339,  340,  341,  342,  344,
      345,  346,  347,  349,  350,  351,  352,  353,  354,  356,
      357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
      368,  369,  370,  371,  376,  377,  378,  379,  381,  382,
      383,  384,  386,  387,  388,  389,  391,  392,  393,  394,
      396,  397,  398,  399,  401,  402,  403,  404,  408,  409,

      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
      430,  431,  432,  434,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  447,  448,  454,  455,
      456,  457,  458,  460,  461,  462,  463,  464,  465,  466,
      467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
      477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
      487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
      497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
      507,  508,  509,  513,  514,  515,  516,  517,  519,  520,

      521,  522,  523,  524,  528,  529,  530,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  550,  551,  552,  553,  554,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  567,
      568,  569,  570,  575,  576,  578,  579,  580,  581,  583,
      584,  585,  586,  588,  589,  591
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.
 *
 * IMPORTANT! Convention regarding common patterns, such as "name", etc.:
 * Commonly occuring patterns must be kept in one place in order to avoid ambiguity in the parser.
 * Maintenance is easier if they are placed into the OSgL section. At any rate, it is important
 * to place temporary data into the correct parser data object.
 */
#line 23 "../../../../OS/src/OSParsers/OSParseosil.l"

//#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("matched %i characters: %s\n", yyleng, yytext);
#else     
	#define YY_PRINT;
#endif

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;









#line 119 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2767 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 3087 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2972 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4807 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 357 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 357 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 358 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 135 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 136 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 137 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 138 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 140 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TEMPLATEMATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(REFERENCEMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONESTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONEEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DIRECTIONSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DIRECTIONEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVALUESATT);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(IDXATT);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COEFATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* patterns for <matrixExpressions> */
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFEXPR);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPRSTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPREND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTSTART);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTEND);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* patterns for <matrixTerms> in <matrixConstraints> and <matrixObjectives>*/
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXREFERENCESTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXREFERENCEEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATESTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATEEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 567 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 575 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 576 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 578 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 347:
#line 580 "../../../../OS/src/OSParsers/OSParseosil.l"
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 580 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 583 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 351:
#line 585 "../../../../OS/src/OSParsers/OSParseosil.l"
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 585 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 586 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 588 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 591 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 603 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 5392 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2972 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2972 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2971);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void osil_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
/* %if-c-only */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void osilensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 603 "../../../../OS/src/OSParsers/OSParseosil.l"




