#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 331
#define YY_END_OF_BUFFER 332
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2581] =
    {   0,
        1,    1,    0,    0,  328,  328,  329,  329,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  332,  330,
        1,    1,    2,  318,    2,  318,    6,  318,    5,  330,
        4,  318,  318,    2,  331,  328,  329,  319,  321,  322,
      321,  325,  326,  325,    1,  318,  318,    6,  318,    5,
        0,    4,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,    3,    6,    6,  318,    7,    5,    0,    0,  324,
      278,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      318,  318,  328,  329,  319,    0,  327,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  280,    0,    0,    0,
        0,    0,    0,    0,    0,  138,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      234,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        6,  323,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  320,    0,  279,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      264,    0,    0,    0,    0,    0,    0,    0,  248,    0,
        0,    0,    0,    0,    0,    0,  132,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  128,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,   44,   45,  318,   20,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  279,    0,  281,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  139,    0,
        0,    0,    0,    0,    0,    0,  265,    0,    0,    0,

        0,    0,    0,    0,  249,    0,    0,    0,    0,    0,
        0,  235,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
        0,    0,    0,    0,    0,  256,    0,    0,    0,    0,
        0,  262,    0,  258,  114,    0,    0,    0,  264,    0,
        0,    0,    0,    0,    0,  248,    0,    0,  266,    0,
      268,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  254,    0,    0,    0,    0,    0,  270,    0,    0,

        0,    0,    0,    0,  318,  318,  318,  318,  318,  231,
      318,  318,  318,  318,  318,   42,   43,   20,  318,  318,
      318,  318,   23,  318,  318,  318,  318,   24,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  281,    0,  261,    0,    0,
        0,    0,    0,    0,  131,    0,    0,    0,  257,    0,
        0,    0,  139,    0,    0,  263,    0,  259,    0,    0,
        0,    0,  265,    0,    0,    0,    0,    0,    0,  249,
        0,    0,  267,    0,  269,    0,    0,    0,  235,    0,
        0,    0,    0,    0,    0,  133,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  255,
        0,    0,    0,    0,    0,  271,    0,    0,    0,    0,
      129,    0,    0,    0,  260,    0,    0,    0,  196,    0,
        0,   71,    0,  256,    0,    0,    0,    0,  262,  258,
        0,    0,    0,    0,    0,    0,    0,    0,  141,    0,
        0,    0,  266,  268,    0,    0,    0,  147,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  240,    0,    0,
        0,   67,    0,    0,    0,    0,  254,    0,    0,  120,
      214,  270,    0,    0,    0,    0,    0,    0,    0,  318,
      318,  318,  318,  318,  231,  318,  318,  318,  318,  318,

      318,  318,  318,   23,  318,  318,  318,   24,  318,   48,
       49,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,   27,  318,  318,  318,   56,   57,  318,  318,  318,
       28,  261,    0,    0,    0,    0,    0,    0,  131,    0,
        0,  257,    0,    0,    0,    0,  263,  259,    0,  115,
        0,    0,    0,    0,    0,    0,    0,  142,    0,    0,
        0,  267,  269,    0,    0,  148,    0,    0,    0,    0,
        0,    0,  133,    0,    0,    0,   62,    0,  241,    0,
        0,    0,    0,    0,    0,    0,    0,  255,    0,    0,
        0,    0,  271,    0,    0,    0,    0,  129,    0,    0,

        0,    0,    0,    0,  194,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      143,  141,    0,    0,    0,    0,  190,    0,  242,  149,
      147,    0,    0,    0,    0,    0,    0,  276,    0,    0,
      240,    0,    0,  246,    0,    0,    0,    0,    0,    0,
        0,  118,    0,    0,  236,    0,  220,  226,    0,    0,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,   21,  318,   22,  318,  318,  318,  318,   46,   47,
      318,  318,  318,  318,  318,  318,  318,  318,   52,   53,
       27,  318,  318,   54,   55,  318,  318,   28,    0,    0,

        0,    0,  197,    0,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,  142,    0,    0,    0,    0,    0,  243,  148,
        0,    0,    0,    0,    0,    0,    0,    0,   62,  241,
        0,    0,  247,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,  121,    0,    0,  215,    0,    0,  237,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  238,    0,    0,   93,    0,    0,
      218,    0,    0,    0,  143,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  242,  149,    0,    0,  244,    0,    0,    0,    0,
        0,    0,    0,  246,    0,    0,    0,    0,    0,    0,
        0,  151,    0,  252,    0,    0,  236,    0,    0,    0,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
       26,   21,   22,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,   50,   51,  318,  318,  318,  318,
        0,    0,    0,  197,    0,  195,    0,    0,   72,    0,
        0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  191,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      243,    0,  245,    0,    0,    0,    0,    0,  277,    0,
        0,    0,  247,    0,   68,    0,    0,    0,    0,    0,
      152,    0,  253,    0,  121,    0,  119,  215,    0,  237,
        0,    0,  221,    0,  227,    0,    0,    0,  272,    0,
        0,    0,    0,    0,    0,    0,  238,   89,  198,    0,
        0,    0,    0,    0,  134,    0,    0,    0,  163,    0,
       69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  244,    0,    0,    0,  216,    0,    0,    0,    0,
      274,    0,    0,    0,    0,    0,  153,  151,    0,  252,

        0,    0,    0,    0,  282,  318,  318,  318,  318,  318,
      318,  181,  318,  318,  318,  318,   26,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,   25,  318,
      318,  318,    0,  273,    0,    0,  195,    0,    0,    0,
        0,    0,  239,    0,    0,    0,   94,    0,    0,    0,
        0,  219,    0,    0,    0,    0,  164,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      245,    0,    0,    0,    0,  277,    0,    0,    0,    0,

      275,    0,    0,    0,    0,    0,  152,  253,    0,  119,
        0,    0,  221,  227,    0,    0,  272,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      165,  163,    0,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
        0,    0,  101,    0,    0,    0,    0,    0,    0,   91,
      274,    0,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,  122,  318,  318,  318,  318,  318,  181,  318,
      318,  318,  318,  318,  318,   31,  318,  318,   29,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,   25,  318,  318,   33,  318,
      273,    0,    0,    0,    0,    0,    0,    0,    0,   90,
        0,  199,   94,    0,    0,    0,  219,    0,    0,    0,
      135,  164,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  217,
        0,    0,    0,  275,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  283,    0,    0,  192,  222,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  165,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  304,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  126,    0,    0,    0,
        0,  224,    0,    0,    0,  116,    0,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
       31,  318,   29,  318,  318,  318,  318,  318,  166,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,   33,  318,    0,    0,    0,    0,    0,    0,
        0,   90,  199,    0,    0,    0,    0,    0,  135,    0,
       70,    0,  110,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  106,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  102,    0,    0,    0,
        0,  217,    0,    0,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  283,    0,  123,    0,    0,
      124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  300,  302,    0,
        0,    0,    0,  306,    0,  284,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,    0,    0,    0,    0,
      250,    0,    0,  318,  318,  318,  318,  318,  318,  179,
      318,  178,  318,  318,  318,  318,  318,  318,   30,  318,
      318,  318,  318,  318,  166,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
       32,    0,    0,  193,    0,  223,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  110,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  106,    0,    0,
      305,    0,    0,    0,    0,  111,    0,    0,    0,    0,
        0,  102,    0,    0,    0,    0,    0,  127,    0,   92,
        0,    0,    0,    0,  225,    0,    0,  251,    0,  117,
        0,    0,  123,    0,    0,    0,    0,  155,    0,    0,
      159,    0,    0,    0,    0,    0,  140,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  146,    0,    0,    0,  144,
        0,    0,    0,    0,    0,  250,    0,    0,  318,  318,
      318,  318,  318,  179,  178,  318,  318,  318,  318,  318,
       30,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  167,  318,  318,  318,  318,   35,  318,  318,  318,
      318,  318,   32,    0,  193,  223,   96,    0,    0,  125,
        0,  156,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  301,    0,  303,
        0,  305,    0,    0,    0,  111,    0,  307,    0,    0,
      285,    0,    0,    0,    0,    0,    0,  127,    0,    0,

       86,    0,    0,    0,  225,    0,  251,  117,    0,    0,
        0,    0,  157,  155,    0,  161,  159,    0,    0,    0,
        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,  294,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,   79,    0,    0,    0,
        0,    0,  318,   39,  318,  318,  318,  170,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
       14,  318,  318,  318,  318,  318,  318,  167,  318,  318,
      318,   35,  318,  318,  318,  318,  318,    0,    0,  125,
      156,  160,    0,    0,    0,   63,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  301,  303,    0,    0,    0,
        0,  307,    0,  285,    0,    0,    0,    0,    0,    0,
        0,  145,   86,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,  161,    0,    0,    0,   64,    0,    0,
      208,    0,  288,  290,    0,  292,    0,    0,    0,    0,
        0,  286,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  228,    0,   39,  318,  318,  170,  318,  318,
      188,  189,  318,  318,  318,  318,  318,  318,  318,  169,
      318,   14,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,   12,  318,  180,  318,  318,  318,  318,

      318,  318,    0,    0,    0,    0,   63,    0,    0,    0,
        0,    0,    0,    0,    0,  295,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  145,    0,
        0,   80,    0,    0,    0,    0,    0,    0,    0,    0,
      210,    0,   64,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  312,    0,   99,    0,   73,   75,    0,    0,
        0,    0,    0,  318,  318,  318,  318,  186,  187,  318,
      318,  318,  318,  318,  318,  318,   37,  169,  318,  168,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
       12,  180,  318,  318,  318,  318,  318,  318,    0,    0,

        0,    0,    0,    0,  209,    0,    0,  289,    0,  291,
        0,    0,  293,  295,    0,    0,    0,    0,    0,    0,
      287,    0,    0,    0,    0,    0,    0,    0,   80,    0,
        0,    0,  229,    0,  136,  200,    0,    0,    0,   87,
        0,    0,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,   83,    0,  150,    0,  318,  176,  318,  175,
      318,  318,  318,  318,  318,  318,  318,  316,  317,   37,
      168,  318,  318,   13,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,   34,  318,  177,  318,  318,  318,
      318,    0,    0,    0,  211,    0,    0,  209,    0,  289,

      291,    0,  293,    0,    0,    0,    0,    0,  287,    0,
      313,    0,    0,  100,    0,    0,   74,    0,   76,    0,
        0,    0,  229,    0,    0,    0,    0,    0,  107,  112,
        0,   97,  308,  310,    0,    0,    0,    0,  150,    0,
      176,  175,  318,  318,  318,   36,  318,  318,  318,  314,
      315,  318,   13,  318,   17,  318,  318,   16,  318,  318,
       15,  318,  318,  318,  318,    8,   34,  177,  318,  318,
       60,   61,  318,  318,    0,  137,    0,  201,  211,    0,
        0,   88,    0,    0,    0,    0,  104,    0,    0,    0,
      313,    0,  100,    0,   74,   76,    0,    0,    0,   84,

        0,    0,    0,   77,    0,  162,    0,    0,    0,    0,
        0,    0,  318,  174,  318,  173,   36,  318,  318,  318,
       40,  318,   17,  318,   19,   16,  318,   15,  318,  318,
       10,  318,    8,  318,   58,   59,  318,  318,  137,  201,
        0,   88,    0,  108,    0,  113,    0,  104,    0,   98,
        0,  309,    0,  311,    0,    0,    0,    0,   84,    0,
        0,    0,  162,  296,  298,    0,    0,    0,    0,  174,
      173,  318,   38,  318,  318,   40,  318,    9,   19,  318,
       18,  318,   10,  318,  318,   41,  318,  318,    0,   78,
      108,  113,    0,   98,  309,  311,    0,    0,    0,    0,

        0,    0,    0,  232,    0,   81,  202,   38,  318,  184,
      185,    9,   18,  318,  318,   41,  318,  172,  318,  171,
       78,    0,  297,    0,  299,    0,    0,    0,    0,    0,
        0,   65,  182,  183,  318,  318,  172,  171,  297,  299,
        0,  233,    0,    0,   82,    0,  203,    0,    0,  318,
      318,   11,  233,    0,   66,   82,  203,    0,    0,  318,
       11,   66,    0,    0,  318,    0,    0,  318,    0,  154,
        0,  158,  318,  154,  158,  318,  318,  230,  230,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,   38,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[2592] =
    {   0,
        0,   65,    0,    0, 4158, 4157, 4154, 4153,    0,    0,
        0,    0, 4144, 4143,   13,   16,    3,    5, 4157, 4164,
      129,    0, 4151,    0, 4148,   18,   38, 4137,   83,  190,
     4164, 4124, 4113, 4164, 4164,    0,    0,    0, 4164, 4164,
     4142, 4164, 4164, 4133,    0,    0,   23,   86, 4132,  193,
       16, 4164, 4119, 4108, 4084,    3, 4092, 4097, 4081, 4095,
     4088,    3, 4100,    0,    4, 4083, 4099,   61,    8, 4097,
     4097, 4164,  108,  249,  104, 4164,  112, 4126,  270, 4164,
     4164, 4108,    6,   23, 4080,   77,   71,   45, 4089,  160,
       56,  163,  214,   47,   72,   88, 4078,  222,  153, 4091,

     4105, 4099,    0,    0,    0, 4110, 4164, 4079, 4068, 4071,
      168, 4066, 4081, 4065, 4064,  212, 4078,  196, 4060, 4067,
     4065, 4059, 4063, 4071, 4054, 4072,    7, 4071, 4070, 4052,
     4053,  198, 4056,  185,  276, 4096,  253, 4078,   14,  188,
     4050,  239,  204,  229, 4059,  239,  247,  248,  290,  262,
      250,  190, 4048,  289,  249, 4061, 4164, 4042, 4048, 4040,
     4043,  300, 4038, 4034, 4054, 4049, 4047, 4036, 4048, 4038,
     4035,  336,  303, 4043,  266,  352,  246, 4033, 4033, 4038,
     4164, 4030, 4030, 4032, 4021, 4019,  285, 4024, 4033, 4036,
      273, 4023, 4021, 4013, 4012, 4031, 4018, 4017, 4028,  306,

      220, 4164, 4009, 4022, 4023, 4019, 4005, 4003, 4010, 4002,
     4011,  356,  361,  368,  317, 4004, 4017, 3999, 3996, 4010,
     4001, 4011, 4007, 3991, 3998, 3994, 3999, 3991, 3988, 3998,
     3999, 3988, 4001, 3980, 4164,  372,  256,  374, 3981, 3987,
     3979, 3982,  328, 3977, 3973, 3993,  379, 3987, 3976, 3988,
     3978, 3975,  384,  348, 3983,  342,  390,  279, 3973, 3973,
     3978,  397, 3970, 3970, 3972, 3961, 3971, 3958,  347, 3963,
     3972, 3975,  351, 3962, 3960, 3952, 3951, 3970, 3957, 3956,
     3967,  354,  413, 3983, 3961, 3962, 3972, 3947,  228,  415,
     3959, 3952, 3948, 3946,  417,  421, 3938, 3952, 3951,  423,

      425, 3950, 3934, 3948, 3939, 3946, 3945,  433,  439, 3931,
      441,  443, 3943, 3946,  397, 3944, 3940, 3935, 3924, 3941,
     3936, 3936, 3921, 3934, 3936, 3944, 3926,  450, 3916, 3932,
      357,  452, 3927, 3917, 3909,  431, 3945,  360, 3917,  460,
     3907, 3911, 3904, 3904, 3897,  463, 3955, 3952,  469,  471,
     3906, 3896, 3897,  477, 3903, 3896, 3906,  479,  481, 3918,
     3908, 3894, 3906, 3909, 3895, 3904, 3902, 3886, 3900,  484,
     3890, 3883, 3897,  486,  488,  496,  501, 3917, 3895, 3896,
     3906, 3881,  504,  506, 3893, 3886, 3882,  508,  510, 3880,
      512,  514, 3872, 3886, 3885,  517,  524, 3884, 3868, 3882,

     3873, 3880, 3879,  533,  530, 3865,  535,  537, 3877, 3880,
      539,  541,  499, 3878,  543, 3870, 3866, 3858, 3875, 3870,
     3870, 3855, 3868, 3870, 3878, 3860,  555, 3850, 3866,  392,
      562, 3861, 3851, 3843,  564,  566,  571, 3854,   10, 3851,
     3855, 3845, 3840, 3838,  574,  582, 3839, 3852, 3872, 3849,
      585,  590,  592,  596, 4164, 3838, 3869, 3833,  598, 3826,
     3848, 3830,  601, 3833, 3845,  603, 3836,  605,  611,  613,
      617, 3825,  621, 3823, 3833, 3836, 3825, 3834, 3833, 3834,
     3821,  623, 3817, 3816, 3812, 3819, 3813, 3810, 3823, 3824,
      625,  631, 3824, 3808, 3820, 3804,  633,  641,  399, 3804,

     3817, 3817, 3815, 3818, 3809, 3816, 3798,  538,  643,  645,
     3814, 3796, 3809, 3831, 3796, 4164, 4164,  649, 3805, 3794,
     3804,  651,  653, 3802, 3788, 3781,  655,  658,  660,  663,
     3801, 3785, 3819, 3783, 3782, 3795, 3793,  670,  672, 3777,
      675,  677, 3791, 3777,  687,  690,  692,  694, 3785,  534,
     3782, 3786, 3776,  697,  699, 3771, 3769,  702,  704, 3770,
     3783, 3803,  708, 3780,  710,  713,  715,  718,  720, 3769,
     3800, 3764,  722, 3757, 3779, 3761,  726, 3764, 3776,  728,
     3767,  731,  733,  736,  738, 3756,  742, 3754,  744, 3764,
     3767, 3756, 3765, 3764,  747,  749, 3765, 3752,  752,  754,

     3748, 3747, 3743, 3750, 3744, 3741, 3754, 3755,  758,  760,
     3755, 3739, 3751, 3735,  763,  765,  437, 3735, 3748,  770,
      774, 3768, 3746, 3749,  776, 3743, 3773, 3746, 3727, 3739,
     3730, 4164,  436,  779, 3734, 3737, 3726, 3726,  781,  783,
     3721, 3720, 3736, 3731, 3721,  518,  786, 3755,  789, 3730,
     3714,  460,  791,  793,  796,  798, 3752,  803, 3725, 3715,
     3721, 3708, 3708, 3707, 3704, 3709,  805,  808, 3739,  814,
     3718, 4164, 3719, 3714, 3712, 3712,  817, 3711, 3710, 3695,
     4164,  821, 3698,  823, 3706, 3692, 3686, 3703, 3706, 3689,
     3686, 3704, 3689, 3688,  825, 3688, 3681, 3695, 3675, 3684,

      827,  830, 3692,  832, 3708, 3686, 3706,  834,  842, 3726,
     3723, 3690, 3698, 3674, 3674, 3697, 3705, 3679,  836,  848,
      854,  839, 3680, 3693,  856, 3715, 3712, 3692, 3670,  862,
      864,  866, 3672, 3702, 3675,  869, 3669, 3660,  871,  873,
      625,  877, 3664, 3667, 3656, 3656,  879,  881,  885,  889,
     3651, 3650, 3666, 3661, 3651,  836,  892,  895, 3661, 3645,
      548,  897,  901,  903,  905,  908, 3657, 3647, 3653, 3640,
     3640, 3639,  910, 3636, 3641,  912,  914,  916,  921, 3671,
      925, 3650,  928, 3651, 3646, 3644, 3644,  932, 3643, 3642,
      934,  936,  938, 3631,  941, 3639, 3625,  944, 3643, 3636,

     3639, 3634, 3657, 3618, 4164, 3613, 3621, 3573, 3584, 3568,
      946, 3569, 3562, 3562, 3575, 3558, 3544,   19,   47,   66,
      952,  954,  123,  196,  261,  322,  971,  957,  959,  962,
      964,  400,  968,  386,  392,  386,  386, 4164,  449,  499,
      970,  475,  973,  975,  472,  497,  538,  525,  573,  978,
     1001, 4164,  570, 1007,  980,  576, 4164, 4164,  588,  587,
      596,  585,  597,  619,  622,  627,  640,  685,  679,  984,
     1009, 1011, 1013, 1017,  720,  716,  708,  732, 4164, 4164,
      740,  758,  760,  786,  762,  786,  807, 1025,  855,  855,
     1019,  815,  846, 4164, 4164,  847,  839, 1033,  877,  905,

      874, 1035, 1037, 1039,  893,  909, 1041, 1043,  916,  945,
      934, 1045,  944,  959, 1047,  966,  983,  981,  976, 1010,
     1010, 1015, 1057, 1012, 1034, 1018, 1061, 1063, 1065, 1067,
     1069, 1030, 1035, 1028, 1023, 1091, 1030, 1054, 1097, 1099,
     1028, 1101, 1103, 1027, 1107, 1109, 1032, 1065, 1056, 1070,
     1113, 1117, 1119, 1123, 1125, 1129, 1135, 1066, 1137, 1141,
     1070, 1145, 1149, 1086, 1083, 1153, 1088, 1085, 1102, 1097,
     1095, 1110, 1100, 1157, 1161, 1118, 1108, 4164, 1128, 1145,
     4164, 1126, 1130, 1122, 1174, 1126, 1176, 1130, 1124, 1129,
     1136, 1122, 1143, 1133, 1145, 1150, 1141, 1153, 1149, 1144,

     1160, 1198, 1201, 1154, 1205, 1207, 1172, 1155, 1156, 1158,
     1156, 1174, 1166, 1217, 1221, 1174, 1193, 1183, 1180, 1226,
     1213, 1229, 1231, 1233, 1186, 1201, 1243, 1185, 1191, 1206,
     1209, 1204, 1195, 1227, 1228, 1253, 1204, 1208, 1202, 1258,
     1260, 1262, 1264, 1221, 1208, 1245, 1210, 1230, 1262, 1232,
     1237, 1227, 1231, 1227, 4164, 4164, 1284, 1222, 1222, 1262,
     1295, 1242, 1237, 1299, 1301, 1303, 1264, 1256, 1307, 1253,
     1266, 1256, 1313, 1317, 1274, 1264, 1320, 1285, 1302, 1324,
     1285, 1288, 1281, 1331, 1285, 1279, 1336, 1340, 1287, 1297,
     1283, 1304, 1294, 1308, 1309, 1302, 1313, 1314, 1305, 1321,

     1360, 1362, 1366, 1327, 1313, 1315, 1317, 1373, 1375, 1320,
     1338, 1330, 1381, 1383, 1385, 1342, 1359, 1349, 1346, 1392,
     1394, 1396, 1399, 1350, 1403, 1405, 1408, 1412, 1373, 1414,
     1362, 1417, 1421, 1423, 1425, 1365, 1386, 1428, 1430, 1383,
     1389, 1379, 1380, 1416, 1389, 1395, 1441, 4164, 4164, 1388,
     1397, 1392, 1427, 1392, 4164, 1393, 1450, 1437, 1453, 1414,
     4164, 1406, 1420, 1402, 1408, 1420, 1404, 1404, 1410, 1417,
     1422, 1412, 1419, 1434, 1434, 1424, 1442, 1438, 1424, 1423,
     1441, 1479, 1427, 1437, 1438, 4164, 1443, 1448, 1445, 1487,
     1489, 1440, 1453, 1436, 1438, 1445, 1496, 1498, 1491, 1503,

     1450, 1460, 1457, 1466, 1453, 1453, 1450, 1460, 1473, 1474,
     1515, 1517, 1482, 1470, 1480, 1502, 1523, 1488, 1526, 1488,
     1530, 1510, 1485, 1483, 1487, 1499, 1486, 1500, 1482, 1490,
     1486, 1506, 1521, 1490, 1491, 1493, 1504, 1550, 1552, 1500,
     1555, 1517, 1558, 1560, 1512, 1518, 1565, 1511, 1512, 1549,
     1521, 1527, 1574, 1576, 1578, 1580, 1582, 1528, 1537, 1532,
     1587, 1589, 1572, 1538, 1596, 1598, 1600, 1562, 1604, 1606,
     1558, 1572, 1554, 1560, 1573, 1557, 1557, 1563, 1568, 1574,
     1564, 1571, 1586, 1586, 1571, 1577, 1595, 1591, 1577, 1576,
     1631, 1579, 1589, 1590, 1636, 1638, 1599, 1604, 1601, 1643,

     1645, 1596, 1609, 1592, 1594, 1602, 1653, 1655, 1606, 1659,
     1616, 1613, 1663, 1665, 1626, 1668, 1670, 1635, 1613, 1619,
     1620, 1628, 1621, 1627, 1628, 1639, 1625, 1645, 1639, 1644,
     1686, 1688, 1681, 1642, 1637, 1650, 1661, 1641, 1646, 1656,
     1657, 1656, 1643, 1661, 1648, 1661, 1657, 1680, 1666, 1669,
     1670, 1669, 1666, 1663, 1692, 1656, 1657, 1661, 1677, 4164,
     1718, 1671, 1703, 1687, 1670, 1681, 1727, 1674, 1674, 1681,
     1695, 1683, 4164, 1689, 1714, 1685, 1677, 1679, 1740, 1686,
     1717, 1695, 1700, 1704, 1748, 1750, 1692, 1753, 1755, 1720,
     1707, 1711, 1763, 1704, 1715, 1720, 1731, 1710, 1733, 1717,

     1732, 1719, 1729, 1755, 1720, 1778, 1735, 1781, 1783, 1725,
     1786, 1751, 1729, 1735, 1736, 1744, 1737, 1743, 1796, 1798,
     1800, 1802, 1804, 1755, 1766, 1752, 1809, 1775, 1768, 1816,
     1818, 1820, 1765, 1822, 1824, 1826, 1785, 1796, 1776, 1782,
     1792, 1793, 1792, 1779, 1838, 1785, 1799, 1795, 1818, 1796,
     1805, 1808, 1809, 1808, 1850, 1831, 1796, 1797, 1856, 1860,
     1803, 1822, 1863, 1866, 1818, 1850, 1833, 1817, 1828, 1818,
     1825, 1839, 1827, 1882, 1884, 1886, 1826, 4164, 4164, 4164,
     1847, 1834, 1840, 1837, 1843, 1849, 1838, 1845, 1849, 1899,
     1854, 1862, 1848, 1854, 1861, 1866, 1852, 1855, 1856, 1870,

     1857, 1874, 4164, 1860, 1878, 1879, 1862, 1881, 1878, 1865,
     1867, 1885, 1882, 1864, 1884, 1885, 4164, 1886, 1887, 1878,
     1890, 4164, 1875, 1881, 1933, 4164, 1879, 1897, 1886, 1888,
     1899, 1884, 1886, 1942, 1944, 1892, 1910, 1908, 1896, 1900,
     1952, 1954, 1959, 1918, 1922, 1905, 1922, 1964, 1966, 1915,
     1922, 1930, 1932, 1918, 1931, 1951, 1916, 1934, 1928, 1936,
     1941, 1923, 1984, 1986, 1934, 1989, 1991, 1993, 1954, 1942,
     1948, 2001, 2009, 1945, 1954, 1961, 1951, 1960, 2012, 1973,
     2015, 2017, 2019, 1965, 1971, 1978, 1983, 1969, 1972, 1973,
     1987, 1974, 2030, 2033, 1996, 2036, 1984, 2002, 2003, 2041,

     1988, 2007, 2005, 1992, 1994, 2049, 2052, 2017, 1995, 2016,
     2017, 2059, 2061, 2022, 2065, 2067, 2028, 2019, 2031, 2072,
     2018, 2077, 2081, 2019, 2040, 2083, 2085, 2088, 2029, 2042,
     4164, 2093, 2097, 2054, 2062, 2064, 2053, 2104, 2062, 2059,
     2056, 2061, 2064, 2059, 2070, 2061, 2084, 4164, 4164, 2062,
     2083, 2067, 2066, 4164, 2075, 4164, 2072, 2092, 2088, 2127,
     2077, 2111, 2112, 2078, 4164, 2093, 2079, 2094, 2079, 2137,
     2139, 2096, 2103, 2095, 2106, 2087, 2111, 2108, 2150, 2153,
     2155, 2157, 2114, 2104, 2111, 2121, 2113, 2165, 2167, 2114,
     2124, 2123, 2118, 2118, 2175, 2132, 2133, 2141, 2127, 2182,

     2143, 2145, 2149, 2187, 2129, 2142, 2137, 2142, 2171, 2194,
     2197, 2138, 2202, 2204, 2206, 2209, 2211, 2213, 2151, 2215,
     2218, 2222, 2179, 2187, 2188, 2177, 2178, 2231, 2175, 2184,
     2186, 2181, 2193, 2184, 2207, 2241, 2243, 2245, 2191, 2248,
     2250, 2215, 2199, 2198, 2259, 2261, 2264, 2207, 2266, 2205,
     2235, 2269, 2233, 2220, 2254, 2256, 2276, 2282, 2224, 2284,
     2286, 2239, 2234, 2292, 2294, 2249, 2296, 2298, 2302, 2304,
     2255, 2265, 2308, 2290, 2271, 2313, 2300, 2318, 2320, 2301,
     2323, 2275, 2276, 2332, 2308, 2337, 2339, 2291, 2278, 2305,
     2306, 2303, 2290, 2290, 2306, 2294, 2304, 2301, 2318, 2299,

     2317, 2304, 2302, 2309, 2358, 2360, 2308, 2312, 2313, 4164,
     2323, 2325, 2330, 2349, 2315, 2370, 2321, 2353, 2375, 2359,
     2379, 2323, 2381, 2383, 2385, 2327, 2334, 2335, 2353, 2357,
     2396, 2347, 2344, 2350, 2401, 2349, 2365, 2355, 2350, 2370,
     2408, 2410, 2357, 2353, 2376, 2416, 2418, 2396, 2376, 2382,
     2383, 2381, 2427, 2409, 2431, 2433, 2435, 2396, 2438, 2440,
     2442, 2444, 2446, 2448, 2400, 2401, 2454, 2433, 2400, 2421,
     2422, 2419, 2407, 2407, 2423, 2411, 2466, 2470, 2472, 2474,
     2423, 2476, 2429, 2446, 2426, 2482, 2484, 2488, 2449, 2490,
     2492, 2443, 2441, 2448, 2443, 2447, 2449, 2501, 2503, 2506,

     2508, 2468, 2470, 2475, 2513, 2496, 2516, 2519, 2471, 2502,
     2487, 2475, 2526, 2528, 2521, 2531, 2533, 2526, 2480, 2481,
     2538, 2525, 2491, 2543, 2504, 2493, 2504, 2502, 2496, 2507,
     2492, 4164, 2509, 2497, 2507, 2512, 2513, 2505, 2505, 2516,
     2521, 2563, 2524, 2516, 2517, 2526, 4164, 2513, 2519, 2532,
     2522, 2525, 2574, 2576, 2527, 2528, 2580, 2582, 2528, 2585,
     2590, 2563, 2544, 2568, 2540, 2549, 2544, 2600, 2547, 2603,
     2605, 2570, 2567, 2590, 2569, 2567, 2557, 2615, 2619, 2621,
     2576, 2626, 2588, 2588, 2591, 2576, 2578, 2597, 2586, 2637,
     2639, 2641, 2587, 2588, 2645, 2647, 2598, 2595, 2606, 2604,

     2598, 2609, 2594, 2656, 2613, 2661, 2663, 2601, 2616, 2621,
     2622, 2668, 2616, 2672, 2619, 2630, 2635, 2636, 2628, 2629,
     2680, 2682, 2684, 2644, 2687, 2633, 2639, 2641, 2644, 2637,
     2638, 2696, 2658, 2699, 2659, 2648, 2685, 2705, 2657, 2658,
     4164, 2659, 4164, 4164, 2659, 4164, 2674, 2671, 2668, 2665,
     2655, 4164, 2675, 2680, 2663, 2664, 2679, 2680, 2677, 2678,
     2674, 2684, 4164, 2685, 2727, 2681, 2671, 2731, 2714, 2734,
     2733, 2733, 2700, 2681, 2700, 2698, 2746, 2748, 2750, 2752,
     2754, 2756, 2699, 2703, 2708, 2701, 2725, 2724, 2729, 2730,
     2711, 2725, 2771, 2773, 2775, 2777, 2738, 2720, 2727, 2726,

     2728, 2729, 2730, 2731, 2733, 2771, 2791, 2743, 2794, 2746,
     2797, 2799, 2750, 2802, 2804, 2806, 2771, 2769, 2766, 2764,
     2755, 2820, 2775, 2781, 2767, 2768, 2783, 2784, 2826, 2783,
     2829, 2831, 2788, 2784, 2836, 2797, 2802, 2785, 2800, 2797,
     4164, 2792, 2845, 2806, 2809, 2793, 2800, 2802, 2798, 2804,
     2814, 2839, 4164, 2807, 4164, 2803, 4164, 4164, 2820, 2821,
     2820, 2862, 2815, 2865, 2867, 2818, 2819, 4164, 4164, 2811,
     2848, 2841, 2823, 2875, 2882, 2890, 2892, 2894, 2896, 2898,
     2828, 2900, 2830, 2832, 2840, 2834, 2848, 2849, 2864, 2867,
     2907, 2911, 2854, 2915, 2917, 2868, 2919, 2865, 2885, 2868,

     2924, 2875, 2886, 2934, 2936, 2872, 2940, 2942, 2944, 2946,
     2880, 2950, 2952, 2956, 2882, 2883, 2898, 2913, 2941, 2960,
     2962, 2966, 2914, 2968, 2915, 2971, 2973, 2937, 2977, 2940,
     2939, 2984, 2989, 2933, 4164, 4164, 2932, 2943, 2942, 4164,
     2952, 2939, 2940, 2953, 4164, 2954, 2943, 2944, 2958, 2957,
     2958, 2985, 4164, 3005, 3007, 2968, 3010, 3012, 3014, 3016,
     2970, 2960, 3021, 2983, 2984, 2976, 3029, 3024, 3026, 3036,
     3038, 2977, 3040, 3042, 3044, 2992, 3047, 3000, 3050, 3031,
     2998, 3022, 3056, 3059, 3062, 3065, 3067, 3018, 3071, 3075,
     3055, 3081, 3083, 3087, 3089, 3027, 3091, 3093, 3040, 3099,

     3103, 3042, 3107, 3058, 3109, 3062, 3056, 3056, 3113, 3115,
     3117, 3076, 3120, 3122, 3080, 3126, 3128, 3131, 3133, 3091,
     3118, 3138, 3142, 3099, 3105, 3104, 3106, 3148, 4164, 4164,
     3102, 4164, 4164, 4164, 3103, 3101, 3113, 3104, 3156, 3108,
     3159, 3161, 3164, 3166, 3168, 3170, 3112, 3117, 3174, 4164,
     4164, 3121, 3183, 3185, 3189, 3191, 3193, 3195, 3122, 3197,
     3200, 3119, 3202, 3140, 3208, 3212, 3214, 3217, 3137, 3220,
     3201, 3201, 3159, 3168, 3226, 3228, 3230, 3232, 3234, 3183,
     3236, 3238, 3242, 3246, 3192, 3248, 3252, 3254, 3258, 3264,
     3266, 3196, 3270, 3199, 3274, 3276, 3215, 3209, 3280, 3282,

     3212, 3214, 3253, 4164, 3284, 3286, 3237, 3247, 3239, 3240,
     3241, 3236, 3293, 3296, 3300, 3302, 3304, 3308, 3310, 3312,
     3315, 3317, 3319, 3327, 3329, 3332, 3334, 3336, 3246, 3338,
     3342, 3252, 3344, 3346, 4164, 4164, 3273, 3264, 3349, 3353,
     3355, 3357, 3361, 3363, 3365, 3367, 3284, 3371, 3373, 3377,
     3381, 3383, 3385, 3389, 3299, 3301, 3309, 3319, 3391, 3319,
     3334, 3333, 3393, 4164, 4164, 3340, 3341, 3357, 3344, 3401,
     3403, 3405, 3407, 3409, 3411, 3417, 3420, 3424, 3426, 3428,
     3430, 3359, 3432, 3366, 3435, 3437, 3439, 3443, 3445, 3447,
     3450, 3454, 3458, 3461, 3463, 3465, 3467, 3367, 3385, 3411,

     3401, 3417, 3429, 4164, 3416, 4164, 4164, 3474, 3476, 3469,
     3473, 3483, 3485, 3439, 3432, 3488, 3490, 3492, 3494, 3496,
     3498, 3500, 3502, 3505, 3509, 3511, 3452, 3513, 3516, 3462,
     3482, 4164, 4164, 4164, 3466, 3522, 3524, 3529, 3532, 3534,
     3537, 3539, 3541, 3543, 3545, 3547, 3549, 3482, 3495, 3498,
     3554, 3559, 3563, 3565, 3569, 3571, 3573, 3506, 3510, 3522,
     3575, 3577, 3529, 3527, 3531, 3583, 3585, 3537, 3588, 3590,
     3592, 3594, 3541, 3601, 3604, 3608, 3610, 3612, 3614, 4164,
     3626, 3631, 3636, 3641, 3646, 3651, 3656, 3597, 3661, 3666,
     3671

    } ;

static yyconst flex_int16_t yy_def[2592] =
    {   0,
     2581, 2581, 2582, 2582, 2583, 2583, 2584, 2584, 2582, 2582,
     2582, 2582, 2585, 2585, 2586, 2586, 2587, 2587, 2580, 2580,
     2580,   21, 2580, 2588, 2580, 2588, 2588, 2588, 2588, 2580,
     2580, 2588, 2588, 2580, 2580, 2589, 2590, 2591, 2580, 2580,
     2580, 2580, 2580, 2580,   21, 2588, 2588, 2588, 2588, 2588,
       30, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2580, 2588, 2588, 2588, 2580, 2588, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2588, 2588, 2589, 2590, 2591, 2580, 2580, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2588, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2580, 2580, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580,
     2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2580, 2580, 2588, 2588, 2588,
     2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580,
     2588, 2588, 2588, 2580, 2580, 2588, 2588, 2588, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2580, 2580, 2588, 2588, 2588, 2588,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588,
     2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2588, 2588, 2588, 2588, 2580, 2580, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580,
     2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2580, 2580, 2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2580, 2580, 2588, 2588, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588, 2588, 2580,
     2580, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2588, 2588, 2588, 2588, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588,
     2588, 2588, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2588,
     2588, 2580, 2580, 2580, 2588, 2580, 2580, 2588, 2580, 2580,
     2580, 2580, 2588, 2580, 2580, 2588, 2588, 2588, 2588,    0,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580

    } ;

static yyconst flex_int16_t yy_nxt[4230] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2580,
       44,   41,   44,  627,   41,   32, 2580,   48,   33,   50,
       50,   50,   48, 2580,   50,   50,   50,  628,  119,   73,
       73,  109,  121,   53,  116,  158,  130,  226,   53,   74,
       74,   74,  110,  239,  117,  159,  122,  227,  120,  982,
       75,  160,  123,  240,   34,   20,   21,   22,   20,   23,
      131,   25,  161,   26,   27,   28,   29,   29,   29,   30,
       75,   31,   20,  169,   77,   77,  184,   73,   73,  983,
       32,  170,   48,   33,   50,   50,   50,   74,   74,   74,

      185,  126,  175,  127,  984,   75,  128,  176,   75,   73,
       73,  134,  134,   77,   77,  135,  135,  135,  129,  163,
      166,  186,  189,  164,  187,   75,  167,  188,   75,   34,
       45,   45,  168,  986,   46,  165,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  190,   46,   46,   46,
       46,   46,   46,   46,   53,   46,   46,   54,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   55,   56,   57,
       58,   59,   60,   46,   61,   62,   46,   46,   63,   64,
       65,   66,   67,   46,   46,   68,   69,   70,   71,   46,
       46,   46,   46,   78,   77,   77,  135,  135,  135,  198,

       79,  177,   48,  172,   50,   50,   50,   80,  199,  178,
      206,  173,   81,  212,  212,   75,  216,  174,  232,  207,
       82,   73,   73,  217,  271,  233,  241,  213,   83,   84,
       85,   86,   87,   88,   89,   75,   90,  242,  987,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  272,  100,
       73,   73,  179,  247,  236,  236,  180,  374,  374,  248,
       74,   74,   74,  181,  192,  249,  182,  250,  193,  237,
      443,   75,  183,  214,  194,  251,  195,   73,   73,  196,
      197,  244,  253,  988,  444,  245,  258,  135,  135,  135,
      254,   75,  137,  256,  259,  280,  255,  246,  257,  268,

      138,  265,  269,  310,  281,  270,  306,  311,  139,  140,
      141,  142,  143,  144,  145,  266,  146,  307,  267,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  260,  156,
      325,  274,  261,  326,  320,  275,  406,  300,  300,  262,
      407,  276,  263,  277,  302,  321,  278,  279,  264,  287,
      288,  289,  301,  308,  308,  335,  290,  212,  212,  303,
      304,  336,  346,  346,  989,  347,  353,  348,  309,  349,
      349,  213,  354,  236,  236,  375,  375,  381,  382,  383,
      388,  388,  402,  350,  384,  396,  396,  506,  237,  398,
      376,  404,  404,  403,  507,  389,  419,  351,  411,  411,

      397,  495,  352,  434,  399,  400,  405,  420,  424,  435,
     1004,  425,  496,  412,  436,  436,  445,  445,  451,  451,
      683,  390,  453,  453,  300,  300,  459,  459, 1007,  437,
     1008,  446, 1009,  452,  308,  308,  613,  454, 1010,  301,
      466,  466,  468,  468,  470,  470,  475,  614,  476,  309,
      477,  491,  491,  497,  497,  684,  502,  469,  794,  471,
      478,  509,  509,  503,  346,  346,  492,  347,  498,  348,
      349,  349,  518,  518,  808,  510,  455,  504,  522,  522,
      527,  527,  529,  529,  350,  541,  541,  374,  374,  375,
      375,  809,  523,  795,  528, 1011,  530,  546,  546,  542,

      826,  472,  547,  547,  376,  554,  554,  558,  558,  388,
      388,  563,  563,  565,  565,  567,  567,  548,  396,  396,
      555,  827,  559, 1012,  389,  573,  573, 1013,  566, 1015,
      568,  580,  580,  397,  404,  404,  582,  582,  584,  584,
      411,  411,  589,  589,  595,  595,  556,  734,  590,  405,
      591,  583,  592,  585, 1016,  412,  609,  609,  693,  596,
      557,  735,  593,  615,  615,  620,  620,  436,  436,  569,
      694,  610,  625,  625,  819,  445,  445,  820,  616, 1017,
      621, 1018,  437,  634,  634,  597,  451,  451,  926,  622,
      446,  639,  639,  453,  453,  586,  623,  640,  640,  459,

      459,  452,  647,  647,  466,  466,  468,  468,  454,  927,
      624,  648,  653,  653,  470,  470, 1019,  649,  654,  654,
     1026,  469,  656,  656,  667,  667,  491,  491, 1028,  471,
     1029,  657,  677,  677,  497,  497, 1030,  658, 1031,  668,
     1032,  492,  682,  682,  509,  509,  695,  695, 1033,  498,
      518,  518,  522,  522,  704,  704,  527,  527,  510,  708,
      708,  529,  529,  909,  709,  709,  523,  710, 1034,  711,
      528,  719,  719,  721,  721,  530,  541,  541,  725,  725,
      910,  726, 1035,  727, 1036,  720, 1037,  722,  730,  730,
      542,  546,  546,  547,  547,  732,  732,  723,  554,  554,

      739,  739,  731,  558,  558,  742,  742, 1038,  548,  563,
      563,  565,  565,  555,  747,  747,  567,  567,  559,  748,
      748,  749,  749,  573,  573, 1039,  566,  757,  757,  580,
      580,  568,  582,  582,  762,  762,  750,  584,  584,  763,
      763, 1044,  758,  765,  765,  589,  589,  583,  595,  595,
      773,  773,  585,  776,  776,  778,  778, 1045,  766,  609,
      609,  788,  788,  596,  615,  615,  793,  793,  777, 1046,
      779,  620,  620, 1047,  610,  798,  798,  625,  625,  616,
      634,  634,  639,  639,  640,  640,  621,  647,  647, 1048,
      822,  822,  653,  653,  654,  654,  648,  828,  828,  656,

      656, 1049,  649,  823,  831,  831,  667,  667,  657,  841,
      841, 1050,  829, 1051,  658,  843,  843,  832,  677,  677,
     1052,  668,  682,  682,  854,  854,  695,  695,  871,  871,
      844,  873,  873,  704,  704,  708,  708,  719,  719,  855,
      891,  891,  872,  709,  709,  874,  710, 1053,  711,  888,
      888,  720,  889, 1054,  890,  721,  721,  725,  725, 1055,
      726, 1056,  727,  730,  730,  898,  898,  732,  732,  722,
      902,  902,  739,  739,  907,  907, 1057,  731,  742,  742,
      747,  747,  748,  748, 1058,  903,  749,  749, 1059,  908,
      915,  915,  921,  757,  757,  922,  923,  923,  762,  762,

     1060,  750,  763,  763,  928,  928,  765,  765,  758,  930,
      930,  773,  773,  776,  776,  939,  939,  778,  778,  929,
     1061,  766,  940,  940, 1062,  904,  942,  942,  777,  945,
      945, 1063,  779,  788,  788,  953,  953,  956,  956,  793,
      793,  943,  959,  959,  946,  798,  798,  974,  974, 1067,
      954, 1068,  957,  985,  985,  822,  822,  960,  828,  828,
     1002, 1002,  975, 1003, 1003,  831,  831, 1070,  823, 1005,
     1005,  841,  841,  829,  843,  843, 1014, 1014,  832, 1020,
     1020, 1027, 1027, 1071, 1006, 1040, 1040, 1072, 1021,  844,
      955,  990,  991,  992, 1022, 1075,  993,  994,  995, 1041,

      996,  997, 1023, 1023,  998,  999, 1000, 1001,  854,  854,
      871,  871, 1042, 1042,  873,  873, 1076, 1024, 1043, 1043,
      891,  891, 1077,  855,  872, 1078,  888,  888,  874,  889,
     1079,  890, 1080, 1025,  898,  898,  902,  902, 1064, 1064,
     1065, 1065,  907,  907, 1069, 1069, 1073, 1073,  915,  915,
     1081,  903, 1082, 1083, 1084, 1066, 1085,  908,  923,  923,
     1086, 1074, 1087, 1087,  928,  928, 1101, 1101,  930,  930,
     1102, 1102, 1104, 1105, 1106, 1107, 1110, 1088, 1111,  929,
     1112, 1089, 1090, 1091, 1114, 1103, 1092, 1093, 1094, 1116,
     1095, 1096, 1108, 1108, 1097, 1098, 1099, 1100,  939,  939,

      940,  940,  942,  942, 1113, 1113, 1117, 1109,  945,  945,
     1115, 1115, 1118, 1119, 1120, 1120, 1129,  943, 1122, 1122,
      953,  953, 1131,  946, 1125, 1125, 1126, 1126, 1136, 1121,
      956,  956, 1137, 1123, 1140,  954, 1128, 1128,  959,  959,
     1141, 1127, 1130, 1130, 1142,  957, 1132, 1132, 1143, 1124,
     1134, 1134, 1144,  960, 1138, 1138, 1145, 1146,  974,  974,
     1148, 1133, 1147, 1147, 1149, 1135, 1150, 1151, 1153, 1139,
     1154, 1155, 1156,  975, 1152,  985,  985, 1157, 1157, 1160,
     1161, 1162, 1163, 1165, 1166, 1168, 1158, 1169, 1164, 1171,
     1172, 1170, 1159, 1174, 1167, 1176, 1173, 1179, 1180, 1002,

     1002, 1177, 1003, 1003, 1178, 1181, 1005, 1005, 1182, 1182,
     1183, 1175, 1184, 1185, 1186, 1187, 1188, 1189, 1014, 1014,
     1193, 1006, 1190, 1190, 1194, 1195, 1196, 1020, 1020, 1197,
     1198, 1198, 1023, 1023, 1200, 1200, 1021, 1191, 1201, 1202,
     1203, 1192, 1022, 1199, 1027, 1027, 1204, 1024, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1211, 1214, 1215, 1216, 1040,
     1040, 1217, 1217, 1042, 1042, 1043, 1043, 1218, 1212, 1219,
     1220, 1221, 1222, 1041, 1233, 1234, 1235, 1236, 1237, 1240,
     1213, 1223, 1224, 1241, 1225, 1238, 1238, 1242, 1245, 1226,
     1227, 1228, 1246, 1229, 1230, 1231, 1243, 1243, 1232, 1239,

     1064, 1064, 1065, 1065, 1247, 1247, 1248, 1249, 1069, 1069,
     1250, 1244, 1251, 1252, 1073, 1073, 1254, 1066, 1253, 1253,
     1255, 1256, 1256, 1258, 1259, 1261, 1261, 1263, 1264, 1074,
     1265, 1260, 1266, 1266, 1268, 1269, 1257, 1087, 1087, 1271,
     1262, 1270, 1270, 1272, 1274, 1275, 1277, 1267, 1280, 1273,
     1278, 1281, 1088, 1283, 1279, 1276, 1285, 1282, 1289, 1290,
     1286, 1101, 1101, 1102, 1102, 1292, 1287, 1291, 1291, 1288,
     1293, 1284, 1294, 1295, 1108, 1108, 1296, 1296, 1103, 1297,
     1298, 1299, 1113, 1113, 1300, 1300, 1115, 1115, 1303, 1109,
     1304, 1305, 1306, 1120, 1120, 1307, 1307, 1122, 1122, 1301,

     1308, 1308, 1309, 1302, 1125, 1125, 1126, 1126, 1121, 1310,
     1310, 1311, 1123, 1128, 1128, 1130, 1130, 1312, 1132, 1132,
     1315, 1127, 1313, 1313, 1134, 1134, 1314, 1314, 1316, 1138,
     1138, 1317, 1317, 1133, 1318, 1319, 1320, 1321, 1322, 1135,
     1323, 1324, 1147, 1147, 1139, 1325, 1326, 1327, 1328, 1329,
     1330, 1157, 1157, 1331, 1332, 1332, 1334, 1335, 1336, 1337,
     1158, 1338, 1339, 1340, 1341, 1342, 1159, 1333, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1182, 1182, 1355, 1356, 1357, 1358, 1359, 1360, 1190, 1190,
     1361, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1367, 1198,

     1198, 1368, 1369, 1191, 1200, 1200, 1370, 1371, 1372, 1373,
     1374, 1375, 1199, 1376, 1377, 1378, 1211, 1211, 1379, 1379,
     1380, 1381, 1382, 1383, 1217, 1217, 1384, 1385, 1385, 1387,
     1212, 1388, 1388, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1386, 1398, 1399, 1400, 1389, 1401, 1402, 1403, 1404,
     1405, 1238, 1238, 1406, 1406, 1407, 1408, 1408, 1410, 1243,
     1243, 1411, 1411, 1412, 1413, 1239, 1247, 1247, 1414, 1415,
     1409, 1416, 1417, 1418, 1244, 1253, 1253, 1419, 1419, 1421,
     1421, 1256, 1256, 1423, 1423, 1424, 1425, 1426, 1261, 1261,
     1427, 1427, 1420, 1428, 1422, 1429, 1257, 1430, 1430, 1266,

     1266, 1432, 1432, 1262, 1433, 1434, 1434, 1270, 1270, 1436,
     1437, 1438, 1431, 1439, 1267, 1440, 1441, 1442, 1443, 1444,
     1435, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1454, 1455, 1291, 1291, 1456, 1457, 1458, 1459, 1459, 1296,
     1296, 1461, 1462, 1463, 1300, 1300, 1464, 1464, 1465, 1466,
     1467, 1468, 1460, 1469, 1307, 1307, 1308, 1308, 1470, 1301,
     1310, 1310, 1471, 1472, 1313, 1313, 1314, 1314, 1473, 1474,
     1474, 1317, 1317, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
     1484, 1485, 1486, 1487, 1475, 1488, 1489, 1490, 1490, 1332,
     1332, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,

     1500, 1501, 1333, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
     1509, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1361,
     1361, 1510, 1519, 1520, 1476, 1521, 1522, 1523, 1367, 1367,
     1524, 1525, 1526, 1527, 1528, 1529, 1530, 1533, 1534, 1531,
     1535, 1379, 1379, 1536, 1537, 1538, 1539, 1532, 1540, 1385,
     1385, 1541, 1541, 1542, 1388, 1388, 1543, 1543, 1544, 1545,
     1546, 1550, 1547, 1386, 1548, 1548, 1551, 1552, 1389, 1553,
     1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1549, 1406,
     1406, 1562, 1408, 1408, 1563, 1563, 1564, 1411, 1411, 1565,
     1566, 1567, 1568, 1569, 1570, 1571, 1409, 1419, 1419, 1572,

     1572, 1421, 1421, 1573, 1573, 1423, 1423, 1574, 1575, 1576,
     1427, 1427, 1420, 1577, 1578, 1580, 1422, 1430, 1430, 1579,
     1579, 1432, 1432, 1434, 1434, 1581, 1581, 1582, 1582, 1585,
     1586, 1587, 1431, 1588, 1589, 1590, 1591, 1592, 1435, 1593,
     1593, 1596, 1583, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1605, 1606, 1606, 1609, 1594, 1610, 1611, 1459, 1459, 1613,
     1604, 1612, 1612, 1614, 1615, 1615, 1607, 1464, 1464, 1617,
     1618, 1619, 1460, 1620, 1621, 1622, 1623, 1624, 1625, 1616,
     1595, 1629, 1584, 1474, 1474, 1626, 1626, 1627, 1627, 1630,
     1631, 1632, 1633, 1634, 1635, 1636, 1608, 1637, 1475, 1638,

     1490, 1490, 1628, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
     1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
     1666, 1667, 1668, 1669, 1670, 1670, 1672, 1673, 1674, 1675,
     1676, 1677, 1678, 1679, 1679, 1681, 1681, 1683, 1684, 1671,
     1685, 1686, 1687, 1541, 1541, 1688, 1688, 1680, 1690, 1682,
     1543, 1543, 1691, 1692, 1693, 1548, 1548, 1695, 1695, 1689,
     1696, 1697, 1698, 1699, 1700, 1701, 1702, 1704, 1694, 1549,
     1705, 1706, 1707, 1708, 1709, 1563, 1563, 1710, 1710, 1712,
     1713, 1713, 1715, 1715, 1717, 1717, 1719, 1703, 1720, 1721,

     1722, 1711, 1572, 1572, 1723, 1714, 1724, 1716, 1725, 1718,
     1573, 1573, 1726, 1579, 1579, 1727, 1581, 1581, 1582, 1582,
     1728, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
     1737, 1593, 1593, 1583, 1738, 1738, 1739, 1740, 1740, 1742,
     1743, 1744, 1745, 1745, 1747, 1748, 1594, 1749, 1750, 1751,
     1606, 1606, 1741, 1752, 1752, 1753, 1754, 1746, 1755, 1756,
     1612, 1612, 1757, 1757, 1759, 1607, 1615, 1615, 1760, 1760,
     1761, 1762, 1763, 1764, 1764, 1766, 1771, 1758, 1767, 1767,
     1772, 1616, 1769, 1769, 1626, 1626, 1627, 1627, 1765, 1773,
     1773, 1774, 1775, 1768, 1776, 1776, 1782, 1770, 1779, 1779,

     1783, 1628, 1784, 1777, 1785, 1786, 1786, 1780, 1788, 1778,
     1789, 1790, 1791, 1781, 1792, 1793, 1794, 1795, 1796, 1797,
     1787, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1805,
     1807, 1808, 1809, 1810, 1813, 1811, 1814, 1815, 1670, 1670,
     1816, 1816, 1817, 1806, 1812, 1818, 1819, 1820, 1821, 1822,
     1823, 1679, 1679, 1671, 1824, 1824, 1681, 1681, 1825, 1825,
     1826, 1827, 1828, 1829, 1830, 1680, 1688, 1688, 1831, 1831,
     1682, 1832, 1833, 1834, 1835, 1836, 1695, 1695, 1837, 1838,
     1689, 1839, 1840, 1841, 1841, 1843, 1844, 1845, 1846, 1846,
     1848, 1849, 1850, 1851, 1852, 1710, 1710, 1842, 1853, 1853,

     1854, 1858, 1847, 1713, 1713, 1855, 1855, 1715, 1715, 1711,
     1856, 1856, 1717, 1717, 1857, 1857, 1859, 1859, 1714, 1861,
     1861, 1865, 1716, 1863, 1863, 1866, 1867, 1718, 1868, 1869,
     1870, 1860, 1728, 1728, 1862, 1871, 1872, 1873, 1864, 1874,
     1875, 1876, 1877, 1877, 1879, 1879, 1738, 1738, 1881, 1740,
     1740, 1882, 1882, 1883, 1884, 1885, 1889, 1878, 1892, 1880,
     1745, 1745, 1886, 1886, 1741, 1887, 1887, 1890, 1890, 1893,
     1752, 1752, 1894, 1895, 1896, 1746, 1897, 1757, 1757, 1899,
     1888, 1902, 1891, 1898, 1898, 1760, 1760, 1900, 1900, 1904,
     1903, 1906, 1758, 1764, 1764, 1905, 1905, 1767, 1767, 1907,

     1907, 1909, 1901, 1769, 1769, 1908, 1908, 1910, 1765, 1773,
     1773, 1911, 1768, 1912, 1776, 1776, 1913, 1916, 1770, 1914,
     1914, 1779, 1779, 1777, 1917, 1917, 1919, 1920, 1923, 1778,
     1780, 1925, 1915, 1921, 1921, 1926, 1781, 1918, 1786, 1786,
     1924, 1924, 1922, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
     1934, 1935, 1936, 1787, 1937, 1938, 1939, 1940, 1941, 1805,
     1805, 1942, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
     1950, 1816, 1816, 1951, 1806, 1952, 1953, 1953, 1959, 1955,
     1957, 1957, 1960, 1960, 1824, 1824, 1825, 1825, 1962, 1963,
     1954, 1956, 1964, 1965, 1958, 1966, 1961, 1831, 1831, 1967,

     1968, 1969, 1970, 1970, 1972, 1973, 1975, 1976, 1977, 1841,
     1841, 1978, 1978, 1979, 1980, 1981, 1971, 1846, 1846, 1982,
     1982, 1983, 1984, 1842, 1985, 1986, 1974, 1987, 1853, 1853,
     1988, 1847, 1855, 1855, 1856, 1856, 1857, 1857, 1989, 1859,
     1859, 1990, 1990, 1861, 1861, 1991, 1991, 1863, 1863, 1992,
     1992, 1993, 1994, 1997, 1860, 1995, 1995, 1998, 1862, 1999,
     2000, 2001, 1864, 2002, 2003, 2004, 2005, 1877, 1877, 2008,
     1996, 2006, 2006, 1879, 1879, 2007, 2007, 1882, 1882, 2009,
     2010, 2011, 1878, 1886, 1886, 1887, 1887, 2013, 1880, 2012,
     2012, 1890, 1890, 2014, 2014, 2015, 2016, 2017, 2018, 2019,

     1888, 2020, 1898, 1898, 2021, 2021, 1891, 1900, 1900, 2023,
     2023, 2024, 2025, 2026, 1905, 1905, 2027, 1907, 1907, 2022,
     1908, 1908, 1901, 2028, 2029, 2030, 2031, 2032, 2032, 1914,
     1914, 2033, 2034, 2034, 1917, 1917, 2035, 2036, 2037, 1921,
     1921, 2038, 1915, 2039, 1924, 1924, 2040, 1918, 1922, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
     2052, 2053, 2054, 2055, 1942, 1942, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2064, 1953, 1953, 2065, 2065, 2066,
     2067, 1957, 1957, 2068, 2068, 2069, 1960, 1960, 2073, 1954,
     2074, 2070, 2070, 2075, 2071, 1958, 2072, 2076, 2077, 2078,

     1961, 2079, 2079, 2081, 1970, 1970, 2082, 2082, 2083, 2084,
     2085, 2090, 2086, 2091, 2092, 2080, 1978, 1978, 1971, 2087,
     2093, 2093, 2095, 2095, 2088, 2097, 2089, 1982, 1982, 2098,
     2099, 2100, 2101, 2102, 2094, 2103, 2096, 2104, 1990, 1990,
     1991, 1991, 1992, 1992, 2105, 2106, 1995, 1995, 2107, 2107,
     2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2115, 2117,
     2118, 1996, 2006, 2006, 2007, 2007, 2119, 2120, 2121, 2012,
     2012, 2122, 2116, 2014, 2014, 2123, 2124, 2125, 2126, 2127,
     2128, 2021, 2021, 2129, 2129, 2023, 2023, 2130, 2131, 2131,
     2133, 2134, 2135, 2136, 2137, 2138, 2022, 2032, 2032, 2139,

     2034, 2034, 2140, 2132, 2141, 2142, 2143, 2143, 2144, 2145,
     2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
     2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2065, 2065,
     2164, 2165, 2068, 2068, 2166, 2070, 2070, 2168, 2071, 2169,
     2072, 2170, 2171, 2172, 2173, 2181, 2167, 2174, 2174, 2176,
     2176, 2079, 2079, 2178, 2178, 2179, 2179, 2082, 2082, 2182,
     2183, 2175, 2184, 2177, 2185, 2080, 2186, 2187, 2188, 2180,
     2189, 2190, 2093, 2093, 2191, 2191, 2095, 2095, 2192, 2192,
     2193, 2194, 2195, 2196, 2197, 2198, 2094, 2199, 2200, 2201,
     2096, 2202, 2107, 2107, 2203, 2204, 2204, 2206, 2207, 2207,

     2209, 2209, 2211, 2212, 2212, 2115, 2115, 2214, 2214, 2215,
     2205, 2216, 2217, 2208, 2218, 2210, 2219, 2222, 2213, 2223,
     2116, 2220, 2220, 2224, 2225, 2226, 2227, 2129, 2129, 2228,
     2131, 2131, 2229, 2229, 2230, 2231, 2221, 2232, 2232, 2234,
     2235, 2236, 2237, 2238, 2239, 2132, 2143, 2143, 2240, 2241,
     2242, 2243, 2233, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
     2251, 2252, 2253, 2254, 2254, 2256, 2257, 2257, 2259, 2259,
     2261, 2262, 2263, 2264, 2265, 2266, 2174, 2174, 2255, 2272,
     2258, 2275, 2260, 2267, 2267, 2276, 2268, 2277, 2269, 2278,
     2175, 2176, 2176, 2270, 2270, 2178, 2178, 2179, 2179, 2271,

     2271, 2273, 2273, 2279, 2280, 2177, 2281, 2282, 2191, 2191,
     2283, 2180, 2192, 2192, 2288, 2274, 2284, 2284, 2286, 2286,
     2289, 2289, 2291, 2292, 2293, 2294, 2294, 2296, 2297, 2299,
     2285, 2302, 2287, 2304, 2290, 2204, 2204, 2298, 2298, 2305,
     2295, 2207, 2207, 2300, 2300, 2209, 2209, 2301, 2301, 2306,
     2205, 2212, 2212, 2303, 2303, 2307, 2208, 2214, 2214, 2308,
     2210, 2220, 2220, 2309, 2309, 2312, 2213, 2310, 2310, 2313,
     2313, 2315, 2316, 2316, 2318, 2318, 2221, 2320, 2229, 2229,
     2321, 2322, 2311, 2324, 2314, 2232, 2232, 2317, 2325, 2319,
     2323, 2323, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333,

     2233, 2334, 2335, 2336, 2337, 2338, 2254, 2254, 2339, 2339,
     2340, 2257, 2257, 2341, 2341, 2259, 2259, 2342, 2342, 2343,
     2344, 2255, 2345, 2345, 2347, 2258, 2348, 2349, 2350, 2260,
     2267, 2267, 2351, 2268, 2352, 2269, 2346, 2270, 2270, 2271,
     2271, 2273, 2273, 2353, 2353, 2354, 2354, 2356, 2357, 2357,
     2359, 2360, 2360, 2362, 2363, 2274, 2364, 2365, 2365, 2355,
     2284, 2284, 2358, 2367, 2367, 2361, 2286, 2286, 2368, 2368,
     2369, 2366, 2289, 2289, 2285, 2373, 2370, 2370, 2380, 2371,
     2287, 2372, 2375, 2375, 2377, 2377, 2290, 2374, 2294, 2294,
     2379, 2379, 2381, 2381, 2298, 2298, 2383, 2376, 2384, 2378,

     2300, 2300, 2385, 2295, 2301, 2301, 2388, 2382, 2303, 2303,
     2386, 2386, 2389, 2390, 2309, 2309, 2310, 2310, 2391, 2391,
     2392, 2313, 2313, 2393, 2393, 2387, 2394, 2316, 2316, 2395,
     2395, 2311, 2318, 2318, 2396, 2396, 2314, 2397, 2398, 2399,
     2399, 2401, 2317, 2323, 2323, 2402, 2403, 2319, 2404, 2405,
     2405, 2407, 2408, 2409, 2400, 2410, 2411, 2339, 2339, 2412,
     2341, 2341, 2342, 2342, 2406, 2413, 2413, 2415, 2415, 2345,
     2345, 2417, 2417, 2418, 2419, 2420, 2420, 2422, 2427, 2414,
     2429, 2416, 2432, 2346, 2353, 2353, 2354, 2354, 2434, 2421,
     2423, 2423, 2424, 2424, 2357, 2357, 2426, 2426, 2360, 2360,

     2355, 2428, 2428, 2430, 2430, 2435, 2425, 2436, 2358, 2365,
     2365, 2437, 2361, 2433, 2433, 2367, 2367, 2431, 2368, 2368,
     2438, 2370, 2370, 2366, 2371, 2441, 2372, 2375, 2375, 2439,
     2439, 2377, 2377, 2440, 2440, 2379, 2379, 2381, 2381, 2442,
     2442, 2447, 2376, 2443, 2443, 2455, 2378, 2445, 2445, 2386,
     2386, 2456, 2382, 2448, 2448, 2449, 2449, 2457, 2444, 2451,
     2451, 2458, 2446, 2460, 2387, 2453, 2453, 2391, 2391, 2461,
     2450, 2393, 2393, 2462, 2452, 2395, 2395, 2396, 2396, 2464,
     2454, 2399, 2399, 2459, 2459, 2405, 2405, 2463, 2463, 2465,
     2466, 2467, 2468, 2469, 2413, 2413, 2400, 2470, 2470, 2482,

     2406, 2415, 2415, 2471, 2471, 2417, 2417, 2484, 2414, 2472,
     2472, 2474, 2474, 2420, 2420, 2416, 2476, 2476, 2477, 2477,
     2423, 2423, 2487, 2473, 2488, 2475, 2493, 2421, 2424, 2424,
     2479, 2479, 2478, 2426, 2426, 2480, 2480, 2428, 2428, 2430,
     2430, 2497, 2425, 2483, 2483, 2433, 2433, 2485, 2485, 2481,
     2439, 2439, 2498, 2431, 2440, 2440, 2489, 2489, 2442, 2442,
     2499, 2486, 2443, 2443, 2491, 2491, 2445, 2445, 2492, 2492,
     2500, 2490, 2448, 2448, 2449, 2449, 2501, 2444, 2494, 2494,
     2502, 2446, 2451, 2451, 2495, 2495, 2453, 2453, 2503, 2450,
     2496, 2496, 2459, 2459, 2463, 2463, 2504, 2452, 2505, 2506,

     2507, 2454, 2470, 2470, 2471, 2471, 2472, 2472, 2508, 2508,
     2474, 2474, 2509, 2509, 2514, 2510, 2515, 2511, 2476, 2476,
     2473, 2477, 2477, 2526, 2475, 2512, 2512, 2479, 2479, 2480,
     2480, 2513, 2513, 2483, 2483, 2478, 2485, 2485, 2516, 2516,
     2517, 2517, 2527, 2481, 2519, 2519, 2489, 2489, 2521, 2521,
     2486, 2491, 2491, 2528, 2518, 2492, 2492, 2529, 2520, 2522,
     2522, 2490, 2494, 2494, 2495, 2495, 2496, 2496, 2524, 2524,
     2530, 2531, 2532, 2533, 2523, 2508, 2508, 2509, 2509, 2534,
     2510, 2535, 2511, 2525, 2512, 2512, 2513, 2513, 2536, 2516,
     2516, 2517, 2517, 2537, 2537, 2519, 2519, 2538, 2538, 2521,

     2521, 2522, 2522, 2539, 2539, 2518, 2524, 2524, 2543, 2520,
     2540, 2540, 2541, 2541, 2544, 2544, 2523, 2546, 2546, 2548,
     2549, 2525, 2550, 2551, 2551, 2537, 2537, 2542, 2558, 2545,
     2538, 2538, 2547, 2539, 2539, 2540, 2540, 2552, 2541, 2541,
     2553, 2553, 2554, 2554, 2544, 2544, 2556, 2556, 2546, 2546,
     2557, 2557, 2559, 2542, 2560, 2551, 2551, 2555, 2563, 2545,
     2561, 2561, 2564, 2547, 2553, 2553, 2554, 2554, 2565, 2552,
     2562, 2562, 2556, 2556, 2557, 2557, 2561, 2561, 2562, 2562,
     2566, 2555, 2567, 2568, 2569, 2569, 2571, 2571, 2573, 2569,
     2569, 2574, 2574, 2571, 2571, 2575, 2575, 2576,   46, 2570,

      981, 2572, 2574, 2574, 2570, 2575, 2575,  980, 2572, 2577,
     2577, 2577, 2577, 2579, 2579, 2579, 2579,  979,  978,  977,
      976,  973,  972, 2578,  971, 2578,   24,   24,   24,   24,
       24,   35,   35,   35,   35,   35,   36,   36,   36,   36,
       36,   37,   37,   37,   37,   37,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   42,   42,   42,   42,
       42,  103,  103,  970,  103,  103,  104,  104,  104,  969,
      104,  105,  105,  105,  105,  968,  967,  966,  965,  964,
      963,  962,  961,  958,  952,  951,  950,  949,  948,  947,
      944,  941,  938,  937,  936,  935,  934,  933,  932,  931,

      925,  924,  920,  919,  918,  917,  916,  914,  913,  912,
      911,  906,  905,  901,  900,  899,  897,  896,  895,  894,
      893,  892,  887,  886,  885,  884,  883,  882,  881,  880,
      879,  878,  877,  876,  875,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  860,  859,  858,  857,  856,
      853,  852,  851,  850,  849,  848,  847,  846,  845,  842,
      840,  839,  838,  837,  836,  835,  834,  833,  830,  825,
      824,  821,  818,  817,  816,  815,  814,  813,  812,  811,
      810,  807,  806,  805,  804,  803,  802,  801,  800,  799,
      797,  796,  792,  791,  790,  789,  787,  786,  785,  784,

      783,  782,  781,  780,  775,  774,  772,  771,  770,  769,
      768,  767,  764,  761,  760,  759,  756,  755,  754,  753,
      752,  751,  746,  745,  744,  743,  741,  740,  738,  737,
      736,  733,  729,  728,  724,  718,  717,  716,  715,  714,
      713,  712,  707,  706,  705,  703,  702,  701,  700,  699,
      698,  697,  696,  692,  691,  690,  689,  688,  687,  686,
      685,  681,  680,  679,  678,  676,  675,  674,  673,  672,
      671,  670,  669,  666,  665,  664,  663,  662,  661,  660,
      659,  655,  652,  651,  650,  646,  645,  644,  643,  642,
      641,  638,  637,  636,  635,  633,  632,  631,  630,  629,

      626,  619,  618,  617,  612,  611,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  594,  588,  587,
      581,  579,  578,  577,  576,  575,  574,  572,  571,  570,
      564,  562,  561,  560,  553,  552,  551,  550,  549,  545,
      544,  543,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  526,  525,  524,  521,  520,  519,  517,  516,
      515,  514,  513,  512,  511,  508,  505,  501,  500,  499,
      494,  493,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  474,  473,  467,  465,  464,  463,
      462,  461,  460,  458,  457,  456,  450,  449,  448,  447,

      442,  441,  440,  439,  438,  433,  432,  431,  430,  429,
      428,  427,  426,  423,  422,  421,  418,  417,  416,  415,
      414,  413,  410,  409,  408,  401,  395,  394,  393,  392,
      391,  387,  386,  385,  380,  379,  378,  377,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  334,  333,  332,  331,
      330,  329,  328,  327,  324,  323,  322,  319,  318,  317,
      316,  315,  314,  313,  312,  305,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  286,  285,  284,  283,  282,

      273,  252,  243,  238,  235,  234,  231,  230,  229,  228,
      225,  224,  223,  222,  221,  220,  219,  218,  215,  211,
      210,  209,  208,  205,  204,  203,  202,  201,  201,  200,
      191,  171,  162,  157,  136,  133,  132,  125,  124,  118,
      115,  114,  113,  112,  111,  108,  102,  101,   76,  107,
      106,  102,  101,   76,   72,   72, 2580,   35,   35,   35,
       35,   35,   35,   19, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580
    } ;

static yyconst flex_int16_t yy_chk[4230] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,  439,   16,    1,    0,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,  439,   64,   27,
       27,   56,   65,   26,   62,   83,   69,  127,   47,   27,
       27,   27,   56,  139,   62,   83,   65,  127,   64,  818,
       27,   84,   65,  139,    1,    2,    2,    2,    2,    2,
       69,    2,   84,    2,    2,    2,    2,    2,    2,    2,
       27,    2,    2,   88,   29,   29,   94,   48,   48,  819,
        2,   88,   29,    2,   29,   29,   29,   48,   48,   48,

       94,   68,   91,   68,  820,   29,   68,   91,   48,   73,
       73,   75,   75,   77,   77,   75,   75,   75,   68,   86,
       87,   95,   96,   86,   95,   29,   87,   95,   48,    2,
       21,   21,   87,  823,   21,   86,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   96,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   30,   50,   50,  134,  134,  134,   99,

       30,   92,   50,   90,   50,   50,   50,   30,   99,   92,
      111,   90,   30,  116,  116,   50,  118,   90,  132,  111,
       30,  201,  201,  118,  152,  132,  140,  116,   30,   30,
       30,   30,   30,   30,   30,   50,   30,  140,  824,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  152,   30,
       74,   74,   93,  143,  137,  137,   93,  237,  237,  143,
       74,   74,   74,   93,   98,  143,   93,  144,   98,  137,
      289,   74,   93,  116,   98,  144,   98,  135,  135,   98,
       98,  142,  146,  825,  289,  142,  148,  135,  135,  135,
      146,   74,   79,  147,  148,  155,  146,  142,  147,  151,

       79,  150,  151,  177,  155,  151,  175,  177,   79,   79,
       79,   79,   79,   79,   79,  150,   79,  175,  150,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  149,   79,
      191,  154,  149,  191,  187,  154,  258,  172,  172,  149,
      258,  154,  149,  154,  173,  187,  154,  154,  149,  162,
      162,  162,  172,  176,  176,  200,  162,  212,  212,  173,
      173,  200,  213,  213,  826,  213,  215,  213,  176,  214,
      214,  212,  215,  236,  236,  238,  238,  243,  243,  243,
      247,  247,  256,  214,  243,  253,  253,  338,  236,  254,
      238,  257,  257,  256,  338,  247,  269,  214,  262,  262,

      253,  331,  214,  282,  254,  254,  257,  269,  273,  282,
      832,  273,  331,  262,  283,  283,  290,  290,  295,  295,
      499,  247,  296,  296,  300,  300,  301,  301,  834,  283,
      835,  290,  836,  295,  308,  308,  430,  296,  837,  300,
      309,  309,  311,  311,  312,  312,  315,  430,  315,  308,
      315,  328,  328,  332,  332,  499,  336,  311,  617,  312,
      315,  340,  340,  336,  346,  346,  328,  346,  332,  346,
      349,  349,  350,  350,  633,  340,  296,  336,  354,  354,
      358,  358,  359,  359,  349,  370,  370,  374,  374,  375,
      375,  633,  354,  617,  358,  839,  359,  376,  376,  370,

      652,  312,  377,  377,  375,  383,  383,  384,  384,  388,
      388,  389,  389,  391,  391,  392,  392,  377,  396,  396,
      383,  652,  384,  840,  388,  397,  397,  842,  391,  845,
      392,  405,  405,  396,  404,  404,  407,  407,  408,  408,
      411,  411,  412,  412,  415,  415,  383,  550,  413,  404,
      413,  407,  413,  408,  846,  411,  427,  427,  508,  415,
      383,  550,  413,  431,  431,  435,  435,  436,  436,  392,
      508,  427,  437,  437,  646,  445,  445,  646,  431,  847,
      435,  848,  436,  446,  446,  415,  451,  451,  761,  435,
      445,  452,  452,  453,  453,  408,  435,  454,  454,  459,

      459,  451,  463,  463,  466,  466,  468,  468,  453,  761,
      435,  463,  469,  469,  470,  470,  849,  463,  471,  471,
      853,  468,  473,  473,  482,  482,  491,  491,  856,  470,
      859,  473,  492,  492,  497,  497,  860,  473,  861,  482,
      862,  491,  498,  498,  509,  509,  510,  510,  863,  497,
      518,  518,  522,  522,  523,  523,  527,  527,  509,  528,
      528,  529,  529,  741,  530,  530,  522,  530,  864,  530,
      527,  538,  538,  539,  539,  529,  541,  541,  542,  542,
      741,  542,  865,  542,  866,  538,  867,  539,  545,  545,
      541,  546,  546,  547,  547,  548,  548,  539,  554,  554,

      555,  555,  545,  558,  558,  559,  559,  868,  547,  563,
      563,  565,  565,  554,  566,  566,  567,  567,  558,  568,
      568,  569,  569,  573,  573,  869,  565,  577,  577,  580,
      580,  567,  582,  582,  583,  583,  569,  584,  584,  585,
      585,  875,  577,  587,  587,  589,  589,  582,  595,  595,
      596,  596,  584,  599,  599,  600,  600,  876,  587,  609,
      609,  610,  610,  595,  615,  615,  616,  616,  599,  877,
      600,  620,  620,  878,  609,  621,  621,  625,  625,  615,
      634,  634,  639,  639,  640,  640,  620,  647,  647,  881,
      649,  649,  653,  653,  654,  654,  647,  655,  655,  656,

      656,  882,  647,  649,  658,  658,  667,  667,  656,  668,
      668,  883,  655,  884,  656,  670,  670,  658,  677,  677,
      885,  667,  682,  682,  684,  684,  695,  695,  701,  701,
      670,  702,  702,  704,  704,  708,  708,  719,  719,  684,
      722,  722,  701,  709,  709,  702,  709,  886,  709,  720,
      720,  719,  720,  887,  720,  721,  721,  725,  725,  889,
      725,  890,  725,  730,  730,  731,  731,  732,  732,  721,
      736,  736,  739,  739,  740,  740,  892,  730,  742,  742,
      747,  747,  748,  748,  893,  736,  749,  749,  896,  740,
      750,  750,  756,  757,  757,  756,  758,  758,  762,  762,

      897,  749,  763,  763,  764,  764,  765,  765,  757,  766,
      766,  773,  773,  776,  776,  777,  777,  778,  778,  764,
      899,  765,  779,  779,  900,  736,  781,  781,  776,  783,
      783,  901,  778,  788,  788,  791,  791,  792,  792,  793,
      793,  781,  795,  795,  783,  798,  798,  811,  811,  905,
      791,  906,  792,  821,  821,  822,  822,  795,  828,  828,
      829,  829,  811,  830,  830,  831,  831,  909,  822,  833,
      833,  841,  841,  828,  843,  843,  844,  844,  831,  850,
      850,  855,  855,  910,  833,  870,  870,  911,  850,  843,
      791,  827,  827,  827,  850,  913,  827,  827,  827,  870,

      827,  827,  851,  851,  827,  827,  827,  827,  854,  854,
      871,  871,  872,  872,  873,  873,  914,  851,  874,  874,
      891,  891,  916,  854,  871,  917,  888,  888,  873,  888,
      918,  888,  919,  851,  898,  898,  902,  902,  903,  903,
      904,  904,  907,  907,  908,  908,  912,  912,  915,  915,
      920,  902,  921,  922,  924,  904,  925,  907,  923,  923,
      926,  912,  927,  927,  928,  928,  929,  929,  930,  930,
      931,  931,  932,  933,  934,  935,  937,  927,  938,  928,
      941,  927,  927,  927,  944,  931,  927,  927,  927,  947,
      927,  927,  936,  936,  927,  927,  927,  927,  939,  939,

      940,  940,  942,  942,  943,  943,  948,  936,  945,  945,
      946,  946,  949,  950,  951,  951,  958,  942,  952,  952,
      953,  953,  961,  945,  954,  954,  955,  955,  964,  951,
      956,  956,  965,  952,  967,  953,  957,  957,  959,  959,
      968,  955,  960,  960,  969,  956,  962,  962,  970,  952,
      963,  963,  971,  959,  966,  966,  972,  973,  974,  974,
      976,  962,  975,  975,  977,  963,  979,  980,  982,  966,
      983,  984,  986,  974,  980,  985,  985,  987,  987,  988,
      989,  990,  991,  992,  993,  994,  987,  995,  991,  996,
      997,  995,  987,  998,  993,  999,  997, 1000, 1001, 1002,

     1002,  999, 1003, 1003,  999, 1004, 1005, 1005, 1006, 1006,
     1007,  998, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1014,
     1016, 1005, 1015, 1015, 1017, 1018, 1019, 1020, 1020, 1021,
     1022, 1022, 1023, 1023, 1024, 1024, 1020, 1015, 1025, 1026,
     1028, 1015, 1020, 1022, 1027, 1027, 1029, 1023, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1036, 1037, 1038, 1039, 1040,
     1040, 1041, 1041, 1042, 1042, 1043, 1043, 1044, 1036, 1045,
     1046, 1047, 1048, 1040, 1050, 1051, 1052, 1053, 1054, 1058,
     1036, 1049, 1049, 1059, 1049, 1057, 1057, 1060, 1062, 1049,
     1049, 1049, 1063, 1049, 1049, 1049, 1061, 1061, 1049, 1057,

     1064, 1064, 1065, 1065, 1066, 1066, 1067, 1068, 1069, 1069,
     1070, 1061, 1071, 1072, 1073, 1073, 1075, 1065, 1074, 1074,
     1076, 1077, 1077, 1078, 1079, 1080, 1080, 1081, 1082, 1073,
     1083, 1079, 1084, 1084, 1085, 1086, 1077, 1087, 1087, 1089,
     1080, 1088, 1088, 1090, 1091, 1092, 1093, 1084, 1095, 1090,
     1094, 1096, 1087, 1097, 1094, 1092, 1098, 1096, 1099, 1100,
     1098, 1101, 1101, 1102, 1102, 1104, 1098, 1103, 1103, 1098,
     1105, 1097, 1106, 1107, 1108, 1108, 1109, 1109, 1102, 1110,
     1111, 1112, 1113, 1113, 1114, 1114, 1115, 1115, 1116, 1108,
     1117, 1118, 1119, 1120, 1120, 1121, 1121, 1122, 1122, 1114,

     1123, 1123, 1124, 1114, 1125, 1125, 1126, 1126, 1120, 1127,
     1127, 1129, 1122, 1128, 1128, 1130, 1130, 1131, 1132, 1132,
     1136, 1126, 1133, 1133, 1134, 1134, 1135, 1135, 1137, 1138,
     1138, 1139, 1139, 1132, 1140, 1141, 1142, 1143, 1144, 1134,
     1145, 1146, 1147, 1147, 1138, 1150, 1151, 1152, 1153, 1154,
     1156, 1157, 1157, 1158, 1159, 1159, 1160, 1162, 1163, 1164,
     1157, 1165, 1166, 1167, 1168, 1169, 1157, 1159, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1190,
     1191, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1197, 1198,

     1198, 1199, 1201, 1190, 1200, 1200, 1202, 1203, 1204, 1205,
     1206, 1207, 1198, 1208, 1209, 1210, 1211, 1211, 1212, 1212,
     1213, 1214, 1215, 1216, 1217, 1217, 1218, 1219, 1219, 1220,
     1211, 1221, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1229, 1219, 1230, 1231, 1232, 1221, 1233, 1234, 1235, 1236,
     1237, 1238, 1238, 1239, 1239, 1240, 1241, 1241, 1242, 1243,
     1243, 1244, 1244, 1245, 1246, 1238, 1247, 1247, 1248, 1249,
     1241, 1250, 1251, 1252, 1243, 1253, 1253, 1254, 1254, 1255,
     1255, 1256, 1256, 1257, 1257, 1258, 1259, 1260, 1261, 1261,
     1262, 1262, 1254, 1263, 1255, 1264, 1256, 1265, 1265, 1266,

     1266, 1267, 1267, 1261, 1268, 1269, 1269, 1270, 1270, 1271,
     1272, 1273, 1265, 1274, 1266, 1275, 1276, 1277, 1278, 1279,
     1269, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1291, 1292, 1293, 1294, 1295, 1295, 1296,
     1296, 1297, 1298, 1299, 1300, 1300, 1301, 1301, 1302, 1303,
     1304, 1305, 1295, 1306, 1307, 1307, 1308, 1308, 1309, 1300,
     1310, 1310, 1311, 1312, 1313, 1313, 1314, 1314, 1315, 1316,
     1316, 1317, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
     1325, 1326, 1327, 1328, 1316, 1329, 1330, 1331, 1331, 1332,
     1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,

     1342, 1343, 1332, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361,
     1361, 1351, 1362, 1363, 1316, 1364, 1365, 1366, 1367, 1367,
     1368, 1369, 1370, 1371, 1372, 1374, 1375, 1376, 1377, 1375,
     1378, 1379, 1379, 1380, 1381, 1382, 1383, 1375, 1384, 1385,
     1385, 1386, 1386, 1387, 1388, 1388, 1389, 1389, 1390, 1391,
     1392, 1394, 1392, 1385, 1393, 1393, 1395, 1396, 1388, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1393, 1406,
     1406, 1407, 1408, 1408, 1409, 1409, 1410, 1411, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1408, 1419, 1419, 1420,

     1420, 1421, 1421, 1422, 1422, 1423, 1423, 1424, 1425, 1426,
     1427, 1427, 1419, 1428, 1429, 1433, 1421, 1430, 1430, 1431,
     1431, 1432, 1432, 1434, 1434, 1435, 1435, 1436, 1436, 1437,
     1438, 1439, 1430, 1440, 1441, 1442, 1443, 1444, 1434, 1445,
     1445, 1446, 1436, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1454, 1455, 1455, 1456, 1445, 1457, 1458, 1459, 1459, 1461,
     1453, 1460, 1460, 1462, 1463, 1463, 1455, 1464, 1464, 1465,
     1466, 1467, 1459, 1468, 1469, 1470, 1471, 1472, 1473, 1463,
     1445, 1477, 1436, 1474, 1474, 1475, 1475, 1476, 1476, 1481,
     1482, 1483, 1484, 1485, 1486, 1487, 1455, 1488, 1474, 1489,

     1490, 1490, 1476, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1508,
     1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1518, 1519,
     1520, 1521, 1523, 1524, 1525, 1525, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1534, 1535, 1535, 1536, 1537, 1525,
     1538, 1539, 1540, 1541, 1541, 1542, 1542, 1534, 1544, 1535,
     1543, 1543, 1545, 1546, 1547, 1548, 1548, 1549, 1549, 1542,
     1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1547, 1548,
     1558, 1559, 1560, 1561, 1562, 1563, 1563, 1564, 1564, 1565,
     1566, 1566, 1567, 1567, 1568, 1568, 1569, 1556, 1570, 1571,

     1574, 1564, 1572, 1572, 1575, 1566, 1576, 1567, 1577, 1568,
     1573, 1573, 1578, 1579, 1579, 1580, 1581, 1581, 1582, 1582,
     1583, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1593, 1582, 1594, 1594, 1595, 1596, 1596, 1597,
     1598, 1599, 1600, 1600, 1601, 1602, 1593, 1603, 1604, 1605,
     1606, 1606, 1596, 1607, 1607, 1608, 1609, 1600, 1610, 1611,
     1612, 1612, 1613, 1613, 1614, 1606, 1615, 1615, 1616, 1616,
     1617, 1618, 1619, 1620, 1620, 1621, 1624, 1613, 1622, 1622,
     1625, 1615, 1623, 1623, 1626, 1626, 1627, 1627, 1620, 1628,
     1628, 1629, 1630, 1622, 1632, 1632, 1634, 1623, 1633, 1633,

     1635, 1627, 1636, 1632, 1637, 1638, 1638, 1633, 1639, 1632,
     1640, 1641, 1642, 1633, 1643, 1644, 1645, 1646, 1647, 1650,
     1638, 1651, 1652, 1653, 1655, 1657, 1658, 1659, 1660, 1660,
     1661, 1662, 1663, 1664, 1667, 1666, 1668, 1669, 1670, 1670,
     1671, 1671, 1672, 1660, 1666, 1673, 1674, 1675, 1676, 1677,
     1678, 1679, 1679, 1670, 1680, 1680, 1681, 1681, 1682, 1682,
     1683, 1684, 1685, 1686, 1687, 1679, 1688, 1688, 1689, 1689,
     1681, 1690, 1691, 1692, 1693, 1694, 1695, 1695, 1696, 1697,
     1688, 1698, 1699, 1700, 1700, 1701, 1702, 1703, 1704, 1704,
     1705, 1706, 1707, 1708, 1709, 1710, 1710, 1700, 1711, 1711,

     1712, 1719, 1704, 1713, 1713, 1714, 1714, 1715, 1715, 1710,
     1716, 1716, 1717, 1717, 1718, 1718, 1720, 1720, 1713, 1721,
     1721, 1723, 1715, 1722, 1722, 1724, 1725, 1717, 1726, 1727,
     1729, 1720, 1728, 1728, 1721, 1730, 1731, 1732, 1722, 1733,
     1734, 1735, 1736, 1736, 1737, 1737, 1738, 1738, 1739, 1740,
     1740, 1741, 1741, 1742, 1743, 1744, 1748, 1736, 1750, 1737,
     1745, 1745, 1746, 1746, 1740, 1747, 1747, 1749, 1749, 1751,
     1752, 1752, 1753, 1754, 1755, 1745, 1756, 1757, 1757, 1759,
     1747, 1762, 1749, 1758, 1758, 1760, 1760, 1761, 1761, 1763,
     1762, 1766, 1757, 1764, 1764, 1765, 1765, 1767, 1767, 1768,

     1768, 1771, 1761, 1769, 1769, 1770, 1770, 1772, 1764, 1773,
     1773, 1774, 1767, 1775, 1776, 1776, 1777, 1780, 1769, 1778,
     1778, 1779, 1779, 1776, 1781, 1781, 1782, 1783, 1785, 1776,
     1779, 1788, 1778, 1784, 1784, 1789, 1779, 1781, 1786, 1786,
     1787, 1787, 1784, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1799, 1786, 1800, 1801, 1802, 1803, 1804, 1805,
     1805, 1806, 1806, 1807, 1808, 1809, 1811, 1812, 1813, 1814,
     1815, 1816, 1816, 1817, 1805, 1818, 1819, 1819, 1822, 1820,
     1821, 1821, 1823, 1823, 1824, 1824, 1825, 1825, 1826, 1827,
     1819, 1820, 1828, 1829, 1821, 1830, 1823, 1831, 1831, 1832,

     1833, 1834, 1835, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1841, 1842, 1842, 1843, 1844, 1845, 1835, 1846, 1846, 1847,
     1847, 1848, 1849, 1841, 1850, 1851, 1837, 1852, 1853, 1853,
     1854, 1846, 1855, 1855, 1856, 1856, 1857, 1857, 1858, 1859,
     1859, 1860, 1860, 1861, 1861, 1862, 1862, 1863, 1863, 1864,
     1864, 1865, 1866, 1868, 1859, 1867, 1867, 1869, 1861, 1870,
     1871, 1872, 1863, 1873, 1874, 1875, 1876, 1877, 1877, 1881,
     1867, 1878, 1878, 1879, 1879, 1880, 1880, 1882, 1882, 1883,
     1884, 1885, 1877, 1886, 1886, 1887, 1887, 1889, 1879, 1888,
     1888, 1890, 1890, 1891, 1891, 1892, 1893, 1894, 1895, 1896,

     1887, 1897, 1898, 1898, 1899, 1899, 1890, 1900, 1900, 1901,
     1901, 1902, 1903, 1904, 1905, 1905, 1906, 1907, 1907, 1899,
     1908, 1908, 1900, 1909, 1910, 1911, 1912, 1913, 1913, 1914,
     1914, 1915, 1916, 1916, 1917, 1917, 1918, 1919, 1920, 1921,
     1921, 1922, 1914, 1923, 1924, 1924, 1925, 1917, 1921, 1926,
     1927, 1928, 1929, 1930, 1931, 1933, 1934, 1935, 1936, 1937,
     1938, 1939, 1940, 1941, 1942, 1942, 1943, 1944, 1945, 1946,
     1948, 1949, 1950, 1951, 1952, 1953, 1953, 1954, 1954, 1955,
     1956, 1957, 1957, 1958, 1958, 1959, 1960, 1960, 1962, 1953,
     1963, 1961, 1961, 1964, 1961, 1957, 1961, 1965, 1966, 1967,

     1960, 1968, 1968, 1969, 1970, 1970, 1971, 1971, 1972, 1973,
     1974, 1975, 1974, 1976, 1977, 1968, 1978, 1978, 1970, 1974,
     1979, 1979, 1980, 1980, 1974, 1981, 1974, 1982, 1982, 1983,
     1984, 1985, 1986, 1987, 1979, 1988, 1980, 1989, 1990, 1990,
     1991, 1991, 1992, 1992, 1993, 1994, 1995, 1995, 1996, 1996,
     1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2004, 2005,
     2008, 1995, 2006, 2006, 2007, 2007, 2009, 2010, 2011, 2012,
     2012, 2013, 2004, 2014, 2014, 2015, 2016, 2017, 2018, 2019,
     2020, 2021, 2021, 2022, 2022, 2023, 2023, 2024, 2025, 2025,
     2026, 2027, 2028, 2029, 2030, 2031, 2021, 2032, 2032, 2033,

     2034, 2034, 2035, 2025, 2036, 2037, 2038, 2038, 2039, 2040,
     2042, 2045, 2047, 2048, 2049, 2050, 2051, 2053, 2054, 2055,
     2056, 2057, 2058, 2059, 2060, 2061, 2062, 2064, 2065, 2065,
     2066, 2067, 2068, 2068, 2069, 2070, 2070, 2071, 2070, 2072,
     2070, 2073, 2074, 2075, 2076, 2083, 2069, 2077, 2077, 2078,
     2078, 2079, 2079, 2080, 2080, 2081, 2081, 2082, 2082, 2084,
     2085, 2077, 2086, 2078, 2087, 2079, 2088, 2089, 2090, 2081,
     2091, 2092, 2093, 2093, 2094, 2094, 2095, 2095, 2096, 2096,
     2097, 2098, 2099, 2100, 2101, 2102, 2093, 2103, 2104, 2105,
     2095, 2106, 2107, 2107, 2108, 2109, 2109, 2110, 2111, 2111,

     2112, 2112, 2113, 2114, 2114, 2115, 2115, 2116, 2116, 2117,
     2109, 2118, 2119, 2111, 2120, 2112, 2121, 2123, 2114, 2124,
     2115, 2122, 2122, 2125, 2126, 2127, 2128, 2129, 2129, 2130,
     2131, 2131, 2132, 2132, 2133, 2134, 2122, 2135, 2135, 2136,
     2137, 2138, 2139, 2140, 2142, 2131, 2143, 2143, 2144, 2145,
     2146, 2147, 2135, 2148, 2149, 2150, 2151, 2152, 2154, 2156,
     2159, 2160, 2161, 2162, 2162, 2163, 2164, 2164, 2165, 2165,
     2166, 2167, 2170, 2171, 2172, 2173, 2174, 2174, 2162, 2181,
     2164, 2183, 2165, 2175, 2175, 2184, 2175, 2185, 2175, 2186,
     2174, 2176, 2176, 2177, 2177, 2178, 2178, 2179, 2179, 2180,

     2180, 2182, 2182, 2187, 2188, 2176, 2189, 2190, 2191, 2191,
     2193, 2179, 2192, 2192, 2196, 2182, 2194, 2194, 2195, 2195,
     2197, 2197, 2198, 2199, 2200, 2201, 2201, 2202, 2203, 2206,
     2194, 2211, 2195, 2215, 2197, 2204, 2204, 2205, 2205, 2216,
     2201, 2207, 2207, 2208, 2208, 2209, 2209, 2210, 2210, 2217,
     2204, 2212, 2212, 2213, 2213, 2218, 2207, 2214, 2214, 2219,
     2209, 2220, 2220, 2221, 2221, 2223, 2212, 2222, 2222, 2224,
     2224, 2225, 2226, 2226, 2227, 2227, 2220, 2228, 2229, 2229,
     2230, 2231, 2222, 2234, 2224, 2232, 2232, 2226, 2237, 2227,
     2233, 2233, 2238, 2239, 2241, 2242, 2243, 2244, 2246, 2247,

     2232, 2248, 2249, 2250, 2251, 2252, 2254, 2254, 2255, 2255,
     2256, 2257, 2257, 2258, 2258, 2259, 2259, 2260, 2260, 2261,
     2262, 2254, 2263, 2263, 2264, 2257, 2265, 2266, 2268, 2259,
     2267, 2267, 2269, 2267, 2272, 2267, 2263, 2270, 2270, 2271,
     2271, 2273, 2273, 2274, 2274, 2275, 2275, 2276, 2277, 2277,
     2278, 2279, 2279, 2280, 2281, 2273, 2282, 2283, 2283, 2275,
     2284, 2284, 2277, 2285, 2285, 2279, 2286, 2286, 2287, 2287,
     2288, 2283, 2289, 2289, 2284, 2291, 2290, 2290, 2296, 2290,
     2286, 2290, 2292, 2292, 2293, 2293, 2289, 2291, 2294, 2294,
     2295, 2295, 2297, 2297, 2298, 2298, 2299, 2292, 2302, 2293,

     2300, 2300, 2304, 2294, 2301, 2301, 2306, 2297, 2303, 2303,
     2305, 2305, 2307, 2308, 2309, 2309, 2310, 2310, 2311, 2311,
     2312, 2313, 2313, 2314, 2314, 2305, 2315, 2316, 2316, 2317,
     2317, 2310, 2318, 2318, 2319, 2319, 2313, 2320, 2321, 2322,
     2322, 2324, 2316, 2323, 2323, 2325, 2326, 2318, 2327, 2328,
     2328, 2331, 2335, 2336, 2322, 2337, 2338, 2339, 2339, 2340,
     2341, 2341, 2342, 2342, 2328, 2343, 2343, 2344, 2344, 2345,
     2345, 2346, 2346, 2347, 2348, 2349, 2349, 2352, 2359, 2343,
     2362, 2344, 2364, 2345, 2353, 2353, 2354, 2354, 2369, 2349,
     2355, 2355, 2356, 2356, 2357, 2357, 2358, 2358, 2360, 2360,

     2354, 2361, 2361, 2363, 2363, 2371, 2356, 2372, 2357, 2365,
     2365, 2373, 2360, 2366, 2366, 2367, 2367, 2363, 2368, 2368,
     2374, 2370, 2370, 2365, 2370, 2380, 2370, 2375, 2375, 2376,
     2376, 2377, 2377, 2378, 2378, 2379, 2379, 2381, 2381, 2382,
     2382, 2385, 2375, 2383, 2383, 2392, 2377, 2384, 2384, 2386,
     2386, 2394, 2381, 2387, 2387, 2388, 2388, 2397, 2383, 2389,
     2389, 2398, 2384, 2401, 2386, 2390, 2390, 2391, 2391, 2402,
     2388, 2393, 2393, 2403, 2389, 2395, 2395, 2396, 2396, 2407,
     2390, 2399, 2399, 2400, 2400, 2405, 2405, 2406, 2406, 2408,
     2409, 2410, 2411, 2412, 2413, 2413, 2399, 2414, 2414, 2429,

     2405, 2415, 2415, 2416, 2416, 2417, 2417, 2432, 2413, 2418,
     2418, 2419, 2419, 2420, 2420, 2415, 2421, 2421, 2422, 2422,
     2423, 2423, 2437, 2418, 2438, 2419, 2447, 2420, 2424, 2424,
     2425, 2425, 2422, 2426, 2426, 2427, 2427, 2428, 2428, 2430,
     2430, 2455, 2424, 2431, 2431, 2433, 2433, 2434, 2434, 2427,
     2439, 2439, 2456, 2430, 2440, 2440, 2441, 2441, 2442, 2442,
     2457, 2434, 2443, 2443, 2444, 2444, 2445, 2445, 2446, 2446,
     2458, 2441, 2448, 2448, 2449, 2449, 2460, 2443, 2450, 2450,
     2461, 2445, 2451, 2451, 2452, 2452, 2453, 2453, 2462, 2449,
     2454, 2454, 2459, 2459, 2463, 2463, 2466, 2451, 2467, 2468,

     2469, 2453, 2470, 2470, 2471, 2471, 2472, 2472, 2473, 2473,
     2474, 2474, 2475, 2475, 2482, 2475, 2484, 2475, 2476, 2476,
     2472, 2477, 2477, 2498, 2474, 2478, 2478, 2479, 2479, 2480,
     2480, 2481, 2481, 2483, 2483, 2477, 2485, 2485, 2486, 2486,
     2487, 2487, 2499, 2480, 2488, 2488, 2489, 2489, 2490, 2490,
     2485, 2491, 2491, 2500, 2487, 2492, 2492, 2501, 2488, 2493,
     2493, 2489, 2494, 2494, 2495, 2495, 2496, 2496, 2497, 2497,
     2502, 2503, 2505, 2510, 2493, 2508, 2508, 2509, 2509, 2511,
     2509, 2514, 2509, 2497, 2512, 2512, 2513, 2513, 2515, 2516,
     2516, 2517, 2517, 2518, 2518, 2519, 2519, 2520, 2520, 2521,

     2521, 2522, 2522, 2523, 2523, 2517, 2524, 2524, 2527, 2519,
     2525, 2525, 2526, 2526, 2528, 2528, 2522, 2529, 2529, 2530,
     2531, 2524, 2535, 2536, 2536, 2537, 2537, 2526, 2548, 2528,
     2538, 2538, 2529, 2539, 2539, 2540, 2540, 2536, 2541, 2541,
     2542, 2542, 2543, 2543, 2544, 2544, 2545, 2545, 2546, 2546,
     2547, 2547, 2549, 2541, 2550, 2551, 2551, 2543, 2558, 2544,
     2552, 2552, 2559, 2546, 2553, 2553, 2554, 2554, 2560, 2551,
     2555, 2555, 2556, 2556, 2557, 2557, 2561, 2561, 2562, 2562,
     2563, 2554, 2564, 2565, 2566, 2566, 2567, 2567, 2568, 2569,
     2569, 2570, 2570, 2571, 2571, 2572, 2572, 2573, 2588, 2566,

      817, 2567, 2574, 2574, 2569, 2575, 2575,  816, 2571, 2576,
     2576, 2577, 2577, 2578, 2578, 2579, 2579,  815,  814,  813,
      812,  810,  809, 2576,  808, 2577, 2581, 2581, 2581, 2581,
     2581, 2582, 2582, 2582, 2582, 2582, 2583, 2583, 2583, 2583,
     2583, 2584, 2584, 2584, 2584, 2584, 2585, 2585, 2585, 2585,
     2585, 2586, 2586, 2586, 2586, 2586, 2587, 2587, 2587, 2587,
     2587, 2589, 2589,  807, 2589, 2589, 2590, 2590, 2590,  806,
     2590, 2591, 2591, 2591, 2591,  804,  803,  802,  801,  800,
      799,  797,  796,  794,  790,  789,  787,  786,  785,  784,
      782,  780,  775,  774,  772,  771,  770,  769,  768,  767,

      760,  759,  755,  754,  753,  752,  751,  746,  745,  744,
      743,  738,  737,  735,  734,  733,  729,  728,  727,  726,
      724,  723,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  707,  706,  705,  703,  700,  699,  698,  697,  696,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      683,  680,  679,  678,  676,  675,  674,  673,  671,  669,
      666,  665,  664,  663,  662,  661,  660,  659,  657,  651,
      650,  648,  645,  644,  643,  642,  641,  638,  637,  636,
      635,  631,  630,  629,  628,  627,  626,  624,  623,  622,
      619,  618,  614,  613,  612,  611,  608,  607,  606,  605,

      604,  603,  602,  601,  598,  597,  594,  593,  592,  591,
      590,  588,  586,  581,  579,  578,  576,  575,  574,  572,
      571,  570,  564,  562,  561,  560,  557,  556,  553,  552,
      551,  549,  544,  543,  540,  537,  536,  535,  534,  533,
      532,  531,  526,  525,  524,  521,  520,  519,  515,  514,
      513,  512,  511,  507,  506,  505,  504,  503,  502,  501,
      500,  496,  495,  494,  493,  490,  489,  488,  487,  486,
      485,  484,  483,  481,  480,  479,  478,  477,  476,  475,
      474,  472,  467,  465,  464,  462,  461,  460,  458,  457,
      456,  450,  449,  448,  447,  444,  443,  442,  441,  440,

      438,  434,  433,  432,  429,  428,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  414,  410,  409,
      406,  403,  402,  401,  400,  399,  398,  395,  394,  393,
      390,  387,  386,  385,  382,  381,  380,  379,  378,  373,
      372,  371,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  357,  356,  355,  353,  352,  351,  348,  347,
      345,  344,  343,  342,  341,  339,  337,  335,  334,  333,
      330,  329,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  314,  313,  310,  307,  306,  305,
      304,  303,  302,  299,  298,  297,  294,  293,  292,  291,

      288,  287,  286,  285,  284,  281,  280,  279,  278,  277,
      276,  275,  274,  272,  271,  270,  268,  267,  266,  265,
      264,  263,  261,  260,  259,  255,  252,  251,  250,  249,
      248,  246,  245,  244,  242,  241,  240,  239,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  199,  198,  197,  196,
      195,  194,  193,  192,  190,  189,  188,  186,  185,  184,
      183,  182,  180,  179,  178,  174,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  161,  160,  159,  158,  156,

      153,  145,  141,  138,  136,  133,  131,  130,  129,  128,
      126,  125,  124,  123,  122,  121,  120,  119,  117,  115,
      114,  113,  112,  110,  109,  108,  106,  102,  101,  100,
       97,   89,   85,   82,   78,   71,   70,   67,   66,   63,
       61,   60,   59,   58,   57,   55,   54,   53,   49,   44,
       41,   33,   32,   28,   25,   23,   19,   14,   13,    8,
        7,    6,    5, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,

     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[332] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;

#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2363 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 2618 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2581 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4164 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXEXPRATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPREND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 321:
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 325:
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 4734 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2581 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2581 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2580);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 559 "../../../../OS/src/OSParsers/OSParseosil.l"




