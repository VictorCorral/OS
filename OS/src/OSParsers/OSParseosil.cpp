#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 287
#define YY_END_OF_BUFFER 288
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2211] =
    {   0,
        1,    1,    0,    0,  284,  284,  285,  285,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  288,  286,
        1,    1,    2,  274,    2,  274,    6,  274,    5,  286,
        4,  274,  274,    2,  287,  284,  285,  275,  277,  278,
      277,  281,  282,  281,    1,  274,  274,    6,  274,    5,
        0,    4,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,    3,    6,    6,
      274,    7,    5,    0,    0,  280,  234,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  274,  274,  284,  285,

      275,    0,  283,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  236,    0,    0,    0,    0,
        0,    0,    0,    0,  102,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  190,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
      279,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  276,    0,  235,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      220,    0,    0,    0,    0,    0,    0,    0,  204,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   64,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   31,   32,  274,   15,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  235,    0,  237,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  103,    0,
        0,    0,    0,    0,    0,    0,  221,    0,    0,    0,
        0,    0,    0,    0,  205,    0,    0,    0,    0,    0,
        0,  191,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  216,    0,    0,    0,    0,
        0,    0,    0,    0,  212,    0,    0,    0,    0,    0,
      218,    0,  214,    0,    0,    0,  220,    0,    0,    0,
        0,    0,    0,  204,    0,    0,  222,    0,  224,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
        0,    0,    0,    0,    0,  226,    0,    0,    0,    0,
        0,  274,  274,  274,  187,  274,  274,  274,  274,  274,
       29,   30,   15,  274,  274,  274,  274,   18,  274,   19,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  237,    0,  217,    0,    0,    0,    0,    0,
        0,   67,    0,    0,    0,  213,    0,    0,    0,  103,
        0,    0,  219,    0,  215,    0,    0,    0,  221,    0,
        0,    0,    0,    0,    0,  205,    0,    0,  223,    0,
      225,    0,    0,    0,  191,    0,    0,    0,    0,    0,
        0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  211,    0,    0,    0,    0,
        0,  227,    0,    0,    0,   65,    0,    0,    0,  216,
        0,    0,    0,  152,    0,    0,   74,    0,  212,    0,
        0,    0,    0,  218,  214,    0,    0,    0,    0,    0,

        0,    0,    0,  105,    0,    0,    0,  222,  224,    0,
        0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  196,    0,    0,    0,   50,    0,    0,    0,
        0,  210,    0,    0,   56,  170,  226,    0,    0,    0,
        0,    0,    0,  274,  274,  187,  274,  274,  274,  274,
      274,  274,  274,  274,   18,   19,  274,   35,   36,  274,
      274,  274,  274,  274,  274,   22,  274,  274,  274,   39,
       40,  274,   23,  217,    0,    0,    0,    0,    0,    0,
       67,    0,    0,  213,    0,    0,    0,    0,  219,  215,
        0,    0,    0,    0,    0,    0,    0,  106,    0,    0,

        0,  223,  225,    0,    0,  112,    0,    0,    0,    0,
        0,    0,   69,    0,    0,    0,   45,    0,  197,    0,
        0,    0,    0,    0,    0,    0,    0,  211,    0,    0,
        0,    0,  227,    0,    0,    0,   65,    0,    0,    0,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
      105,    0,    0,    0,    0,  146,    0,  198,  113,  111,
        0,    0,    0,    0,    0,    0,  232,    0,    0,  196,
        0,    0,  202,    0,    0,    0,    0,    0,    0,    0,
       54,    0,    0,  192,    0,  182,    0,    0,  274,  274,

      274,  274,  274,  274,  274,  274,   16,  274,   17,  274,
       33,   34,  274,  274,  274,  274,  274,   22,  274,  274,
       37,   38,   23,    0,    0,    0,    0,  153,    0,    0,
        0,    0,   75,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
        0,    0,  199,  112,    0,    0,    0,    0,    0,    0,
        0,    0,   45,  197,    0,    0,  203,    0,    0,   51,
        0,    0,    0,    0,    0,    0,    0,   57,    0,    0,
      171,    0,    0,  193,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  194,    0,    0,

       96,    0,    0,  174,    0,    0,    0,  107,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      198,  113,    0,    0,  200,    0,    0,    0,    0,    0,
        0,    0,  202,    0,    0,    0,    0,    0,    0,    0,
      115,    0,  208,    0,    0,  192,    0,    0,    0,  274,
      274,  274,  274,  274,  274,  274,   21,   16,   17,  274,
      274,  274,  274,  274,  274,  274,  274,    0,    0,    0,
      153,    0,  151,    0,    0,   75,    0,    0,    0,    0,
      195,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  147,    0,    0,    0,    0,    0,

        0,    0,    0,  199,    0,  201,    0,    0,    0,    0,
        0,  233,    0,    0,    0,  203,    0,   51,    0,    0,
        0,    0,    0,  116,    0,  209,    0,   57,    0,   55,
      171,    0,  193,    0,    0,  183,    0,    0,    0,  228,
        0,    0,    0,    0,    0,    0,    0,  194,   92,  154,
        0,    0,    0,    0,    0,   70,    0,    0,    0,  127,
        0,   72,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  200,    0,    0,
        0,  172,    0,    0,    0,    0,  230,    0,    0,    0,
        0,    0,  117,  115,    0,  208,    0,    0,    0,    0,

      238,  274,  274,  274,  141,  274,  274,  274,   21,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,   20,  274,    0,  229,    0,    0,  151,    0,
        0,    0,    0,    0,  195,    0,    0,    0,   97,    0,
        0,    0,    0,  175,    0,    0,    0,    0,  128,    0,
        0,  147,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  201,    0,    0,    0,
        0,  233,    0,    0,    0,    0,  231,    0,    0,    0,
        0,    0,  116,  209,    0,   55,    0,    0,  183,    0,
        0,  228,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  129,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
      230,    0,    0,    0,    0,    0,  117,    0,    0,    0,
        0,    0,   58,  274,  274,  141,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   20,  274,  229,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,  155,   97,    0,    0,    0,  175,
        0,    0,    0,   71,  128,    0,    0,   73,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  173,    0,    0,    0,
      231,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  239,    0,    0,  148,  178,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
        0,    0,    0,  180,    0,    0,    0,   52,    0,    0,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
        0,    0,    0,    0,    0,    0,    0,   93,  155,    0,

        0,    0,    0,    0,   71,    0,   73,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  239,
        0,   59,    0,    0,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  256,
      258,    0,    0,  262,    0,  240,    0,    0,    0,    0,
        0,    0,    0,   88,    0,    0,    0,    0,    0,  206,
        0,    0,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,    0,    0,  149,    0,  179,    0,   99,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
        0,   95,    0,    0,    0,    0,  181,    0,    0,  207,
        0,   53,    0,    0,   59,    0,    0,    0,    0,  119,
        0,    0,  123,    0,    0,    0,    0,    0,  104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  110,    0,    0,    0,  108,    0,    0,    0,
        0,    0,  206,    0,    0,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,    0,  149,  179,   99,
        0,    0,   61,    0,  120,    0,  124,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  257,    0,
      259,  261,    0,    0,    0,  263,    0,    0,  241,    0,
        0,    0,    0,    0,   63,    0,    0,   89,    0,    0,
        0,  181,    0,  207,   53,    0,    0,    0,    0,  121,
      119,    0,  125,  123,    0,    0,    0,    0,    0,    0,
      104,    0,    0,    0,    0,    0,  250,    0,    0,    0,
        0,    0,    0,  110,    0,    0,    0,    0,   82,    0,

        0,    0,    0,    0,  274,   26,  274,  274,  274,  130,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,    0,    0,
       61,  120,  124,    0,    0,    0,   46,    0,    0,    0,
        0,    0,    0,    0,  257,  259,    0,    0,  263,    0,
      241,    0,    0,    0,    0,    0,    0,  109,   89,    0,
        0,    0,    0,    0,    0,    0,    0,  121,    0,  125,
        0,    0,    0,   47,    0,    0,  164,  244,  246,  248,
        0,    0,    0,  242,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  184,    0,   26,  274,  274,  130,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   12,  274,  140,  274,  274,  274,  274,  274,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
      251,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      109,    0,    0,   83,    0,    0,    0,    0,    0,    0,
        0,    0,  166,    0,   47,    0,    0,    0,    0,    0,
      268,    0,    0,   76,   78,    0,    0,    0,    0,    0,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
       24,  274,  274,  274,  274,  274,   12,  140,  274,  274,
      274,  274,  274,    0,    0,    0,    0,    0,    0,  165,

        0,  245,    0,  247,    0,  249,  251,    0,    0,    0,
        0,  243,    0,    0,    0,    0,    0,    0,   83,    0,
        0,    0,  185,    0,  100,  156,    0,    0,    0,   90,
        0,    0,    0,    0,    0,    0,    0,    0,   86,    0,
      114,    0,  274,  136,  274,  135,  274,  274,  274,  274,
      274,  274,  272,  273,   24,  274,  274,   13,  274,  274,
      274,  274,  274,  137,  274,  274,  274,  274,    0,    0,
        0,  167,    0,    0,  165,  245,  247,  249,    0,    0,
        0,  243,    0,  269,    0,    0,    0,   77,    0,   79,
        0,    0,    0,  185,    0,    0,    0,    0,    0,    0,

      264,  266,    0,    0,    0,    0,  114,    0,  136,  135,
      274,  274,  274,  274,  274,  270,  271,  274,   13,  274,
      274,  274,  274,    8,  137,  274,  274,   43,   44,  274,
      274,    0,  101,    0,  157,  167,    0,    0,   91,    0,
        0,    0,  269,    0,    0,   77,   79,    0,    0,    0,
       87,    0,    0,    0,   80,    0,  126,    0,    0,    0,
        0,    0,    0,  274,  134,  274,  133,  274,  274,  274,
       27,  274,  274,  274,   10,  274,    8,  274,   41,   42,
      274,  274,  101,  157,    0,   91,    0,    0,  265,    0,
      267,    0,    0,    0,    0,   87,    0,    0,    0,  126,

      252,  254,    0,    0,    0,    0,  134,  133,  274,   25,
      274,  274,   27,  274,    9,  274,   10,  274,  274,   28,
      274,  274,    0,   81,    0,  265,  267,    0,    0,    0,
        0,    0,    0,    0,  188,    0,   84,  158,   25,  274,
      144,  145,    9,  274,  274,   28,  274,  132,  274,  131,
       81,    0,  253,    0,  255,    0,    0,    0,    0,    0,
        0,   48,  142,  143,  274,  274,  132,  131,  253,  255,
        0,  189,    0,    0,   85,    0,  159,    0,    0,  274,
      274,   11,  189,    0,   49,   85,  159,    0,    0,  274,
       11,   49,    0,    0,  274,    0,    0,  274,    0,  118,

        0,  122,  274,  118,  122,  274,  274,  186,  186,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,   38,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2221] =
    {   0,
        0,   65,    0,    0, 3573, 3572, 3569, 3568,    0,    0,
        0,    0, 3559, 3558,   13,   16,    3,    5, 3572, 3579,
      129,    0, 3566,  192, 3563,   18,   38, 3552,   83,  249,
     3579, 3539, 3528, 3579, 3579,    0,    0,    0, 3579, 3579,
     3557, 3579, 3579, 3548,    0,    0,   23,   86, 3547,  214,
       16, 3579, 3534, 3523, 3499, 3521, 3506, 3511, 3495, 3509,
     3502,    1, 3495,    3,    5,    8, 3514, 3579,   36,  252,
       46, 3579,   99, 3543,  287, 3579, 3579, 3525,   63,   34,
     3497,   61,   55,   68, 3506,   66,   40,   75,  220,   79,
      158,   77, 3495,  303,   69, 3508, 3522, 3516,    0,    0,

        0, 3527, 3579, 3496, 3485,  167, 3484, 3499, 3483, 3482,
      196, 3496, 3486, 3484, 3478, 3482, 3493,  172, 3492, 3474,
     3475, 3478,  228,  309, 3518,  244, 3500,  175,   84, 3472,
      238,  206,  183, 3481,  225,  224,  235,  310,  279,  195,
      161, 3470,  312,  231, 3483, 3579, 3464, 3470, 3462, 3465,
      263, 3460, 3456, 3476, 3471, 3469, 3458, 3470, 3460, 3457,
      349,  315, 3465,  283,  372,  306, 3455, 3455, 3460, 3579,
     3452, 3452, 3454, 3443, 3441,  326, 3446, 3455, 3458,  139,
     3445, 3443, 3435, 3434, 3453, 3440, 3439, 3450, 3432,  125,
     3579, 3430, 3443, 3441, 3427, 3425, 3432, 3424, 3433,  375,

      377,  383,  298, 3421, 3435, 3426, 3436, 3425, 3421, 3426,
     3416, 3426, 3427, 3410, 3579,  390,  314,  392, 3411, 3417,
     3409, 3412,  346, 3407, 3403, 3423,  398, 3417, 3406, 3418,
     3408, 3405,  402,  364, 3413,  371,  408,  358, 3403, 3403,
     3408,  425, 3400, 3400, 3402, 3391, 3401, 3388,  374, 3393,
     3402, 3405,  356, 3392, 3390, 3382, 3381, 3400, 3387, 3386,
     3397, 3379,  427, 3412, 3390, 3391, 3401, 3376,  241,  429,
     3388, 3381, 3377, 3375,  431,  434, 3367, 3381, 3380,  436,
      447, 3379, 3363, 3377, 3368, 3375, 3374,  452,  454, 3360,
      456,  458, 3372, 3375,  412, 3373, 3369, 3364, 3353, 3370,

     3365, 3365, 3350, 3363, 3365, 3373, 3355,  465, 3345, 3361,
      407,  468, 3356, 3346,  355, 3375, 3368,  475, 3337, 3341,
     3334, 3334, 3327,  481, 3385, 3382,  477,  487, 3336, 3326,
     3327,  492,  494,  496, 3351, 3341, 3344, 3330, 3339, 3322,
     3336,  498, 3335,  500,  502,  504,  513, 3355, 3333, 3334,
     3344, 3319,  518,  520, 3331, 3324, 3320,  522,  524, 3318,
      526,  529, 3310, 3324, 3323,  531,  538, 3322, 3306, 3320,
     3311, 3318, 3317,  542,  547, 3303,  549,  551, 3315, 3318,
      553,  555,  510, 3316,  569, 3308, 3304, 3296, 3313, 3308,
     3308, 3293, 3306, 3308, 3316, 3298,  574, 3288, 3304,  436,

      576, 3299, 3289,  578,  580,  582, 3293,  412, 3290, 3294,
     3284, 3279, 3277,  585,  587, 3278, 3291, 3311, 3288,  596,
      598,  603,  605, 3277, 3308, 3272,  612, 3265, 3287, 3269,
      615, 3272, 3284,  619, 3275,  621,  625,  627,  631, 3264,
      634, 3262, 3272, 3275, 3264, 3273, 3272, 3273, 3260,  637,
     3256, 3255, 3251, 3258, 3252, 3249, 3262, 3263,  639,  644,
     3263, 3247, 3259, 3243,  646,  650,  386, 3243, 3257, 3255,
     3258, 3249, 3256,  655,  657, 3255, 3237, 3250, 3272, 3237,
     3579, 3579,  659, 3246, 3235, 3245,  662,  664,  666,  670,
      672,  674, 3245, 3229, 3228, 3241, 3239,  681, 3223,  683,

      687,  693,  698,  700,  702, 3233,  684, 3230, 3234, 3224,
      708,  711, 3219, 3217,  713,  716, 3218, 3231, 3251,  718,
     3228,  720,  724,  726,  729, 3217, 3248, 3212,  731, 3205,
     3227, 3209,  733, 3212, 3224,  736, 3215,  738,  742,  744,
      746, 3204,  749, 3202,  751, 3212, 3215, 3204, 3213, 3212,
      754,  756, 3213, 3200,  760,  762, 3196, 3195, 3191, 3198,
     3192, 3189, 3202, 3203,  765,  767, 3203, 3187, 3199, 3183,
      770,  772,  452, 3183,  778,  781, 3217, 3195, 3198,  783,
     3192, 3222, 3195, 3176, 3188, 3179, 3579,  269,  786, 3183,
     3186, 3175, 3175,  788,  790, 3170, 3169, 3185, 3180, 3170,

      559,  794, 3204,  797, 3179, 3163,  501,  799,  801,  804,
      806, 3201,  811, 3174, 3164, 3170, 3157, 3157, 3156, 3153,
     3158,  813,  816, 3188,  822, 3167, 3579, 3168, 3163, 3161,
     3161,  825, 3160, 3159, 3144, 3579,  829, 3147,  831, 3155,
     3136, 3153, 3156, 3139, 3136,  833, 3141, 3134, 3148, 3128,
     3137,  835,  838, 3145,  840,  842,  850, 3182, 3179, 3146,
     3154, 3155, 3163, 3137,  844,  847, 3138, 3151,  856, 3173,
     3170,  862,  864,  866, 3132, 3162, 3135,  868, 3129, 3120,
      870,  872,  553,  874, 3124, 3127, 3116, 3116,  877,  879,
     3111, 3110, 3126, 3121, 3111,  826,  885,  888, 3121, 3105,

      532,  890,  892,  894,  896,  898, 3117, 3107, 3113, 3100,
     3100, 3099,  901, 3096, 3101,  903,  905,  907,  912, 3131,
      914, 3110,  916, 3111, 3106, 3104, 3104,  919, 3103, 3102,
      924,  926,  932, 3091,  934, 3099,  936, 3104, 3097, 3100,
     3095, 3118, 3079, 3579, 3079, 3092, 3082, 3094, 3078,  942,
     3079, 3072, 3072, 3085, 3077, 3069, 3084, 3081, 3084,  944,
      946, 3111, 3078, 3097, 3076,  936,  951,  953,  963,  971,
     3107,  973, 3074, 3077, 3068, 3061, 3579, 3066, 3087,  975,
     3058,  977,  980, 3052, 3051, 3066, 3050, 3062,  982,  985,
     3579, 3054,  989,  993, 3051, 3579, 3060, 3052, 3058, 3044,

     3041, 3051, 3074, 3049,  995,  998, 1001, 1005, 1007, 3073,
     3579, 3579, 3044, 3049, 3033, 3025, 3035, 1010, 2989, 3010,
     3579, 3579, 1013, 3004, 3027, 2988, 1017, 1020, 1022, 2988,
     3001, 1024, 1026, 2982, 2988, 2971, 1028,    5,    6,   33,
       78,   97,  172,  245,  340,  351, 1030,  402,  424,  422,
     1044, 1033, 1035, 1040, 1046,  429,  448,  464,  460, 1050,
      471,  511, 1052, 1054,  485, 1056, 1062,  489, 1066, 1074,
      507,  525,  512,  552, 1079, 1082, 1084, 1086, 1088, 1090,
     1092,  552, 1095, 1100,  578, 1106,  592,  593, 1108,  603,
      599,  627,  628,  629,  644,  635, 1111, 1114,  663,  651,

     3579,  685,  799, 3579,  699,  719,  726, 1116,  731, 1118,
      744,  741,  809,  768,  831,  997,  862,  891, 1077,  869,
     1124, 1129,  878, 1134, 1136,  901,  884,  894,  900,  900,
      926,  937, 1138, 1140,  958,  985, 1008, 1013, 1142, 1045,
     1145, 1147, 1152, 1021, 1061, 1160, 1048, 1050, 1079, 1093,
     1099, 1163, 1099, 1106, 1101, 1165, 1167, 1169, 1171, 1128,
     1133, 1156, 1128, 1133, 1130, 1189, 1125, 1192, 1140, 1133,
     1194, 1196, 1198, 1159, 1151, 1204, 1146, 1161, 1152, 1209,
     1212, 1173, 1160, 1216, 1181, 1198, 1220, 1181, 1184, 1177,
     1227, 1181, 1175, 1232, 1236, 1189, 1198, 1188, 1200, 1195,

     1205, 1201, 1197, 1250, 1253, 1256, 1221, 1203, 1204, 1206,
     1263, 1265, 1209, 1228, 1220, 1271, 1273, 1275, 1232, 1249,
     1239, 1236, 1282, 1284, 1286, 1289, 1240, 1293, 1295, 1298,
     1302, 1263, 1304, 1252, 1307, 1311, 1255, 1272, 1314, 1316,
     1268, 1274, 1264, 1265, 1302, 1274, 1280, 1326, 3579, 3579,
     1272, 1282, 1277, 1312, 1277, 3579, 1278, 1335, 1322, 1338,
     1299, 3579, 1304, 1286, 1302, 1287, 1287, 1293, 1298, 1292,
     1315, 1315, 1305, 1323, 1319, 1305, 1321, 1359, 1307, 1317,
     1318, 3579, 1323, 1328, 1325, 1367, 1369, 1320, 1333, 1316,
     1318, 1325, 1376, 1378, 1371, 1383, 1330, 1340, 1337, 1346,

     1333, 1333, 1330, 1392, 1394, 1346, 1356, 1378, 1399, 1364,
     1380, 1352, 1367, 1354, 1369, 1351, 1353, 1373, 1355, 1357,
     1368, 1414, 1416, 1364, 1419, 1421, 1373, 1379, 1425, 1371,
     1373, 1409, 1381, 1387, 1435, 1437, 1439, 1441, 1443, 1377,
     1397, 1392, 1447, 1449, 1431, 1397, 1457, 1459, 1463, 1414,
     1465, 1467, 1424, 1413, 1429, 1413, 1414, 1421, 1426, 1420,
     1441, 1441, 1432, 1450, 1446, 1432, 1485, 1433, 1443, 1444,
     1490, 1492, 1453, 1458, 1455, 1497, 1499, 1450, 1463, 1446,
     1448, 1456, 1507, 1509, 1460, 1513, 1470, 1467, 1517, 1478,
     1520, 1522, 1487, 1465, 1471, 1472, 1480, 1473, 1479, 1480,

     1491, 1477, 1497, 1491, 1496, 1538, 1540, 1533, 1494, 1501,
     1512, 1496, 1506, 1507, 1506, 1493, 1496, 1504, 1528, 1514,
     1517, 1518, 1517, 1510, 1539, 1503, 1504, 1508, 1524, 3579,
     1565, 1517, 1550, 1533, 1516, 1527, 1573, 1521, 1521, 1528,
     1542, 1530, 3579, 1536, 1561, 1583, 1560, 1538, 1543, 1546,
     1553, 1541, 1536, 1544, 1549, 1559, 1560, 1544, 1554, 1580,
     1545, 1602, 1559, 1605, 1570, 1548, 1554, 1555, 1563, 1556,
     1562, 1614, 1616, 1618, 1620, 1622, 1573, 1584, 1570, 1627,
     1593, 1586, 1634, 1636, 1638, 1583, 1640, 1642, 1601, 1612,
     1596, 1606, 1607, 1607, 1594, 1597, 1605, 1628, 1615, 1618,

     1619, 1618, 1639, 1603, 1604, 1663, 1665, 1612, 1628, 1670,
     1672, 1624, 1656, 1639, 1622, 1634, 1624, 1631, 1645, 1633,
     1686, 1688, 1690, 1630, 3579, 3579, 3579, 1651, 1638, 1644,
     1641, 1647, 1653, 1642, 1648, 1651, 1702, 1656, 1665, 1656,
     1663, 1653, 1656, 1657, 1671, 1658, 3579, 1677, 1678, 1661,
     1680, 1677, 1664, 1666, 1680, 1662, 1682, 1683, 3579, 1684,
     1685, 1676, 1688, 3579, 1673, 1679, 1731, 3579, 1677, 1695,
     1684, 1686, 1697, 1682, 1702, 1699, 1687, 1691, 1704, 1689,
     1691, 1699, 1707, 1709, 1707, 1727, 1700, 1708, 1713, 1695,
     1702, 1758, 1760, 1762, 1716, 1709, 1715, 1766, 1768, 1716,

     1722, 1730, 1720, 1727, 1779, 1740, 1782, 1733, 1740, 1730,
     1733, 1734, 1748, 1735, 1791, 1756, 1757, 1740, 1759, 1756,
     1743, 1745, 1740, 1760, 1761, 1803, 1807, 1764, 1809, 1811,
     1772, 1763, 1775, 1816, 1762, 1819, 1825, 1765, 1784, 1827,
     1829, 1832, 1774, 1787, 3579, 1837, 1841, 1798, 1806, 1808,
     1797, 1848, 1806, 1803, 1804, 1806, 1812, 1803, 1826, 3579,
     3579, 1806, 1805, 3579, 1814, 3579, 1812, 1832, 1866, 1816,
     1850, 1851, 1817, 3579, 1832, 1818, 1833, 1818, 1876, 1878,
     1835, 1842, 1834, 1845, 1826, 1850, 1832, 1839, 1849, 1842,
     1837, 1838, 1850, 1851, 1858, 1844, 1858, 1860, 1864, 1854,

     1849, 1854, 1883, 1845, 1907, 1909, 1911, 1913, 1915, 1917,
     1870, 1920, 1923, 1927, 1884, 1892, 1894, 1882, 1883, 1884,
     1887, 1892, 1884, 1907, 1943, 1945, 1947, 1949, 1887, 1895,
     1952, 1906, 1955, 1905, 1926, 1909, 1944, 1945, 1965, 1968,
     1917, 1972, 1974, 1935, 1923, 1978, 1981, 1942, 1986, 1990,
     1994, 1996, 1939, 1947, 1998, 1972, 1959, 2002, 1989, 2005,
     2007, 1995, 2012, 1964, 1965, 2019, 2002, 2023, 2026, 1990,
     1974, 1994, 1991, 1977, 1993, 1981, 2003, 1983, 2002, 1989,
     1987, 2042, 2044, 1992, 1996, 1997, 3579, 2007, 2009, 2014,
     2033, 1999, 2054, 2005, 2037, 2059, 2043, 2063, 2007, 2011,

     2010, 2028, 2031, 2018, 2016, 2032, 2022, 2019, 2039, 2023,
     2019, 2042, 2036, 2041, 2042, 2039, 2065, 2086, 2088, 2090,
     2051, 2093, 2095, 2097, 2099, 2101, 2103, 2055, 2056, 2109,
     2088, 2055, 2076, 2073, 2059, 2076, 2064, 2119, 2121, 2125,
     2127, 2129, 2090, 2077, 2132, 2135, 2100, 2138, 2141, 2092,
     2090, 2091, 2095, 2097, 2149, 2151, 2154, 2156, 2116, 2118,
     2123, 2161, 2144, 2164, 2167, 2119, 2150, 2135, 2123, 2174,
     2176, 2169, 2179, 2181, 2174, 2128, 2129, 2186, 2173, 2139,
     2191, 2152, 2141, 2149, 2143, 2138, 3579, 2155, 2156, 2157,
     2149, 2149, 2160, 2206, 2167, 2159, 2160, 2169, 3579, 2156,

     2162, 2175, 2165, 2168, 2217, 2219, 2170, 2171, 2223, 2225,
     2171, 2183, 2205, 2174, 2184, 2179, 2197, 2194, 2195, 2193,
     2183, 2240, 2242, 2196, 2204, 2207, 2192, 2194, 2212, 2200,
     2251, 2257, 2259, 2197, 2199, 2261, 2263, 2214, 2211, 2219,
     2213, 2208, 2270, 2227, 2273, 2277, 2230, 2234, 2280, 2228,
     2283, 2231, 2242, 2247, 2239, 2240, 2291, 2293, 2295, 2255,
     2298, 2244, 2250, 2252, 2255, 2248, 2249, 2307, 2269, 2310,
     2270, 2259, 2296, 2316, 2268, 2269, 3579, 3579, 3579, 3579,
     2283, 2272, 2262, 3579, 2282, 2287, 2270, 2285, 2286, 2283,
     2284, 2280, 2290, 3579, 2291, 2333, 2287, 2277, 2337, 2320,

     2280, 2299, 2297, 2343, 2345, 2302, 2293, 2312, 2292, 2307,
     2353, 2355, 2360, 2362, 2317, 2310, 2309, 2311, 2313, 2313,
     2314, 2316, 2353, 2375, 2323, 2377, 2379, 2381, 2383, 2385,
     2387, 2352, 2341, 2331, 2401, 2352, 2358, 2342, 2358, 2362,
     2404, 2361, 2407, 2409, 2366, 2362, 2413, 2374, 2380, 2363,
     2378, 2375, 3579, 2370, 2423, 2384, 2387, 2377, 2388, 2413,
     3579, 2381, 2377, 3579, 3579, 2394, 2395, 2394, 2436, 2389,
     2439, 2441, 2392, 2393, 2421, 2414, 2396, 2448, 2456, 2463,
     2465, 2400, 2467, 2398, 2413, 2419, 2469, 2471, 2405, 2473,
     2430, 2478, 2420, 2443, 2427, 2483, 2434, 2445, 2488, 2490,

     2493, 2495, 2499, 2501, 2504, 2506, 2509, 2447, 2470, 2495,
     2515, 2517, 2520, 2463, 2467, 2523, 2525, 2488, 2528, 2492,
     2491, 2533, 2536, 2490, 3579, 3579, 2486, 2494, 2493, 3579,
     2503, 2502, 2491, 2491, 2506, 2505, 2506, 2533, 3579, 2553,
     2555, 2516, 2558, 2560, 2562, 2564, 2518, 2508, 2529, 2529,
     2521, 2574, 2570, 2573, 2580, 2526, 2583, 2585, 2566, 2533,
     2556, 2590, 2592, 2594, 2545, 2598, 2600, 2583, 2607, 2609,
     2615, 2617, 2561, 2619, 2625, 2627, 2631, 2635, 2570, 2566,
     2567, 2637, 2639, 2641, 2586, 2588, 2643, 2645, 2647, 2649,
     2606, 2633, 2655, 2659, 2612, 2618, 2620, 2622, 2664, 2618,

     3579, 3579, 2619, 2617, 2628, 2620, 2672, 2624, 2675, 2677,
     2680, 2682, 2624, 2629, 2686, 3579, 3579, 2633, 2689, 2631,
     2692, 2654, 2697, 2701, 2703, 2649, 2707, 2702, 2704, 2662,
     2663, 2715, 2717, 2719, 2721, 2723, 2684, 2726, 2728, 2683,
     2732, 2735, 2737, 2691, 2689, 2742, 2744, 2705, 2697, 2751,
     2753, 2699, 2701, 2737, 3579, 2757, 2759, 2720, 2721, 2713,
     2714, 2715, 2711, 2768, 2770, 2773, 2775, 2777, 2779, 2783,
     2785, 2788, 2729, 2794, 2798, 2736, 2800, 2803, 3579, 3579,
     2744, 2737, 2805, 2809, 2811, 2813, 2766, 2815, 2818, 2820,
     2822, 2783, 2775, 2777, 2778, 2831, 2773, 2788, 2780, 2836,

     3579, 3579, 2783, 2783, 2799, 2786, 2842, 2844, 2846, 2848,
     2850, 2852, 2858, 2861, 2865, 2800, 2867, 2807, 2869, 2871,
     2873, 2876, 2878, 2880, 2884, 2888, 2891, 2894, 2808, 2826,
     2845, 2841, 2845, 2857, 3579, 2845, 3579, 3579, 2901, 2903,
     2902, 2902, 2910, 2871, 2858, 2914, 2916, 2918, 2920, 2922,
     2924, 2926, 2928, 2931, 2935, 2937, 2878, 2939, 2942, 2888,
     2908, 3579, 3579, 3579, 2892, 2948, 2950, 2955, 2958, 2960,
     2963, 2965, 2967, 2969, 2971, 2973, 2975, 2908, 2921, 2924,
     2980, 2985, 2989, 2991, 2995, 2997, 2999, 2932, 2936, 2948,
     3001, 3003, 2955, 2953, 2957, 3009, 3011, 2963, 3014, 3016,

     3018, 3020, 2967, 3027, 3030, 3034, 3036, 3038, 3040, 3579,
     3052, 3056, 3060, 3064, 3068, 3072, 3076, 3080, 3084, 3088
    } ;

static yyconst flex_int16_t yy_def[2221] =
    {   0,
     2211, 2211, 2212, 2212, 2213, 2213, 2214, 2214, 2212, 2212,
     2212, 2212, 2215, 2215, 2216, 2216, 2217, 2217, 2210, 2210,
     2210,   21, 2210,   21, 2210,   24,   24,   24,   24, 2210,
     2210,   24,   24, 2210, 2210, 2218, 2219, 2220, 2210, 2210,
     2210, 2210, 2210, 2210,   21,   24,   24,   24,   24,   24,
       30, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2210,   24,   24,
       24, 2210,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210,   24,   24, 2218, 2219,

     2220, 2210, 2210,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,
     2210,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2210, 2210,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2210, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2210, 2210,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2210,
     2210,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2210, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
     2210, 2210,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2210, 2210,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,   24,
       24,   24,   24,   24,   24, 2210, 2210,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2210, 2210,   24,
       24, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2210, 2210,
       24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,   24,
     2210, 2210,   24,   24,   24,   24,   24,   24,   24,   24,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210,   24,   24,   24,   24, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,
       24,   24, 2210, 2210, 2210, 2210, 2210, 2210, 2210,   24,
       24, 2210, 2210, 2210,   24, 2210, 2210,   24, 2210, 2210,

     2210, 2210,   24, 2210, 2210,   24,   24,   24,   24,    0,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210
    } ;

static yyconst flex_int16_t yy_nxt[3645] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2210,
       44,   41,   44, 2210,   41,   32, 2210,   48,   33,   50,
       50,   50,   48, 2210,   50,   50,   50,   69,   69,   69,
       69,  114,  111,   53, 2210,  117,  120,  118,   53,   70,
       70,   70,  112,  123,  123,  115,  982,  124,  124,  124,
       71,  116,  119,  983,   34,   20,   21,   22,   20,   23,
      121,   25,  149,   26,   27,   28,   29,   29,   29,   30,
       71,   31,   20,  150,   73,   73,  164,   69,   69,  984,
       32,  165,   48,   33,   50,   50,   50,   70,   70,   70,

       73,   73,  147,  152,  155,   71,  158,  153,   71,  161,
      156,  178,  148,  166,  159,  187,  157,  162,  173,  154,
      985,  167,  221,  163,  188,   71,   69,   69,   71,   34,
       45,   45,  174,  222,   46,  179,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  986,   46,   46,   46,
       46,   46,   46,   46,   53,   46,   46,   54,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   55,   56,   57,
       58,   59,   60,   46,   61,   62,   46,   46,   46,   63,
       64,   46,   46,   46,   46,   65,   66,   46,   67,   46,
       46,   46,   46,   46,   46,  251,  305,  200,  200,  306,

       46,   46,   46,   46,   46,   46, 2210,  175, 2210,  194,
      176,  201,  209,  177,  219,   73,   73,   46,  195,  252,
       46,  230,  210,   48,  220,   50,   50,   50,  987,  231,
       46,   46,   46,   46,   46,   46,   71,   46,   46,  124,
      124,  124,   46,   46,  248,  216,  216,  249,   46,   46,
      250,   46,   74,   69,   69,  227,   71,  202,  168,   75,
      217,  228,  169,   70,   70,   70,   76,  229,  233,  170,
      236,   77,  171,  238,   71,  237,  234,  260,  172,   78,
      224,  239,  235,  412,  225,  988,  261,   79,   80,   81,
       82,   83,   84,   85,   71,   86,  226,  413,   87,   88,

       89,   90,   91,   92,   93,   94,   95,  747,   96,  126,
       69,   69,  267,  268,  269,  344,  344,  127,  245,  270,
      124,  124,  124,  286,  748,  128,  129,  130,  131,  132,
      133,  134,  246,  135,  287,  247,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  181,  145,  331,  240,  182,
      280,  280,  241,  332,  254,  183,  282,  184,  255,  242,
      185,  186,  243,  290,  256,  281,  257,  291,  244,  258,
      259,  283,  284,  288,  288,  300,  200,  200,  324,  324,
      469,  325,  989,  326,  327,  327,  301,  470,  289,  990,
      201,  216,  216,  345,  345,  351,  352,  353,  328,  358,

      358,  471,  354,  366,  366,  368,  217,  638,  346,  374,
      374,  372,  329,  394,  359,  376,  395,  330,  367,  377,
      369,  370,  373,  389,  375,  582,  381,  381,  405,  405,
      414,  414,  420,  420,  390,  422,  422,  280,  280,  583,
      360,  382,  639,  406,  991,  415,  992,  421,  427,  427,
      423,  463,  281,  288,  288,  434,  434,  436,  436,  438,
      438,  443,  464,  444,  993,  445,  459,  459,  289,  465,
      465, 1007,  437,  734,  439,  446,  474,  474,  327,  327,
      569,  460,  324,  324,  466,  325, 1008,  326,  483,  483,
      475,  570,  328,  487,  487,  489,  489,  491,  491,  500,

      500,  344,  344,  345,  345,  503,  503,  488,  735,  490,
     1009,  492, 1010,  501,  504,  504,  440, 1013,  346,  511,
      511,  515,  515,  358,  358,  520,  520,  522,  522,  505,
      524,  524,  366,  366,  512, 1014,  516, 1015,  359,  529,
      529,  765,  523,  374,  374,  525, 1017,  367,  536,  536,
      538,  538,  540,  540,  381,  381,  545,  545,  375,  546,
      513,  547,  766,  548, 1019,  539, 1020,  541, 1021,  382,
      551,  551,  850,  549,  514,  565,  565,  571,  571,  575,
      575,  405,  405,  580,  580,  552,  414,  414,  589,  589,
      566,  834,  572,  851,  576, 1022,  406,  420,  420,  594,

      594,  415, 1032,  577,  422,  422,  595,  595,  835,  542,
      578,  553,  421,  427,  427,  758,  602,  602,  759,  423,
      434,  434,  436,  436,  579,  603,  608,  608,  438,  438,
     1034,  604,  609,  609, 1037,  611,  611,  437,  622,  622,
      459,  459, 1038,  439,  612,  632,  632,  465,  465, 1041,
      613,  637,  637,  623, 1042,  460,  474,  474,  646,  646,
      483,  483,  466,  487,  487,  655,  655,  489,  489, 1043,
      475,  656,  656,  491,  491,  657,  657,  488,  658, 1044,
      659,  490,  665,  665,  500,  500, 1045,  492,  669,  669,
     1046,  670, 1047,  671,  672,  672,  666,  676,  501,  503,

      503,  504,  504,  674,  674, 1049,  667, 1050,  673,  511,
      511,  677,  681,  681,  515,  515,  505,  684,  684,  520,
      520,  522,  522, 1051,  512,  689,  689,  524,  524,  516,
      690,  690,  529,  529,  697,  697,  523,  536,  536,  538,
      538, 1054,  525,  702,  702,  540,  540,  703,  703,  698,
      705,  705,  545,  545,  539,  551,  551,  713,  713, 1055,
      541,  716,  716,  718,  718,  706,  565,  565,  728,  728,
      552,  571,  571,  733,  733, 1056,  717, 1057,  719,  575,
      575,  566,  737,  737,  580,  580,  572,  589,  589,  594,
      594,  595,  595, 1061,  576,  602,  602, 1062,  761,  761,

      608,  608,  609,  609,  603,  767,  767,  611,  611, 1065,
      604,  762,  770,  770,  622,  622,  612,  780,  780, 1066,
      768, 1052,  613,  782,  782,  771,  632,  632, 1053,  623,
      637,  637,  793,  793,  646,  646,  806,  806,  783,  808,
      808,  655,  655,  656,  656,  665,  665,  794,  818,  818,
      807,  657,  657,  809,  658, 1063,  659,  669,  669,  666,
      670, 1064,  671,  672,  672,  823,  823,  674,  674,  827,
      827,  681,  681,  832,  832,  684,  684,  673,  689,  689,
      690,  690,  845, 1067,  828,  846,  697,  697,  833,  847,
      847,  702,  702,  703,  703,  852,  852,  705,  705,  854,

      854,  698,  713,  713,  716,  716,  863,  863,  718,  718,
      853, 1070,  706,  864,  864,  866,  866,  869,  869,  717,
      728,  728, 1076,  719,  829,  877,  877,  880,  880, 1077,
      867, 1071,  870,  733,  733,  883,  883,  737,  737, 1079,
      878, 1080,  881,  897,  897,  908,  908,  761,  761, 1072,
      884, 1081,  767,  767,  921,  921, 1082,  913,  898, 1083,
      762,  914,  915,  916,  922,  922,  917,  768, 1084,  918,
      919,  920,  770,  770,  924,  924,  780,  780,  782,  782,
      879,  933,  933,  939,  939,  771,  942,  942, 1085,  925,
      793,  793,  940,  783,  946,  946,  956,  956,  941,  806,

      806,  943,  958,  958, 1089,  794,  808,  808,  959,  959,
      957,  818,  818,  807,  823,  823, 1090,  944,  827,  827,
      809,  971,  971,  972,  972,  832,  832,  976,  976,  980,
      980,  847,  847,  828,  852,  852, 1004, 1004,  973, 1068,
      833,  854,  854, 1069,  981,  994,  994, 1005, 1005,  853,
     1091, 1011, 1011,  863,  863,  864,  864,  866,  866, 1092,
      995, 1093, 1006, 1016, 1016,  996, 1012,  869,  869,  997,
      998,  999,  867, 1097, 1000, 1018, 1018, 1001, 1002, 1003,
     1023, 1023,  870, 1025, 1025,  877,  877, 1028, 1028, 1029,
     1029,  880,  880, 1031, 1031, 1024,  883,  883, 1026, 1098,

      878, 1033, 1033, 1099, 1030, 1100,  881, 1035, 1035, 1039,
     1039,  884,  897,  897, 1027, 1048, 1048,  908,  908, 1058,
     1058, 1101, 1036, 1073, 1040,  921,  921,  898, 1059, 1074,
      922,  922, 1075, 1102, 1060,  924,  924, 1078, 1078,  933,
      933, 1086, 1086,  939,  939, 1103, 1094, 1094,  942,  942,
      925, 1106,  940, 1096, 1096, 1107, 1087, 1108,  941, 1095,
     1088,  946,  946,  943, 1104, 1104,  956,  956, 1109, 1109,
      958,  958,  959,  959, 1110, 1111, 1112, 1119, 1105, 1120,
      957, 1121, 1124, 1113, 1114, 1115, 1127, 1116, 1128, 1117,
     1122, 1122, 1118, 1125, 1125,  971,  971,  972,  972, 1129,

     1129, 1130, 1131, 1132, 1123,  976,  976, 1133, 1126, 1134,
      980,  980,  973, 1135, 1135, 1136, 1137, 1138, 1138, 1140,
     1141, 1143, 1143, 1145, 1146,  981, 1147, 1142, 1148, 1148,
     1150, 1151, 1139,  994,  994, 1153, 1144, 1152, 1152, 1155,
     1157, 1154, 1158, 1149, 1160, 1161, 1159, 1163,  995, 1156,
     1166, 1004, 1004, 1164, 1005, 1005, 1165, 1167, 1167, 1168,
     1169, 1170, 1171, 1162, 1011, 1011, 1172, 1172, 1173, 1006,
     1174, 1175, 1016, 1016, 1176, 1176, 1018, 1018, 1179, 1012,
     1180, 1181, 1182, 1023, 1023, 1183, 1183, 1025, 1025, 1177,
     1184, 1184, 1185, 1178, 1028, 1028, 1029, 1029, 1024, 1186,

     1186, 1187, 1026, 1031, 1031, 1033, 1033, 1188, 1035, 1035,
     1190, 1030, 1189, 1189, 1191, 1039, 1039, 1192, 1192, 1193,
     1194, 1195, 1196, 1036, 1197, 1198, 1199, 1048, 1048, 1200,
     1040, 1201, 1202, 1203, 1204, 1205, 1058, 1058, 1206, 1207,
     1207, 1209, 1210, 1211, 1212, 1059, 1213, 1214, 1215, 1216,
     1217, 1060, 1208, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
     1078, 1078, 1225, 1226, 1227, 1228, 1229, 1230, 1086, 1086,
     1231, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1237, 1094,
     1094, 1238, 1239, 1087, 1096, 1096, 1240, 1241, 1242, 1243,
     1244, 1245, 1095, 1104, 1104, 1246, 1246, 1247, 1248, 1249,

     1109, 1109, 1250, 1251, 1252, 1253, 1254, 1105, 1255, 1256,
     1257, 1258, 1259, 1260, 1261, 1122, 1122, 1262, 1262, 1263,
     1125, 1125, 1264, 1264, 1265, 1266, 1129, 1129, 1267, 1123,
     1268, 1269, 1270, 1271, 1277, 1126, 1135, 1135, 1272, 1272,
     1274, 1274, 1138, 1138, 1276, 1276, 1278, 1279, 1143, 1143,
     1280, 1280, 1281, 1273, 1282, 1275, 1286, 1139, 1283, 1283,
     1148, 1148, 1289, 1144, 1285, 1285, 1287, 1287, 1152, 1152,
     1290, 1291, 1292, 1284, 1293, 1149, 1294, 1295, 1296, 1297,
     1298, 1288, 1299, 1300, 1301, 1302, 1167, 1167, 1303, 1304,
     1305, 1306, 1306, 1172, 1172, 1308, 1309, 1310, 1176, 1176,

     1311, 1311, 1312, 1313, 1314, 1315, 1307, 1316, 1183, 1183,
     1184, 1184, 1317, 1177, 1186, 1186, 1318, 1319, 1189, 1189,
     1320, 1321, 1321, 1192, 1192, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1322, 1335, 1336, 1337,
     1337, 1207, 1207, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1208, 1349, 1350, 1351, 1352, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1231, 1231, 1361, 1353,
     1362, 1363, 1364, 1365, 1237, 1237, 1323, 1366, 1367, 1368,
     1369, 1370, 1371, 1372, 1246, 1246, 1373, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1374, 1382, 1383, 1384, 1385, 1386,

     1387, 1388, 1389, 1262, 1262, 1390, 1264, 1264, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1272, 1272, 1398, 1398, 1274,
     1274, 1399, 1399, 1276, 1276, 1400, 1401, 1402, 1280, 1280,
     1273, 1403, 1404, 1406, 1275, 1283, 1283, 1405, 1405, 1285,
     1285, 1287, 1287, 1407, 1407, 1408, 1409, 1410, 1411, 1412,
     1284, 1413, 1414, 1415, 1416, 1417, 1288, 1418, 1419, 1420,
     1422, 1423, 1424, 1425, 1306, 1306, 1426, 1426, 1427, 1428,
     1421, 1429, 1429, 1311, 1311, 1431, 1432, 1433, 1434, 1307,
     1435, 1436, 1437, 1438, 1439, 1443, 1430, 1321, 1321, 1440,
     1440, 1441, 1441, 1444, 1445, 1446, 1447, 1448, 1449, 1450,

     1451, 1452, 1322, 1337, 1337, 1453, 1442, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1479, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1480, 1494, 1495,
     1496, 1497, 1498, 1500, 1501, 1502, 1503, 1504, 1511, 1505,
     1505, 1507, 1507, 1509, 1509, 1512, 1513, 1398, 1398, 1399,
     1399, 1514, 1515, 1499, 1506, 1516, 1508, 1517, 1510, 1518,
     1405, 1405, 1519, 1407, 1407, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1527, 1529, 1530, 1531, 1532, 1533, 1534,

     1535, 1536, 1537, 1538, 1426, 1426, 1541, 1528, 1539, 1539,
     1429, 1429, 1542, 1542, 1543, 1544, 1545, 1546, 1546, 1548,
     1549, 1549, 1553, 1540, 1554, 1430, 1551, 1551, 1440, 1440,
     1441, 1441, 1547, 1555, 1555, 1550, 1556, 1557, 1558, 1558,
     1564, 1552, 1561, 1561, 1565, 1442, 1566, 1559, 1567, 1568,
     1568, 1562, 1570, 1560, 1571, 1572, 1573, 1563, 1574, 1575,
     1576, 1577, 1578, 1579, 1569, 1580, 1581, 1582, 1582, 1584,
     1585, 1586, 1587, 1590, 1588, 1591, 1592, 1479, 1479, 1593,
     1593, 1594, 1583, 1589, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1480, 1603, 1604, 1605, 1606, 1607, 1608, 1609,

     1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1505, 1505,
     1618, 1618, 1507, 1507, 1619, 1619, 1509, 1509, 1620, 1620,
     1621, 1622, 1622, 1506, 1624, 1624, 1628, 1508, 1626, 1626,
     1629, 1510, 1630, 1631, 1632, 1633, 1623, 1634, 1635, 1625,
     1636, 1637, 1643, 1627, 1638, 1638, 1640, 1640, 1527, 1527,
     1642, 1642, 1644, 1645, 1645, 1647, 1648, 1648, 1650, 1639,
     1651, 1641, 1652, 1528, 1653, 1654, 1539, 1539, 1646, 1655,
     1655, 1649, 1656, 1542, 1542, 1657, 1657, 1659, 1661, 1546,
     1546, 1540, 1662, 1662, 1663, 1666, 1660, 1549, 1549, 1667,
     1658, 1664, 1664, 1668, 1547, 1551, 1551, 1665, 1665, 1555,

     1555, 1669, 1550, 1558, 1558, 1670, 1671, 1671, 1561, 1561,
     1552, 1673, 1559, 1674, 1674, 1676, 1677, 1562, 1560, 1672,
     1678, 1678, 1680, 1563, 1568, 1568, 1675, 1681, 1681, 1679,
     1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1569,
     1691, 1692, 1693, 1582, 1582, 1694, 1694, 1695, 1696, 1697,
     1698, 1699, 1700, 1701, 1702, 1593, 1593, 1703, 1583, 1704,
     1705, 1705, 1711, 1707, 1709, 1709, 1712, 1713, 1714, 1715,
     1716, 1717, 1718, 1719, 1706, 1708, 1720, 1721, 1710, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1618, 1618, 1619,
     1619, 1620, 1620, 1730, 1622, 1622, 1731, 1731, 1624, 1624,

     1732, 1732, 1626, 1626, 1733, 1733, 1734, 1735, 1738, 1623,
     1736, 1736, 1739, 1625, 1740, 1741, 1742, 1627, 1743, 1744,
     1638, 1638, 1745, 1745, 1747, 1737, 1640, 1640, 1746, 1746,
     1642, 1642, 1748, 1645, 1645, 1639, 1749, 1749, 1750, 1648,
     1648, 1641, 1751, 1751, 1752, 1753, 1754, 1755, 1646, 1756,
     1655, 1655, 1757, 1757, 1649, 1657, 1657, 1759, 1759, 1760,
     1761, 1762, 1662, 1662, 1763, 1664, 1664, 1758, 1665, 1665,
     1658, 1764, 1765, 1766, 1767, 1768, 1768, 1671, 1671, 1769,
     1770, 1770, 1674, 1674, 1771, 1772, 1773, 1678, 1678, 1774,
     1672, 1775, 1681, 1681, 1776, 1675, 1679, 1777, 1778, 1779,

     1780, 1781, 1782, 1783, 1784, 1785, 1786, 1694, 1694, 1787,
     1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1705, 1705,
     1796, 1796, 1797, 1798, 1709, 1709, 1799, 1799, 1800, 1801,
     1802, 1803, 1706, 1804, 1805, 1806, 1807, 1808, 1710, 1809,
     1810, 1811, 1811, 1813, 1813, 1815, 1816, 1817, 1818, 1819,
     1820, 1821, 1731, 1731, 1822, 1812, 1823, 1814, 1732, 1732,
     1733, 1733, 1736, 1736, 1824, 1824, 1825, 1826, 1827, 1828,
     1829, 1830, 1830, 1832, 1745, 1745, 1833, 1737, 1746, 1746,
     1834, 1749, 1749, 1835, 1751, 1751, 1831, 1836, 1837, 1838,
     1839, 1840, 1757, 1757, 1841, 1841, 1759, 1759, 1842, 1843,

     1843, 1845, 1846, 1847, 1848, 1849, 1850, 1758, 1768, 1768,
     1851, 1770, 1770, 1852, 1844, 1853, 1854, 1855, 1855, 1856,
     1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
     1867, 1868, 1869, 1870, 1796, 1796, 1871, 1872, 1799, 1799,
     1873, 1875, 1876, 1877, 1878, 1878, 1880, 1880, 1882, 1883,
     1884, 1885, 1874, 1886, 1811, 1811, 1887, 1887, 1879, 1889,
     1881, 1813, 1813, 1888, 1888, 1890, 1891, 1892, 1812, 1893,
     1894, 1895, 1896, 1897, 1898, 1814, 1824, 1824, 1899, 1899,
     1901, 1901, 1903, 1903, 1905, 1905, 1830, 1830, 1907, 1907,
     1908, 1909, 1910, 1900, 1913, 1902, 1914, 1904, 1915, 1906,

     1916, 1831, 1911, 1911, 1917, 1841, 1841, 1918, 1843, 1843,
     1919, 1919, 1920, 1921, 1922, 1922, 1924, 1912, 1925, 1926,
     1927, 1928, 1929, 1844, 1855, 1855, 1930, 1931, 1932, 1923,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1940, 1942,
     1943, 1943, 1945, 1945, 1947, 1948, 1949, 1950, 1951, 1878,
     1878, 1956, 1941, 1959, 1944, 1960, 1946, 1952, 1952, 1961,
     1953, 1962, 1954, 1879, 1880, 1880, 1955, 1955, 1957, 1957,
     1887, 1887, 1888, 1888, 1963, 1963, 1965, 1968, 1881, 1966,
     1966, 1969, 1958, 1970, 1971, 1971, 1973, 1974, 1964, 1899,
     1899, 1975, 1975, 1967, 1901, 1901, 1976, 1976, 1979, 1972,

     1903, 1903, 1977, 1977, 1900, 1905, 1905, 1978, 1978, 1902,
     1907, 1907, 1980, 1981, 1985, 1904, 1911, 1911, 1982, 1982,
     1906, 1983, 1983, 1986, 1987, 1987, 1989, 1989, 1991, 1919,
     1919, 1912, 1992, 1993, 1922, 1922, 1984, 1994, 1994, 1988,
     1995, 1990, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 1923,
     2003, 2004, 2005, 2006, 1940, 1940, 2007, 2007, 2008, 1943,
     1943, 2009, 2009, 1945, 1945, 2010, 2010, 2011, 2012, 1941,
     2013, 2014, 2015, 1944, 2016, 1952, 1952, 1946, 1953, 2017,
     1954, 1955, 1955, 2018, 1957, 1957, 2019, 2019, 2020, 2021,
     2022, 2023, 2023, 1963, 1963, 2025, 2025, 2026, 1958, 1966,

     1966, 2027, 2027, 2030, 2028, 2024, 2029, 1964, 2032, 2032,
     2034, 2034, 2037, 1967, 2040, 2031, 1971, 1971, 2036, 2036,
     2038, 2038, 2041, 2033, 2042, 2035, 1975, 1975, 1976, 1976,
     2044, 1972, 1977, 1977, 2045, 2039, 1978, 1978, 1982, 1982,
     1983, 1983, 2043, 2043, 1987, 1987, 2046, 2046, 1989, 1989,
     2047, 2047, 2048, 2049, 2052, 1984, 2050, 2050, 2053, 1988,
     1994, 1994, 2054, 1990, 2055, 2056, 2056, 2058, 2059, 2060,
     2061, 2051, 2062, 2007, 2007, 2063, 2009, 2009, 2010, 2010,
     2057, 2064, 2064, 2066, 2066, 2068, 2069, 2070, 2070, 2072,
     2019, 2019, 2073, 2074, 2074, 2065, 2076, 2067, 2023, 2023,

     2078, 2071, 2077, 2077, 2025, 2025, 2079, 2075, 2027, 2027,
     2080, 2028, 2024, 2029, 2081, 2082, 2032, 2032, 2083, 2083,
     2034, 2034, 2084, 2084, 2036, 2036, 2085, 2038, 2038, 2086,
     2086, 2033, 2087, 2088, 2088, 2035, 2090, 2090, 2043, 2043,
     2092, 2093, 2039, 2046, 2046, 2047, 2047, 2094, 2089, 2095,
     2097, 2091, 2050, 2050, 2096, 2096, 2098, 2099, 2056, 2056,
     2100, 2100, 2101, 2102, 2103, 2104, 2105, 2051, 2106, 2064,
     2064, 2107, 2107, 2057, 2066, 2066, 2108, 2108, 2109, 2109,
     2111, 2111, 2116, 2065, 2070, 2070, 2113, 2113, 2067, 2114,
     2114, 2118, 2110, 2121, 2112, 2074, 2074, 2122, 2071, 2117,

     2117, 2077, 2077, 2115, 2119, 2119, 2083, 2083, 2125, 2075,
     2084, 2084, 2123, 2123, 2086, 2086, 2088, 2088, 2120, 2126,
     2126, 2090, 2090, 2127, 2127, 2128, 2129, 2124, 2130, 2131,
     2132, 2089, 2096, 2096, 2133, 2134, 2091, 2100, 2100, 2135,
     2136, 2137, 2138, 2107, 2107, 2108, 2108, 2109, 2109, 2139,
     2139, 2111, 2111, 2140, 2140, 2144, 2141, 2145, 2142, 2113,
     2113, 2110, 2114, 2114, 2156, 2112, 2143, 2143, 2117, 2117,
     2119, 2119, 2146, 2146, 2147, 2147, 2115, 2149, 2149, 2123,
     2123, 2151, 2151, 2157, 2120, 2152, 2152, 2158, 2148, 2126,
     2126, 2150, 2127, 2127, 2124, 2154, 2154, 2159, 2160, 2161,

     2153, 2162, 2139, 2139, 2140, 2140, 2163, 2141, 2164, 2142,
     2155, 2143, 2143, 2165, 2166, 2146, 2146, 2147, 2147, 2167,
     2167, 2149, 2149, 2168, 2168, 2151, 2151, 2152, 2152, 2169,
     2169, 2148, 2154, 2154, 2173, 2150, 2170, 2170, 2171, 2171,
     2174, 2174, 2153, 2176, 2176, 2178, 2179, 2155, 2180, 2181,
     2181, 2167, 2167, 2172, 2188, 2175, 2168, 2168, 2177, 2169,
     2169, 2170, 2170, 2182, 2171, 2171, 2183, 2183, 2184, 2184,
     2174, 2174, 2186, 2186, 2176, 2176, 2187, 2187, 2189, 2172,
     2190, 2181, 2181, 2185, 2193, 2175, 2191, 2191, 2194, 2177,
     2183, 2183, 2184, 2184, 2195, 2182, 2192, 2192, 2186, 2186,

     2187, 2187, 2191, 2191, 2192, 2192, 2196, 2185, 2197, 2198,
     2199, 2199, 2201, 2201, 2203, 2199, 2199, 2204, 2204, 2201,
     2201, 2205, 2205, 2206,  979, 2200,  978, 2202, 2204, 2204,
     2200, 2205, 2205,  977, 2202, 2207, 2207, 2207, 2207, 2209,
     2209, 2209, 2209,  975,  974,  970,  969,  968,  967, 2208,
      966, 2208,   24,   24,   24,   24,   35,   35,   35,   35,
       36,   36,   36,   36,   37,   37,   37,   37,   38,   38,
       38,   38,   39,   39,   39,   39,   42,   42,   42,   42,
       99,  965,   99,   99,  100,  100,  964,  100,  101,  101,
      101,  963,  962,  961,  960,  955,  954,  953,  952,  951,

      950,  949,  948,  947,  945,  938,  937,  936,  935,  934,
      932,  931,  930,  929,  928,  927,  926,  923,  912,  911,
      910,  909,  907,  906,  905,  904,  903,  902,  901,  900,
      899,  896,  895,  894,  893,  892,  891,  890,  889,  888,
      887,  886,  885,  882,  876,  875,  874,  873,  872,  871,
      868,  865,  862,  861,  860,  859,  858,  857,  856,  855,
      849,  848,  844,  843,  842,  841,  840,  839,  838,  837,
      836,  831,  830,  826,  825,  824,  822,  821,  820,  819,
      817,  816,  815,  814,  813,  812,  811,  810,  805,  804,
      803,  802,  801,  800,  799,  798,  797,  796,  795,  792,

      791,  790,  789,  788,  787,  786,  785,  784,  781,  779,
      778,  777,  776,  775,  774,  773,  772,  769,  764,  763,
      760,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      746,  745,  744,  743,  742,  741,  740,  739,  738,  736,
      732,  731,  730,  729,  727,  726,  725,  724,  723,  722,
      721,  720,  715,  714,  712,  711,  710,  709,  708,  707,
      704,  701,  700,  699,  696,  695,  694,  693,  692,  691,
      688,  687,  686,  685,  683,  682,  680,  679,  678,  675,
      668,  664,  663,  662,  661,  660,  654,  653,  652,  651,
      650,  649,  648,  647,  645,  644,  643,  642,  641,  640,

      636,  635,  634,  633,  631,  630,  629,  628,  627,  626,
      625,  624,  621,  620,  619,  618,  617,  616,  615,  614,
      610,  607,  606,  605,  601,  600,  599,  598,  597,  596,
      593,  592,  591,  590,  588,  587,  586,  585,  584,  581,
      574,  573,  568,  567,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  550,  544,  543,  537,  535,
      534,  533,  532,  531,  530,  528,  527,  526,  521,  519,
      518,  517,  510,  509,  508,  507,  506,  502,  499,  498,
      497,  496,  495,  494,  493,  486,  485,  484,  482,  481,
      480,  479,  478,  477,  476,  473,  472,  468,  467,  462,

      461,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  442,  441,  435,  433,  432,  431,  430,
      429,  428,  426,  425,  424,  419,  418,  417,  416,  411,
      410,  409,  408,  407,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  393,  392,  391,  388,  387,  386,  385,
      384,  383,  380,  379,  378,  371,  365,  364,  363,  362,
      361,  357,  356,  355,  350,  349,  348,  347,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  304,  303,  302,  299,

      298,  297,  296,  295,  294,  293,  292,  285,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  266,  265,  264,
      263,  262,  253,  232,  223,  218,  215,  214,  213,  212,
      211,  208,  207,  206,  205,  204,  203,  199,  198,  197,
      196,  193,  192,  191,  190,  190,  189,  180,  160,  151,
      146,  125,  122,  113,  110,  109,  108,  107,  106,  105,
      104,   98,   97,   72,  103,  102,   98,   97,   72,   68,
       68, 2210,   35,   35,   35,   35,   35,   35,   19, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210
    } ;

static yyconst flex_int16_t yy_chk[3645] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,    0,   16,    1,    0,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,   69,   69,   27,
       27,   64,   62,   26,    0,   65,   66,   65,   47,   27,
       27,   27,   62,   71,   71,   64,  838,   71,   71,   71,
       27,   64,   65,  839,    1,    2,    2,    2,    2,    2,
       66,    2,   80,    2,    2,    2,    2,    2,    2,    2,
       27,    2,    2,   80,   29,   29,   87,   48,   48,  840,
        2,   87,   29,    2,   29,   29,   29,   48,   48,   48,

       73,   73,   79,   82,   83,   29,   84,   82,   48,   86,
       83,   92,   79,   88,   84,   95,   83,   86,   90,   82,
      841,   88,  129,   86,   95,   29,  190,  190,   48,    2,
       21,   21,   90,  129,   21,   92,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  842,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   24,   24,  141,  180,  111,  111,  180,

       24,   24,   24,   24,   24,   24,   24,   91,   24,  106,
       91,  111,  118,   91,  128,   50,   50,   24,  106,  141,
       24,  133,  118,   50,  128,   50,   50,   50,  843,  133,
       24,   24,   24,   24,   24,   24,   50,   24,   24,  123,
      123,  123,   24,   24,  140,  126,  126,  140,   24,   24,
      140,   24,   30,   70,   70,  132,   50,  111,   89,   30,
      126,  132,   89,   70,   70,   70,   30,  132,  135,   89,
      136,   30,   89,  137,   70,  136,  135,  144,   89,   30,
      131,  137,  135,  269,  131,  844,  144,   30,   30,   30,
       30,   30,   30,   30,   70,   30,  131,  269,   30,   30,

       30,   30,   30,   30,   30,   30,   30,  588,   30,   75,
      124,  124,  151,  151,  151,  217,  217,   75,  139,  151,
      124,  124,  124,  164,  588,   75,   75,   75,   75,   75,
       75,   75,  139,   75,  164,  139,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   94,   75,  203,  138,   94,
      161,  161,  138,  203,  143,   94,  162,   94,  143,  138,
       94,   94,  138,  166,  143,  161,  143,  166,  138,  143,
      143,  162,  162,  165,  165,  176,  200,  200,  201,  201,
      315,  201,  845,  201,  202,  202,  176,  315,  165,  846,
      200,  216,  216,  218,  218,  223,  223,  223,  202,  227,

      227,  315,  223,  233,  233,  234,  216,  467,  218,  237,
      237,  236,  202,  253,  227,  238,  253,  202,  233,  238,
      234,  234,  236,  249,  237,  408,  242,  242,  263,  263,
      270,  270,  275,  275,  249,  276,  276,  280,  280,  408,
      227,  242,  467,  263,  848,  270,  849,  275,  281,  281,
      276,  311,  280,  288,  288,  289,  289,  291,  291,  292,
      292,  295,  311,  295,  850,  295,  308,  308,  288,  312,
      312,  856,  291,  573,  292,  295,  318,  318,  327,  327,
      400,  308,  324,  324,  312,  324,  857,  324,  328,  328,
      318,  400,  327,  332,  332,  333,  333,  334,  334,  342,

      342,  344,  344,  345,  345,  346,  346,  332,  573,  333,
      858,  334,  859,  342,  347,  347,  292,  861,  345,  353,
      353,  354,  354,  358,  358,  359,  359,  361,  361,  347,
      362,  362,  366,  366,  353,  862,  354,  865,  358,  367,
      367,  607,  361,  374,  374,  362,  868,  366,  375,  375,
      377,  377,  378,  378,  381,  381,  382,  382,  374,  383,
      353,  383,  607,  383,  871,  377,  872,  378,  873,  381,
      385,  385,  701,  383,  353,  397,  397,  401,  401,  404,
      404,  405,  405,  406,  406,  385,  414,  414,  415,  415,
      397,  683,  401,  701,  404,  874,  405,  420,  420,  421,

      421,  414,  882,  404,  422,  422,  423,  423,  683,  378,
      404,  385,  420,  427,  427,  601,  431,  431,  601,  422,
      434,  434,  436,  436,  404,  431,  437,  437,  438,  438,
      885,  431,  439,  439,  887,  441,  441,  436,  450,  450,
      459,  459,  888,  438,  441,  460,  460,  465,  465,  890,
      441,  466,  466,  450,  891,  459,  474,  474,  475,  475,
      483,  483,  465,  487,  487,  488,  488,  489,  489,  892,
      474,  490,  490,  491,  491,  492,  492,  487,  492,  893,
      492,  489,  498,  498,  500,  500,  894,  491,  501,  501,
      895,  501,  896,  501,  502,  502,  498,  507,  500,  503,

      503,  504,  504,  505,  505,  899,  498,  900,  502,  511,
      511,  507,  512,  512,  515,  515,  504,  516,  516,  520,
      520,  522,  522,  902,  511,  523,  523,  524,  524,  515,
      525,  525,  529,  529,  533,  533,  522,  536,  536,  538,
      538,  905,  524,  539,  539,  540,  540,  541,  541,  533,
      543,  543,  545,  545,  538,  551,  551,  552,  552,  906,
      540,  555,  555,  556,  556,  543,  565,  565,  566,  566,
      551,  571,  571,  572,  572,  907,  555,  909,  556,  575,
      575,  565,  576,  576,  580,  580,  571,  589,  589,  594,
      594,  595,  595,  911,  575,  602,  602,  912,  604,  604,

      608,  608,  609,  609,  602,  610,  610,  611,  611,  914,
      602,  604,  613,  613,  622,  622,  611,  623,  623,  914,
      610,  903,  611,  625,  625,  613,  632,  632,  903,  622,
      637,  637,  639,  639,  646,  646,  652,  652,  625,  653,
      653,  655,  655,  656,  656,  665,  665,  639,  666,  666,
      652,  657,  657,  653,  657,  913,  657,  669,  669,  665,
      669,  913,  669,  672,  672,  673,  673,  674,  674,  678,
      678,  681,  681,  682,  682,  684,  684,  672,  689,  689,
      690,  690,  696,  915,  678,  696,  697,  697,  682,  698,
      698,  702,  702,  703,  703,  704,  704,  705,  705,  706,

      706,  697,  713,  713,  716,  716,  717,  717,  718,  718,
      704,  917,  705,  719,  719,  721,  721,  723,  723,  716,
      728,  728,  920,  718,  678,  731,  731,  732,  732,  923,
      721,  918,  723,  733,  733,  735,  735,  737,  737,  926,
      731,  927,  732,  750,  750,  760,  760,  761,  761,  918,
      735,  928,  767,  767,  768,  768,  929,  766,  750,  930,
      761,  766,  766,  766,  769,  769,  766,  767,  931,  766,
      766,  766,  770,  770,  772,  772,  780,  780,  782,  782,
      731,  783,  783,  789,  789,  770,  790,  790,  932,  772,
      793,  793,  789,  782,  794,  794,  805,  805,  789,  806,

      806,  790,  807,  807,  935,  793,  808,  808,  809,  809,
      805,  818,  818,  806,  823,  823,  936,  790,  827,  827,
      808,  828,  828,  829,  829,  832,  832,  833,  833,  837,
      837,  847,  847,  827,  852,  852,  853,  853,  829,  916,
      832,  854,  854,  916,  837,  851,  851,  855,  855,  852,
      937,  860,  860,  863,  863,  864,  864,  866,  866,  938,
      851,  940,  855,  867,  867,  851,  860,  869,  869,  851,
      851,  851,  866,  944,  851,  870,  870,  851,  851,  851,
      875,  875,  869,  876,  876,  877,  877,  878,  878,  879,
      879,  880,  880,  881,  881,  875,  883,  883,  876,  945,

      877,  884,  884,  947,  879,  948,  880,  886,  886,  889,
      889,  883,  897,  897,  876,  898,  898,  908,  908,  910,
      910,  949,  886,  919,  889,  921,  921,  897,  910,  919,
      922,  922,  919,  950,  910,  924,  924,  925,  925,  933,
      933,  934,  934,  939,  939,  951,  941,  941,  942,  942,
      924,  953,  939,  943,  943,  954,  934,  955,  939,  941,
      934,  946,  946,  942,  952,  952,  956,  956,  957,  957,
      958,  958,  959,  959,  960,  961,  962,  963,  952,  964,
      956,  965,  967,  962,  962,  962,  969,  962,  970,  962,
      966,  966,  962,  968,  968,  971,  971,  972,  972,  973,

      973,  974,  975,  977,  966,  976,  976,  978,  968,  979,
      980,  980,  972,  981,  981,  982,  983,  984,  984,  985,
      986,  987,  987,  988,  989,  980,  990,  986,  991,  991,
      992,  993,  984,  994,  994,  996,  987,  995,  995,  997,
      998,  996,  999,  991, 1000, 1001,  999, 1002,  994,  997,
     1003, 1004, 1004, 1002, 1005, 1005, 1002, 1006, 1006, 1007,
     1008, 1009, 1010, 1001, 1011, 1011, 1012, 1012, 1013, 1005,
     1014, 1015, 1016, 1016, 1017, 1017, 1018, 1018, 1019, 1011,
     1020, 1021, 1022, 1023, 1023, 1024, 1024, 1025, 1025, 1017,
     1026, 1026, 1027, 1017, 1028, 1028, 1029, 1029, 1023, 1030,

     1030, 1032, 1025, 1031, 1031, 1033, 1033, 1034, 1035, 1035,
     1037, 1029, 1036, 1036, 1038, 1039, 1039, 1040, 1040, 1041,
     1042, 1043, 1044, 1035, 1045, 1046, 1047, 1048, 1048, 1051,
     1039, 1052, 1053, 1054, 1055, 1057, 1058, 1058, 1059, 1060,
     1060, 1061, 1063, 1064, 1065, 1058, 1066, 1067, 1068, 1069,
     1070, 1058, 1060, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1086,
     1087, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1093, 1094,
     1094, 1095, 1097, 1086, 1096, 1096, 1098, 1099, 1100, 1101,
     1102, 1103, 1094, 1104, 1104, 1105, 1105, 1106, 1107, 1108,

     1109, 1109, 1110, 1111, 1112, 1113, 1114, 1104, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1122, 1123, 1123, 1124,
     1125, 1125, 1126, 1126, 1127, 1128, 1129, 1129, 1130, 1122,
     1131, 1132, 1133, 1134, 1140, 1125, 1135, 1135, 1136, 1136,
     1137, 1137, 1138, 1138, 1139, 1139, 1141, 1142, 1143, 1143,
     1144, 1144, 1145, 1136, 1146, 1137, 1150, 1138, 1147, 1147,
     1148, 1148, 1153, 1143, 1149, 1149, 1151, 1151, 1152, 1152,
     1154, 1155, 1156, 1147, 1157, 1148, 1158, 1159, 1160, 1161,
     1162, 1151, 1163, 1164, 1165, 1166, 1167, 1167, 1168, 1169,
     1170, 1171, 1171, 1172, 1172, 1173, 1174, 1175, 1176, 1176,

     1177, 1177, 1178, 1179, 1180, 1181, 1171, 1182, 1183, 1183,
     1184, 1184, 1185, 1176, 1186, 1186, 1187, 1188, 1189, 1189,
     1190, 1191, 1191, 1192, 1192, 1193, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1203, 1191, 1204, 1205, 1206,
     1206, 1207, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1207, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1231, 1231, 1232, 1222,
     1233, 1234, 1235, 1236, 1237, 1237, 1191, 1238, 1239, 1240,
     1241, 1242, 1244, 1245, 1246, 1246, 1245, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1245, 1254, 1255, 1256, 1257, 1258,

     1259, 1260, 1261, 1262, 1262, 1263, 1264, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1272, 1272, 1273, 1273, 1274,
     1274, 1275, 1275, 1276, 1276, 1277, 1278, 1279, 1280, 1280,
     1272, 1281, 1282, 1286, 1274, 1283, 1283, 1284, 1284, 1285,
     1285, 1287, 1287, 1288, 1288, 1289, 1290, 1291, 1292, 1293,
     1283, 1294, 1295, 1296, 1297, 1298, 1287, 1299, 1300, 1301,
     1302, 1303, 1304, 1305, 1306, 1306, 1307, 1307, 1308, 1309,
     1301, 1310, 1310, 1311, 1311, 1312, 1313, 1314, 1315, 1306,
     1316, 1317, 1318, 1319, 1320, 1324, 1310, 1321, 1321, 1322,
     1322, 1323, 1323, 1328, 1329, 1330, 1331, 1332, 1333, 1334,

     1335, 1336, 1321, 1337, 1337, 1338, 1323, 1339, 1340, 1341,
     1342, 1343, 1344, 1345, 1346, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1360, 1361, 1362, 1363,
     1365, 1366, 1367, 1367, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1367, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1395, 1392,
     1392, 1393, 1393, 1394, 1394, 1396, 1397, 1398, 1398, 1399,
     1399, 1400, 1401, 1386, 1392, 1402, 1393, 1403, 1394, 1404,
     1405, 1405, 1406, 1407, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1415, 1416, 1417, 1418, 1419, 1420, 1421,

     1422, 1423, 1424, 1425, 1426, 1426, 1428, 1415, 1427, 1427,
     1429, 1429, 1430, 1430, 1431, 1432, 1433, 1434, 1434, 1435,
     1436, 1436, 1438, 1427, 1439, 1429, 1437, 1437, 1440, 1440,
     1441, 1441, 1434, 1442, 1442, 1436, 1443, 1444, 1446, 1446,
     1448, 1437, 1447, 1447, 1449, 1441, 1450, 1446, 1451, 1452,
     1452, 1447, 1453, 1446, 1454, 1455, 1456, 1447, 1457, 1458,
     1459, 1462, 1463, 1465, 1452, 1467, 1468, 1469, 1469, 1470,
     1471, 1472, 1473, 1476, 1475, 1477, 1478, 1479, 1479, 1480,
     1480, 1481, 1469, 1475, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1479, 1490, 1491, 1492, 1493, 1494, 1495, 1496,

     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1505,
     1506, 1506, 1507, 1507, 1508, 1508, 1509, 1509, 1510, 1510,
     1511, 1512, 1512, 1505, 1513, 1513, 1515, 1507, 1514, 1514,
     1516, 1509, 1517, 1518, 1519, 1520, 1512, 1521, 1522, 1513,
     1523, 1524, 1529, 1514, 1525, 1525, 1526, 1526, 1527, 1527,
     1528, 1528, 1530, 1531, 1531, 1532, 1533, 1533, 1534, 1525,
     1535, 1526, 1536, 1527, 1537, 1538, 1539, 1539, 1531, 1540,
     1540, 1533, 1541, 1542, 1542, 1543, 1543, 1544, 1545, 1546,
     1546, 1539, 1547, 1547, 1548, 1553, 1544, 1549, 1549, 1554,
     1543, 1550, 1550, 1556, 1546, 1551, 1551, 1552, 1552, 1555,

     1555, 1557, 1549, 1558, 1558, 1559, 1560, 1560, 1561, 1561,
     1551, 1562, 1558, 1563, 1563, 1564, 1565, 1561, 1558, 1560,
     1566, 1566, 1567, 1561, 1568, 1568, 1563, 1569, 1569, 1566,
     1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1568,
     1579, 1580, 1581, 1582, 1582, 1583, 1583, 1584, 1585, 1586,
     1588, 1589, 1590, 1591, 1592, 1593, 1593, 1594, 1582, 1595,
     1596, 1596, 1599, 1597, 1598, 1598, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1596, 1597, 1608, 1609, 1598, 1610,
     1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1618, 1619,
     1619, 1620, 1620, 1621, 1622, 1622, 1623, 1623, 1624, 1624,

     1625, 1625, 1626, 1626, 1627, 1627, 1628, 1629, 1631, 1622,
     1630, 1630, 1632, 1624, 1633, 1634, 1635, 1626, 1636, 1637,
     1638, 1638, 1639, 1639, 1643, 1630, 1640, 1640, 1641, 1641,
     1642, 1642, 1644, 1645, 1645, 1638, 1646, 1646, 1647, 1648,
     1648, 1640, 1649, 1649, 1650, 1651, 1652, 1653, 1645, 1654,
     1655, 1655, 1656, 1656, 1648, 1657, 1657, 1658, 1658, 1659,
     1660, 1661, 1662, 1662, 1663, 1664, 1664, 1656, 1665, 1665,
     1657, 1666, 1667, 1668, 1669, 1670, 1670, 1671, 1671, 1672,
     1673, 1673, 1674, 1674, 1675, 1676, 1677, 1678, 1678, 1679,
     1671, 1680, 1681, 1681, 1682, 1674, 1678, 1683, 1684, 1685,

     1686, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1694, 1695,
     1696, 1697, 1698, 1700, 1701, 1702, 1703, 1704, 1705, 1705,
     1706, 1706, 1707, 1708, 1709, 1709, 1710, 1710, 1711, 1712,
     1713, 1714, 1705, 1715, 1716, 1717, 1718, 1719, 1709, 1720,
     1721, 1722, 1722, 1723, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1730, 1731, 1731, 1734, 1722, 1735, 1723, 1732, 1732,
     1733, 1733, 1736, 1736, 1737, 1737, 1738, 1739, 1740, 1741,
     1742, 1743, 1743, 1744, 1745, 1745, 1747, 1736, 1746, 1746,
     1748, 1749, 1749, 1750, 1751, 1751, 1743, 1752, 1753, 1754,
     1755, 1756, 1757, 1757, 1758, 1758, 1759, 1759, 1760, 1761,

     1761, 1762, 1763, 1764, 1765, 1766, 1767, 1757, 1768, 1768,
     1769, 1770, 1770, 1771, 1761, 1772, 1773, 1774, 1774, 1775,
     1776, 1781, 1782, 1783, 1785, 1786, 1787, 1788, 1789, 1790,
     1791, 1792, 1793, 1795, 1796, 1796, 1797, 1798, 1799, 1799,
     1800, 1801, 1802, 1803, 1804, 1804, 1805, 1805, 1806, 1807,
     1808, 1809, 1800, 1810, 1811, 1811, 1812, 1812, 1804, 1815,
     1805, 1813, 1813, 1814, 1814, 1816, 1817, 1818, 1811, 1819,
     1820, 1821, 1822, 1823, 1825, 1813, 1824, 1824, 1826, 1826,
     1827, 1827, 1828, 1828, 1829, 1829, 1830, 1830, 1831, 1831,
     1832, 1833, 1834, 1826, 1836, 1827, 1837, 1828, 1838, 1829,

     1839, 1830, 1835, 1835, 1840, 1841, 1841, 1842, 1843, 1843,
     1844, 1844, 1845, 1846, 1847, 1847, 1848, 1835, 1849, 1850,
     1851, 1852, 1854, 1843, 1855, 1855, 1856, 1857, 1858, 1847,
     1859, 1860, 1862, 1863, 1866, 1867, 1868, 1869, 1869, 1870,
     1871, 1871, 1872, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
     1878, 1882, 1869, 1884, 1871, 1885, 1872, 1879, 1879, 1886,
     1879, 1889, 1879, 1878, 1880, 1880, 1881, 1881, 1883, 1883,
     1887, 1887, 1888, 1888, 1890, 1890, 1891, 1893, 1880, 1892,
     1892, 1894, 1883, 1895, 1896, 1896, 1897, 1898, 1890, 1899,
     1899, 1900, 1900, 1892, 1901, 1901, 1902, 1902, 1908, 1896,

     1903, 1903, 1904, 1904, 1899, 1905, 1905, 1906, 1906, 1901,
     1907, 1907, 1909, 1910, 1914, 1903, 1911, 1911, 1912, 1912,
     1905, 1913, 1913, 1915, 1916, 1916, 1917, 1917, 1918, 1919,
     1919, 1911, 1920, 1921, 1922, 1922, 1913, 1923, 1923, 1916,
     1924, 1917, 1927, 1928, 1929, 1931, 1932, 1933, 1934, 1922,
     1935, 1936, 1937, 1938, 1940, 1940, 1941, 1941, 1942, 1943,
     1943, 1944, 1944, 1945, 1945, 1946, 1946, 1947, 1948, 1940,
     1949, 1950, 1951, 1943, 1953, 1952, 1952, 1945, 1952, 1954,
     1952, 1955, 1955, 1956, 1957, 1957, 1958, 1958, 1959, 1960,
     1961, 1962, 1962, 1963, 1963, 1964, 1964, 1965, 1957, 1966,

     1966, 1967, 1967, 1968, 1967, 1962, 1967, 1963, 1969, 1969,
     1970, 1970, 1973, 1966, 1979, 1968, 1971, 1971, 1972, 1972,
     1974, 1974, 1980, 1969, 1981, 1970, 1975, 1975, 1976, 1976,
     1985, 1971, 1977, 1977, 1986, 1974, 1978, 1978, 1982, 1982,
     1983, 1983, 1984, 1984, 1987, 1987, 1988, 1988, 1989, 1989,
     1990, 1990, 1991, 1992, 1995, 1983, 1993, 1993, 1996, 1987,
     1994, 1994, 1997, 1989, 1998, 1999, 1999, 2000, 2003, 2004,
     2005, 1993, 2006, 2007, 2007, 2008, 2009, 2009, 2010, 2010,
     1999, 2011, 2011, 2012, 2012, 2013, 2014, 2015, 2015, 2018,
     2019, 2019, 2020, 2021, 2021, 2011, 2022, 2012, 2023, 2023,

     2026, 2015, 2024, 2024, 2025, 2025, 2028, 2021, 2027, 2027,
     2029, 2027, 2023, 2027, 2030, 2031, 2032, 2032, 2033, 2033,
     2034, 2034, 2035, 2035, 2036, 2036, 2037, 2038, 2038, 2039,
     2039, 2032, 2040, 2041, 2041, 2034, 2042, 2042, 2043, 2043,
     2044, 2045, 2038, 2046, 2046, 2047, 2047, 2048, 2041, 2049,
     2052, 2042, 2050, 2050, 2051, 2051, 2053, 2054, 2056, 2056,
     2057, 2057, 2058, 2059, 2060, 2061, 2062, 2050, 2063, 2064,
     2064, 2065, 2065, 2056, 2066, 2066, 2067, 2067, 2068, 2068,
     2069, 2069, 2073, 2064, 2070, 2070, 2071, 2071, 2066, 2072,
     2072, 2076, 2068, 2081, 2069, 2074, 2074, 2082, 2070, 2075,

     2075, 2077, 2077, 2072, 2078, 2078, 2083, 2083, 2087, 2074,
     2084, 2084, 2085, 2085, 2086, 2086, 2088, 2088, 2078, 2089,
     2089, 2090, 2090, 2091, 2091, 2092, 2093, 2085, 2094, 2095,
     2097, 2088, 2096, 2096, 2098, 2099, 2090, 2100, 2100, 2103,
     2104, 2105, 2106, 2107, 2107, 2108, 2108, 2109, 2109, 2110,
     2110, 2111, 2111, 2112, 2112, 2116, 2112, 2118, 2112, 2113,
     2113, 2109, 2114, 2114, 2129, 2111, 2115, 2115, 2117, 2117,
     2119, 2119, 2120, 2120, 2121, 2121, 2114, 2122, 2122, 2123,
     2123, 2124, 2124, 2130, 2119, 2125, 2125, 2131, 2121, 2126,
     2126, 2122, 2127, 2127, 2123, 2128, 2128, 2132, 2133, 2134,

     2125, 2136, 2139, 2139, 2140, 2140, 2141, 2140, 2142, 2140,
     2128, 2143, 2143, 2144, 2145, 2146, 2146, 2147, 2147, 2148,
     2148, 2149, 2149, 2150, 2150, 2151, 2151, 2152, 2152, 2153,
     2153, 2147, 2154, 2154, 2157, 2149, 2155, 2155, 2156, 2156,
     2158, 2158, 2152, 2159, 2159, 2160, 2161, 2154, 2165, 2166,
     2166, 2167, 2167, 2156, 2178, 2158, 2168, 2168, 2159, 2169,
     2169, 2170, 2170, 2166, 2171, 2171, 2172, 2172, 2173, 2173,
     2174, 2174, 2175, 2175, 2176, 2176, 2177, 2177, 2179, 2171,
     2180, 2181, 2181, 2173, 2188, 2174, 2182, 2182, 2189, 2176,
     2183, 2183, 2184, 2184, 2190, 2181, 2185, 2185, 2186, 2186,

     2187, 2187, 2191, 2191, 2192, 2192, 2193, 2184, 2194, 2195,
     2196, 2196, 2197, 2197, 2198, 2199, 2199, 2200, 2200, 2201,
     2201, 2202, 2202, 2203,  836, 2196,  835, 2197, 2204, 2204,
     2199, 2205, 2205,  834, 2201, 2206, 2206, 2207, 2207, 2208,
     2208, 2209, 2209,  831,  830,  826,  825,  824,  820, 2206,
      819, 2207, 2211, 2211, 2211, 2211, 2212, 2212, 2212, 2212,
     2213, 2213, 2213, 2213, 2214, 2214, 2214, 2214, 2215, 2215,
     2215, 2215, 2216, 2216, 2216, 2216, 2217, 2217, 2217, 2217,
     2218,  817, 2218, 2218, 2219, 2219,  816, 2219, 2220, 2220,
     2220,  815,  814,  813,  810,  804,  803,  802,  801,  800,

      799,  798,  797,  795,  792,  788,  787,  786,  785,  784,
      781,  779,  778,  776,  775,  774,  773,  771,  765,  764,
      763,  762,  759,  758,  757,  756,  755,  754,  753,  752,
      751,  749,  748,  747,  746,  745,  743,  742,  741,  740,
      739,  738,  736,  734,  730,  729,  727,  726,  725,  724,
      722,  720,  715,  714,  712,  711,  710,  709,  708,  707,
      700,  699,  695,  694,  693,  692,  691,  688,  687,  686,
      685,  680,  679,  677,  676,  675,  671,  670,  668,  667,
      664,  663,  662,  661,  660,  659,  658,  654,  651,  650,
      649,  648,  647,  645,  644,  643,  642,  641,  640,  638,

      635,  634,  633,  631,  630,  629,  628,  626,  624,  621,
      620,  619,  618,  617,  616,  615,  614,  612,  606,  605,
      603,  600,  599,  598,  597,  596,  593,  592,  591,  590,
      586,  585,  584,  583,  582,  581,  579,  578,  577,  574,
      570,  569,  568,  567,  564,  563,  562,  561,  560,  559,
      558,  557,  554,  553,  550,  549,  548,  547,  546,  544,
      542,  537,  535,  534,  532,  531,  530,  528,  527,  526,
      521,  519,  518,  517,  514,  513,  510,  509,  508,  506,
      499,  497,  496,  495,  494,  493,  486,  485,  484,  480,
      479,  478,  477,  476,  473,  472,  471,  470,  469,  468,

      464,  463,  462,  461,  458,  457,  456,  455,  454,  453,
      452,  451,  449,  448,  447,  446,  445,  444,  443,  442,
      440,  435,  433,  432,  430,  429,  428,  426,  425,  424,
      419,  418,  417,  416,  413,  412,  411,  410,  409,  407,
      403,  402,  399,  398,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  384,  380,  379,  376,  373,
      372,  371,  370,  369,  368,  365,  364,  363,  360,  357,
      356,  355,  352,  351,  350,  349,  348,  343,  341,  340,
      339,  338,  337,  336,  335,  331,  330,  329,  326,  325,
      323,  322,  321,  320,  319,  317,  316,  314,  313,  310,

      309,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  294,  293,  290,  287,  286,  285,  284,
      283,  282,  279,  278,  277,  274,  273,  272,  271,  268,
      267,  266,  265,  264,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  252,  251,  250,  248,  247,  246,  245,
      244,  243,  241,  240,  239,  235,  232,  231,  230,  229,
      228,  226,  225,  224,  222,  221,  220,  219,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  199,
      198,  197,  196,  195,  194,  193,  192,  189,  188,  187,
      186,  185,  184,  183,  182,  181,  179,  178,  177,  175,

      174,  173,  172,  171,  169,  168,  167,  163,  160,  159,
      158,  157,  156,  155,  154,  153,  152,  150,  149,  148,
      147,  145,  142,  134,  130,  127,  125,  122,  121,  120,
      119,  117,  116,  115,  114,  113,  112,  110,  109,  108,
      107,  105,  104,  102,   98,   97,   96,   93,   85,   81,
       78,   74,   67,   63,   61,   60,   59,   58,   57,   56,
       55,   54,   53,   49,   44,   41,   33,   32,   28,   25,
       23,   19,   14,   13,    8,    7,    6,    5, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,

     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2210
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[288] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;

#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2109 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 2364 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2211 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3579 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 277:
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 281:
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 4215 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2211 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2211 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2210);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"




