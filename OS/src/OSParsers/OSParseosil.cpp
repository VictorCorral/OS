#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 357
#define YY_END_OF_BUFFER 358
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2966] =
    {   0,
        1,    1,    0,    0,  354,  354,  355,  355,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  358,  356,
        1,    1,    2,  344,    2,  344,    6,  344,    5,  356,
        4,  344,  344,    2,  357,  354,  355,  345,  347,  348,
      347,  351,  352,  351,    1,  344,  344,    6,  344,    5,
        0,    4,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
        3,    6,    6,  344,    7,    5,    0,    0,  350,  296,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  344,

      344,  354,  355,  345,    0,  353,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  298,
        0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  252,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    6,  349,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  346,    0,  297,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  282,    0,    0,    0,    0,    0,    0,
        0,  266,    0,    0,    0,    0,    0,    0,    0,  141,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
       48,   49,  344,   20,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  297,    0,  299,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  148,
        0,    0,    0,    0,    0,    0,    0,    0,  283,    0,
        0,    0,    0,    0,    0,    0,  267,    0,    0,    0,
        0,    0,    0,  253,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  274,
        0,    0,    0,    0,    0,  280,    0,  276,  123,    0,
        0,    0,    0,  282,    0,    0,    0,    0,    0,    0,
      266,    0,    0,  284,    0,  286,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  272,
        0,    0,    0,    0,    0,  288,    0,    0,    0,    0,
        0,    0,  344,  344,  344,  344,  344,  249,  344,  344,
      344,  344,  344,   46,   47,   20,  344,  344,  344,  344,
       23,  344,  344,  344,  344,   24,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      299,    0,  279,    0,    0,    0,    0,    0,    0,  140,
        0,    0,    0,    0,  275,    0,    0,    0,  148,    0,

        0,  281,    0,  277,    0,    0,    0,    0,    0,  283,
        0,    0,    0,    0,    0,    0,  267,    0,    0,  285,
        0,  287,    0,    0,    0,  253,    0,    0,    0,    0,
        0,    0,  142,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  273,
        0,    0,    0,    0,    0,  289,    0,    0,    0,    0,
      138,    0,    0,    0,  278,    0,    0,    0,  214,    0,
        0,    0,   77,    0,  274,    0,    0,    0,    0,  280,
      276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,    0,    0,    0,  284,  286,    0,    0,    0,  156,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  258,    0,    0,    0,    0,   73,    0,    0,    0,
        0,  272,    0,    0,  129,  232,  288,    0,    0,    0,
        0,    0,    0,    0,  344,  344,  344,  344,  344,  249,
      344,  344,  344,  344,  344,  344,  344,  344,   23,  344,
      344,  344,   24,  344,   52,   53,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,   27,
      344,  344,  344,  344,  344,   60,   61,  344,  344,  344,
       28,  344,  344,  279,    0,    0,    0,    0,    0,    0,
      140,    0,    0,    0,  275,    0,    0,    0,    0,  281,

      277,    0,  124,    0,    0,    0,    0,    0,    0,    0,
        0,  151,    0,    0,    0,  285,  287,    0,    0,  157,
        0,    0,    0,    0,    0,    0,  142,    0,    0,    0,
        0,   68,    0,    0,  259,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  273,    0,    0,    0,    0,  289,
        0,    0,    0,    0,  138,    0,    0,    0,    0,    0,
        0,  212,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  152,
      150,    0,    0,    0,    0,  208,    0,  260,  158,  156,
        0,    0,    0,    0,    0,    0,  294,    0,    0,    0,

        0,  258,    0,    0,    0,  264,    0,    0,    0,    0,
        0,    0,    0,  127,    0,    0,  254,    0,  238,  244,
        0,    0,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,   21,  344,   22,  344,  344,  344,  344,
       50,   51,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,   56,   57,   27,  344,  344,  344,  344,
       58,   59,  344,  344,   28,  344,  344,    0,    0,    0,
        0,  215,    0,    0,    0,    0,    0,   78,    0,    0,
        0,    0,    0,    0,  124,    0,    0,    0,    0,    0,
        0,    0,    0,  151,    0,    0,    0,    0,    0,  261,

      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,  259,    0,    0,    0,  265,    0,    0,   74,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,
      233,    0,    0,  255,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  256,
        0,    0,  101,    0,    0,    0,  236,    0,    0,    0,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
      158,    0,    0,  262,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  264,    0,    0,    0,    0,    0,

        0,    0,  160,    0,  270,    0,    0,  254,    0,    0,
        0,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,   26,   21,   22,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,   54,   55,
      344,  344,  344,  344,  344,  344,  344,  344,  344,    0,
        0,    0,  215,    0,  213,    0,    0,    0,   78,    0,
        0,    0,    0,  257,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  209,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  261,    0,  263,    0,    0,    0,    0,

        0,  295,    0,    0,    0,    0,    0,    0,  265,    0,
       74,    0,    0,    0,    0,    0,  161,    0,  271,    0,
      130,    0,  128,  233,    0,  255,    0,    0,  239,    0,
      245,    0,    0,    0,  290,    0,    0,    0,    0,    0,
        0,    0,    0,  256,   97,  216,    0,    0,    0,    0,
        0,    0,  143,    0,    0,    0,  172,    0,   75,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  262,    0,    0,    0,  234,    0,    0,    0,
        0,    0,    0,    0,  292,    0,    0,    0,    0,    0,

      162,  160,    0,  270,    0,    0,    0,    0,  300,  344,
      344,  344,  344,  344,  344,  344,  191,  344,  344,  344,
       26,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,   25,  344,  344,  344,
      344,  344,  344,  344,  344,   62,   63,    0,  291,    0,
        0,  213,    0,    0,    0,    0,    0,    0,  257,    0,
        0,    0,  102,    0,    0,    0,    0,    0,  237,    0,
        0,    0,    0,  173,    0,    0,  209,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  263,
        0,    0,    0,    0,  295,    0,    0,    0,    0,    0,
        0,    0,  293,    0,    0,    0,    0,    0,  161,  271,
        0,  128,    0,    0,  239,  245,    0,    0,  290,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  174,  172,    0,    0,  117,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  113,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
        0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
      292,    0,    0,    0,    0,    0,  162,    0,    0,    0,

        0,    0,  131,  344,  344,  344,  344,  344,  344,  191,
      344,  344,  344,  344,  344,   31,  344,  344,   29,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  202,  203,  344,  344,
      344,   25,  344,  206,  207,  344,  344,  344,   33,  344,
      344,  291,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,  217,  102,    0,    0,    0,    0,  237,
        0,    0,    0,  144,  173,    0,    0,   76,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  235,    0,    0,    0,    0,    0,
        0,  293,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  301,    0,    0,  210,  240,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  174,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  135,    0,    0,    0,    0,    0,    0,  242,    0,
        0,    0,  125,    0,    0,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,   31,  344,   29,

      344,  344,  344,  344,  344,  344,  175,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  200,
      201,  344,  344,  344,  204,  205,  344,  344,   33,  344,
      344,    0,    0,    0,    0,    0,    0,    0,    0,   98,
      217,    0,    0,    0,    0,    0,    0,  144,    0,   76,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  110,    0,
        0,    0,    0,  235,    0,    0,    0,    0,    0,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      301,    0,  132,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  320,    0,    0,    0,    0,  326,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,    0,    0,  268,    0,    0,  344,  344,
      344,  344,  344,  344,  188,  344,  187,  344,  344,  344,
      344,  344,  344,   30,  344,  344,  344,  344,  344,  344,
      175,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

       32,  344,    0,    0,  211,    0,  241,    0,  104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,  327,    0,    0,    0,    0,    0,
        0,  120,    0,    0,    0,    0,    0,  110,    0,    0,
        0,    0,    0,    0,  136,    0,    0,  100,    0,    0,
        0,    0,    0,  243,    0,    0,  269,    0,  126,    0,
        0,  132,    0,    0,    0,    0,    0,  164,    0,    0,
      168,    0,    0,    0,    0,    0,    0,  149,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  322,    0,

        0,  326,    0,    0,    0,    0,    0,    0,  328,    0,
        0,  304,    0,    0,    0,    0,  155,    0,    0,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,  268,
        0,    0,  344,  344,  344,  344,  344,  188,  187,  344,
      344,  344,  344,  344,   30,  344,  344,  344,  344,  344,
      344,  344,   19,  344,  344,  344,  344,  344,  176,  344,
      344,  344,  344,  344,  344,   39,  344,  344,  344,  344,
      344,  344,   32,  344,    0,  211,  241,  104,    0,    0,
        0,  134,    0,  165,    0,  169,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      321,    0,  323,    0,    0,  327,    0,    0,    0,    0,
        0,  120,    0,  329,    0,    0,  305,    0,    0,    0,
        0,    0,    0,    0,  136,    0,    0,    0,    0,   94,
        0,    0,    0,  243,    0,  269,  126,    0,    0,    0,
        0,    0,  166,  164,    0,  170,  168,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  322,    0,  324,    0,    0,    0,
        0,    0,    0,  328,    0,  304,    0,    0,    0,  155,
        0,    0,    0,    0,    0,    0,    0,   87,    0,    0,
        0,    0,    0,  344,   43,  344,  344,  344,  179,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,   14,  344,   19,  344,  344,  344,  344,  344,
      176,  344,  344,  344,  344,  344,   39,  344,  344,  344,
      344,  344,  344,  344,    0,    0,    0,  134,  165,  169,
        0,    0,    0,    0,   69,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  321,  323,    0,  325,    0,    0,
        0,    0,    0,    0,  329,    0,  305,    0,    0,    0,
        0,    0,    0,    0,    0,  154,    0,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  166,    0,
      170,    0,    0,    0,    0,   70,    0,    0,  226,    0,

        0,    0,    0,    0,    0,  314,    0,  324,    0,    0,
      330,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,    0,    0,    0,  246,
        0,   43,  344,  344,  179,  344,  344,  198,  199,  344,
      344,  344,  344,  344,  344,  344,  344,  178,  344,   14,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
       12,  344,  189,  344,  190,  344,  344,  344,  344,  344,
      344,  344,  344,  344,    0,    0,    0,    0,    0,    0,
       69,    0,    0,    0,    0,    0,    0,    0,    0,  315,
        0,  325,    0,    0,  331,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  154,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  228,    0,    0,  338,   70,    0,    0,    0,
        0,    0,  310,    0,  312,    0,  314,    0,    0,  330,
        0,  308,    0,    0,    0,  306,    0,    0,  107,    0,
       79,   81,    0,  230,    0,    0,    0,    0,    0,  344,
      344,  344,  344,  196,  197,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   41,  178,  344,  177,  344,  344,
      344,  344,  344,  344,  344,  344,  344,   12,  189,  190,
      344,  344,  344,  344,  344,  344,  344,  344,  344,    0,

        0,    0,    0,    0,    0,  339,    0,    0,  227,    0,
        0,    0,  311,    0,  313,    0,  315,    0,    0,  331,
        0,    0,    0,    0,    0,  307,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,   88,    0,    0,
        0,  247,    0,  145,    0,  218,    0,    0,    0,  338,
       95,    0,    0,    0,  310,  312,    0,    0,  111,    0,
        0,    0,  306,    0,  336,    0,    0,    0,    0,    0,
       91,    0,  159,    0,  344,  185,  344,  184,  344,  344,
      344,  344,  344,  344,  344,  342,  343,  344,  194,  195,
       41,  177,  344,  344,   13,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  186,  344,  344,  344,
      344,  344,  344,    0,    0,    0,    0,  229,    0,  339,
        0,  227,    0,    0,  311,  313,    0,    0,    0,    0,
        0,  309,    0,    0,  307,    0,  337,    0,    0,  108,
        0,    0,   80,    0,   82,    0,    0,  231,   86,    0,
        0,    0,  247,    0,    0,    0,    0,    0,    0,  115,
        0,  121,    0,  105,    0,    0,  336,    0,    0,    0,
        0,    0,  159,    0,  185,  184,  344,  344,  344,  344,
       40,  344,  344,  340,  341,  192,  193,  344,   13,  344,
       17,  344,   16,  344,  344,   15,  344,  344,  344,  344,

        8,  344,  344,  186,  344,  344,   66,   67,  344,  344,
      344,   34,  344,    0,  146,    0,    0,  219,  229,    0,
        0,   96,    0,    0,    0,    0,    0,  112,    0,  309,
        0,    0,  337,    0,  108,    0,   80,   82,    0,  231,
        0,    0,    0,   92,    0,    0,    0,    0,   83,    0,
      171,    0,  302,    0,    0,  332,    0,  334,    0,    0,
        0,    0,    0,    0,  344,  183,  344,  182,  344,   40,
      344,  344,   44,  344,   17,   16,  344,   15,  344,  344,
       10,  344,    8,  344,  344,   35,  344,   64,   65,  344,
      344,   34,  344,  146,    0,  219,    0,   96,    0,  116,

        0,  303,    0,  122,    0,  112,    0,  106,    0,  333,
        0,  335,    0,    0,    0,    0,    0,   92,    0,    0,
        0,    0,  171,  302,  316,  332,  334,  318,    0,    0,
        0,    0,    0,  183,  182,  344,  344,   42,   44,  344,
        9,  344,   18,  344,   10,  344,  344,   35,  344,   45,
      344,  344,  344,    0,    0,   84,  116,  303,  122,    0,
      106,  333,  335,    0,    0,    0,    0,    0,    0,  224,
        0,    0,  250,  222,    0,   89,  220,  344,   42,    9,
       18,  344,  344,  344,   45,  344,  181,  344,  180,  344,
        0,   84,    0,  317,    0,  319,    0,    0,    0,    0,

        0,    0,    0,   71,  344,   38,  344,  344,  344,   37,
      181,  180,  344,   36,    0,  225,  317,  319,    0,  251,
        0,  223,    0,    0,   90,    0,  221,    0,    0,   38,
      344,  344,   11,   37,   36,  225,  251,  223,    0,   72,
       90,  221,    0,    0,  344,   11,   72,    0,    0,  344,
        0,    0,  344,    0,  163,    0,  167,  344,  163,  167,
      344,  344,  248,  248,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2976] =
    {   0,
        0,   64,    0,    0, 4783, 4782, 4779, 4778,    0,    0,
        0,    0, 4769, 4768,   13,   16,    3,    5, 4782, 4789,
      127,    0, 4776,  189, 4773,   18,   38, 4762,   82,  245,
     4789, 4749, 4739, 4789, 4789,    0,    0,    0, 4789, 4789,
     4767, 4789, 4789, 4758,    0,    0,   23,   85, 4757,  210,
       16, 4789, 4744, 4734, 4710,    4, 4718, 4723, 4722, 4715,
        4, 4727,    0,    5,    7,   18,   61,   69, 4726, 4726,
     4789,  107,  248,  107, 4789,  110, 4754,  282, 4789, 4789,
     4736,   65,   10, 4709,  151,  156,   45, 4718,  216,   71,
       88,  302,   33,  217,   67, 4707,  301,  161, 4720, 4733,

     4727,    0,    0,    0, 4738, 4789, 4708, 4697, 4700,  168,
     4695, 4695, 4694,  192, 4708,  193, 4690, 4697, 4695, 4700,
     4688, 4692, 4694, 4699, 4696, 4678, 4699,  186, 4698, 4697,
     4684, 4678, 4682, 4678,  237,  176,  265,  304, 4721,  312,
     4703,  215,   51, 4676,  303,  301,  236, 4685,  322,  191,
      265,  326,  313,  333,  235, 4674,  335,  264, 4687, 4789,
     4668, 4674, 4666, 4669,  345, 4664, 4660, 4680, 4675, 4673,
     4662, 4674, 4664, 4661, 4669,  388,  342, 4668,  241,  400,
      251, 4658, 4658, 4663, 4789, 4655, 4655, 4657, 4646, 4645,
     4643,  297, 4648, 4657, 4660,  270, 4647, 4645, 4637, 4636,

     4655, 4642, 4641, 4652,  293,  404, 4789, 4633, 4646, 4647,
     4643,  341, 4628, 4628, 4637,  406,  408,  416,  321, 4630,
     4643, 4625, 4622, 4636, 4639, 4626, 4636, 4641, 4631, 4630,
     4643, 4621, 4617, 4622, 4614, 4611, 4615, 4620, 4610, 4620,
     4609, 4622, 4601,   21, 4789,  418,  421,  423, 4602, 4608,
     4600, 4603,  378, 4598, 4594, 4614,  428, 4608, 4597, 4609,
     4599, 4596, 4604,  435,  392, 4603,  396,  439,  343, 4593,
     4593, 4598,  441, 4590, 4590, 4592, 4581, 4591, 4579, 4577,
      390, 4582, 4591, 4594,  397, 4581, 4579, 4571, 4570, 4589,
     4576, 4575, 4586,  331,  457, 4601, 4580, 4581, 4590, 4566,

      420,  461, 4578, 4571, 4567, 4565,  463,  465, 4557, 4571,
     4570, 4560,  469,  481, 4568, 4552, 4566, 4557, 4564, 4563,
      485,  487, 4549,  489,  491, 4561, 4564,  446, 4562,  463,
     4554, 4542, 4542,  417, 4555, 4555, 4540, 4553, 4555, 4562,
     4545,  498, 4535, 4551,  459,  508, 4546, 4536, 4528,  486,
     4563,  488, 4536,  515, 4541, 4525, 4529, 4523, 4516,  519,
     4573, 4570,  525,  527, 4525, 4515, 4516,  531, 4522, 4515,
     4525,  534,  536, 4513, 4535, 4526, 4525, 4511, 4510, 4526,
     4525, 4511, 4520, 4518, 4502, 4516, 4515, 4507,  540, 4504,
     4497, 4511, 4510, 4489,  542,  551,  555,  557, 4528, 4507,

     4508, 4517, 4493,  559,  561, 4505, 4498, 4494,  563,  567,
     4492,  569,  579, 4484, 4498, 4497, 4487,  581,  585, 4495,
     4479, 4493, 4484, 4491, 4490,  587,  591, 4476,  597,  600,
     4488, 4491,  603,  605,  560, 4489,  619, 4481, 4477, 4468,
     4468,  423, 4481, 4481, 4466, 4479, 4481, 4488, 4471,  616,
     4461, 4477,  491,  622, 4472, 4462, 4454,  624,  626,  628,
     4465,  563, 4462, 4466, 4456, 4465, 4450, 4448,  642,  635,
     4449, 4462, 4481, 4459,  645,  651,  661,  653, 4789, 4448,
     4478, 4443, 4440,  663, 4435, 4457, 4439,  665, 4442, 4454,
      669, 4445,  671,  677,  681,  683, 4434,  688, 4432, 4442,

     4445, 4434, 4443, 4442, 4441, 4442, 4429, 4438,  690, 4424,
     4433, 4422, 4418, 4425, 4419, 4416, 4429, 4430,  692,  694,
     4430, 4414, 4426, 4410,  698,  700,  253, 4410, 4423, 4423,
     4421, 4424, 4415, 4422, 4404,    6,  708,  710, 4415, 4419,
     4401, 4436, 4402, 4789, 4789,  714, 4411, 4400, 4410,  716,
      718, 4408, 4394, 4387,  720,  723,  725,  728, 4401, 4406,
     4390, 4401, 4422, 4400, 4394, 4385, 4398, 4396,  735,  737,
     4380, 4379, 4397,  740,  742, 4392, 4378,  752, 4389, 4378,
      755,  757,  759, 4384,  618, 4381, 4385, 4375,  762,  764,
     4384, 4369, 4367,  767,  769, 4368, 4381, 4400,  773, 4378,

      775,  778,  780,  783,  785, 4367, 4397, 4362, 4359,  787,
     4354, 4376, 4358,  791, 4361, 4373,  793, 4364,  796,  798,
      801,  803, 4353,  807, 4351,  809, 4361, 4364, 4353, 4362,
     4361,  812,  814, 4360, 4361, 4348,  817, 4357,  819, 4343,
     4352, 4341, 4337, 4344, 4338, 4335, 4348, 4349,  823,  825,
     4349, 4333, 4345, 4329,  828,  830,  451, 4329, 4342,  835,
      839, 4342, 4340, 4343,  841, 4337, 4366, 4340, 4321, 4333,
     4324, 4331, 4789,  443,  844, 4327, 4330, 4319, 4319,  846,
      848, 4314, 4313, 4329, 4320, 4323, 4313,  492,  851, 4346,
      854, 4322, 4306,  555,  856,  858,  861,  863, 4343,  868,

     4317, 4307, 4313, 4300, 4300, 4299, 4310, 4295, 4300, 4295,
      870,  873, 4328, 4306,  879, 4307, 4789, 4308, 4303, 4301,
     4301,  882, 4300, 4299, 4284, 4789,  886, 4287,  888, 4295,
     4281, 4275, 4292, 4295, 4278, 4275, 4293, 4278, 4277,  890,
     4286, 4276, 4269, 4264, 4273,  892,  895, 4281,  897, 4296,
     4275, 4294,  899,  907, 4314, 4311, 4258, 4278, 4285, 4272,
     4261, 4261, 4259, 4282, 4290, 4265,  901,  913,  919,  904,
     4266, 4251, 4277, 4247,  921, 4298, 4295, 4271, 4246,  927,
      929, 4219, 4217,  931, 4215, 4244, 4218,  934, 4212, 4203,
      936, 4201,  938,  622,  942, 4194, 4196,   80,   94,  944,

      946,  950,  954,  141,  188,  242,  321,  330,  361,  902,
      957,  960,  374,  361,  647,  962,  966,  968,  970,  973,
      427,  424,  433,  448,  458,  485,  975,  512,  510,  522,
      977,  979,  520,  981,  986,  558,  543,  989,  557,  993,
      572,  570,  592,  598,  997,  600,  607,  999, 1001, 1005,
      599, 1009,  626,  619, 1011,  620,  646,  665,  663,  694,
      672, 4789,  678,  704,  706,  699,  714,  720, 1017,  740,
      750,  767,  793,  790,  798,  811,  837,  837,  848, 1019,
     1021,  902,  877,  902,  885, 1035, 1025, 1027, 1029, 1035,
      931, 1037,  908,  916,  920,  934, 4789,  951,  951,  980,

      958, 1041,  963,  976, 1043, 1045,  968,  976,  994,  985,
     1006, 1071, 1050, 4789, 1001, 1073, 1075, 1007, 4789, 4789,
     1037, 1031, 1039, 1029, 1034, 1037, 1027, 1034, 1034, 1046,
     1047, 1092, 1094, 1096, 1098, 1100, 1082, 1064, 1045, 1066,
     4789, 4789, 1067, 1062, 1069, 1058, 1064, 1076, 1062, 1060,
     1058, 1074, 1119, 1118, 1118, 1125, 1068, 1068, 1093, 1090,
     4789, 4789, 1092, 1073, 1133, 1082, 1136, 1097, 1121, 1085,
     1141, 1143, 1145, 1093, 1108, 1109, 1151, 1153, 1106, 1121,
     1107, 1161, 1110, 1108, 1164, 1113, 1128, 1122, 1115, 1117,
     1134, 1133, 1138, 1177, 1135, 1158, 1140, 1181, 1183, 1185,

     1187, 1189, 1151, 1156, 1149, 1144, 1217, 1155, 1153, 1176,
     1219, 1154, 1221, 1161, 1184, 1224, 1226, 1173, 1229, 1233,
     1176, 1196, 1182, 1196, 1240, 1242, 1245, 1247, 1249, 1251,
     1253, 1190, 1261, 1258, 1206, 1267, 1269, 1223, 1218, 1271,
     1230, 1222, 1237, 1229, 1226, 1225, 1237, 1228, 1287, 1289,
     1245, 1237, 4789, 1256, 1272, 1234, 4789, 1255, 1258, 1250,
     1298, 1257, 1303, 1258, 1252, 1257, 1269, 1249, 1261, 1261,
     1276, 1274, 1278, 1270, 1281, 1284, 1284, 1274, 1290, 1329,
     1331, 1278, 1335, 1338, 1297, 1286, 1287, 1289, 1291, 1288,
     1306, 1326, 1299, 1296, 1351, 1353, 1311, 1326, 1317, 1314,

     1360, 1344, 1363, 1365, 1370, 1312, 1331, 1373, 1324, 1325,
     1339, 1343, 1338, 1329, 1360, 1361, 1346, 1387, 1339, 1336,
     1391, 1393, 1395, 1397, 1355, 1341, 1378, 1344, 1375, 1366,
     1396, 1367, 1368, 1369, 1411, 1363, 1372, 1369, 4789, 4789,
     1419, 1429, 1366, 1406, 1375, 1411, 1396, 1437, 1439, 1445,
     1397, 1394, 1448, 1452, 1454, 1410, 1407, 1404, 1458, 1406,
     1418, 1408, 1464, 1468, 1426, 1416, 1471, 1437, 1453, 1415,
     1476, 1438, 1442, 1435, 1483, 1438, 1433, 1488, 1492, 1440,
     1455, 1435, 1447, 1447, 1460, 1461, 1465, 1459, 1467, 1470,
     1469, 1459, 1475, 1514, 1516, 1520, 1482, 1468, 1469, 1471,

     1527, 1529, 1479, 1476, 1494, 1514, 1487, 1484, 1538, 1540,
     1543, 1501, 1516, 1507, 1504, 1549, 1551, 1553, 1556, 1508,
     1560, 1562, 1565, 1569, 1531, 1571, 1520, 1574, 1578, 1580,
     1582, 1523, 1544, 1585, 1587, 1541, 1547, 1537, 1538, 1554,
     1575, 1548, 1554, 1601, 4789, 4789, 1544, 1556, 1551, 1579,
     1586, 1552, 4789, 1553, 1609, 1596, 1612, 1574, 4789, 1566,
     1561, 1581, 1564, 1569, 1564, 1564, 1570, 1577, 1585, 1583,
     1573, 1580, 1590, 1596, 1596, 1581, 1587, 1604, 1601, 1587,
     1586, 1604, 1641, 1590, 1600, 1601, 4789, 1606, 1607, 1612,
     1602, 1610, 1615, 1652, 1654, 1606, 1619, 1602, 1604, 1611,

     1661, 1663, 1656, 1668, 1616, 1626, 1623, 1632, 1619, 1619,
     1616, 1626, 1639, 1640, 1631, 1681, 1683, 1649, 1637, 1667,
     1688, 1654, 1691, 1654, 1696, 1658, 1676, 1652, 1650, 1654,
     1666, 1653, 1667, 1650, 1657, 1653, 1673, 1662, 1688, 1688,
     1715, 1717, 1664, 1667, 1679, 1724, 1726, 1730, 1732, 1675,
     1698, 1739, 1697, 1692, 1742, 4789, 4789, 1748, 1750, 1697,
     1708, 1754, 1701, 1702, 1718, 1738, 1711, 1717, 1764, 1766,
     1768, 1770, 1772, 1707, 1727, 1722, 1750, 1777, 1779, 1762,
     1729, 1786, 1788, 1790, 1753, 1794, 1796, 1749, 1744, 1764,
     1747, 1753, 1748, 1748, 1754, 1759, 1768, 1766, 1756, 1763,

     1773, 1779, 1779, 1764, 1770, 1787, 1784, 1770, 1769, 1823,
     1772, 1782, 1783, 1828, 1830, 1792, 1793, 1798, 1788, 1796,
     1801, 1838, 1840, 1792, 1806, 1789, 1791, 1798, 1848, 1850,
     1802, 1854, 1812, 1809, 1858, 1860, 1822, 1863, 1865, 1831,
     1809, 1815, 1816, 1822, 1825, 1818, 1824, 1825, 1836, 1822,
     1843, 1844, 1837, 1842, 1883, 1885, 1878, 1840, 1835, 1850,
     1849, 1859, 1840, 1854, 1855, 1854, 1841, 1863, 1860, 1847,
     1863, 1863, 1857, 1858, 1859, 1868, 1871, 1872, 1871, 1868,
     1865, 1893, 1858, 1859, 1869, 1865, 1881, 1882, 4789, 1876,
     1924, 1877, 1908, 1892, 1875, 1886, 1931, 1879, 1879, 1886,

     1900, 1888, 4789, 1894, 1918, 1890, 1882, 1884, 1906, 1945,
     1892, 1922, 1905, 1909, 1952, 1954, 1897, 1957, 1959, 1906,
     1926, 1913, 1918, 1968, 1913, 1915, 1923, 1928, 1938, 1917,
     1940, 1930, 1940, 1940, 1944, 1984, 1978, 1981, 1944, 1970,
     1936, 1992, 1994, 1993, 1993, 1956, 1946, 2002, 2004, 1947,
     1969, 2008, 1974, 1952, 1958, 1959, 1965, 1968, 1962, 1968,
     2019, 2021, 2023, 2025, 2027, 1979, 1990, 1976, 1996, 2035,
     1997, 1993, 2039, 2041, 2043, 1997, 2046, 2048, 2050, 2012,
     2011, 2022, 2003, 2017, 2018, 2017, 2004, 2026, 2063, 2012,
     2028, 2028, 2022, 2023, 2024, 2033, 2036, 2037, 2036, 2079,

     2056, 2024, 2025, 2083, 2087, 2036, 2035, 2051, 2051, 2092,
     2048, 2096, 2050, 2081, 2065, 2048, 2061, 2051, 2059, 2073,
     2061, 2111, 2113, 2115, 2064, 4789, 4789, 4789, 2080, 2079,
     2066, 2072, 2069, 2076, 2082, 2072, 2073, 2079, 2083, 2132,
     2087, 2095, 2081, 2084, 2088, 2095, 2100, 2088, 2089, 2103,
     2090, 2090, 2108, 2147, 2093, 2097, 2098, 2116, 2117, 4789,
     2100, 2119, 2116, 2103, 2105, 2123, 2120, 2102, 2123, 2124,
     2127, 4789, 2126, 2119, 2149, 2129, 2120, 2132, 4789, 2117,
     2123, 2174, 4789, 2121, 2139, 2128, 2130, 2141, 2126, 2128,
     2183, 2185, 2147, 2135, 2154, 2138, 2142, 2193, 2195, 2200,

     2143, 2164, 2165, 2148, 2165, 2206, 2210, 2155, 2159, 2166,
     2174, 2176, 2162, 2175, 2162, 2197, 2182, 2164, 2169, 4789,
     4789, 2174, 2182, 2187, 4789, 4789, 2169, 2176, 2230, 2232,
     2194, 2182, 2236, 2238, 2242, 2202, 2204, 2191, 2198, 2248,
     2254, 2197, 2204, 2213, 2203, 2204, 2210, 2261, 2223, 2264,
     2266, 2268, 2215, 2218, 2222, 2229, 2234, 2222, 2223, 2237,
     2224, 2224, 2282, 2284, 2242, 2286, 2232, 2236, 2237, 2255,
     2256, 2293, 2241, 2260, 2258, 2245, 2247, 2302, 2304, 2270,
     2248, 2269, 2270, 2311, 2275, 2314, 2276, 2270, 2319, 2321,
     2304, 2284, 2275, 2287, 2327, 2275, 2331, 2335, 2278, 2299,

     2338, 2340, 2343, 2285, 2307, 2300, 4789, 2351, 2353, 2309,
     2320, 2304, 2322, 2310, 2363, 2317, 2316, 2314, 2321, 2321,
     2323, 2318, 2319, 2341, 4789, 2375, 2337, 2324, 2380, 2382,
     2346, 2349, 2346, 2334, 2333, 2391, 2342, 2393, 2345, 2364,
     2361, 2399, 2350, 2383, 2384, 2364, 2352, 2367, 2359, 4789,
     2370, 2358, 2372, 2357, 2415, 2417, 2376, 2381, 2373, 2384,
     2365, 2389, 2386, 2427, 2431, 2433, 2435, 2403, 2393, 2383,
     2399, 2391, 2442, 2444, 2406, 2393, 2403, 2402, 2397, 2397,
     2453, 2457, 2411, 2415, 2422, 2408, 2462, 2424, 2425, 2427,
     2431, 2442, 2469, 2419, 2426, 2421, 2426, 2455, 2434, 2479,

     2481, 2458, 2425, 2486, 2488, 2490, 2494, 2496, 2498, 2452,
     2452, 2502, 2506, 2508, 2464, 2474, 2459, 2477, 2465, 2466,
     2518, 2463, 2472, 2473, 2476, 2471, 2472, 2494, 2528, 2530,
     2492, 2533, 2480, 2536, 2538, 2502, 2505, 2502, 2491, 2491,
     2547, 2549, 2552, 2507, 2555, 2506, 2525, 2559, 2524, 2512,
     2545, 2546, 2526, 2568, 2571, 2520, 2534, 2575, 2527, 2578,
     2540, 2528, 2584, 2586, 2542, 2590, 2594, 2596, 2600, 2544,
     2552, 2602, 2578, 2583, 2566, 2607, 2594, 2612, 2614, 2595,
     2617, 2570, 2571, 2577, 2626, 2605, 2631, 2633, 2590, 2581,
     2601, 2594, 2603, 2600, 2587, 2602, 2590, 2644, 2647, 2649,

     2607, 2652, 2599, 2607, 2607, 2624, 2605, 2660, 2662, 2629,
     2666, 2668, 2620, 2618, 2625, 2673, 2676, 2625, 2629, 2630,
     2661, 4789, 2634, 2635, 2644, 2646, 2651, 2670, 2637, 2691,
     2643, 2673, 2695, 2679, 2699, 2644, 2701, 2703, 2705, 2671,
     2649, 2658, 2674, 2678, 2716, 2665, 2669, 2666, 2672, 2722,
     2671, 2725, 2727, 2691, 2681, 2676, 2696, 2733, 2737, 2681,
     2686, 2682, 2705, 2707, 2744, 2748, 2702, 2707, 2712, 2713,
     2710, 2696, 2756, 2723, 2740, 2761, 2763, 2765, 2746, 2728,
     2769, 2771, 2773, 2775, 2777, 2779, 2732, 2733, 2739, 2785,
     2768, 2734, 2754, 2747, 2757, 2754, 2741, 2756, 2744, 2798,

     2801, 2803, 2805, 2807, 2765, 2810, 2757, 2766, 2766, 2783,
     2764, 2819, 2823, 2825, 2785, 2827, 2829, 2781, 2779, 2786,
     2781, 2785, 2786, 2816, 2839, 2843, 2792, 2796, 2846, 2848,
     2809, 2811, 2816, 2853, 2836, 2856, 2859, 2812, 2842, 2828,
     2818, 2817, 2867, 2869, 2862, 2872, 2874, 2867, 2822, 2823,
     2820, 2880, 2868, 2834, 2885, 2848, 2836, 2847, 2843, 2846,
     2840, 2851, 2896, 2854, 2899, 2901, 2903, 2848, 2906, 2860,
     2871, 2866, 2868, 2913, 2862, 2917, 2865, 2876, 2882, 2923,
     2885, 2877, 2878, 2881, 2874, 2890, 2890, 4789, 2877, 2883,
     2896, 2886, 2889, 2937, 2939, 2891, 2892, 2943, 2945, 2892,

     2948, 2953, 2895, 2928, 2911, 2904, 2913, 2912, 2910, 2964,
     2912, 2967, 2969, 2935, 2972, 2934, 2956, 2936, 2933, 2924,
     2982, 2985, 2987, 2992, 2933, 2935, 2994, 2937, 2957, 2960,
     2946, 2949, 2979, 2949, 2969, 2960, 2959, 3009, 3011, 3013,
     2960, 2961, 2958, 3018, 3020, 2972, 2969, 2980, 2976, 2979,
     2973, 2984, 3029, 2987, 3034, 3036, 3038, 3040, 2975, 3042,
     2997, 3008, 3003, 3004, 3049, 2998, 3054, 2998, 3012, 3018,
     3019, 3011, 3012, 3015, 3063, 3065, 3012, 3028, 3069, 3030,
     3072, 3019, 3025, 3027, 3030, 3024, 3040, 3026, 3082, 3045,
     3085, 3047, 3035, 3071, 3091, 3093, 3046, 3047, 4789, 3048,

     3062, 3099, 3101, 3053, 3104, 3107, 3073, 3110, 3072, 3117,
     3120, 3069, 3075, 3074, 3064, 3124, 3086, 3091, 3074, 3075,
     3090, 3091, 3093, 3080, 4789, 3091, 3092, 3088, 3098, 4789,
     3100, 3141, 3096, 3086, 3145, 3128, 3148, 3147, 3147, 3101,
     3116, 3097, 3113, 3160, 3162, 3164, 3166, 3168, 3170, 3172,
     3114, 3121, 3127, 3142, 3141, 3146, 3147, 3128, 3142, 3187,
     3189, 3191, 3193, 3195, 3197, 3159, 3147, 3178, 3150, 3149,
     3152, 3153, 3169, 3157, 3156, 3172, 3158, 3160, 3196, 3216,
     3218, 3171, 3221, 3174, 3188, 3225, 3227, 3179, 3232, 3234,
     3194, 3237, 3199, 3243, 3245, 3197, 3208, 3201, 3191, 3251,

     3213, 3218, 3201, 3202, 3217, 3219, 3220, 3261, 3209, 3264,
     3223, 3268, 3270, 3228, 3224, 3274, 3236, 3241, 3230, 3226,
     3241, 3238, 4789, 3234, 3285, 3287, 3290, 3252, 3255, 3239,
     3246, 3296, 3298, 3301, 3303, 3256, 3306, 3259, 3255, 3312,
     3261, 4789, 3274, 3298, 3317, 3319, 3321, 3274, 4789, 3270,
     4789, 4789, 3277, 4789, 3288, 3289, 3288, 3329, 3283, 3333,
     3337, 3285, 3289, 4789, 4789, 3296, 3282, 3318, 3293, 3345,
     3349, 3355, 3357, 3363, 3365, 3367, 3370, 3372, 3299, 3374,
     3304, 3316, 3323, 3325, 3326, 3340, 3343, 3382, 3385, 3389,
     3333, 3347, 3353, 3393, 3351, 3396, 3343, 3340, 3356, 3365,

     3354, 3349, 3404, 3356, 3408, 3411, 3373, 3414, 3416, 3363,
     3371, 3421, 3424, 3426, 3430, 3379, 3432, 3385, 3381, 3437,
     3390, 3442, 3400, 3427, 3445, 3447, 3449, 3402, 3452, 3400,
     3455, 3458, 3413, 3462, 3465, 3468, 3433, 3474, 3434, 3436,
     3478, 3481, 3435, 4789, 3444, 4789, 3431, 3439, 3438, 3488,
     4789, 3450, 3437, 3437, 3494, 3496, 3444, 3457, 4789, 3458,
     3447, 3447, 3503, 3505, 3507, 3467, 3466, 3471, 3468, 3494,
     4789, 3514, 3516, 3478, 3521, 3523, 3525, 3527, 3472, 3472,
     3472, 3532, 3495, 3487, 3537, 3538, 3538, 3544, 3545, 3545,
     3551, 3553, 3500, 3556, 3558, 3560, 3562, 3516, 3565, 3546,

     3514, 3536, 3571, 3514, 3516, 3577, 3580, 3532, 3583, 3587,
     3567, 3593, 3530, 3595, 3559, 3600, 3602, 3604, 3557, 3608,
     3611, 3613, 3562, 3563, 3619, 3621, 3569, 3582, 3627, 3583,
     3629, 3631, 3579, 3579, 3635, 3637, 3639, 3599, 3645, 3647,
     3599, 3649, 3653, 3655, 3657, 3611, 3661, 3665, 3667, 3615,
     3644, 3671, 3673, 3629, 3626, 3639, 3638, 3639, 3680, 4789,
     3682, 4789, 3637, 4789, 3687, 3689, 3691, 3638, 3643, 3645,
     3656, 3648, 3699, 3652, 3705, 3707, 3709, 3711, 3679, 3713,
     3715, 3658, 3718, 4789, 4789, 4789, 4789, 3666, 3721, 3728,
     3730, 3733, 3735, 3670, 3737, 3739, 3667, 3743, 3701, 3745,

     3748, 3726, 3752, 3754, 3707, 3760, 3755, 3757, 3714, 3717,
     3768, 3770, 3748, 3773, 3775, 3728, 3778, 3780, 3783, 3745,
     3786, 3789, 3791, 3794, 3796, 3751, 3799, 3802, 3804, 3807,
     3812, 3815, 3817, 3763, 3820, 3772, 3823, 3825, 3779, 3831,
     3789, 3783, 3834, 3836, 3789, 3784, 3787, 3822, 4789, 3842,
     3844, 3846, 3850, 3808, 3852, 3854, 3858, 3862, 3816, 3811,
     3809, 3816, 3817, 3813, 3869, 3871, 3874, 3876, 3839, 3879,
     3881, 3884, 3886, 3889, 3891, 3893, 3896, 3899, 3850, 3904,
     3906, 3849, 3908, 3872, 3912, 3914, 3916, 4789, 4789, 3872,
     3862, 3921, 3884, 3924, 3872, 3928, 3931, 3933, 3935, 3937,

     3939, 3941, 3943, 3947, 3905, 3951, 3955, 3959, 3961, 3963,
     3965, 3967, 3909, 3904, 3902, 3920, 3922, 3972, 3919, 3921,
     3933, 3925, 3981, 3983, 4789, 3985, 3987, 4789, 3925, 3935,
     3935, 3951, 3938, 3993, 3995, 3938, 3998, 4000, 4002, 4004,
     4006, 4008, 4010, 3960, 4014, 3968, 3958, 4019, 4023, 4025,
     4027, 4029, 3962, 3977, 4032, 4034, 4038, 4044, 4048, 4050,
     4052, 4054, 4056, 4058, 3982, 3986, 3987, 4006, 4006, 4789,
     4010, 4022, 4789, 4789, 4009, 4789, 4789, 4066, 4068, 4070,
     4074, 4024, 4018, 4076, 4078, 4081, 4083, 4085, 4087, 4091,
     4093, 4096, 4100, 4102, 4106, 4109, 4111, 4113, 4035, 4116,

     4118, 4043, 4068, 4789, 4122, 4124, 4066, 4129, 4134, 4137,
     4139, 4141, 4144, 4146, 4149, 4151, 4153, 4155, 4159, 4161,
     4165, 4167, 4169, 4171, 4175, 4177, 4181, 4083, 4077, 4187,
     4103, 4189, 4193, 4195, 4197, 4199, 4201, 4204, 4206, 4208,
     4210, 4212, 4113, 4123, 4135, 4214, 4216, 4134, 4132, 4141,
     4218, 4222, 4171, 4224, 4226, 4228, 4230, 4178, 4234, 4240,
     4244, 4246, 4248, 4250, 4789, 4262, 4266, 4270, 4274, 4278,
     4282, 4286, 4290, 4294, 4298
    } ;

static yyconst flex_int16_t yy_def[2976] =
    {   0,
     2966, 2966, 2967, 2967, 2968, 2968, 2969, 2969, 2967, 2967,
     2967, 2967, 2970, 2970, 2971, 2971, 2972, 2972, 2965, 2965,
     2965,   21, 2965,   21, 2965,   24,   24,   24,   24, 2965,
     2965,   24,   24, 2965, 2965, 2973, 2974, 2975, 2965, 2965,
     2965, 2965, 2965, 2965,   21,   24,   24,   24,   24,   24,
       30, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2965,   24,   24,   24, 2965,   24, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,

       24, 2973, 2974, 2975, 2965, 2965,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965,   24, 2965,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2965, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2965, 2965,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2965, 2965,   24,   24,   24,
       24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2965, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2965, 2965,   24,   24,   24,   24,   24,
     2965, 2965,   24,   24,   24,   24,   24, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2965, 2965,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2965, 2965,   24,   24,
       24,   24,   24, 2965, 2965,   24,   24,   24,   24,   24,
       24, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2965,
     2965,   24,   24,   24, 2965, 2965,   24,   24,   24,   24,
       24, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965,   24,   24,   24,   24,   24,   24, 2965, 2965,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,
       24,   24,   24, 2965, 2965,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2965, 2965,   24, 2965, 2965,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2965, 2965, 2965, 2965,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24, 2965, 2965,   24,   24,
       24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2965, 2965,   24,
       24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,   24,
       24,   24,   24,   24,   24, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965,   24,   24, 2965, 2965, 2965,   24,
     2965, 2965,   24, 2965, 2965, 2965, 2965,   24, 2965, 2965,
       24,   24,   24,   24,    0, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965
    } ;

static yyconst flex_int16_t yy_nxt[4854] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2965,
       44,   41,   44, 2965,   41,   32,  738,   48,   33,   50,
       50,   50,   48, 2965,   50,   50,   50,  117,  739,   72,
       72,  108,  119,   53,  114,  123,  120,  163,   53,   73,
       73,   73,  109,  393,  115,  394,  121,  118,  164,  125,
       74,  124,  122,   34,   20,   21,   22,   20,   23,  126,
       25,  188,   26,   27,   28,   29,   29,   29,   30,   74,
       31,   20,  172,   76,   76,  189,   72,   72,  251,   32,
      173,   48,   33,   50,   50,   50,   73,   73,   73,  252,

      127,  194,  128,  161,   74,  129,  132,   74,   72,   72,
      133,   76,   76,  162,  137,  137,  179,  130,  138,  138,
      138,  180,  131,   74,  195,  181,   74,   34,   45,   45,
      134,  983,   46,  182,   46,   47,   48,   49,   50,   50,
       50,   51,   46,   52,  984,   46,   46,   46,   46,   46,
       46,   46,   53,   46,   46,   54,   46,   46,   46,   46,
       46,   46,   46,   46,   55,   56,   57,   58,   46,   59,
       46,   60,   61,   46,   46,   62,   63,   64,   65,   46,
       46,   66,   67,   68,   69,   70,   46,   46,   46,   46,
       46,   46,  166,  216,  216,  986,  167,   46,   46,   46,

       46,   46,   46, 2965,  169, 2965,  203,  217,  168,  211,
      170,   76,   76,  220,   46,  204,  171,   46,  212,   48,
      221,   50,   50,   50,  243,  233,   46,   46,   46,   46,
      244,   46,   74,   46,   46,  234,  267,   46,   46,   46,
       46,  268,  987,   46,   46,   46,   46,   46,   77,   72,
       72,   74,  218,  249,  190,   78,  175,  241,  176,   73,
       73,   73,   79,  250,  242,  191,  177,   80,  192,  283,
       74,  193,  178,  260,  728,   81,  138,  138,  138,  988,
      319,  261,   82,   83,   84,   85,   86,   87,   88,   74,
       89,  320,  284,   90,   91,   92,   93,   94,   95,   96,

       97,   98,  269,   99,  140,   72,   72,  323,  729,  292,
      270,  324,  141,  246,  246,  138,  138,  138,  293,  142,
      143,  144,  145,  146,  147,  148,  339,  149,  247,  340,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  183,
      159,  349,  197,  184,  254,  334,  198,  350,  255,  257,
      185,  276,  199,  186,  200,  258,  335,  201,  202,  187,
      256,  259,  263,  271,  264,  277,  989,  272,  278,  367,
      279,  990,  265,  355,  273,  368,  286,  274,  266,  457,
      287,  280,  315,  275,  281,  458,  288,  282,  289,  313,
      313,  290,  291,  299,  300,  301,  356,  316,  317,  428,

      302,  321,  321,  429,  314,   72,   72,  216,  216,  360,
      360,  991,  361,  995,  362,  996,  322,  363,  363,  246,
      246,  217,  395,  395,  396,  396,  402,  403,  404,  409,
      409,  364,  420,  405,  247,  424,  418,  418,  442,  397,
      426,  426,  433,  433,  410,  365,  425,  421,  422,  443,
      366,  419,  466,  447,  510,  427,  448,  434,  459,  459,
      640,  467,  469,  469,  475,  475,  477,  477, 1002,  411,
      313,  313,  851,  460, 1003,  468, 1004,  470,  511,  476,
      866,  478,  484,  484,  641,  314,  321,  321,  491,  491,
      493,  493,  495,  495,  500,  505,  501,  867,  502,  519,

      519,  322,  523, 1005,  506,  494,  852,  496,  503,  525,
      525,  530, 1006,  524,  520,  534,  537,  537,  531,  479,
      360,  360,  535,  361,  526,  362,  363,  363,  546,  546,
      538,  532,  550,  550,  653,  555,  555,  557,  557, 1007,
      364,  574,  574,  395,  395,  654,  551,  878,  497,  556,
      879,  558,  396,  396, 1008,  575,  581,  581,  582,  582,
      589,  589,  594,  594,  409,  409, 1009,  397,  599,  599,
      601,  601, 1010,  583, 1012,  590,  667,  595, 1014,  410,
      603,  603,  418,  418, 1015,  602,  610,  610,  426,  426,
      668,  591,  617,  617,  885,  604, 1018,  419,  619,  619,

      592,  621,  621,  427,  433,  433,  626,  626,  627, 1021,
      628, 1022,  629,  620,  593,  886,  622,  649,  649,  434,
      632,  632,  630,  655,  655,  660,  660,  459,  459,  665,
      665,  786,  650,  605, 1023,  633,  675,  675,  656, 1024,
      661, 1025,  460,  469,  469,  787,  475,  475, 1026,  662,
     1032,  634,  680,  680,  681,  681,  663,  623,  470,  979,
      635,  476,  477,  477,  484,  484,  689,  689, 1035,  664,
      491,  491,  493,  493, 1036,  690,  980,  478,  695,  695,
     1037,  691,  495,  495,  696,  696,  997,  494, 1038,  698,
      698,  711,  711,  519,  519,  722,  722,  496,  699,  525,

      525,  727,  727, 1039,  700, 1040,  712,  998,  520,  537,
      537,  740,  740, 1041,  526,  546,  546,  550,  550,  749,
      749,  555,  555,  538,  753,  753,  557,  557, 1042,  754,
      754,  551,  755, 1043,  756,  556,  767,  767,  769,  769,
      558,  574,  574,  775,  775, 1044,  776, 1045,  777, 1046,
      768, 1047,  770,  780,  780,  575,  581,  581,  582,  582,
      784,  784,  771,  589,  589,  791,  791,  781,  594,  594,
      795,  795, 1048,  583,  599,  599,  601,  601,  590,  800,
      800,  603,  603,  595,  801,  801,  802,  802,  610,  610,
     1051,  602,  811,  811,  617,  617,  604,  619,  619,  816,

      816,  803,  621,  621,  817,  817, 1052,  812,  819,  819,
      626,  626,  620,  632,  632,  827,  827,  622,  831,  831,
      834,  834, 1053,  820,  649,  649,  845,  845,  633,  655,
      655,  850,  850,  832, 1054,  835,  660,  660, 1055,  650,
      855,  855,  665,  665,  656,  675,  675,  680,  680,  681,
      681,  661,  689,  689, 1056,  881,  881,  695,  695,  696,
      696,  690,  887,  887,  698,  698, 1057,  691,  882,  890,
      890,  711,  711,  699,  902,  902, 1058,  888, 1059,  700,
      905,  905,  891,  722,  722, 1060,  712,  727,  727,  916,
      916,  740,  740,  933,  933,  906,  935,  935,  749,  749,

      753,  753,  767,  767,  917,  956,  956,  934,  754,  754,
      936,  755, 1062,  756,  953,  953,  768,  954, 1063,  955,
      769,  769,  775,  775, 1064,  776, 1065,  777,  780,  780,
      965,  965,  784,  784,  770,  971,  971,  791,  791,  977,
      977, 1082,  781,  795,  795,  800,  800,  801,  801, 1085,
      972,  802,  802, 1086,  978,  985,  985,  992,  811,  811,
      993,  994,  994,  816,  816, 1087,  803,  817,  817,  999,
      999,  819,  819,  812, 1001, 1001,  827,  827,  831,  831,
     1011, 1011,  834,  834, 1000, 1088,  820, 1013, 1013,  973,
     1016, 1016, 1089,  832, 1019, 1019, 1090,  835,  845,  845,

     1027, 1027, 1030, 1030, 1091, 1017,  850,  850, 1092, 1020,
     1033, 1033,  855,  855, 1093, 1028, 1094, 1031, 1049, 1049,
     1061, 1061,  881,  881, 1096, 1034,  887,  887, 1080, 1080,
     1081, 1081, 1097, 1050, 1098,  882,  890,  890, 1083, 1083,
     1099,  888,  902,  902,  905,  905, 1095, 1095, 1100,  891,
     1107, 1104, 1104, 1084, 1029, 1066, 1067, 1068, 1109,  906,
     1069, 1070, 1071, 1072, 1073, 1074, 1105, 1075, 1076, 1077,
     1078, 1079, 1101, 1101,  916,  916, 1108, 1108, 1110, 1111,
     1112, 1102, 1106, 1113, 1114, 1115, 1116, 1103, 1117,  917,
     1118, 1119, 1120, 1121, 1121,  933,  933, 1123, 1123,  935,

      935, 1124, 1124, 1125, 1126, 1127, 1128, 1122, 1129,  934,
     1130, 1131, 1132,  936, 1133, 1134, 1135, 1136, 1137, 1138,
      953,  953, 1139,  954, 1140,  955,  956,  956, 1141, 1142,
     1143, 1144, 1145, 1146,  965,  965, 1147, 1148, 1148, 1150,
     1151, 1152,  971,  971, 1153, 1153, 1154, 1154, 1156, 1157,
     1158, 1149,  977,  977, 1159, 1159, 1160,  972, 1161, 1162,
     1165, 1155, 1163, 1163, 1166,  985,  985,  978, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1164,  994,  994,
     1176, 1177, 1178, 1178,  999,  999, 1194, 1194, 1001, 1001,
     1195, 1195, 1197, 1198, 1199, 1200, 1203, 1179, 1204, 1000,

     1205, 1180, 1181, 1182, 1206, 1196, 1183, 1184, 1185, 1186,
     1187, 1188, 1207, 1189, 1190, 1191, 1192, 1193, 1201, 1201,
     1011, 1011, 1013, 1013, 1208, 1016, 1016, 1209, 1209, 1210,
     1019, 1019, 1212, 1202, 1211, 1211, 1213, 1214, 1215, 1225,
     1017, 1216, 1216, 1218, 1218, 1020, 1027, 1027, 1221, 1221,
     1222, 1222, 1030, 1030, 1224, 1224, 1217, 1227, 1219, 1226,
     1226, 1028, 1033, 1033, 1232, 1223, 1233, 1031, 1228, 1228,
     1230, 1230, 1234, 1234, 1220, 1236, 1237, 1034, 1238, 1239,
     1240, 1241, 1242, 1229, 1243, 1231, 1245, 1235, 1049, 1049,
     1244, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1061,

     1061, 1249, 1254, 1050, 1255, 1255, 1258, 1259, 1260, 1264,
     1261, 1265, 1266, 1256, 1262, 1269, 1270, 1267, 1271, 1257,
     1263, 1268, 1273, 1274, 1272, 1276, 1280, 1281, 1282, 1277,
     1080, 1080, 1081, 1081, 1284, 1278, 1083, 1083, 1279, 1283,
     1283, 1275, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1084, 1095, 1095, 1294, 1294, 1297, 1298, 1299, 1300,
     1301, 1101, 1101, 1305, 1302, 1302, 1104, 1104, 1306, 1295,
     1102, 1304, 1304, 1296, 1108, 1108, 1103, 1303, 1307, 1308,
     1309, 1105, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1316,
     1319, 1320, 1121, 1121, 1321, 1321, 1123, 1123, 1124, 1124,

     1322, 1323, 1317, 1324, 1325, 1326, 1122, 1327, 1338, 1339,
     1340, 1343, 1341, 1341, 1318, 1328, 1329, 1344, 1330, 1345,
     1346, 1346, 1350, 1331, 1332, 1333, 1342, 1334, 1335, 1336,
     1348, 1348, 1337, 1351, 1347, 1352, 1353, 1354, 1148, 1148,
     1355, 1355, 1360, 1356, 1349, 1357, 1358, 1358, 1361, 1153,
     1153, 1363, 1149, 1154, 1154, 1362, 1362, 1364, 1365, 1159,
     1159, 1359, 1366, 1367, 1368, 1163, 1163, 1370, 1155, 1369,
     1369, 1371, 1372, 1372, 1374, 1375, 1377, 1378, 1378, 1380,
     1164, 1381, 1376, 1382, 1383, 1383, 1385, 1373, 1386, 1178,
     1178, 1388, 1379, 1387, 1387, 1392, 1389, 1393, 1394, 1384,

     1390, 1395, 1397, 1398, 1179, 1396, 1391, 1399, 1401, 1402,
     1404, 1408, 1409, 1400, 1405, 1194, 1194, 1195, 1195, 1411,
     1406, 1410, 1410, 1407, 1412, 1413, 1414, 1403, 1201, 1201,
     1415, 1415, 1196, 1416, 1417, 1418, 1419, 1420, 1421, 1209,
     1209, 1422, 1422, 1202, 1211, 1211, 1425, 1426, 1427, 1428,
     1216, 1216, 1429, 1429, 1218, 1218, 1423, 1430, 1430, 1431,
     1424, 1221, 1221, 1222, 1222, 1217, 1432, 1432, 1433, 1219,
     1224, 1224, 1226, 1226, 1434, 1228, 1228, 1437, 1223, 1435,
     1435, 1230, 1230, 1436, 1436, 1438, 1234, 1234, 1439, 1439,
     1229, 1440, 1441, 1442, 1443, 1444, 1231, 1445, 1446, 1447,

     1448, 1235, 1244, 1244, 1449, 1450, 1451, 1452, 1453, 1454,
     1255, 1255, 1455, 1456, 1456, 1458, 1459, 1460, 1461, 1256,
     1462, 1463, 1464, 1465, 1466, 1257, 1457, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1283, 1283, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1294, 1294, 1491, 1491, 1492, 1493, 1494,
     1495, 1496, 1497, 1497, 1302, 1302, 1498, 1499, 1295, 1304,
     1304, 1500, 1501, 1502, 1503, 1504, 1505, 1303, 1506, 1507,
     1508, 1509, 1316, 1316, 1510, 1510, 1511, 1512, 1513, 1321,
     1321, 1514, 1515, 1515, 1517, 1520, 1317, 1518, 1518, 1521,

     1522, 1523, 1524, 1526, 1527, 1528, 1516, 1529, 1530, 1531,
     1532, 1519, 1533, 1534, 1525, 1535, 1341, 1341, 1536, 1536,
     1539, 1537, 1540, 1538, 1541, 1346, 1346, 1542, 1542, 1546,
     1342, 1348, 1348, 1543, 1543, 1547, 1544, 1550, 1545, 1347,
     1548, 1548, 1551, 1355, 1355, 1349, 1356, 1553, 1357, 1358,
     1358, 1552, 1552, 1554, 1549, 1362, 1362, 1555, 1556, 1557,
     1558, 1559, 1560, 1566, 1359, 1369, 1369, 1561, 1561, 1563,
     1563, 1372, 1372, 1565, 1565, 1567, 1568, 1569, 1378, 1378,
     1570, 1570, 1562, 1571, 1564, 1572, 1373, 1573, 1573, 1383,
     1383, 1575, 1575, 1379, 1576, 1577, 1577, 1387, 1387, 1579,

     1580, 1581, 1574, 1582, 1384, 1583, 1584, 1585, 1586, 1587,
     1578, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1410, 1410, 1601, 1602, 1603, 1604,
     1604, 1415, 1415, 1606, 1607, 1608, 1609, 1610, 1611, 1422,
     1422, 1612, 1612, 1613, 1605, 1614, 1615, 1616, 1617, 1429,
     1429, 1430, 1430, 1618, 1423, 1432, 1432, 1619, 1620, 1435,
     1435, 1436, 1436, 1621, 1622, 1622, 1439, 1439, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1623,
     1636, 1637, 1638, 1639, 1640, 1640, 1456, 1456, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1457,

     1652, 1653, 1654, 1655, 1657, 1658, 1656, 1659, 1660, 1661,
     1662, 1663, 1665, 1666, 1667, 1668, 1669, 1670, 1624, 1671,
     1672, 1673, 1664, 1674, 1675, 1491, 1491, 1676, 1677, 1678,
     1679, 1680, 1497, 1497, 1681, 1682, 1683, 1684, 1685, 1686,
     1687, 1690, 1691, 1688, 1692, 1693, 1510, 1510, 1694, 1695,
     1696, 1689, 1697, 1515, 1515, 1698, 1698, 1699, 1518, 1518,
     1700, 1700, 1701, 1702, 1703, 1708, 1704, 1516, 1705, 1706,
     1706, 1709, 1519, 1710, 1711, 1712, 1713, 1714, 1715, 1717,
     1718, 1719, 1720, 1707, 1716, 1536, 1536, 1721, 1537, 1722,
     1538, 1723, 1724, 1542, 1542, 1543, 1543, 1725, 1544, 1726,

     1545, 1727, 1728, 1548, 1548, 1729, 1729, 1730, 1731, 1552,
     1552, 1732, 1733, 1734, 1735, 1736, 1737, 1549, 1738, 1739,
     1561, 1561, 1740, 1740, 1563, 1563, 1741, 1741, 1565, 1565,
     1742, 1743, 1744, 1745, 1746, 1562, 1570, 1570, 1747, 1564,
     1573, 1573, 1748, 1748, 1575, 1575, 1749, 1577, 1577, 1750,
     1750, 1751, 1751, 1754, 1755, 1574, 1756, 1757, 1758, 1759,
     1760, 1761, 1578, 1762, 1763, 1763, 1752, 1766, 1767, 1769,
     1770, 1768, 1771, 1772, 1773, 1774, 1775, 1777, 1781, 1764,
     1778, 1778, 1782, 1783, 1604, 1604, 1785, 1776, 1784, 1784,
     1786, 1787, 1788, 1789, 1789, 1779, 1791, 1612, 1612, 1605,

     1792, 1793, 1794, 1795, 1765, 1753, 1796, 1797, 1790, 1798,
     1799, 1800, 1622, 1622, 1801, 1801, 1802, 1802, 1804, 1805,
     1806, 1807, 1808, 1809, 1780, 1810, 1811, 1623, 1812, 1813,
     1814, 1803, 1815, 1640, 1640, 1816, 1817, 1818, 1819, 1820,
     1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1829,
     1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
     1841, 1842, 1843, 1830, 1844, 1845, 1846, 1847, 1848, 1849,
     1850, 1851, 1852, 1853, 1854, 1855, 1855, 1857, 1858, 1859,
     1860, 1861, 1862, 1863, 1864, 1864, 1866, 1866, 1868, 1869,
     1856, 1870, 1871, 1872, 1698, 1698, 1873, 1873, 1865, 1875,

     1867, 1700, 1700, 1876, 1877, 1878, 1879, 1706, 1706, 1882,
     1874, 1881, 1881, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
     1880, 1707, 1890, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
     1899, 1729, 1729, 1900, 1900, 1902, 1903, 1904, 1904, 1906,
     1906, 1910, 1891, 1908, 1908, 1911, 1912, 1901, 1913, 1740,
     1740, 1914, 1905, 1915, 1907, 1741, 1741, 1916, 1909, 1917,
     1918, 1919, 1748, 1748, 1920, 1750, 1750, 1751, 1751, 1921,
     1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
     1931, 1933, 1752, 1763, 1763, 1932, 1932, 1934, 1934, 1936,
     1937, 1938, 1939, 1940, 1941, 1941, 1943, 1944, 1764, 1945,

     1946, 1947, 1935, 1778, 1778, 1948, 1948, 1949, 1950, 1942,
     1951, 1952, 1784, 1784, 1953, 1954, 1954, 1956, 1779, 1957,
     1789, 1789, 1958, 1958, 1959, 1960, 1961, 1962, 1963, 1963,
     1955, 1965, 1966, 1966, 1970, 1790, 1968, 1968, 1971, 1801,
     1801, 1802, 1802, 1964, 1972, 1972, 1973, 1967, 1974, 1975,
     1982, 1969, 1976, 1976, 1979, 1979, 1803, 1983, 1984, 1985,
     1986, 1977, 1989, 1980, 1987, 1987, 1990, 1978, 1991, 1981,
     1992, 1993, 1994, 1995, 1996, 1997, 1998, 1998, 2000, 1988,
     2001, 1829, 1829, 2002, 2002, 2003, 2004, 2005, 2006, 2007,
     2010, 1999, 2008, 2008, 2011, 2011, 1830, 2013, 2014, 2015,

     2016, 2016, 2018, 2019, 2020, 2021, 2022, 2009, 2023, 2012,
     2024, 2025, 2027, 2028, 2029, 2017, 1855, 1855, 2030, 2030,
     2026, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 1864, 1864,
     2040, 1856, 2038, 2038, 1866, 1866, 2039, 2039, 2041, 2042,
     2043, 2044, 1865, 1873, 1873, 2045, 2045, 2046, 1867, 2047,
     2048, 2049, 2050, 2051, 1881, 1881, 2054, 1874, 2052, 2052,
     2055, 2056, 2057, 2058, 2058, 2060, 2061, 2062, 2063, 2064,
     2065, 2065, 2053, 2067, 2068, 2069, 2070, 2059, 2071, 2072,
     1900, 1900, 2073, 2073, 2066, 2074, 2075, 1904, 1904, 2076,
     2076, 1906, 1906, 2079, 1901, 2077, 2077, 1908, 1908, 2078,

     2078, 2080, 1905, 2081, 2081, 2087, 1907, 2083, 2083, 2085,
     2085, 2088, 1909, 2089, 2090, 2091, 2092, 2093, 2082, 1921,
     1921, 2094, 2084, 2095, 2086, 2096, 2097, 2098, 2099, 2100,
     2100, 2102, 2102, 2104, 1932, 1932, 2105, 1934, 1934, 2106,
     2106, 2107, 2108, 2109, 2101, 2110, 2103, 2111, 1941, 1941,
     2112, 2112, 1935, 2113, 2113, 2115, 2116, 2116, 2118, 2119,
     1948, 1948, 2120, 1942, 2121, 2122, 2123, 2124, 2114, 1954,
     1954, 2117, 2125, 2125, 2126, 2127, 1958, 1958, 2128, 2129,
     2129, 2131, 2133, 2135, 1955, 1963, 1963, 2134, 2134, 2138,
     2132, 1966, 1966, 2139, 2130, 2136, 2136, 1968, 1968, 2140,

     1964, 2137, 2137, 1972, 1972, 2141, 1967, 2142, 1976, 1976,
     2143, 2146, 1969, 2144, 2144, 1979, 1979, 1977, 2147, 2147,
     2149, 2150, 2151, 1978, 1980, 2154, 2145, 2152, 2152, 2156,
     1981, 2148, 1987, 1987, 2155, 2155, 2153, 2157, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 1998, 1998, 1988, 2165, 2165,
     2166, 2166, 2168, 2002, 2002, 2169, 2170, 2171, 2172, 2173,
     1999, 2008, 2008, 2174, 2174, 2167, 2175, 2011, 2011, 2176,
     2176, 2177, 2178, 2179, 2016, 2016, 2009, 2180, 2180, 2181,
     2182, 2183, 2012, 2184, 2185, 2186, 2187, 2188, 2189, 2017,
     2190, 2191, 2030, 2030, 2192, 2193, 2194, 2194, 2200, 2196,

     2198, 2198, 2201, 2201, 2038, 2038, 2039, 2039, 2203, 2204,
     2195, 2197, 2205, 2206, 2199, 2207, 2202, 2045, 2045, 2208,
     2209, 2210, 2211, 2212, 2212, 2214, 2052, 2052, 2215, 2215,
     2216, 2218, 2219, 2220, 2058, 2058, 2222, 2213, 2221, 2221,
     2053, 2223, 2224, 2225, 2226, 2065, 2065, 2228, 2059, 2227,
     2227, 2217, 2229, 2230, 2231, 2232, 2233, 2073, 2073, 2066,
     2234, 2235, 2076, 2076, 2077, 2077, 2078, 2078, 2236, 2237,
     2081, 2081, 2238, 2238, 2083, 2083, 2239, 2239, 2085, 2085,
     2240, 2240, 2241, 2242, 2243, 2082, 2244, 2244, 2246, 2084,
     2247, 2248, 2249, 2086, 2250, 2251, 2252, 2253, 2254, 2100,

     2100, 2245, 2255, 2255, 2102, 2102, 2256, 2256, 2257, 2257,
     2259, 2106, 2106, 2260, 2101, 2261, 2262, 2263, 2264, 2103,
     2112, 2112, 2266, 2258, 2113, 2113, 2265, 2265, 2116, 2116,
     2267, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2114,
     2125, 2125, 2277, 2117, 2275, 2275, 2278, 2129, 2129, 2279,
     2279, 2280, 2281, 2282, 2134, 2134, 2283, 2136, 2136, 2276,
     2137, 2137, 2130, 2284, 2285, 2286, 2287, 2288, 2289, 2289,
     2144, 2144, 2290, 2291, 2291, 2147, 2147, 2292, 2293, 2294,
     2295, 2152, 2152, 2145, 2296, 2297, 2155, 2155, 2148, 2298,
     2153, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2305, 2307,

     2165, 2165, 2166, 2166, 2308, 2308, 2309, 2310, 2310, 2312,
     2313, 2314, 2306, 2315, 2174, 2174, 2316, 2167, 2176, 2176,
     2317, 2318, 2311, 2319, 2180, 2180, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2194, 2194,
     2332, 2332, 2333, 2334, 2198, 2198, 2335, 2335, 2336, 2201,
     2201, 2340, 2195, 2341, 2337, 2337, 2342, 2338, 2199, 2339,
     2343, 2344, 2345, 2202, 2346, 2347, 2347, 2349, 2212, 2212,
     2350, 2350, 2351, 2215, 2215, 2352, 2353, 2357, 2358, 2348,
     2359, 2366, 2213, 2221, 2221, 2354, 2360, 2360, 2362, 2362,
     2355, 2367, 2356, 2364, 2364, 2227, 2227, 2368, 2369, 2370,

     2361, 2371, 2363, 2372, 2373, 2374, 2375, 2365, 2376, 2377,
     2238, 2238, 2239, 2239, 2240, 2240, 2378, 2379, 2380, 2244,
     2244, 2381, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388,
     2389, 2389, 2391, 2393, 2245, 2255, 2255, 2256, 2256, 2257,
     2257, 2392, 2392, 2394, 2394, 2390, 2396, 2397, 2398, 2399,
     2265, 2265, 2400, 2401, 2258, 2267, 2267, 2402, 2395, 2403,
     2404, 2405, 2406, 2407, 2275, 2275, 2408, 2408, 2409, 2410,
     2279, 2279, 2411, 2412, 2412, 2414, 2415, 2416, 2417, 2276,
     2418, 2419, 2420, 2289, 2289, 2421, 2291, 2291, 2413, 2422,
     2423, 2424, 2425, 2425, 2427, 2427, 2428, 2429, 2430, 2431,

     2432, 2432, 2434, 2434, 2436, 2305, 2305, 2426, 2437, 2437,
     2438, 2308, 2308, 2439, 2441, 2433, 2442, 2435, 2310, 2310,
     2306, 2440, 2440, 2443, 2444, 2445, 2445, 2447, 2448, 2449,
     2450, 2451, 2452, 2311, 2453, 2454, 2455, 2456, 2457, 2458,
     2446, 2459, 2332, 2332, 2460, 2461, 2335, 2335, 2462, 2337,
     2337, 2464, 2338, 2465, 2339, 2466, 2467, 2468, 2469, 2479,
     2463, 2470, 2470, 2472, 2472, 2474, 2474, 2347, 2347, 2476,
     2476, 2477, 2477, 2350, 2350, 2471, 2480, 2473, 2481, 2475,
     2482, 2348, 2483, 2484, 2485, 2478, 2486, 2487, 2360, 2360,
     2488, 2488, 2362, 2362, 2489, 2489, 2364, 2364, 2490, 2490,

     2491, 2492, 2361, 2493, 2494, 2495, 2363, 2496, 2497, 2498,
     2365, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2505, 2381,
     2381, 2507, 2508, 2508, 2510, 2511, 2512, 2512, 2514, 2514,
     2516, 2518, 2506, 2389, 2389, 2517, 2517, 2509, 2392, 2392,
     2519, 2513, 2521, 2515, 2394, 2394, 2520, 2520, 2390, 2522,
     2523, 2524, 2525, 2525, 2527, 2528, 2529, 2530, 2531, 2395,
     2532, 2533, 2408, 2408, 2534, 2535, 2535, 2526, 2537, 2412,
     2412, 2538, 2538, 2539, 2540, 2541, 2541, 2543, 2544, 2545,
     2536, 2546, 2547, 2548, 2413, 2549, 2425, 2425, 2550, 2550,
     2542, 2427, 2427, 2551, 2552, 2553, 2554, 2432, 2432, 2555,

     2555, 2426, 2434, 2434, 2556, 2556, 2557, 2437, 2437, 2558,
     2559, 2560, 2433, 2440, 2440, 2561, 2562, 2435, 2445, 2445,
     2563, 2563, 2564, 2564, 2566, 2567, 2568, 2569, 2570, 2571,
     2572, 2572, 2574, 2446, 2575, 2575, 2579, 2565, 2577, 2577,
     2580, 2581, 2582, 2583, 2584, 2573, 2470, 2470, 2576, 2593,
     2585, 2585, 2578, 2586, 2596, 2587, 2472, 2472, 2588, 2588,
     2471, 2589, 2597, 2590, 2474, 2474, 2591, 2591, 2476, 2476,
     2473, 2477, 2477, 2592, 2592, 2594, 2594, 2598, 2475, 2599,
     2600, 2601, 2602, 2488, 2488, 2478, 2489, 2489, 2603, 2595,
     2490, 2490, 2604, 2605, 2606, 2606, 2608, 2609, 2609, 2611,

     2612, 2613, 2614, 2615, 2616, 2617, 2617, 2619, 2607, 2505,
     2505, 2610, 2620, 2620, 2621, 2508, 2508, 2622, 2622, 2623,
     2618, 2624, 2512, 2512, 2506, 2625, 2625, 2514, 2514, 2627,
     2509, 2626, 2626, 2517, 2517, 2628, 2629, 2513, 2520, 2520,
     2630, 2633, 2515, 2631, 2631, 2634, 2525, 2525, 2635, 2635,
     2636, 2636, 2638, 2639, 2639, 2641, 2642, 2642, 2632, 2644,
     2644, 2526, 2646, 2647, 2647, 2637, 2535, 2535, 2640, 2649,
     2649, 2643, 2650, 2651, 2645, 2538, 2538, 2652, 2648, 2541,
     2541, 2536, 2653, 2653, 2654, 2655, 2656, 2657, 2658, 2550,
     2550, 2659, 2660, 2661, 2542, 2555, 2555, 2556, 2556, 2662,

     2663, 2664, 2665, 2666, 2563, 2563, 2564, 2564, 2667, 2667,
     2668, 2669, 2670, 2671, 2672, 2572, 2572, 2673, 2673, 2674,
     2677, 2565, 2575, 2575, 2675, 2675, 2577, 2577, 2676, 2676,
     2573, 2678, 2679, 2680, 2680, 2682, 2576, 2683, 2585, 2585,
     2578, 2586, 2684, 2587, 2685, 2588, 2588, 2681, 2589, 2686,
     2590, 2687, 2591, 2591, 2592, 2592, 2688, 2594, 2594, 2689,
     2689, 2690, 2690, 2692, 2692, 2694, 2695, 2695, 2697, 2698,
     2699, 2595, 2700, 2700, 2702, 2691, 2703, 2693, 2606, 2606,
     2696, 2704, 2704, 2705, 2609, 2609, 2701, 2709, 2706, 2706,
     2713, 2707, 2607, 2708, 2711, 2711, 2714, 2714, 2610, 2710,

     2716, 2717, 2717, 2617, 2617, 2719, 2719, 2720, 2712, 2620,
     2620, 2715, 2721, 2721, 2622, 2622, 2718, 2723, 2618, 2724,
     2625, 2625, 2626, 2626, 2725, 2726, 2729, 2722, 2727, 2727,
     2631, 2631, 2730, 2730, 2731, 2732, 2635, 2635, 2636, 2636,
     2733, 2733, 2734, 2728, 2736, 2632, 2639, 2639, 2735, 2735,
     2642, 2642, 2739, 2637, 2737, 2737, 2644, 2644, 2738, 2738,
     2741, 2640, 2647, 2647, 2742, 2643, 2740, 2740, 2649, 2649,
     2745, 2645, 2743, 2743, 2653, 2653, 2746, 2648, 2747, 2748,
     2749, 2750, 2750, 2752, 2752, 2754, 2759, 2744, 2755, 2755,
     2757, 2757, 2667, 2667, 2760, 2761, 2751, 2762, 2753, 2763,

     2673, 2673, 2764, 2756, 2769, 2758, 2675, 2675, 2676, 2676,
     2765, 2765, 2767, 2767, 2680, 2680, 2770, 2770, 2771, 2772,
     2772, 2774, 2689, 2689, 2766, 2777, 2768, 2779, 2681, 2690,
     2690, 2775, 2775, 2773, 2692, 2692, 2776, 2776, 2695, 2695,
     2778, 2778, 2782, 2691, 2780, 2780, 2700, 2700, 2693, 2783,
     2783, 2784, 2696, 2785, 2785, 2704, 2704, 2787, 2781, 2788,
     2701, 2706, 2706, 2789, 2707, 2790, 2708, 2786, 2791, 2711,
     2711, 2792, 2792, 2793, 2714, 2714, 2794, 2794, 2795, 2717,
     2717, 2796, 2796, 2712, 2719, 2719, 2797, 2721, 2721, 2715,
     2798, 2798, 2799, 2799, 2718, 2801, 2801, 2803, 2803, 2805,

     2727, 2727, 2722, 2806, 2806, 2807, 2807, 2800, 2730, 2730,
     2802, 2813, 2804, 2809, 2809, 2728, 2811, 2811, 2733, 2733,
     2808, 2735, 2735, 2814, 2737, 2737, 2738, 2738, 2810, 2815,
     2816, 2812, 2740, 2740, 2817, 2743, 2743, 2818, 2818, 2819,
     2820, 2821, 2822, 2750, 2750, 2823, 2823, 2752, 2752, 2825,
     2744, 2824, 2824, 2755, 2755, 2826, 2826, 2828, 2751, 2757,
     2757, 2829, 2753, 2827, 2827, 2830, 2831, 2832, 2756, 2833,
     2765, 2765, 2834, 2834, 2758, 2767, 2767, 2835, 2835, 2836,
     2770, 2770, 2837, 2837, 2766, 2772, 2772, 2839, 2839, 2768,
     2840, 2840, 2775, 2775, 2776, 2776, 2838, 2842, 2842, 2773,

     2778, 2778, 2844, 2846, 2841, 2780, 2780, 2845, 2845, 2783,
     2783, 2843, 2847, 2785, 2785, 2848, 2848, 2849, 2849, 2781,
     2851, 2852, 2792, 2792, 2853, 2794, 2794, 2786, 2854, 2796,
     2796, 2850, 2855, 2855, 2798, 2798, 2799, 2799, 2857, 2857,
     2801, 2801, 2858, 2858, 2803, 2803, 2860, 2856, 2859, 2859,
     2864, 2800, 2806, 2806, 2865, 2802, 2807, 2807, 2866, 2804,
     2861, 2861, 2809, 2809, 2862, 2862, 2811, 2811, 2863, 2863,
     2867, 2808, 2868, 2818, 2818, 2869, 2870, 2810, 2871, 2872,
     2873, 2812, 2823, 2823, 2824, 2824, 2826, 2826, 2827, 2827,
     2874, 2875, 2876, 2877, 2834, 2834, 2835, 2835, 2878, 2837,

     2837, 2879, 2879, 2839, 2839, 2840, 2840, 2880, 2880, 2842,
     2842, 2881, 2881, 2838, 2882, 2845, 2845, 2883, 2884, 2841,
     2848, 2848, 2890, 2843, 2849, 2849, 2885, 2885, 2886, 2886,
     2888, 2888, 2891, 2855, 2855, 2892, 2892, 2897, 2850, 2857,
     2857, 2898, 2887, 2899, 2889, 2858, 2858, 2900, 2856, 2859,
     2859, 2893, 2893, 2861, 2861, 2862, 2862, 2863, 2863, 2895,
     2895, 2901, 2902, 2903, 2904, 2907, 2894, 2905, 2905, 2879,
     2879, 2880, 2880, 2908, 2896, 2881, 2881, 2909, 2909, 2885,
     2885, 2906, 2886, 2886, 2911, 2911, 2888, 2888, 2912, 2912,
     2923, 2910, 2913, 2913, 2915, 2915, 2887, 2892, 2892, 2928,

     2889, 2893, 2893, 2917, 2917, 2929, 2914, 2895, 2895, 2916,
     2918, 2918, 2919, 2919, 2921, 2921, 2894, 2924, 2924, 2926,
     2926, 2931, 2896, 2905, 2905, 2930, 2930, 2920, 2943, 2922,
     2932, 2932, 2925, 2944, 2927, 2909, 2909, 2906, 2934, 2934,
     2911, 2911, 2912, 2912, 2933, 2913, 2913, 2935, 2935, 2910,
     2915, 2915, 2936, 2936, 2917, 2917, 2918, 2918, 2945, 2914,
     2919, 2919, 2937, 2937, 2948, 2916, 2921, 2921, 2938, 2938,
     2939, 2939, 2924, 2924, 2949, 2920, 2941, 2941, 2926, 2926,
     2950, 2922, 2942, 2942, 2951, 2940, 2952, 2925, 2930, 2930,
     2932, 2932, 2953, 2927, 2946, 2946, 2934, 2934, 2935, 2935,

     2936, 2936, 2937, 2937, 2933, 2938, 2938, 2939, 2939, 2947,
     2947, 2941, 2941, 2942, 2942, 2946, 2946, 2947, 2947, 2954,
     2954, 2958, 2940, 2956, 2956, 2954, 2954, 2959, 2959, 2956,
     2956, 2960, 2960, 2961, 2955, 2959, 2959,  982, 2957,  981,
     2955, 2960, 2960,  976, 2957, 2962, 2962, 2962, 2962, 2964,
     2964, 2964, 2964,  975,  974,  970,  969,  968,  967, 2963,
      966, 2963,   24,   24,   24,   24,   35,   35,   35,   35,
       36,   36,   36,   36,   37,   37,   37,   37,   38,   38,
       38,   38,   39,   39,   39,   39,   42,   42,   42,   42,
      102,  964,  102,  102,  103,  103,  963,  103,  104,  104,

      104,  962,  961,  960,  959,  958,  957,  952,  951,  950,
      949,  948,  947,  946,  945,  944,  943,  942,  941,  940,
      939,  938,  937,  932,  931,  930,  929,  928,  927,  926,
      925,  924,  923,  922,  921,  920,  919,  918,  915,  914,
      913,  912,  911,  910,  909,  908,  907,  904,  903,  901,
      900,  899,  898,  897,  896,  895,  894,  893,  892,  889,
      884,  883,  880,  877,  876,  875,  874,  873,  872,  871,
      870,  869,  868,  865,  864,  863,  862,  861,  860,  859,
      858,  857,  856,  854,  853,  849,  848,  847,  846,  844,
      843,  842,  841,  840,  839,  838,  837,  836,  833,  830,

      829,  828,  826,  825,  824,  823,  822,  821,  818,  815,
      814,  813,  810,  809,  808,  807,  806,  805,  804,  799,
      798,  797,  796,  794,  793,  792,  790,  789,  788,  785,
      783,  782,  779,  778,  774,  773,  772,  766,  765,  764,
      763,  762,  761,  760,  759,  758,  757,  752,  751,  750,
      748,  747,  746,  745,  744,  743,  742,  741,  737,  736,
      735,  734,  733,  732,  731,  730,  726,  725,  724,  723,
      721,  720,  719,  718,  717,  716,  715,  714,  713,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  697,
      694,  693,  692,  688,  687,  686,  685,  684,  683,  682,

      679,  678,  677,  676,  674,  673,  672,  671,  670,  669,
      666,  659,  658,  657,  652,  651,  648,  647,  646,  645,
      644,  643,  642,  639,  638,  637,  636,  631,  625,  624,
      618,  616,  615,  614,  613,  612,  611,  609,  608,  607,
      606,  600,  598,  597,  596,  588,  587,  586,  585,  584,
      580,  579,  578,  577,  576,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      554,  553,  552,  549,  548,  547,  545,  544,  543,  542,
      541,  540,  539,  536,  533,  529,  528,  527,  522,  521,
      518,  517,  516,  515,  514,  513,  512,  509,  508,  507,

      504,  499,  498,  492,  490,  489,  488,  487,  486,  485,
      483,  482,  481,  480,  474,  473,  472,  471,  465,  464,
      463,  462,  461,  456,  455,  454,  453,  452,  451,  450,
      449,  446,  445,  444,  441,  440,  439,  438,  437,  436,
      435,  432,  431,  430,  423,  417,  416,  415,  414,  413,
      412,  408,  407,  406,  401,  400,  399,  398,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  359,  358,  357,  354,  353,  352,  351,  348,
      347,  346,  345,  344,  343,  342,  341,  338,  337,  336,

      333,  332,  331,  330,  329,  328,  327,  326,  325,  318,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      298,  297,  296,  295,  294,  285,  262,  253,  248,  245,
      240,  239,  238,  237,  236,  235,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  219,  215,  214,
      213,  210,  209,  208,  207,  206,  206,  205,  196,  174,
      165,  160,  139,  136,  135,  116,  113,  112,  111,  110,
      107,  101,  100,   75,  106,  105,  101,  100,   75,   71,
       71, 2965,   35,   35,   35,   35,   35,   35,   19, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965
    } ;

static yyconst flex_int16_t yy_chk[4854] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,    0,   16,    1,  536,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,   63,  536,   27,
       27,   56,   64,   26,   61,   65,   64,   83,   47,   27,
       27,   27,   56,  244,   61,  244,   64,   63,   83,   66,
       27,   65,   64,    1,    2,    2,    2,    2,    2,   66,
        2,   93,    2,    2,    2,    2,    2,    2,    2,   27,
        2,    2,   87,   29,   29,   93,   48,   48,  143,    2,
       87,   29,    2,   29,   29,   29,   48,   48,   48,  143,

       67,   95,   67,   82,   29,   67,   68,   48,   72,   72,
       68,   76,   76,   82,   74,   74,   90,   67,   74,   74,
       74,   90,   67,   29,   95,   91,   48,    2,   21,   21,
       68,  798,   21,   91,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,  799,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       24,   24,   85,  114,  114,  804,   85,   24,   24,   24,

       24,   24,   24,   24,   86,   24,   98,  114,   85,  110,
       86,   50,   50,  116,   24,   98,   86,   24,  110,   50,
      116,   50,   50,   50,  136,  128,   24,   24,   24,   24,
      136,   24,   50,   24,   24,  128,  150,   24,   24,   24,
       24,  150,  805,   24,   24,   24,   24,   24,   30,   73,
       73,   50,  114,  142,   94,   30,   89,  135,   89,   73,
       73,   73,   30,  142,  135,   94,   89,   30,   94,  155,
       73,   94,   89,  147,  527,   30,  137,  137,  137,  806,
      179,  147,   30,   30,   30,   30,   30,   30,   30,   73,
       30,  179,  155,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  151,   30,   78,  138,  138,  181,  527,  158,
      151,  181,   78,  140,  140,  138,  138,  138,  158,   78,
       78,   78,   78,   78,   78,   78,  196,   78,  140,  196,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   92,
       78,  205,   97,   92,  145,  192,   97,  205,  145,  146,
       92,  153,   97,   92,   97,  146,  192,   97,   97,   92,
      145,  146,  149,  152,  149,  153,  807,  152,  153,  219,
      154,  808,  149,  212,  152,  219,  157,  152,  149,  294,
      157,  154,  177,  152,  154,  294,  157,  154,  157,  176,
      176,  157,  157,  165,  165,  165,  212,  177,  177,  269,

      165,  180,  180,  269,  176,  206,  206,  216,  216,  217,
      217,  809,  217,  813,  217,  814,  180,  218,  218,  246,
      246,  216,  247,  247,  248,  248,  253,  253,  253,  257,
      257,  218,  265,  253,  246,  267,  264,  264,  281,  248,
      268,  268,  273,  273,  257,  218,  267,  265,  265,  281,
      218,  264,  301,  285,  334,  268,  285,  273,  295,  295,
      442,  301,  302,  302,  307,  307,  308,  308,  821,  257,
      313,  313,  657,  295,  822,  301,  823,  302,  334,  307,
      674,  308,  314,  314,  442,  313,  321,  321,  322,  322,
      324,  324,  325,  325,  328,  330,  328,  674,  328,  342,

      342,  321,  345,  824,  330,  324,  657,  325,  328,  346,
      346,  350,  825,  345,  342,  352,  354,  354,  350,  308,
      360,  360,  352,  360,  346,  360,  363,  363,  364,  364,
      354,  350,  368,  368,  453,  372,  372,  373,  373,  826,
      363,  389,  389,  395,  395,  453,  368,  688,  325,  372,
      688,  373,  396,  396,  828,  389,  397,  397,  398,  398,
      404,  404,  405,  405,  409,  409,  829,  396,  410,  410,
      412,  412,  830,  398,  833,  404,  462,  405,  836,  409,
      413,  413,  418,  418,  837,  412,  419,  419,  426,  426,
      462,  404,  427,  427,  694,  413,  839,  418,  429,  429,

      404,  430,  430,  426,  433,  433,  434,  434,  435,  841,
      435,  842,  435,  429,  404,  694,  430,  450,  450,  433,
      437,  437,  435,  454,  454,  458,  458,  459,  459,  460,
      460,  585,  450,  413,  843,  437,  470,  470,  454,  844,
      458,  846,  459,  469,  469,  585,  475,  475,  847,  458,
      851,  437,  476,  476,  478,  478,  458,  430,  469,  794,
      437,  475,  477,  477,  484,  484,  488,  488,  853,  458,
      491,  491,  493,  493,  854,  488,  794,  477,  494,  494,
      856,  488,  495,  495,  496,  496,  815,  493,  857,  498,
      498,  509,  509,  519,  519,  520,  520,  495,  498,  525,

      525,  526,  526,  858,  498,  859,  509,  815,  519,  537,
      537,  538,  538,  860,  525,  546,  546,  550,  550,  551,
      551,  555,  555,  537,  556,  556,  557,  557,  861,  558,
      558,  550,  558,  863,  558,  555,  569,  569,  570,  570,
      557,  574,  574,  575,  575,  864,  575,  865,  575,  866,
      569,  867,  570,  578,  578,  574,  581,  581,  582,  582,
      583,  583,  570,  589,  589,  590,  590,  578,  594,  594,
      595,  595,  868,  582,  599,  599,  601,  601,  589,  602,
      602,  603,  603,  594,  604,  604,  605,  605,  610,  610,
      870,  601,  614,  614,  617,  617,  603,  619,  619,  620,

      620,  605,  621,  621,  622,  622,  871,  614,  624,  624,
      626,  626,  619,  632,  632,  633,  633,  621,  637,  637,
      639,  639,  872,  624,  649,  649,  650,  650,  632,  655,
      655,  656,  656,  637,  873,  639,  660,  660,  874,  649,
      661,  661,  665,  665,  655,  675,  675,  680,  680,  681,
      681,  660,  689,  689,  875,  691,  691,  695,  695,  696,
      696,  689,  697,  697,  698,  698,  876,  689,  691,  700,
      700,  711,  711,  698,  712,  712,  877,  697,  878,  698,
      715,  715,  700,  722,  722,  879,  711,  727,  727,  729,
      729,  740,  740,  746,  746,  715,  747,  747,  749,  749,

      753,  753,  767,  767,  729,  770,  770,  746,  754,  754,
      747,  754,  882,  754,  768,  768,  767,  768,  883,  768,
      769,  769,  775,  775,  884,  775,  885,  775,  780,  780,
      781,  781,  784,  784,  769,  788,  788,  791,  791,  793,
      793,  891,  780,  795,  795,  800,  800,  801,  801,  893,
      788,  802,  802,  894,  793,  803,  803,  810,  811,  811,
      810,  812,  812,  816,  816,  895,  802,  817,  817,  818,
      818,  819,  819,  811,  820,  820,  827,  827,  831,  831,
      832,  832,  834,  834,  818,  896,  819,  835,  835,  788,
      838,  838,  898,  831,  840,  840,  899,  834,  845,  845,

      848,  848,  849,  849,  900,  838,  850,  850,  901,  840,
      852,  852,  855,  855,  903,  848,  904,  849,  869,  869,
      880,  880,  881,  881,  907,  852,  887,  887,  888,  888,
      889,  889,  908,  869,  909,  881,  890,  890,  892,  892,
      910,  887,  902,  902,  905,  905,  906,  906,  911,  890,
      915,  913,  913,  892,  848,  886,  886,  886,  918,  905,
      886,  886,  886,  886,  886,  886,  913,  886,  886,  886,
      886,  886,  912,  912,  916,  916,  917,  917,  921,  922,
      923,  912,  913,  924,  925,  926,  927,  912,  928,  916,
      929,  930,  931,  932,  932,  933,  933,  934,  934,  935,

      935,  936,  936,  937,  938,  939,  940,  932,  943,  933,
      944,  945,  946,  935,  947,  948,  949,  950,  951,  952,
      953,  953,  954,  953,  955,  953,  956,  956,  957,  958,
      959,  960,  963,  964,  965,  965,  966,  967,  967,  968,
      969,  970,  971,  971,  972,  972,  973,  973,  974,  975,
      976,  967,  977,  977,  978,  978,  979,  971,  980,  981,
      983,  973,  982,  982,  984,  985,  985,  977,  986,  987,
      988,  989,  990,  991,  992,  993,  995,  982,  994,  994,
      996,  997,  998,  998,  999,  999, 1000, 1000, 1001, 1001,
     1002, 1002, 1003, 1004, 1005, 1006, 1008,  998, 1009,  999,

     1010,  998,  998,  998, 1012, 1002,  998,  998,  998,  998,
      998,  998, 1014,  998,  998,  998,  998,  998, 1007, 1007,
     1011, 1011, 1013, 1013, 1015, 1016, 1016, 1017, 1017, 1018,
     1019, 1019, 1021, 1007, 1020, 1020, 1022, 1023, 1024, 1032,
     1016, 1025, 1025, 1026, 1026, 1019, 1027, 1027, 1028, 1028,
     1029, 1029, 1030, 1030, 1031, 1031, 1025, 1035, 1026, 1034,
     1034, 1027, 1033, 1033, 1038, 1029, 1039, 1030, 1036, 1036,
     1037, 1037, 1040, 1040, 1026, 1041, 1042, 1033, 1043, 1044,
     1045, 1046, 1047, 1036, 1048, 1037, 1051, 1040, 1049, 1049,
     1050, 1050, 1052, 1054, 1055, 1056, 1058, 1059, 1060, 1061,

     1061, 1055, 1062, 1049, 1063, 1063, 1064, 1065, 1066, 1068,
     1067, 1069, 1070, 1063, 1067, 1072, 1073, 1071, 1074, 1063,
     1067, 1071, 1075, 1076, 1074, 1077, 1078, 1079, 1082, 1077,
     1080, 1080, 1081, 1081, 1085, 1077, 1083, 1083, 1077, 1084,
     1084, 1076, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1083, 1095, 1095, 1096, 1096, 1097, 1098, 1099, 1100,
     1102, 1101, 1101, 1106, 1103, 1103, 1104, 1104, 1107, 1096,
     1101, 1105, 1105, 1096, 1108, 1108, 1101, 1103, 1109, 1110,
     1111, 1104, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1118,
     1119, 1120, 1121, 1121, 1122, 1122, 1123, 1123, 1124, 1124,

     1125, 1126, 1118, 1127, 1128, 1129, 1121, 1130, 1132, 1133,
     1134, 1136, 1135, 1135, 1118, 1131, 1131, 1137, 1131, 1138,
     1141, 1141, 1143, 1131, 1131, 1131, 1135, 1131, 1131, 1131,
     1142, 1142, 1131, 1144, 1141, 1145, 1146, 1147, 1148, 1148,
     1149, 1149, 1151, 1149, 1142, 1149, 1150, 1150, 1152, 1153,
     1153, 1156, 1148, 1154, 1154, 1155, 1155, 1157, 1158, 1159,
     1159, 1150, 1160, 1161, 1162, 1163, 1163, 1165, 1154, 1164,
     1164, 1166, 1167, 1167, 1168, 1169, 1170, 1171, 1171, 1172,
     1163, 1173, 1169, 1174, 1175, 1175, 1176, 1167, 1177, 1178,
     1178, 1180, 1171, 1179, 1179, 1182, 1181, 1183, 1184, 1175,

     1181, 1185, 1186, 1187, 1178, 1185, 1181, 1188, 1189, 1190,
     1191, 1192, 1193, 1188, 1191, 1194, 1194, 1195, 1195, 1197,
     1191, 1196, 1196, 1191, 1198, 1199, 1200, 1190, 1201, 1201,
     1202, 1202, 1195, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1209, 1210, 1210, 1201, 1211, 1211, 1212, 1213, 1214, 1215,
     1216, 1216, 1217, 1217, 1218, 1218, 1210, 1219, 1219, 1220,
     1210, 1221, 1221, 1222, 1222, 1216, 1223, 1223, 1225, 1218,
     1224, 1224, 1226, 1226, 1227, 1228, 1228, 1232, 1222, 1229,
     1229, 1230, 1230, 1231, 1231, 1233, 1234, 1234, 1235, 1235,
     1228, 1236, 1237, 1238, 1239, 1240, 1230, 1241, 1242, 1243,

     1247, 1234, 1244, 1244, 1248, 1249, 1250, 1251, 1252, 1254,
     1255, 1255, 1256, 1257, 1257, 1258, 1260, 1261, 1262, 1255,
     1263, 1264, 1265, 1266, 1267, 1255, 1257, 1268, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1283, 1284, 1285, 1286, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1294, 1295, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1301, 1302, 1302, 1303, 1305, 1294, 1304,
     1304, 1306, 1307, 1308, 1309, 1310, 1311, 1302, 1312, 1313,
     1314, 1315, 1316, 1316, 1317, 1317, 1318, 1319, 1320, 1321,
     1321, 1322, 1323, 1323, 1324, 1326, 1316, 1325, 1325, 1327,

     1328, 1329, 1330, 1331, 1332, 1333, 1323, 1334, 1335, 1336,
     1337, 1325, 1338, 1339, 1330, 1340, 1341, 1341, 1342, 1342,
     1343, 1342, 1344, 1342, 1345, 1346, 1346, 1347, 1347, 1350,
     1341, 1348, 1348, 1349, 1349, 1351, 1349, 1353, 1349, 1346,
     1352, 1352, 1354, 1355, 1355, 1348, 1355, 1360, 1355, 1358,
     1358, 1359, 1359, 1361, 1352, 1362, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1374, 1358, 1369, 1369, 1370, 1370, 1371,
     1371, 1372, 1372, 1373, 1373, 1375, 1376, 1377, 1378, 1378,
     1379, 1379, 1370, 1380, 1371, 1381, 1372, 1382, 1382, 1383,
     1383, 1384, 1384, 1378, 1385, 1386, 1386, 1387, 1387, 1388,

     1389, 1390, 1382, 1391, 1383, 1392, 1393, 1394, 1395, 1396,
     1386, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1410, 1411, 1412, 1413, 1414,
     1414, 1415, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1422, 1423, 1423, 1424, 1414, 1425, 1426, 1427, 1428, 1429,
     1429, 1430, 1430, 1431, 1422, 1432, 1432, 1433, 1434, 1435,
     1435, 1436, 1436, 1437, 1438, 1438, 1439, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1438,
     1451, 1452, 1453, 1454, 1455, 1455, 1456, 1456, 1457, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1456,

     1468, 1469, 1470, 1471, 1472, 1473, 1471, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1438, 1485,
     1486, 1487, 1478, 1488, 1490, 1491, 1491, 1492, 1493, 1494,
     1495, 1496, 1497, 1497, 1498, 1499, 1500, 1501, 1502, 1504,
     1505, 1506, 1507, 1505, 1508, 1509, 1510, 1510, 1511, 1512,
     1513, 1505, 1514, 1515, 1515, 1516, 1516, 1517, 1518, 1518,
     1519, 1519, 1520, 1521, 1522, 1525, 1523, 1515, 1523, 1524,
     1524, 1526, 1518, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
     1534, 1535, 1537, 1524, 1532, 1536, 1536, 1538, 1536, 1539,
     1536, 1540, 1541, 1542, 1542, 1543, 1543, 1544, 1543, 1545,

     1543, 1546, 1547, 1548, 1548, 1549, 1549, 1550, 1551, 1552,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1548, 1559, 1560,
     1561, 1561, 1562, 1562, 1563, 1563, 1564, 1564, 1565, 1565,
     1566, 1567, 1568, 1569, 1571, 1561, 1570, 1570, 1572, 1563,
     1573, 1573, 1574, 1574, 1575, 1575, 1576, 1577, 1577, 1578,
     1578, 1579, 1579, 1580, 1581, 1573, 1582, 1583, 1584, 1585,
     1586, 1587, 1577, 1588, 1589, 1589, 1579, 1590, 1591, 1592,
     1593, 1591, 1594, 1595, 1596, 1597, 1598, 1599, 1601, 1589,
     1600, 1600, 1602, 1603, 1604, 1604, 1606, 1598, 1605, 1605,
     1607, 1608, 1609, 1610, 1610, 1600, 1611, 1612, 1612, 1604,

     1613, 1614, 1615, 1616, 1589, 1579, 1617, 1618, 1610, 1619,
     1620, 1621, 1622, 1622, 1623, 1623, 1624, 1624, 1625, 1629,
     1630, 1631, 1632, 1633, 1600, 1634, 1635, 1622, 1636, 1637,
     1638, 1624, 1639, 1640, 1640, 1641, 1642, 1643, 1644, 1645,
     1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1654,
     1655, 1656, 1657, 1658, 1659, 1661, 1662, 1663, 1664, 1665,
     1666, 1667, 1668, 1654, 1669, 1670, 1671, 1673, 1674, 1675,
     1676, 1677, 1678, 1680, 1681, 1682, 1682, 1684, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1691, 1692, 1692, 1693, 1694,
     1682, 1695, 1696, 1697, 1698, 1698, 1699, 1699, 1691, 1701,

     1692, 1700, 1700, 1702, 1703, 1704, 1705, 1706, 1706, 1708,
     1699, 1707, 1707, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
     1705, 1706, 1716, 1717, 1718, 1719, 1722, 1723, 1724, 1727,
     1728, 1729, 1729, 1730, 1730, 1731, 1732, 1733, 1733, 1734,
     1734, 1736, 1716, 1735, 1735, 1737, 1738, 1730, 1739, 1740,
     1740, 1742, 1733, 1743, 1734, 1741, 1741, 1744, 1735, 1745,
     1746, 1747, 1748, 1748, 1749, 1750, 1750, 1751, 1751, 1752,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
     1762, 1765, 1751, 1763, 1763, 1764, 1764, 1766, 1766, 1767,
     1768, 1769, 1770, 1771, 1772, 1772, 1773, 1774, 1763, 1775,

     1776, 1777, 1766, 1778, 1778, 1779, 1779, 1780, 1781, 1772,
     1782, 1783, 1784, 1784, 1785, 1786, 1786, 1787, 1778, 1788,
     1789, 1789, 1790, 1790, 1791, 1792, 1793, 1794, 1795, 1795,
     1786, 1796, 1797, 1797, 1799, 1789, 1798, 1798, 1800, 1801,
     1801, 1802, 1802, 1795, 1803, 1803, 1804, 1797, 1805, 1806,
     1810, 1798, 1808, 1808, 1809, 1809, 1802, 1811, 1812, 1813,
     1814, 1808, 1816, 1809, 1815, 1815, 1817, 1808, 1818, 1809,
     1819, 1820, 1821, 1822, 1823, 1824, 1826, 1826, 1827, 1815,
     1828, 1829, 1829, 1830, 1830, 1831, 1832, 1833, 1834, 1835,
     1837, 1826, 1836, 1836, 1838, 1838, 1829, 1839, 1840, 1841,

     1842, 1842, 1843, 1844, 1845, 1846, 1847, 1836, 1848, 1838,
     1849, 1851, 1852, 1853, 1854, 1842, 1855, 1855, 1856, 1856,
     1851, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1864,
     1868, 1855, 1865, 1865, 1866, 1866, 1867, 1867, 1869, 1870,
     1871, 1872, 1864, 1873, 1873, 1874, 1874, 1875, 1866, 1876,
     1877, 1878, 1879, 1880, 1881, 1881, 1883, 1873, 1882, 1882,
     1884, 1885, 1886, 1887, 1887, 1888, 1889, 1890, 1891, 1892,
     1893, 1893, 1882, 1894, 1895, 1896, 1897, 1887, 1898, 1899,
     1900, 1900, 1901, 1901, 1893, 1902, 1903, 1904, 1904, 1905,
     1905, 1906, 1906, 1910, 1900, 1907, 1907, 1908, 1908, 1909,

     1909, 1911, 1904, 1912, 1912, 1915, 1906, 1913, 1913, 1914,
     1914, 1916, 1908, 1917, 1918, 1919, 1920, 1922, 1912, 1921,
     1921, 1923, 1913, 1924, 1914, 1925, 1926, 1927, 1928, 1929,
     1929, 1930, 1930, 1931, 1932, 1932, 1933, 1934, 1934, 1935,
     1935, 1936, 1937, 1938, 1929, 1939, 1930, 1940, 1941, 1941,
     1942, 1942, 1934, 1943, 1943, 1944, 1945, 1945, 1946, 1947,
     1948, 1948, 1949, 1941, 1950, 1951, 1952, 1953, 1943, 1954,
     1954, 1945, 1955, 1955, 1956, 1957, 1958, 1958, 1959, 1960,
     1960, 1961, 1962, 1965, 1954, 1963, 1963, 1964, 1964, 1970,
     1961, 1966, 1966, 1971, 1960, 1967, 1967, 1968, 1968, 1973,

     1963, 1969, 1969, 1972, 1972, 1974, 1966, 1975, 1976, 1976,
     1977, 1980, 1968, 1978, 1978, 1979, 1979, 1976, 1981, 1981,
     1982, 1983, 1984, 1976, 1979, 1986, 1978, 1985, 1985, 1989,
     1979, 1981, 1987, 1987, 1988, 1988, 1985, 1990, 1991, 1992,
     1993, 1994, 1995, 1996, 1997, 1998, 1998, 1987, 1999, 1999,
     2000, 2000, 2001, 2002, 2002, 2003, 2004, 2005, 2006, 2007,
     1998, 2008, 2008, 2009, 2009, 2000, 2010, 2011, 2011, 2012,
     2012, 2013, 2014, 2015, 2016, 2016, 2008, 2017, 2017, 2018,
     2019, 2020, 2011, 2021, 2023, 2024, 2025, 2026, 2027, 2016,
     2028, 2029, 2030, 2030, 2031, 2032, 2033, 2033, 2036, 2034,

     2035, 2035, 2037, 2037, 2038, 2038, 2039, 2039, 2040, 2041,
     2033, 2034, 2042, 2043, 2035, 2044, 2037, 2045, 2045, 2046,
     2047, 2048, 2049, 2050, 2050, 2051, 2052, 2052, 2053, 2053,
     2054, 2055, 2056, 2057, 2058, 2058, 2060, 2050, 2059, 2059,
     2052, 2061, 2062, 2063, 2064, 2065, 2065, 2067, 2058, 2066,
     2066, 2054, 2068, 2069, 2070, 2071, 2072, 2073, 2073, 2065,
     2074, 2075, 2076, 2076, 2077, 2077, 2078, 2078, 2079, 2080,
     2081, 2081, 2082, 2082, 2083, 2083, 2084, 2084, 2085, 2085,
     2086, 2086, 2087, 2088, 2089, 2081, 2090, 2090, 2091, 2083,
     2092, 2093, 2094, 2085, 2095, 2096, 2097, 2098, 2099, 2100,

     2100, 2090, 2101, 2101, 2102, 2102, 2103, 2103, 2104, 2104,
     2105, 2106, 2106, 2107, 2100, 2108, 2109, 2110, 2111, 2102,
     2112, 2112, 2115, 2104, 2113, 2113, 2114, 2114, 2116, 2116,
     2117, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2113,
     2125, 2125, 2127, 2116, 2126, 2126, 2128, 2129, 2129, 2130,
     2130, 2131, 2132, 2133, 2134, 2134, 2135, 2136, 2136, 2126,
     2137, 2137, 2129, 2138, 2139, 2140, 2141, 2142, 2143, 2143,
     2144, 2144, 2145, 2146, 2146, 2147, 2147, 2148, 2149, 2150,
     2151, 2152, 2152, 2144, 2153, 2154, 2155, 2155, 2147, 2156,
     2152, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2163, 2164,

     2165, 2165, 2166, 2166, 2167, 2167, 2168, 2169, 2169, 2170,
     2171, 2172, 2163, 2173, 2174, 2174, 2175, 2166, 2176, 2176,
     2177, 2178, 2169, 2179, 2180, 2180, 2181, 2182, 2183, 2184,
     2185, 2186, 2187, 2189, 2190, 2191, 2192, 2193, 2194, 2194,
     2195, 2195, 2196, 2197, 2198, 2198, 2199, 2199, 2200, 2201,
     2201, 2203, 2194, 2204, 2202, 2202, 2205, 2202, 2198, 2202,
     2206, 2207, 2208, 2201, 2209, 2210, 2210, 2211, 2212, 2212,
     2213, 2213, 2214, 2215, 2215, 2216, 2217, 2218, 2219, 2210,
     2220, 2225, 2212, 2221, 2221, 2217, 2222, 2222, 2223, 2223,
     2217, 2226, 2217, 2224, 2224, 2227, 2227, 2228, 2229, 2230,

     2222, 2231, 2223, 2232, 2233, 2234, 2235, 2224, 2236, 2237,
     2238, 2238, 2239, 2239, 2240, 2240, 2241, 2242, 2243, 2244,
     2244, 2245, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
     2253, 2253, 2254, 2259, 2244, 2255, 2255, 2256, 2256, 2257,
     2257, 2258, 2258, 2260, 2260, 2253, 2261, 2262, 2263, 2264,
     2265, 2265, 2266, 2268, 2257, 2267, 2267, 2269, 2260, 2270,
     2271, 2272, 2273, 2274, 2275, 2275, 2276, 2276, 2277, 2278,
     2279, 2279, 2280, 2281, 2281, 2282, 2283, 2284, 2285, 2275,
     2286, 2287, 2288, 2289, 2289, 2290, 2291, 2291, 2281, 2292,
     2293, 2294, 2295, 2295, 2296, 2296, 2297, 2298, 2300, 2301,

     2302, 2302, 2303, 2303, 2304, 2305, 2305, 2295, 2306, 2306,
     2307, 2308, 2308, 2309, 2312, 2302, 2313, 2303, 2310, 2310,
     2305, 2311, 2311, 2314, 2315, 2316, 2316, 2317, 2318, 2319,
     2320, 2321, 2322, 2310, 2323, 2324, 2326, 2327, 2328, 2329,
     2316, 2331, 2332, 2332, 2333, 2334, 2335, 2335, 2336, 2337,
     2337, 2338, 2337, 2339, 2337, 2340, 2341, 2342, 2343, 2351,
     2336, 2344, 2344, 2345, 2345, 2346, 2346, 2347, 2347, 2348,
     2348, 2349, 2349, 2350, 2350, 2344, 2352, 2345, 2353, 2346,
     2354, 2347, 2355, 2356, 2357, 2349, 2358, 2359, 2360, 2360,
     2361, 2361, 2362, 2362, 2363, 2363, 2364, 2364, 2365, 2365,

     2366, 2367, 2360, 2368, 2369, 2370, 2362, 2371, 2372, 2373,
     2364, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2380, 2381,
     2381, 2382, 2383, 2383, 2384, 2385, 2386, 2386, 2387, 2387,
     2388, 2391, 2380, 2389, 2389, 2390, 2390, 2383, 2392, 2392,
     2393, 2386, 2396, 2387, 2394, 2394, 2395, 2395, 2389, 2397,
     2398, 2399, 2400, 2400, 2401, 2402, 2403, 2404, 2405, 2394,
     2406, 2407, 2408, 2408, 2409, 2410, 2410, 2400, 2411, 2412,
     2412, 2413, 2413, 2414, 2415, 2416, 2416, 2417, 2418, 2419,
     2410, 2420, 2421, 2422, 2412, 2424, 2425, 2425, 2426, 2426,
     2416, 2427, 2427, 2428, 2429, 2430, 2431, 2432, 2432, 2433,

     2433, 2425, 2434, 2434, 2435, 2435, 2436, 2437, 2437, 2438,
     2439, 2441, 2432, 2440, 2440, 2443, 2444, 2434, 2445, 2445,
     2446, 2446, 2447, 2447, 2448, 2450, 2453, 2455, 2456, 2457,
     2458, 2458, 2459, 2445, 2460, 2460, 2462, 2447, 2461, 2461,
     2463, 2466, 2467, 2468, 2469, 2458, 2470, 2470, 2460, 2479,
     2471, 2471, 2461, 2471, 2481, 2471, 2472, 2472, 2473, 2473,
     2470, 2473, 2482, 2473, 2474, 2474, 2475, 2475, 2476, 2476,
     2472, 2477, 2477, 2478, 2478, 2480, 2480, 2483, 2474, 2484,
     2485, 2486, 2487, 2488, 2488, 2477, 2489, 2489, 2491, 2480,
     2490, 2490, 2492, 2493, 2494, 2494, 2495, 2496, 2496, 2497,

     2498, 2499, 2500, 2501, 2502, 2503, 2503, 2504, 2494, 2505,
     2505, 2496, 2506, 2506, 2507, 2508, 2508, 2509, 2509, 2510,
     2503, 2511, 2512, 2512, 2505, 2513, 2513, 2514, 2514, 2516,
     2508, 2515, 2515, 2517, 2517, 2518, 2519, 2512, 2520, 2520,
     2521, 2523, 2514, 2522, 2522, 2524, 2525, 2525, 2526, 2526,
     2527, 2527, 2528, 2529, 2529, 2530, 2531, 2531, 2522, 2532,
     2532, 2525, 2533, 2534, 2534, 2527, 2535, 2535, 2529, 2536,
     2536, 2531, 2537, 2539, 2532, 2538, 2538, 2540, 2534, 2541,
     2541, 2535, 2542, 2542, 2543, 2545, 2547, 2548, 2549, 2550,
     2550, 2552, 2553, 2554, 2541, 2555, 2555, 2556, 2556, 2557,

     2558, 2560, 2561, 2562, 2563, 2563, 2564, 2564, 2565, 2565,
     2566, 2567, 2568, 2569, 2570, 2572, 2572, 2573, 2573, 2574,
     2579, 2564, 2575, 2575, 2576, 2576, 2577, 2577, 2578, 2578,
     2572, 2580, 2581, 2582, 2582, 2583, 2575, 2584, 2585, 2585,
     2577, 2585, 2586, 2585, 2587, 2588, 2588, 2582, 2588, 2589,
     2588, 2590, 2591, 2591, 2592, 2592, 2593, 2594, 2594, 2595,
     2595, 2596, 2596, 2597, 2597, 2598, 2599, 2599, 2600, 2601,
     2602, 2594, 2603, 2603, 2604, 2596, 2605, 2597, 2606, 2606,
     2599, 2607, 2607, 2608, 2609, 2609, 2603, 2611, 2610, 2610,
     2613, 2610, 2606, 2610, 2612, 2612, 2614, 2614, 2609, 2611,

     2615, 2616, 2616, 2617, 2617, 2618, 2618, 2619, 2612, 2620,
     2620, 2614, 2621, 2621, 2622, 2622, 2616, 2623, 2617, 2624,
     2625, 2625, 2626, 2626, 2627, 2628, 2630, 2621, 2629, 2629,
     2631, 2631, 2632, 2632, 2633, 2634, 2635, 2635, 2636, 2636,
     2637, 2637, 2638, 2629, 2641, 2631, 2639, 2639, 2640, 2640,
     2642, 2642, 2646, 2636, 2643, 2643, 2644, 2644, 2645, 2645,
     2650, 2639, 2647, 2647, 2651, 2642, 2648, 2648, 2649, 2649,
     2654, 2644, 2652, 2652, 2653, 2653, 2655, 2647, 2656, 2657,
     2658, 2659, 2659, 2661, 2661, 2663, 2668, 2652, 2665, 2665,
     2666, 2666, 2667, 2667, 2669, 2670, 2659, 2671, 2661, 2672,

     2673, 2673, 2674, 2665, 2679, 2666, 2675, 2675, 2676, 2676,
     2677, 2677, 2678, 2678, 2680, 2680, 2681, 2681, 2682, 2683,
     2683, 2688, 2689, 2689, 2677, 2694, 2678, 2697, 2680, 2690,
     2690, 2691, 2691, 2683, 2692, 2692, 2693, 2693, 2695, 2695,
     2696, 2696, 2699, 2690, 2698, 2698, 2700, 2700, 2692, 2701,
     2701, 2702, 2695, 2703, 2703, 2704, 2704, 2705, 2698, 2707,
     2700, 2706, 2706, 2708, 2706, 2709, 2706, 2703, 2710, 2711,
     2711, 2712, 2712, 2713, 2714, 2714, 2715, 2715, 2716, 2717,
     2717, 2718, 2718, 2711, 2719, 2719, 2720, 2721, 2721, 2714,
     2722, 2722, 2723, 2723, 2717, 2724, 2724, 2725, 2725, 2726,

     2727, 2727, 2721, 2728, 2728, 2729, 2729, 2723, 2730, 2730,
     2724, 2734, 2725, 2731, 2731, 2727, 2732, 2732, 2733, 2733,
     2729, 2735, 2735, 2736, 2737, 2737, 2738, 2738, 2731, 2739,
     2741, 2732, 2740, 2740, 2742, 2743, 2743, 2744, 2744, 2745,
     2746, 2747, 2748, 2750, 2750, 2751, 2751, 2752, 2752, 2754,
     2743, 2753, 2753, 2755, 2755, 2756, 2756, 2759, 2750, 2757,
     2757, 2760, 2752, 2758, 2758, 2761, 2762, 2763, 2755, 2764,
     2765, 2765, 2766, 2766, 2757, 2767, 2767, 2768, 2768, 2769,
     2770, 2770, 2771, 2771, 2765, 2772, 2772, 2773, 2773, 2767,
     2774, 2774, 2775, 2775, 2776, 2776, 2771, 2777, 2777, 2772,

     2778, 2778, 2779, 2782, 2774, 2780, 2780, 2781, 2781, 2783,
     2783, 2777, 2784, 2785, 2785, 2786, 2786, 2787, 2787, 2780,
     2790, 2791, 2792, 2792, 2793, 2794, 2794, 2785, 2795, 2796,
     2796, 2787, 2797, 2797, 2798, 2798, 2799, 2799, 2800, 2800,
     2801, 2801, 2802, 2802, 2803, 2803, 2805, 2797, 2804, 2804,
     2813, 2799, 2806, 2806, 2814, 2801, 2807, 2807, 2815, 2803,
     2808, 2808, 2809, 2809, 2810, 2810, 2811, 2811, 2812, 2812,
     2816, 2807, 2817, 2818, 2818, 2819, 2820, 2809, 2821, 2822,
     2829, 2811, 2823, 2823, 2824, 2824, 2826, 2826, 2827, 2827,
     2830, 2831, 2832, 2833, 2834, 2834, 2835, 2835, 2836, 2837,

     2837, 2838, 2838, 2839, 2839, 2840, 2840, 2841, 2841, 2842,
     2842, 2843, 2843, 2837, 2844, 2845, 2845, 2846, 2847, 2840,
     2848, 2848, 2853, 2842, 2849, 2849, 2850, 2850, 2851, 2851,
     2852, 2852, 2854, 2855, 2855, 2856, 2856, 2865, 2849, 2857,
     2857, 2866, 2851, 2867, 2852, 2858, 2858, 2868, 2855, 2859,
     2859, 2860, 2860, 2861, 2861, 2862, 2862, 2863, 2863, 2864,
     2864, 2869, 2871, 2872, 2875, 2882, 2860, 2878, 2878, 2879,
     2879, 2880, 2880, 2883, 2864, 2881, 2881, 2884, 2884, 2885,
     2885, 2878, 2886, 2886, 2887, 2887, 2888, 2888, 2889, 2889,
     2899, 2884, 2890, 2890, 2891, 2891, 2886, 2892, 2892, 2902,

     2888, 2893, 2893, 2894, 2894, 2903, 2890, 2895, 2895, 2891,
     2896, 2896, 2897, 2897, 2898, 2898, 2893, 2900, 2900, 2901,
     2901, 2907, 2895, 2905, 2905, 2906, 2906, 2897, 2928, 2898,
     2908, 2908, 2900, 2929, 2901, 2909, 2909, 2905, 2910, 2910,
     2911, 2911, 2912, 2912, 2908, 2913, 2913, 2914, 2914, 2909,
     2915, 2915, 2916, 2916, 2917, 2917, 2918, 2918, 2931, 2913,
     2919, 2919, 2920, 2920, 2943, 2915, 2921, 2921, 2922, 2922,
     2923, 2923, 2924, 2924, 2944, 2919, 2925, 2925, 2926, 2926,
     2945, 2921, 2927, 2927, 2948, 2923, 2949, 2924, 2930, 2930,
     2932, 2932, 2950, 2926, 2933, 2933, 2934, 2934, 2935, 2935,

     2936, 2936, 2937, 2937, 2932, 2938, 2938, 2939, 2939, 2940,
     2940, 2941, 2941, 2942, 2942, 2946, 2946, 2947, 2947, 2951,
     2951, 2953, 2939, 2952, 2952, 2954, 2954, 2955, 2955, 2956,
     2956, 2957, 2957, 2958, 2951, 2959, 2959,  797, 2952,  796,
     2954, 2960, 2960,  792, 2956, 2961, 2961, 2962, 2962, 2963,
     2963, 2964, 2964,  790,  789,  787,  786,  785,  783, 2961,
      782, 2962, 2966, 2966, 2966, 2966, 2967, 2967, 2967, 2967,
     2968, 2968, 2968, 2968, 2969, 2969, 2969, 2969, 2970, 2970,
     2970, 2970, 2971, 2971, 2971, 2971, 2972, 2972, 2972, 2972,
     2973,  779, 2973, 2973, 2974, 2974,  778, 2974, 2975, 2975,

     2975,  777,  776,  774,  773,  772,  771,  766,  765,  764,
      763,  762,  761,  760,  759,  758,  757,  756,  755,  752,
      751,  750,  748,  745,  744,  743,  742,  741,  739,  738,
      737,  736,  735,  734,  733,  732,  731,  730,  728,  725,
      724,  723,  721,  720,  719,  718,  716,  714,  713,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  699,
      693,  692,  690,  687,  686,  685,  684,  683,  682,  679,
      678,  677,  676,  672,  671,  670,  669,  668,  667,  666,
      664,  663,  662,  659,  658,  654,  653,  652,  651,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  638,  636,

      635,  634,  631,  630,  629,  628,  627,  625,  623,  618,
      616,  615,  613,  612,  611,  609,  608,  607,  606,  600,
      598,  597,  596,  593,  592,  591,  588,  587,  586,  584,
      580,  579,  577,  576,  573,  572,  571,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  554,  553,  552,
      549,  548,  547,  543,  542,  541,  540,  539,  535,  534,
      533,  532,  531,  530,  529,  528,  524,  523,  522,  521,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  497,
      492,  490,  489,  487,  486,  485,  483,  482,  481,  480,

      474,  473,  472,  471,  468,  467,  466,  465,  464,  463,
      461,  457,  456,  455,  452,  451,  449,  448,  447,  446,
      445,  444,  443,  441,  440,  439,  438,  436,  432,  431,
      428,  425,  424,  423,  422,  421,  420,  417,  416,  415,
      414,  411,  408,  407,  406,  403,  402,  401,  400,  399,
      394,  393,  392,  391,  390,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      371,  370,  369,  367,  366,  365,  362,  361,  359,  358,
      357,  356,  355,  353,  351,  349,  348,  347,  344,  343,
      341,  340,  339,  338,  337,  336,  335,  333,  332,  331,

      329,  327,  326,  323,  320,  319,  318,  317,  316,  315,
      312,  311,  310,  309,  306,  305,  304,  303,  300,  299,
      298,  297,  296,  293,  292,  291,  290,  289,  288,  287,
      286,  284,  283,  282,  280,  279,  278,  277,  276,  275,
      274,  272,  271,  270,  266,  263,  262,  261,  260,  259,
      258,  256,  255,  254,  252,  251,  250,  249,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  215,  214,  213,  211,  210,  209,  208,  204,
      203,  202,  201,  200,  199,  198,  197,  195,  194,  193,

      191,  190,  189,  188,  187,  186,  184,  183,  182,  178,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      164,  163,  162,  161,  159,  156,  148,  144,  141,  139,
      134,  133,  132,  131,  130,  129,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  115,  113,  112,
      111,  109,  108,  107,  105,  101,  100,   99,   96,   88,
       84,   81,   77,   70,   69,   62,   60,   59,   58,   57,
       55,   54,   53,   49,   44,   41,   33,   32,   28,   25,
       23,   19,   14,   13,    8,    7,    6,    5, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[358] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[357] =
    {   0,
      126,  130,  131,  132,  133,  135,  151,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  189,  190,
      192,  193,  194,  195,  196,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  221,  222,  223,  224,  228,  229,  230,
      231,  232,  233,  234,  237,  238,  239,  240,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  261,  262,  263,

      264,  265,  266,  267,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
      286,  287,  288,  289,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  314,  315,  316,  317,  332,  333,
      334,  335,  337,  338,  340,  341,  342,  343,  345,  346,
      347,  348,  350,  351,  352,  353,  355,  356,  357,  358,
      360,  361,  362,  363,  365,  366,  367,  368,  370,  371,
      372,  373,  374,  375,  376,  377,  378,  379,  380,  381,
      382,  386,  387,  388,  389,  391,  392,  393,  394,  396,

      397,  398,  399,  401,  402,  403,  404,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
      431,  432,  434,  435,  436,  437,  438,  439,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  454,  456,  458,
      459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
      469,  470,  471,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
      499,  500,  501,  502,  503,  504,  505,  506,  507,  508,

      509,  511,  512,  513,  514,  515,  516,  518,  519,  520,
      521,  522,  523,  524,  525,  526,  527,  528,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  553,
      554,  555,  556,  561,  562,  564,  565,  566,  567,  569,
      570,  571,  572,  574,  575,  577
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

//#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("matched %i characters: %s\n", yyleng, yytext);
#else     
	#define YY_PRINT;
#endif

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;









#line 114 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2755 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 124 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 3075 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2966 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4789 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 357 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 357 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 358 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 133 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 135 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXEXPRATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TEMPLATEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(REFERENCEMATRIXIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRSTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPREND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVALUESATT);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXREFERENCESTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXREFERENCEEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATESTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATEEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 347:
#line 566 "../../../../OS/src/OSParsers/OSParseosil.l"
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 567 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 351:
#line 571 "../../../../OS/src/OSParsers/OSParseosil.l"
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 572 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 574 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 575 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 577 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 5378 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2966 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2966 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2965);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void osil_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
/* %if-c-only */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void osilensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 589 "../../../../OS/src/OSParsers/OSParseosil.l"




