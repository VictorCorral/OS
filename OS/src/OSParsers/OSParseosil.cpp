#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 323
#define YY_END_OF_BUFFER 324
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2503] =
    {   0,
        1,    1,    0,    0,  320,  320,  321,  321,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  324,  322,
        1,    1,    2,  310,    2,  310,    6,  310,    5,  322,
        4,  310,  310,    2,  323,  320,  321,  311,  313,  314,
      313,  317,  318,  317,    1,  310,  310,    6,  310,    5,
        0,    4,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,    3,    6,    6,  310,    7,    5,    0,    0,  316,
      270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      310,  310,  320,  321,  311,    0,  319,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  272,    0,    0,    0,    0,
        0,    0,    0,    0,  138,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  226,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,

      315,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  312,    0,  271,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  130,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  256,    0,

        0,    0,    0,    0,    0,    0,  240,    0,    0,    0,
        0,    0,    0,    0,  132,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  128,  310,  310,  310,  310,  310,  310,  310,
      310,  310,   44,   45,  310,   20,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  271,
        0,  273,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  139,    0,    0,    0,    0,    0,
        0,    0,  257,    0,    0,    0,    0,    0,    0,    0,

      241,    0,    0,    0,    0,    0,    0,  227,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
      248,    0,    0,    0,    0,    0,  254,    0,  250,  114,
        0,    0,    0,  256,    0,    0,    0,    0,    0,    0,
      240,    0,    0,  258,    0,  260,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  246,    0,    0,    0,
        0,    0,  262,    0,    0,    0,    0,    0,  310,  310,

      310,  223,  310,  310,  310,  310,  310,   42,   43,   20,
      310,  310,  310,  310,   23,  310,  310,  310,  310,   24,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  273,    0,  253,
        0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
      249,    0,    0,    0,  139,    0,    0,  255,    0,  251,
        0,    0,    0,    0,  257,    0,    0,    0,    0,    0,
        0,  241,    0,    0,  259,    0,  261,    0,    0,    0,
      227,    0,    0,    0,    0,    0,    0,  133,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  247,    0,    0,    0,    0,    0,  263,    0,    0,
        0,  129,    0,    0,    0,  252,    0,    0,    0,  188,
        0,    0,   71,    0,  248,    0,    0,    0,    0,  254,
      250,    0,    0,    0,    0,    0,    0,    0,    0,  141,
        0,    0,    0,  258,  260,    0,    0,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  232,    0,
        0,    0,   67,    0,    0,    0,    0,  246,    0,    0,
      120,  206,  262,    0,    0,    0,    0,    0,    0,  310,
      310,  223,  310,  310,  310,  310,  310,  310,  310,  310,
       23,  310,  310,  310,   24,  310,   48,   49,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,   27,  310,
      310,  310,   56,   57,  310,  310,  310,   28,  253,    0,
        0,    0,    0,    0,    0,  131,    0,    0,  249,    0,
        0,    0,    0,  255,  251,    0,  115,    0,    0,    0,
        0,    0,    0,    0,  142,    0,    0,    0,  259,  261,
        0,    0,  148,    0,    0,    0,    0,    0,    0,  133,
        0,    0,    0,   62,    0,  233,    0,    0,    0,    0,
        0,    0,    0,    0,  247,    0,    0,    0,    0,  263,
        0,    0,    0,  129,    0,    0,    0,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  143,  141,    0,    0,
        0,    0,  182,    0,  234,  149,  147,    0,    0,    0,
        0,    0,    0,  268,    0,    0,  232,    0,    0,  238,
        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
      228,    0,  218,    0,    0,  310,  310,  310,  310,  310,
      310,  310,  310,   21,  310,   22,  310,  310,  310,  310,
       46,   47,  310,  310,  310,  310,  310,  310,  310,  310,
       52,   53,   27,  310,  310,   54,   55,  310,  310,   28,
        0,    0,    0,    0,  189,    0,    0,    0,    0,   72,
        0,    0,    0,    0,    0,    0,  115,    0,    0,    0,

        0,    0,    0,    0,  142,    0,    0,    0,    0,    0,
      235,  148,    0,    0,    0,    0,    0,    0,    0,    0,
       62,  233,    0,    0,  239,    0,    0,   68,    0,    0,
        0,    0,    0,    0,    0,  121,    0,    0,  207,    0,
        0,  229,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  230,    0,    0,   93,    0,
        0,  210,    0,    0,    0,  143,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  234,  149,    0,    0,  236,    0,    0,    0,
        0,    0,    0,    0,  238,    0,    0,    0,    0,    0,

        0,    0,  151,    0,  244,    0,    0,  228,    0,    0,
        0,  310,  310,  310,  310,  310,  310,  310,   26,   21,
       22,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,   50,   51,  310,  310,  310,  310,    0,    0,
        0,  189,    0,  187,    0,    0,   72,    0,    0,    0,
        0,  231,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  235,    0,
      237,    0,    0,    0,    0,    0,  269,    0,    0,    0,
      239,    0,   68,    0,    0,    0,    0,    0,  152,    0,

      245,    0,  121,    0,  119,  207,    0,  229,    0,    0,
      219,    0,    0,    0,  264,    0,    0,    0,    0,    0,
        0,    0,  230,   89,  190,    0,    0,    0,    0,    0,
      134,    0,    0,    0,  163,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  236,    0,    0,
        0,  208,    0,    0,    0,    0,  266,    0,    0,    0,
        0,    0,  153,  151,    0,  244,    0,    0,    0,    0,
      274,  310,  310,  310,  177,  310,  310,  310,  310,   26,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,   25,  310,
      310,  310,    0,  265,    0,    0,  187,    0,    0,    0,
        0,    0,  231,    0,    0,    0,   94,    0,    0,    0,
        0,  211,    0,    0,    0,    0,  164,    0,    0,  183,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      237,    0,    0,    0,    0,  269,    0,    0,    0,    0,
      267,    0,    0,    0,    0,    0,  152,  245,    0,  119,
        0,    0,  219,    0,    0,  264,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  165,

      163,    0,    0,  109,    0,    0,    0,    0,    0,    0,
        0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
        0,  101,    0,    0,    0,    0,    0,    0,   91,  266,
        0,    0,    0,    0,    0,  153,    0,    0,    0,    0,
        0,  122,  310,  310,  177,  310,  310,  310,  310,  310,
      310,   31,  310,  310,   29,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,   25,  310,
      310,   33,  310,  265,    0,    0,    0,    0,    0,    0,
        0,    0,   90,    0,  191,   94,    0,    0,    0,  211,
        0,    0,    0,  135,  164,    0,    0,   70,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  209,    0,    0,    0,  267,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  275,    0,    0,
      184,  214,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  165,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  296,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
        0,    0,    0,    0,  216,    0,    0,    0,  116,    0,
        0,  310,  310,  310,  310,  310,  310,  310,  310,  310,

       31,  310,   29,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,   33,  310,    0,
        0,    0,    0,    0,    0,    0,   90,  191,    0,    0,
        0,    0,    0,  135,    0,   70,    0,  110,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,    0,    0,  209,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      275,    0,  123,    0,    0,  124,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  292,  294,    0,    0,    0,    0,  298,    0,
      276,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,    0,    0,    0,    0,  242,    0,    0,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,   30,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,   32,    0,    0,  185,
        0,  215,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  110,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  106,    0,    0,  297,    0,    0,    0,
        0,  111,    0,    0,    0,    0,    0,  102,    0,    0,

        0,    0,    0,  127,    0,   92,    0,    0,    0,    0,
      217,    0,    0,  243,    0,  117,    0,    0,  123,    0,
        0,    0,    0,  155,    0,    0,  159,    0,    0,    0,
        0,    0,  140,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,  144,    0,    0,    0,    0,
        0,  242,    0,    0,  310,  310,  310,  310,  310,  310,
      310,  310,  310,   30,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,   35,  310,  310,  310,  310,
      310,   32,    0,  185,  215,   96,    0,    0,  125,    0,

      156,    0,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  293,    0,  295,    0,
      297,    0,    0,    0,  111,    0,  299,    0,    0,  277,
        0,    0,    0,    0,    0,    0,  127,    0,    0,   86,
        0,    0,    0,  217,    0,  243,  117,    0,    0,    0,
        0,  157,  155,    0,  161,  159,    0,    0,    0,    0,
        0,    0,  140,    0,    0,    0,    0,    0,    0,    0,
      286,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,    0,    0,    0,    0,   79,    0,    0,    0,    0,
        0,  310,   39,  310,  310,  310,  166,  310,  310,  310,

      310,  310,  310,  310,  310,   14,  310,  310,  310,  310,
      310,  310,  310,  310,  310,   35,  310,  310,  310,  310,
      310,    0,    0,  125,  156,  160,    0,    0,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  293,
      295,    0,    0,    0,    0,  299,    0,  277,    0,    0,
        0,    0,    0,    0,    0,  145,   86,    0,    0,    0,
        0,    0,    0,    0,    0,  157,    0,  161,    0,    0,
        0,   64,    0,    0,  200,    0,  280,  282,    0,  284,
        0,    0,    0,    0,    0,  278,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  220,    0,   39,  310,

      310,  166,  310,  310,  310,  310,  310,  310,  310,   14,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,   12,  310,  176,  310,  310,  310,  310,  310,  310,
        0,    0,    0,    0,   63,    0,    0,    0,    0,    0,
        0,    0,    0,  287,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  145,    0,    0,   80,
        0,    0,    0,    0,    0,    0,    0,    0,  202,    0,
       64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      304,    0,   99,    0,   73,   75,    0,    0,    0,    0,
        0,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,   37,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,   12,  176,  310,  310,  310,  310,  310,
      310,    0,    0,    0,    0,    0,    0,  201,    0,    0,
      281,    0,  283,    0,    0,  285,  287,    0,    0,    0,
        0,    0,    0,  279,    0,    0,    0,    0,    0,    0,
        0,   80,    0,    0,    0,  221,    0,  136,  192,    0,
        0,    0,   87,    0,    0,    0,    0,  103,    0,    0,
        0,    0,    0,    0,    0,   83,    0,  150,    0,  310,
      172,  310,  171,  310,  310,  310,  310,  310,  310,  310,
      308,  309,   37,  310,  310,   13,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,   34,  310,  173,  310,
      310,  310,  310,    0,    0,    0,  203,    0,    0,  201,
        0,  281,  283,    0,  285,    0,    0,    0,    0,    0,
      279,    0,  305,    0,    0,  100,    0,    0,   74,    0,
       76,    0,    0,    0,  221,    0,    0,    0,    0,    0,
      107,  112,    0,   97,  300,  302,    0,    0,    0,    0,
      150,    0,  172,  171,  310,  310,  310,   36,  310,  310,
      310,  306,  307,  310,   13,  310,   17,  310,  310,   16,
      310,  310,   15,  310,  310,  310,  310,    8,   34,  173,
      310,  310,   60,   61,  310,  310,    0,  137,    0,  193,

      203,    0,    0,   88,    0,    0,    0,    0,  104,    0,
        0,    0,  305,    0,  100,    0,   74,   76,    0,    0,
        0,   84,    0,    0,    0,   77,    0,  162,    0,    0,
        0,    0,    0,    0,  310,  170,  310,  169,   36,  310,
      310,  310,   40,  310,   17,  310,   19,   16,  310,   15,
      310,  310,   10,  310,    8,  310,   58,   59,  310,  310,
      137,  193,    0,   88,    0,  108,    0,  113,    0,  104,
        0,   98,    0,  301,    0,  303,    0,    0,    0,    0,
       84,    0,    0,    0,  162,  288,  290,    0,    0,    0,
        0,  170,  169,  310,   38,  310,  310,   40,  310,    9,

       19,  310,   18,  310,   10,  310,  310,   41,  310,  310,
        0,   78,  108,  113,    0,   98,  301,  303,    0,    0,
        0,    0,    0,    0,    0,  224,    0,   81,  194,   38,
      310,  180,  181,    9,   18,  310,  310,   41,  310,  168,
      310,  167,   78,    0,  289,    0,  291,    0,    0,    0,
        0,    0,    0,   65,  178,  179,  310,  310,  168,  167,
      289,  291,    0,  225,    0,    0,   82,    0,  195,    0,
        0,  310,  310,   11,  225,    0,   66,   82,  195,    0,
        0,  310,   11,   66,    0,    0,  310,    0,    0,  310,
        0,  154,    0,  158,  310,  154,  158,  310,  310,  222,

      222,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,   38,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[2514] =
    {   0,
        0,   65,    0,    0, 4022, 4021, 4018, 4017,    0,    0,
        0,    0, 4008, 4007,   13,   16,    3,    5, 4021, 4028,
      129,    0, 4015,    0, 4012,   18,   38, 4001,   83,  190,
     4028, 3988, 3977, 4028, 4028,    0,    0,    0, 4028, 4028,
     4006, 4028, 4028, 3997,    0,    0,   23,   86, 3996,  193,
       16, 4028, 3983, 3972, 3948, 3970, 3955, 3960, 3944, 3958,
     3951,    1, 3963,    0,    3, 3946, 3962,   61,    8, 3960,
     3960, 4028,   43,  249,  102, 4028,   52, 3989,  270, 4028,
     4028, 3971,    8,   34, 3943,   58,   62,   74, 3952,   76,
       40,   86,  159,   68,    7,   68, 3941,  167,  168, 3954,

     3968, 3962,    0,    0,    0, 3973, 4028, 3942, 3931,  176,
     3930, 3945, 3929, 3928,  254, 3942,  176, 3924, 3931, 3929,
     3923, 3927, 3935, 3918, 3936,  176, 3935, 3934, 3916, 3917,
      232, 3920,  252,  265, 3960,  252, 3942,  199,   97, 3914,
      228,  224,  234, 3923,  232,  236,  250,  290,  242,  250,
      164, 3912,  289,  238, 3925, 4028, 3906, 3912, 3904, 3907,
      300, 3902, 3898, 3918, 3913, 3911, 3900, 3912, 3902, 3899,
      302,  296, 3907,  159,  343,  233, 3897, 3897, 3902, 4028,
     3894, 3894, 3896, 3885, 3883,  257, 3888, 3897, 3900,  273,
     3887, 3885, 3877, 3876, 3895, 3882, 3881, 3892, 3874,  256,

     4028, 3872, 3885, 3883, 3869, 3867, 3874, 3866, 3875,  353,
      356,  362,  252, 3868, 3881, 3863, 3860, 3874, 3865, 3875,
     3871, 3855, 3862, 3858, 3863, 3855, 3852, 3862, 3863, 3852,
     3865, 3844, 4028,  364,  368,  370, 3845, 3851, 3843, 3846,
      325, 3841, 3837, 3857,  377, 3851, 3840, 3852, 3842, 3839,
      381,  332, 3847,  344,  397,  277, 3837, 3837, 3842,  399,
     3834, 3834, 3836, 3825, 3835, 3822,  343, 3827, 3836, 3839,
      330, 3826, 3824, 3816, 3815, 3834, 3821, 3820, 3831, 3813,
      404, 3846, 3824, 3825, 3835, 3810,  352,  408, 3822, 3815,
     3811, 3809,  410,  415, 3801, 3815, 3814,  420,  426, 3813,

     3797, 3811, 3802, 3809, 3808,  428,  431, 3794,  433,  436,
     3806, 3809,  390, 3807, 3803, 3798, 3787, 3804, 3799, 3799,
     3784, 3797, 3799, 3807, 3789,  444, 3779, 3795,  363,  446,
     3790, 3780,  425, 3809, 3802,  453, 3771, 3775, 3768, 3768,
     3761,  457, 3819, 3816,  463,  465, 3770, 3760, 3761,  471,
     3767, 3760, 3770,  473,  475, 3782, 3772, 3758, 3770, 3773,
     3759, 3768, 3766, 3750, 3764,  478, 3754, 3747, 3761,  480,
      482,  490,  494, 3781, 3759, 3760, 3770, 3745,  498,  500,
     3757, 3750, 3746,  502,  504, 3744,  506,  510, 3736, 3750,
     3749,  518,  522, 3748, 3732, 3746, 3737, 3744, 3743,  526,

      528, 3729,  530,  534, 3741, 3744,  536,  542,  496, 3742,
      554, 3734, 3730, 3722, 3739, 3734, 3734, 3719, 3732, 3734,
     3742, 3724,  556, 3714, 3730,  370,  559, 3725, 3715,  561,
      565,  567, 3719,   10, 3716, 3720, 3710, 3705, 3703,  572,
      577, 3704, 3717, 3737, 3714,  581,  583,  588,  593, 4028,
     3703, 3734, 3698,  597, 3691, 3713, 3695,  599, 3698, 3710,
      601, 3701,  604,  609,  611,  615, 3690,  620, 3688, 3698,
     3701, 3690, 3699, 3698, 3699, 3686,  617, 3682, 3681, 3677,
     3684, 3678, 3675, 3688, 3689,  622,  624, 3689, 3673, 3685,
     3669,  627,  630,  346, 3669, 3683, 3681, 3684, 3675, 3682,

      633,  638, 3681, 3663, 3676, 3698, 3663, 4028, 4028,  640,
     3672, 3661, 3671,  643,  645, 3669, 3655, 3648,  648,  650,
      652,  655, 3668, 3652, 3686, 3650, 3649, 3662, 3660,  663,
      667, 3644,  669,  671, 3658, 3644,  678,  684,  686,  688,
     3652,  429, 3649, 3653, 3643,  693,  695, 3638, 3636,  697,
      699, 3637, 3650, 3670,  702, 3647,  704,  706,  709,  713,
      715, 3636, 3667, 3631,  717, 3624, 3646, 3628,  720, 3631,
     3643,  722, 3634,  725,  727,  731,  733, 3623,  736, 3621,
      738, 3631, 3634, 3623, 3632, 3631,  741,  743, 3632, 3619,
      747,  749, 3615, 3614, 3610, 3617, 3611, 3608, 3621, 3622,

      752,  754, 3622, 3606, 3618, 3602,  757,  759,  492, 3602,
      765,  768, 3636, 3614, 3617,  770, 3611, 3641, 3614, 3595,
     3607, 3598, 4028,  385,  773, 3602, 3605, 3594, 3594,  775,
      777, 3589, 3588, 3604, 3599, 3589,  724,  783, 3623,  786,
     3598, 3582,  300,  788,  790,  793,  795, 3620,  800, 3593,
     3583, 3589, 3576, 3576, 3575, 3572, 3577,  802,  805, 3607,
      811, 3586, 4028, 3587, 3582, 3580, 3580,  814, 3579, 3578,
     3563, 4028,  818, 3566,  820, 3574, 3555, 3572, 3575, 3558,
     3555,  822, 3560, 3553, 3567, 3547, 3556,  824,  827, 3564,
      829, 3580, 3558, 3578,  831,  839, 3598, 3595, 3562, 3570,

     3546, 3546, 3569, 3577, 3551,  833,  845,  851,  836, 3552,
     3565,  853, 3587, 3584, 3564, 3542,  859,  861,  863, 3544,
     3574, 3547,  866, 3541, 3532,  868,  870,  553,  874, 3536,
     3539, 3528, 3528,  876,  878,  882,  886, 3523, 3522, 3538,
     3533, 3523,  833,  889,  892, 3533, 3517,  615,  894,  898,
      900,  902,  905, 3529, 3519, 3525, 3512, 3512, 3511,  907,
     3508, 3513,  909,  911,  913,  918, 3543,  922, 3522,  925,
     3523, 3518, 3516, 3516,  929, 3515, 3514,  931,  933,  935,
     3503,  938, 3511,  941, 3516, 3509, 3512, 3507, 3530, 3491,
     4028, 3491, 3504, 3494, 3506, 3490,  943, 3491, 3484, 3484,

     3497, 3484, 3471, 3448, 3444, 3447,  949,  951, 3474, 3441,
     3460, 3439,  968,  954,  956,  959,  961, 3461,  965, 3422,
       25,   43,   70, 4028,  191,  273,  967,  284,  970,  972,
      328,  347,  410,  413,  442,  975,  998, 4028,  437, 1004,
      977,  437, 4028,  455,  460,  473,  462,  464,  479,  511,
      493,  981, 1006, 1008, 1010, 1014,  520,  510,  492,  523,
     4028, 4028,  522,  533,  529,  560,  556,  576,  614, 1022,
      658,  660, 1016,  613,  643, 4028, 4028,  642,  630, 1030,
      669,  711,  689, 1032, 1034, 1036,  706,  722, 1038, 1040,
      731,  748,  745, 1042,  757,  753, 1044,  761,  802,  801,

      800,  818,  831,  843, 1048,  843,  875,  875, 1058, 1054,
     1060, 1062, 1065,  879,  890,  900,  896, 1070,  918,  956,
     1067, 1074,  932, 1088, 1094,  935, 1096, 1098,  956,  978,
      966,  984, 1100, 1104, 1106, 1108, 1112, 1116, 1122,  979,
     1124, 1128,  995, 1132, 1009, 1004, 1136, 1011, 1010, 1031,
     1026, 1025, 1057, 1054, 1140, 1142, 1073, 1063, 4028, 1083,
     1117, 4028, 1085, 1091, 1086, 1148, 1099, 1152, 1098, 1095,
     1103, 1111, 1097, 1118, 1108, 1119, 1125, 1117, 1127, 1124,
     1118, 1135, 1173, 1176, 1129, 1180, 1182, 1148, 1130, 1131,
     1133, 1131, 1149, 1141, 1192, 1196, 1149, 1168, 1158, 1155,

     1201, 1188, 1204, 1206, 1208, 1161, 1176, 1218, 1160, 1166,
     1181, 1184, 1179, 1225, 1176, 1180, 1174, 1230, 1232, 1234,
     1236, 1193, 1180, 1217, 1182, 1202, 1226, 1205, 1210, 1200,
     1204, 1200, 4028, 4028, 1259, 1199, 1197, 1238, 1263, 1220,
     1212, 1267, 1269, 1271, 1233, 1225, 1276, 1223, 1235, 1225,
     1282, 1285, 1246, 1233, 1289, 1254, 1271, 1293, 1254, 1257,
     1250, 1300, 1254, 1248, 1305, 1309, 1256, 1266, 1252, 1273,
     1263, 1277, 1278, 1271, 1282, 1283, 1274, 1290, 1329, 1331,
     1335, 1296, 1282, 1284, 1286, 1342, 1344, 1289, 1307, 1299,
     1350, 1352, 1354, 1311, 1328, 1318, 1315, 1361, 1363, 1365,

     1368, 1319, 1372, 1374, 1377, 1381, 1342, 1383, 1331, 1386,
     1390, 1334, 1351, 1393, 1395, 1347, 1353, 1343, 1344, 1381,
     1353, 1359, 1405, 4028, 4028, 1351, 1361, 1356, 1391, 1356,
     4028, 1357, 1414, 1401, 1417, 1378, 4028, 1370, 1384, 1366,
     1372, 1384, 1368, 1368, 1374, 1381, 1386, 1376, 1383, 1398,
     1398, 1388, 1406, 1402, 1388, 1387, 1405, 1443, 1391, 1401,
     1402, 4028, 1407, 1412, 1409, 1451, 1453, 1404, 1417, 1400,
     1402, 1409, 1460, 1462, 1455, 1467, 1414, 1424, 1421, 1430,
     1417, 1417, 1414, 1476, 1478, 1443, 1431, 1441, 1463, 1484,
     1449, 1487, 1449, 1491, 1471, 1443, 1458, 1445, 1459, 1441,

     1443, 1463, 1478, 1447, 1448, 1451, 1462, 1508, 1510, 1458,
     1513, 1475, 1516, 1518, 1470, 1476, 1523, 1469, 1470, 1507,
     1479, 1485, 1532, 1534, 1536, 1538, 1540, 1486, 1495, 1490,
     1545, 1547, 1530, 1496, 1554, 1556, 1558, 1520, 1562, 1564,
     1516, 1530, 1512, 1518, 1531, 1515, 1515, 1521, 1526, 1532,
     1522, 1529, 1544, 1544, 1529, 1535, 1553, 1549, 1535, 1534,
     1589, 1537, 1547, 1548, 1594, 1596, 1557, 1562, 1559, 1601,
     1603, 1554, 1567, 1550, 1552, 1560, 1611, 1613, 1564, 1617,
     1574, 1571, 1621, 1582, 1624, 1626, 1591, 1569, 1575, 1576,
     1584, 1577, 1583, 1584, 1595, 1581, 1601, 1595, 1600, 1642,

     1644, 1637, 1598, 1593, 1606, 1617, 1597, 1602, 1612, 1613,
     1612, 1599, 1617, 1604, 1617, 1613, 1636, 1622, 1625, 1626,
     1625, 1622, 1619, 1648, 1612, 1613, 1617, 1633, 4028, 1674,
     1627, 1659, 1643, 1626, 1637, 1683, 1630, 1630, 1637, 1651,
     1639, 4028, 1645, 1670, 1692, 1639, 1670, 1648, 1653, 1656,
     1700, 1703, 1645, 1706, 1708, 1673, 1661, 1656, 1663, 1669,
     1679, 1680, 1664, 1679, 1667, 1677, 1703, 1668, 1725, 1682,
     1728, 1730, 1672, 1733, 1698, 1676, 1682, 1683, 1691, 1684,
     1690, 1743, 1745, 1747, 1749, 1751, 1702, 1713, 1699, 1756,
     1722, 1715, 1763, 1765, 1767, 1712, 1769, 1771, 1773, 1732,

     1743, 1723, 1729, 1739, 1740, 1739, 1726, 1785, 1732, 1746,
     1742, 1765, 1743, 1752, 1755, 1756, 1755, 1797, 1778, 1743,
     1744, 1803, 1807, 1750, 1769, 1810, 1813, 1765, 1797, 1780,
     1764, 1775, 1765, 1772, 1786, 1774, 1829, 1831, 1833, 1773,
     4028, 4028, 4028, 1794, 1781, 1787, 1784, 1790, 1796, 1785,
     1792, 1796, 1846, 1801, 1809, 1795, 1801, 1808, 1813, 1799,
     1802, 1803, 1817, 1804, 1821, 4028, 1807, 1825, 1826, 1809,
     1828, 1825, 1812, 1814, 1832, 1829, 1811, 1831, 1832, 4028,
     1833, 1834, 1825, 1837, 4028, 1822, 1828, 1880, 4028, 1826,
     1844, 1833, 1835, 1846, 1831, 1834, 1852, 1849, 1837, 1841,

     1893, 1896, 1898, 1861, 1860, 1848, 1855, 1863, 1865, 1863,
     1883, 1848, 1864, 1859, 1867, 1872, 1854, 1916, 1918, 1866,
     1921, 1923, 1925, 1886, 1874, 1880, 1933, 1941, 1877, 1886,
     1893, 1883, 1892, 1944, 1905, 1947, 1949, 1951, 1897, 1903,
     1910, 1915, 1901, 1904, 1905, 1919, 1906, 1962, 1965, 1928,
     1968, 1916, 1934, 1935, 1973, 1920, 1939, 1937, 1924, 1926,
     1981, 1984, 1949, 1927, 1948, 1949, 1991, 1993, 1954, 1997,
     1999, 1960, 1951, 1963, 2004, 1950, 2009, 2013, 1951, 1972,
     2015, 2017, 2020, 1961, 1974, 4028, 2025, 2029, 1986, 1994,
     1996, 1985, 2036, 1994, 1991, 1988, 1993, 1996, 1991, 2002,

     1993, 2016, 4028, 4028, 1994, 2015, 1999, 1998, 4028, 2007,
     4028, 2004, 2024, 2020, 2059, 2009, 2043, 2044, 2010, 4028,
     2025, 2011, 2026, 2011, 2069, 2071, 2028, 2035, 2027, 2038,
     2019, 2043, 2036, 2026, 2033, 2044, 2036, 2087, 2089, 2035,
     2037, 2037, 2049, 2050, 2057, 2043, 2057, 2059, 2063, 2102,
     2044, 2057, 2052, 2057, 2086, 2109, 2111, 2052, 2114, 2117,
     2119, 2121, 2124, 2126, 2079, 2130, 2132, 2135, 2096, 2101,
     2103, 2091, 2092, 2143, 2092, 2098, 2100, 2096, 2107, 2098,
     2121, 2155, 2157, 2159, 2105, 2162, 2164, 2129, 2113, 2112,
     2173, 2175, 2178, 2121, 2180, 2119, 2149, 2183, 2147, 2134,

     2168, 2170, 2190, 2196, 2138, 2198, 2200, 2153, 2148, 2206,
     2208, 2163, 2210, 2212, 2216, 2218, 2169, 2179, 2222, 2204,
     2185, 2227, 2214, 2232, 2234, 2215, 2237, 2189, 2190, 2246,
     2222, 2251, 2253, 2205, 2192, 2219, 2220, 2217, 2204, 2204,
     2220, 2208, 2218, 2215, 2232, 2213, 2231, 2218, 2216, 2223,
     2272, 2274, 2222, 2226, 2227, 4028, 2237, 2239, 2244, 2263,
     2229, 2284, 2235, 2267, 2289, 2273, 2293, 2237, 2235, 2242,
     2241, 2259, 2262, 2300, 2251, 2305, 2254, 2270, 2260, 2255,
     2275, 2258, 2254, 2277, 2317, 2320, 2292, 2277, 2282, 2283,
     2280, 2326, 2308, 2332, 2334, 2336, 2288, 2338, 2340, 2342,

     2344, 2346, 2348, 2300, 2301, 2354, 2333, 2300, 2321, 2322,
     2319, 2307, 2307, 2323, 2311, 2366, 2370, 2372, 2374, 2323,
     2376, 2329, 2346, 2326, 2382, 2384, 2388, 2349, 2390, 2392,
     2343, 2341, 2348, 2343, 2347, 2349, 2401, 2403, 2406, 2408,
     2368, 2370, 2375, 2413, 2396, 2416, 2419, 2371, 2402, 2387,
     2375, 2426, 2428, 2421, 2431, 2433, 2426, 2380, 2381, 2438,
     2425, 2391, 2443, 2404, 2393, 2404, 2402, 2396, 2407, 2392,
     4028, 2409, 2397, 2407, 2412, 2413, 2405, 2405, 2416, 2421,
     2463, 2424, 2416, 2417, 2426, 4028, 2413, 2419, 2432, 2422,
     2425, 2474, 2476, 2427, 2428, 2480, 2482, 2428, 2461, 2441,

     2463, 2433, 2442, 2437, 2492, 2495, 2460, 2457, 2480, 2459,
     2457, 2447, 2504, 2509, 2459, 2511, 2474, 2475, 2478, 2464,
     2466, 2484, 2472, 2524, 2526, 2528, 2474, 2475, 2532, 2534,
     2485, 2482, 2493, 2491, 2485, 2496, 2481, 2543, 2500, 2548,
     2550, 2488, 2503, 2508, 2509, 2555, 2503, 2559, 2506, 2517,
     2522, 2523, 2515, 2516, 2567, 2569, 2571, 2531, 2574, 2520,
     2526, 2528, 2531, 2524, 2525, 2583, 2545, 2586, 2546, 2535,
     2572, 2592, 2544, 2545, 4028, 2546, 4028, 4028, 2546, 4028,
     2561, 2558, 2555, 2552, 2542, 4028, 2562, 2567, 2550, 2551,
     2566, 2567, 2564, 2565, 2561, 2571, 4028, 2572, 2614, 2568,

     2558, 2618, 2601, 2581, 2562, 2581, 2579, 2625, 2627, 2629,
     2586, 2578, 2583, 2575, 2598, 2596, 2601, 2603, 2584, 2598,
     2644, 2646, 2648, 2650, 2611, 2593, 2600, 2599, 2601, 2602,
     2603, 2604, 2606, 2644, 2664, 2616, 2667, 2619, 2670, 2672,
     2623, 2675, 2677, 2679, 2644, 2642, 2639, 2637, 2628, 2693,
     2648, 2654, 2640, 2641, 2656, 2657, 2699, 2656, 2702, 2704,
     2661, 2657, 2709, 2670, 2675, 2658, 2673, 2670, 4028, 2665,
     2718, 2679, 2682, 2666, 2673, 2675, 2671, 2677, 2687, 2712,
     4028, 2680, 4028, 2676, 4028, 4028, 2693, 2694, 2693, 2735,
     2688, 2738, 2740, 2691, 2692, 2684, 2721, 2714, 2696, 2748,

     2755, 2763, 2765, 2701, 2767, 2703, 2705, 2713, 2707, 2715,
     2716, 2730, 2733, 2773, 2775, 2723, 2779, 2782, 2739, 2785,
     2731, 2751, 2734, 2790, 2741, 2753, 2797, 2800, 2739, 2802,
     2806, 2808, 2810, 2754, 2813, 2815, 2818, 2770, 2766, 2772,
     2783, 2808, 2826, 2829, 2831, 2783, 2834, 2781, 2837, 2839,
     2803, 2843, 2806, 2806, 2850, 2855, 2799, 4028, 4028, 2798,
     2809, 2808, 4028, 2818, 2805, 2806, 2819, 4028, 2820, 2809,
     2810, 2824, 2823, 2824, 2851, 4028, 2871, 2873, 2834, 2876,
     2878, 2880, 2882, 2836, 2826, 2887, 2849, 2850, 2842, 2895,
     2890, 2892, 2902, 2843, 2904, 2906, 2908, 2856, 2911, 2864,

     2914, 2895, 2862, 2886, 2920, 2923, 2926, 2929, 2931, 2882,
     2935, 2939, 2919, 2945, 2947, 2951, 2953, 2891, 2955, 2957,
     2904, 2963, 2967, 2906, 2971, 2922, 2973, 2926, 2920, 2920,
     2977, 2979, 2981, 2940, 2984, 2986, 2944, 2990, 2992, 2995,
     2997, 2955, 2982, 3002, 3006, 2963, 2969, 2968, 2970, 3012,
     4028, 4028, 2966, 4028, 4028, 4028, 2967, 2965, 2977, 2968,
     3020, 2972, 3023, 3025, 3028, 3030, 3032, 3034, 2976, 2981,
     3038, 4028, 4028, 2985, 3047, 3049, 3053, 3055, 3057, 3059,
     2986, 3061, 3064, 2983, 3066, 3004, 3072, 3076, 3078, 3081,
     3001, 3084, 3065, 3065, 3023, 3032, 3090, 3092, 3094, 3096,

     3098, 3047, 3100, 3102, 3106, 3110, 3056, 3112, 3116, 3118,
     3122, 3128, 3130, 3060, 3134, 3063, 3138, 3140, 3079, 3073,
     3144, 3146, 3076, 3078, 3117, 4028, 3148, 3150, 3101, 3111,
     3103, 3104, 3105, 3100, 3157, 3160, 3164, 3166, 3168, 3172,
     3174, 3176, 3179, 3181, 3183, 3191, 3193, 3196, 3198, 3200,
     3110, 3202, 3206, 3116, 3208, 3210, 4028, 4028, 3137, 3128,
     3213, 3217, 3219, 3221, 3225, 3227, 3229, 3231, 3148, 3235,
     3237, 3241, 3245, 3247, 3249, 3253, 3163, 3165, 3173, 3183,
     3255, 3183, 3198, 3197, 3257, 4028, 4028, 3204, 3205, 3221,
     3208, 3265, 3267, 3269, 3271, 3273, 3275, 3281, 3284, 3288,

     3290, 3292, 3294, 3223, 3296, 3230, 3299, 3301, 3303, 3307,
     3309, 3311, 3314, 3318, 3322, 3325, 3327, 3329, 3331, 3231,
     3249, 3275, 3265, 3281, 3293, 4028, 3280, 4028, 4028, 3338,
     3340, 3333, 3337, 3347, 3349, 3303, 3296, 3352, 3354, 3356,
     3358, 3360, 3362, 3364, 3366, 3369, 3373, 3375, 3316, 3377,
     3380, 3326, 3346, 4028, 4028, 4028, 3330, 3386, 3388, 3393,
     3396, 3398, 3401, 3403, 3405, 3407, 3409, 3411, 3413, 3346,
     3359, 3362, 3418, 3423, 3427, 3429, 3433, 3435, 3437, 3370,
     3374, 3386, 3439, 3441, 3393, 3391, 3395, 3447, 3449, 3401,
     3452, 3454, 3456, 3458, 3405, 3465, 3468, 3472, 3474, 3476,

     3478, 4028, 3490, 3495, 3500, 3505, 3510, 3515, 3520, 3461,
     3525, 3530, 3535
    } ;

static yyconst flex_int16_t yy_def[2514] =
    {   0,
     2503, 2503, 2504, 2504, 2505, 2505, 2506, 2506, 2504, 2504,
     2504, 2504, 2507, 2507, 2508, 2508, 2509, 2509, 2502, 2502,
     2502,   21, 2502, 2510, 2502, 2510, 2510, 2510, 2510, 2502,
     2502, 2510, 2510, 2502, 2502, 2511, 2512, 2513, 2502, 2502,
     2502, 2502, 2502, 2502,   21, 2510, 2510, 2510, 2510, 2510,
       30, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2502, 2510, 2510, 2510, 2502, 2510, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2510, 2510, 2511, 2512, 2513, 2502, 2502, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510,

     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2502, 2502, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2502, 2502, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2510, 2510, 2510, 2510, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2502, 2502, 2510, 2510, 2510, 2502, 2502, 2510, 2510, 2510,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2510, 2510, 2510, 2510, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2510, 2510, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2502, 2502, 2510, 2510,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2510,
     2510, 2502, 2502, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2510, 2510, 2510, 2510,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2510, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2510, 2510, 2502, 2502, 2502, 2510, 2502, 2502, 2510,
     2502, 2502, 2502, 2502, 2510, 2502, 2502, 2510, 2510, 2510,

     2510,    0, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502
    } ;

static yyconst flex_int16_t yy_nxt[4094] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2502,
       44,   41,   44,  618,   41,   32, 2502,   48,   33,   50,
       50,   50,   48, 2502,   50,   50,   50,  619,  118,   73,
       73,  120,  115,   53,   73,   73,  129,  157,   53,   74,
       74,   74,  116,   77,   77,  121,  185,  158,  119,  186,
       75,  122,  187,  989,   34,   20,   21,   22,   20,   23,
      130,   25,  159,   26,   27,   28,   29,   29,   29,   30,
       75,   31,   20,  160,   77,   77,  174,   73,   73,  990,
       32,  175,   48,   33,   50,   50,   50,   74,   74,   74,

      162,  125,  188,  126,  163,   75,  127,  183,   75,  133,
      133,  165,  168,  134,  134,  134,  164,  166,  128,  171,
      169,  184,  991,  167,  176,   75,  189,  172,   75,   34,
       45,   45,  177,  173,   46,  239,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  240,   46,   46,   46,
       46,   46,   46,   46,   53,   46,   46,   54,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   55,   56,   57,
       58,   59,   60,   46,   61,   62,   46,   46,   63,   64,
       65,   66,   67,   46,   46,   68,   69,   70,   71,   46,
       46,   46,   46,   78,   77,   77,  214,  178,  269,  304,

       79,  179,   48,  215,   50,   50,   50,   80,  180,  191,
      305,  181,   81,  192,  197,   75,  224,  182,  204,  193,
       82,  194,  270,  198,  195,  196,  225,  205,   83,   84,
       85,   86,   87,   88,   89,   75,   90,  992,  237,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  238,  100,
       73,   73,  230,  234,  234,  210,  210,   73,   73,  231,
       74,   74,   74,  134,  134,  134,   73,   73,  235,  211,
      242,   75,  248,  245,  243,  251,  134,  134,  134,  246,
      249,  263,  254,  252,  278,  247,  244,  255,  256,  253,
      308,   75,  136,  279,  309,  264,  257,  993,  265,  266,

      137,  349,  267,  298,  298,  268,  318,  350,  138,  139,
      140,  141,  142,  143,  144,  212,  145,  319,  299,  146,
      147,  148,  149,  150,  151,  152,  153,  154,  258,  155,
      323,  272,  259,  324,  402,  273,  994,  300,  403,  260,
      812,  274,  261,  275,  306,  306,  276,  277,  262,  285,
      286,  287,  301,  302,  210,  210,  288,  342,  342,  307,
      343,  813,  344,  345,  345,  234,  234,  674,  211,  370,
      370,  371,  371,  394,  377,  378,  379,  346,  384,  384,
      235,  380,  392,  392,  398,  996,  372,  420,  395,  396,
      421,  347,  415,  385,  438,  399,  348,  393,  400,  400,

      407,  407,  675,  416,  997,  431,  431,  490,  439,  440,
      440,  446,  446,  401,  605,  408,  448,  448,  491,  386,
      432,  298,  298,  794,  441,  606,  447,  454,  454,  306,
      306,  449,  461,  461,  463,  463,  299,  465,  465,  470,
      795,  471,  721,  472,  307,  486,  486,  492,  492,  464,
      496,  998,  466,  473,  501,  501,  722,  497,  342,  342,
      487,  343,  493,  344,  345,  345,  510,  510,  502,  999,
      450,  498,  514,  514,  519,  519,  521,  521,  346,  533,
      533,  370,  370,  371,  371, 1000,  515, 1007,  520, 1009,
      522,  538,  538,  534,  467,  539,  539, 1010,  372,  546,

      546,  550,  550,  384,  384,  555,  555,  557,  557, 1011,
      540,  559,  559,  781,  547, 1012,  551, 1013,  385,  392,
      392, 1014,  558,  565,  565, 1015,  560,  400,  400,  572,
      572,  574,  574, 1016,  393,  576,  576,  407,  407, 1017,
      548, 1022,  401,  581,  581,  582,  575,  583,  782,  584,
      577, 1023,  408, 1024,  549,  587,  587,  601,  601,  585,
      607,  607,  611,  611, 1025,  561,  431,  431,  616,  616,
      588, 1026,  602,  440,  440,  608, 1027,  612,  625,  625,
     1028,  432,  446,  446,  630,  630,  613, 1029,  441,  448,
      448,  891,  578,  614,  631,  631,  589,  447,  454,  454,

      638,  638,  461,  461,  449,  463,  463,  615,  892,  639,
      644,  644,  465,  465, 1030,  640,  645,  645,  658,  658,
      464,  647,  647,  486,  486,  668,  668,  466,  492,  492,
      648,  673,  673,  659,  501,  501,  649, 1031,  487,  682,
      682,  510,  510,  493,  514,  514,  691,  691,  502,  519,
      519,  695,  695,  521,  521,  908,  696,  696,  515,  697,
     1032,  698, 1033,  520,  706,  706, 1034,  522,  708,  708,
      533,  533,  712,  712, 1035,  713,  909,  714,  707,  717,
      717, 1036,  709, 1037,  534,  538,  538,  539,  539,  719,
      719, 1038,  710,  718,  546,  546,  726,  726,  550,  550,

      729,  729,  540,  555,  555,  557,  557,  734,  734,  547,
      559,  559, 1039,  551,  735,  735,  736,  736,  565,  565,
      558,  744,  744,  572,  572,  560,  574,  574,  749,  749,
     1040,  737,  576,  576,  750,  750,  745,  752,  752,  581,
      581,  575,  587,  587,  760,  760, 1041,  577,  763,  763,
      765,  765,  753,  601,  601,  775,  775,  588,  607,  607,
      780,  780, 1045,  764, 1046,  766,  611,  611,  602,  784,
      784,  616,  616,  608,  625,  625,  630,  630,  631,  631,
      805,  612, 1048,  806,  638,  638, 1049,  808,  808,  644,
      644,  645,  645,  639,  814,  814,  647,  647, 1050,  640,

      809,  817,  817,  658,  658,  648,  827,  827, 1053,  815,
     1054,  649,  829,  829,  818,  668,  668, 1055,  659,  673,
      673,  840,  840,  682,  682,  853,  853,  830,  855,  855,
      691,  691,  695,  695,  706,  706,  841,  873,  873,  854,
      696,  696,  856,  697, 1056,  698,  870,  870,  707,  871,
     1057,  872,  708,  708,  712,  712, 1058,  713, 1059,  714,
      717,  717,  880,  880,  719,  719,  709,  884,  884,  726,
      726,  889,  889, 1060,  718,  729,  729,  734,  734,  735,
      735, 1061,  885,  736,  736, 1062,  890,  897,  897,  903,
      744,  744,  904,  905,  905,  749,  749, 1063,  737,  750,

      750,  910,  910,  752,  752,  745,  912,  912,  760,  760,
      763,  763,  921,  921,  765,  765,  911, 1064,  753,  922,
      922, 1082,  886,  924,  924,  764,  927,  927, 1083,  766,
      775,  775,  935,  935,  938,  938,  780,  780,  925,  941,
      941,  928,  784,  784,  955,  955, 1084,  936, 1085,  939,
      966,  966,  808,  808,  942,  814,  814,  983,  983,  956,
      984,  984,  817,  817, 1088,  809,  986,  986,  827,  827,
      815,  829,  829,  995,  995,  818, 1001, 1001, 1008, 1008,
     1089,  987, 1018, 1018, 1090, 1002,  830,  937,  971,  972,
      973, 1003, 1092,  974,  975,  976, 1019,  977,  978, 1004,

     1004,  979,  980,  981,  982,  840,  840,  853,  853, 1020,
     1020,  855,  855, 1094, 1005, 1021, 1021,  873,  873, 1095,
      841,  854, 1096,  870,  870,  856,  871, 1097,  872, 1107,
     1006,  880,  880,  884,  884, 1042, 1042, 1043, 1043,  889,
      889, 1047, 1047, 1051, 1051,  897,  897, 1109,  885,  905,
      905, 1112, 1044, 1113,  890,  910,  910, 1116, 1052, 1065,
     1065, 1079, 1079,  912,  912, 1117, 1080, 1080,  921,  921,
      911, 1086, 1086, 1118, 1066,  922,  922, 1119, 1067, 1068,
     1069, 1081, 1120, 1070, 1071, 1072, 1087, 1073, 1074,  924,
      924, 1075, 1076, 1077, 1078, 1091, 1091,  927,  927, 1093,

     1093, 1098, 1098, 1121,  925, 1100, 1100,  935,  935, 1103,
     1103, 1122,  928, 1104, 1104, 1124, 1099,  938,  938, 1125,
     1101, 1126,  936, 1106, 1106,  941,  941, 1129, 1105, 1108,
     1108, 1130,  939, 1110, 1110, 1131, 1102, 1114, 1114, 1127,
      942,  955,  955, 1123, 1123, 1132, 1128, 1136, 1111,  966,
      966, 1137, 1115, 1133, 1133, 1138,  956, 1139, 1141, 1142,
     1144, 1145, 1134, 1140, 1147, 1146, 1148, 1150, 1135, 1143,
     1152, 1155, 1149, 1156,  983,  983, 1153,  984,  984, 1154,
     1157,  986,  986, 1158, 1158, 1151, 1159, 1160, 1161, 1162,
     1163, 1164, 1165,  995,  995, 1169,  987, 1166, 1166, 1170,

     1171, 1172, 1001, 1001, 1173, 1174, 1174, 1004, 1004, 1176,
     1176, 1002, 1167, 1177, 1178, 1179, 1168, 1003, 1175, 1008,
     1008, 1180, 1005, 1181, 1182, 1183, 1184, 1184, 1187, 1188,
     1189, 1018, 1018, 1190, 1190, 1020, 1020, 1021, 1021, 1191,
     1185, 1192, 1193, 1194, 1195, 1019, 1196, 1203, 1204, 1205,
     1206, 1207, 1186, 1197, 1198, 1199, 1210, 1200, 1211, 1201,
     1208, 1208, 1202, 1212, 1213, 1213, 1215, 1216, 1042, 1042,
     1043, 1043, 1217, 1217, 1209, 1218, 1219, 1047, 1047, 1214,
     1220, 1221, 1222, 1051, 1051, 1044, 1223, 1223, 1224, 1225,
     1226, 1226, 1228, 1229, 1231, 1231, 1233, 1234, 1052, 1235,

     1230, 1236, 1236, 1238, 1239, 1227, 1065, 1065, 1241, 1232,
     1240, 1240, 1242, 1244, 1245, 1247, 1237, 1250, 1243, 1248,
     1251, 1066, 1253, 1249, 1246, 1255, 1252, 1259, 1260, 1256,
     1079, 1079, 1080, 1080, 1262, 1257, 1261, 1261, 1258, 1263,
     1254, 1264, 1265, 1086, 1086, 1266, 1266, 1081, 1267, 1268,
     1269, 1091, 1091, 1270, 1270, 1093, 1093, 1273, 1087, 1274,
     1275, 1276, 1098, 1098, 1277, 1277, 1100, 1100, 1271, 1278,
     1278, 1279, 1272, 1103, 1103, 1104, 1104, 1099, 1280, 1280,
     1281, 1101, 1106, 1106, 1108, 1108, 1282, 1110, 1110, 1284,
     1105, 1283, 1283, 1285, 1114, 1114, 1286, 1286, 1287, 1288,

     1289, 1290, 1111, 1291, 1292, 1293, 1123, 1123, 1294, 1115,
     1295, 1296, 1297, 1298, 1299, 1133, 1133, 1300, 1301, 1301,
     1303, 1304, 1305, 1306, 1134, 1307, 1308, 1309, 1310, 1311,
     1135, 1302, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1158, 1158, 1324, 1325, 1326, 1327,
     1328, 1329, 1166, 1166, 1330, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1336, 1174, 1174, 1337, 1338, 1167, 1176, 1176,
     1339, 1340, 1341, 1342, 1343, 1344, 1175, 1184, 1184, 1345,
     1345, 1346, 1347, 1348, 1349, 1190, 1190, 1350, 1351, 1351,
     1353, 1185, 1354, 1354, 1356, 1357, 1358, 1359, 1360, 1361,

     1362, 1363, 1352, 1364, 1365, 1366, 1355, 1367, 1368, 1208,
     1208, 1369, 1369, 1370, 1371, 1371, 1373, 1213, 1213, 1374,
     1374, 1375, 1376, 1209, 1217, 1217, 1377, 1378, 1372, 1379,
     1380, 1381, 1214, 1223, 1223, 1382, 1382, 1384, 1384, 1226,
     1226, 1386, 1386, 1387, 1388, 1389, 1231, 1231, 1390, 1390,
     1383, 1391, 1385, 1392, 1227, 1393, 1393, 1236, 1236, 1395,
     1395, 1232, 1396, 1397, 1397, 1240, 1240, 1399, 1400, 1401,
     1394, 1402, 1237, 1403, 1404, 1405, 1406, 1407, 1398, 1408,
     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1261, 1261, 1419, 1420, 1421, 1422, 1422, 1266, 1266, 1424,

     1425, 1426, 1270, 1270, 1427, 1427, 1428, 1429, 1430, 1431,
     1423, 1432, 1277, 1277, 1278, 1278, 1433, 1271, 1280, 1280,
     1434, 1435, 1283, 1283, 1436, 1437, 1437, 1286, 1286, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1438, 1451, 1452, 1453, 1453, 1301, 1301, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1302, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1330, 1330, 1473, 1482, 1483,
     1439, 1484, 1485, 1486, 1336, 1336, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1345, 1345, 1494, 1496, 1497, 1498, 1499,

     1500, 1351, 1351, 1495, 1501, 1501, 1502, 1354, 1354, 1503,
     1503, 1504, 1505, 1506, 1507, 1352, 1508, 1509, 1510, 1511,
     1512, 1355, 1513, 1514, 1515, 1516, 1369, 1369, 1517, 1371,
     1371, 1518, 1518, 1519, 1374, 1374, 1520, 1521, 1522, 1523,
     1524, 1525, 1526, 1372, 1382, 1382, 1527, 1527, 1384, 1384,
     1528, 1528, 1386, 1386, 1529, 1530, 1531, 1390, 1390, 1383,
     1532, 1533, 1535, 1385, 1393, 1393, 1534, 1534, 1395, 1395,
     1397, 1397, 1536, 1536, 1537, 1537, 1540, 1541, 1542, 1394,
     1543, 1544, 1545, 1546, 1547, 1398, 1548, 1548, 1551, 1538,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1560, 1561, 1561,

     1564, 1549, 1565, 1566, 1422, 1422, 1568, 1559, 1567, 1567,
     1569, 1570, 1570, 1562, 1427, 1427, 1572, 1573, 1574, 1423,
     1575, 1576, 1577, 1578, 1579, 1580, 1571, 1550, 1584, 1539,
     1437, 1437, 1581, 1581, 1582, 1582, 1585, 1586, 1587, 1588,
     1589, 1590, 1591, 1563, 1592, 1438, 1593, 1453, 1453, 1583,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
     1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
     1624, 1625, 1625, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
     1634, 1635, 1636, 1637, 1501, 1501, 1626, 1638, 1638, 1503,

     1503, 1640, 1641, 1643, 1644, 1645, 1646, 1647, 1648, 1650,
     1651, 1639, 1652, 1653, 1654, 1655, 1642, 1518, 1518, 1656,
     1656, 1658, 1659, 1659, 1661, 1661, 1663, 1663, 1665, 1649,
     1666, 1667, 1668, 1657, 1527, 1527, 1669, 1660, 1670, 1662,
     1671, 1664, 1528, 1528, 1672, 1534, 1534, 1673, 1536, 1536,
     1537, 1537, 1674, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
     1681, 1682, 1683, 1548, 1548, 1538, 1684, 1684, 1685, 1686,
     1686, 1688, 1689, 1690, 1691, 1691, 1693, 1694, 1549, 1695,
     1696, 1697, 1561, 1561, 1687, 1698, 1698, 1699, 1700, 1692,
     1701, 1702, 1567, 1567, 1703, 1703, 1705, 1562, 1570, 1570,

     1706, 1706, 1707, 1708, 1709, 1710, 1710, 1712, 1717, 1704,
     1713, 1713, 1718, 1571, 1715, 1715, 1581, 1581, 1582, 1582,
     1711, 1719, 1719, 1720, 1721, 1714, 1722, 1722, 1728, 1716,
     1725, 1725, 1729, 1583, 1730, 1723, 1731, 1732, 1732, 1726,
     1734, 1724, 1735, 1736, 1737, 1727, 1738, 1739, 1740, 1741,
     1742, 1743, 1733, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1751, 1753, 1754, 1755, 1756, 1759, 1757, 1760, 1761,
     1625, 1625, 1762, 1762, 1763, 1752, 1758, 1764, 1765, 1766,
     1767, 1768, 1769, 1770, 1771, 1626, 1772, 1773, 1638, 1638,
     1774, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,

     1783, 1784, 1639, 1785, 1785, 1787, 1788, 1789, 1790, 1791,
     1656, 1656, 1792, 1792, 1793, 1659, 1659, 1786, 1794, 1794,
     1661, 1661, 1795, 1795, 1657, 1663, 1663, 1796, 1796, 1797,
     1660, 1798, 1798, 1800, 1800, 1662, 1802, 1802, 1804, 1805,
     1664, 1806, 1807, 1808, 1674, 1674, 1799, 1809, 1801, 1810,
     1811, 1803, 1812, 1813, 1814, 1815, 1816, 1816, 1818, 1818,
     1684, 1684, 1820, 1686, 1686, 1821, 1821, 1822, 1823, 1824,
     1828, 1817, 1831, 1819, 1691, 1691, 1825, 1825, 1687, 1826,
     1826, 1829, 1829, 1832, 1698, 1698, 1833, 1834, 1835, 1692,
     1836, 1703, 1703, 1838, 1827, 1841, 1830, 1837, 1837, 1706,

     1706, 1839, 1839, 1843, 1842, 1845, 1704, 1710, 1710, 1844,
     1844, 1713, 1713, 1846, 1846, 1848, 1840, 1715, 1715, 1847,
     1847, 1849, 1711, 1719, 1719, 1850, 1714, 1851, 1722, 1722,
     1852, 1855, 1716, 1853, 1853, 1725, 1725, 1723, 1856, 1856,
     1858, 1859, 1862, 1724, 1726, 1864, 1854, 1860, 1860, 1865,
     1727, 1857, 1732, 1732, 1863, 1863, 1861, 1866, 1867, 1868,
     1869, 1870, 1871, 1872, 1873, 1874, 1875, 1733, 1876, 1877,
     1878, 1879, 1880, 1751, 1751, 1881, 1881, 1882, 1883, 1884,
     1885, 1886, 1887, 1888, 1889, 1762, 1762, 1890, 1752, 1891,
     1892, 1892, 1898, 1894, 1896, 1896, 1899, 1900, 1901, 1902,

     1903, 1774, 1774, 1904, 1893, 1895, 1905, 1905, 1897, 1907,
     1908, 1910, 1911, 1912, 1913, 1914, 1915, 1917, 1785, 1785,
     1906, 1916, 1916, 1918, 1919, 1920, 1921, 1792, 1792, 1922,
     1923, 1909, 1786, 1794, 1794, 1795, 1795, 1796, 1796, 1798,
     1798, 1924, 1924, 1800, 1800, 1925, 1925, 1802, 1802, 1926,
     1926, 1927, 1928, 1931, 1799, 1929, 1929, 1932, 1801, 1933,
     1934, 1935, 1803, 1936, 1937, 1938, 1939, 1816, 1816, 1942,
     1930, 1940, 1940, 1818, 1818, 1941, 1941, 1821, 1821, 1943,
     1944, 1945, 1817, 1825, 1825, 1826, 1826, 1947, 1819, 1946,
     1946, 1829, 1829, 1948, 1948, 1949, 1950, 1951, 1952, 1953,

     1827, 1954, 1837, 1837, 1955, 1955, 1830, 1839, 1839, 1957,
     1957, 1958, 1959, 1960, 1844, 1844, 1961, 1846, 1846, 1956,
     1847, 1847, 1840, 1962, 1963, 1964, 1965, 1966, 1966, 1853,
     1853, 1967, 1968, 1968, 1856, 1856, 1969, 1970, 1971, 1860,
     1860, 1972, 1854, 1973, 1863, 1863, 1974, 1857, 1861, 1975,
     1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1881, 1881, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1998, 1892, 1892, 1999, 1999, 2000,
     2001, 1896, 1896, 2002, 2002, 2003, 2004, 2005, 2006, 1893,
     2007, 2008, 2009, 1905, 1905, 1897, 2010, 2010, 2011, 2012,

     2013, 2018, 2014, 2019, 2020, 2021, 2021, 1906, 2025, 2015,
     2023, 2023, 1916, 1916, 2016, 2026, 2017, 2027, 2028, 2022,
     2029, 2030, 2031, 2032, 2024, 1924, 1924, 1925, 1925, 1926,
     1926, 2033, 2034, 1929, 1929, 2035, 2035, 2036, 2037, 2038,
     2039, 2040, 2041, 2042, 2043, 2043, 2045, 2046, 1930, 1940,
     1940, 1941, 1941, 2047, 2048, 2049, 1946, 1946, 2050, 2044,
     1948, 1948, 2051, 2052, 2053, 2054, 2055, 2056, 1955, 1955,
     2057, 2057, 1957, 1957, 2058, 2059, 2059, 2061, 2062, 2063,
     2064, 2065, 2066, 1956, 1966, 1966, 2067, 1968, 1968, 2068,
     2060, 2069, 2070, 2071, 2071, 2072, 2073, 2074, 2075, 2076,

     2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2090, 2091, 1999, 1999, 2092, 2093, 2002,
     2002, 2094, 2096, 2097, 2098, 2099, 2100, 2100, 2102, 2102,
     2010, 2010, 2104, 2095, 2105, 2106, 2107, 2108, 2109, 2110,
     2101, 2111, 2103, 2112, 2113, 2021, 2021, 2114, 2114, 2023,
     2023, 2115, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2022,
     2122, 2123, 2124, 2024, 2125, 2035, 2035, 2126, 2127, 2127,
     2129, 2130, 2130, 2132, 2132, 2134, 2135, 2135, 2043, 2043,
     2137, 2137, 2138, 2128, 2139, 2140, 2131, 2141, 2133, 2142,
     2145, 2136, 2146, 2044, 2143, 2143, 2147, 2148, 2149, 2150,

     2057, 2057, 2151, 2059, 2059, 2152, 2152, 2153, 2154, 2144,
     2155, 2155, 2157, 2158, 2159, 2160, 2161, 2162, 2060, 2071,
     2071, 2163, 2164, 2165, 2166, 2156, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2175, 2176, 2177, 2177, 2179, 2180,
     2180, 2182, 2182, 2184, 2185, 2186, 2187, 2188, 2189, 2100,
     2100, 2178, 2194, 2181, 2197, 2183, 2190, 2190, 2198, 2191,
     2199, 2192, 2200, 2101, 2102, 2102, 2193, 2193, 2195, 2195,
     2201, 2202, 2203, 2204, 2114, 2114, 2115, 2115, 2103, 2205,
     2206, 2206, 2196, 2208, 2208, 2210, 2211, 2211, 2213, 2214,
     2215, 2216, 2216, 2218, 2207, 2219, 2221, 2209, 2127, 2127,

     2212, 2220, 2220, 2130, 2130, 2224, 2217, 2222, 2222, 2132,
     2132, 2223, 2223, 2128, 2135, 2135, 2225, 2225, 2131, 2137,
     2137, 2226, 2227, 2228, 2133, 2229, 2230, 2143, 2143, 2136,
     2231, 2231, 2232, 2232, 2234, 2235, 2235, 2237, 2238, 2238,
     2240, 2240, 2144, 2242, 2152, 2152, 2243, 2233, 2244, 2246,
     2236, 2155, 2155, 2239, 2247, 2241, 2245, 2245, 2248, 2249,
     2250, 2251, 2252, 2253, 2254, 2255, 2156, 2256, 2257, 2258,
     2259, 2260, 2177, 2177, 2261, 2261, 2262, 2180, 2180, 2263,
     2263, 2182, 2182, 2264, 2264, 2265, 2266, 2178, 2267, 2267,
     2269, 2181, 2270, 2271, 2272, 2183, 2190, 2190, 2273, 2191,

     2274, 2192, 2268, 2193, 2193, 2195, 2195, 2275, 2275, 2276,
     2276, 2278, 2279, 2279, 2281, 2282, 2282, 2284, 2285, 2196,
     2286, 2287, 2287, 2277, 2206, 2206, 2280, 2289, 2289, 2283,
     2208, 2208, 2290, 2290, 2291, 2288, 2211, 2211, 2207, 2295,
     2292, 2292, 2302, 2293, 2209, 2294, 2297, 2297, 2299, 2299,
     2212, 2296, 2216, 2216, 2301, 2301, 2303, 2303, 2220, 2220,
     2305, 2298, 2306, 2300, 2222, 2222, 2307, 2217, 2223, 2223,
     2310, 2304, 2225, 2225, 2308, 2308, 2311, 2312, 2231, 2231,
     2232, 2232, 2313, 2313, 2314, 2235, 2235, 2315, 2315, 2309,
     2316, 2238, 2238, 2317, 2317, 2233, 2240, 2240, 2318, 2318,

     2236, 2319, 2320, 2321, 2321, 2323, 2239, 2245, 2245, 2324,
     2325, 2241, 2326, 2327, 2327, 2329, 2330, 2331, 2322, 2332,
     2333, 2261, 2261, 2334, 2263, 2263, 2264, 2264, 2328, 2335,
     2335, 2337, 2337, 2267, 2267, 2339, 2339, 2340, 2341, 2342,
     2342, 2344, 2349, 2336, 2351, 2338, 2354, 2268, 2275, 2275,
     2276, 2276, 2356, 2343, 2345, 2345, 2346, 2346, 2279, 2279,
     2348, 2348, 2282, 2282, 2277, 2350, 2350, 2352, 2352, 2357,
     2347, 2358, 2280, 2287, 2287, 2359, 2283, 2355, 2355, 2289,
     2289, 2353, 2290, 2290, 2360, 2292, 2292, 2288, 2293, 2363,
     2294, 2297, 2297, 2361, 2361, 2299, 2299, 2362, 2362, 2301,

     2301, 2303, 2303, 2364, 2364, 2369, 2298, 2365, 2365, 2377,
     2300, 2367, 2367, 2308, 2308, 2378, 2304, 2370, 2370, 2371,
     2371, 2379, 2366, 2373, 2373, 2380, 2368, 2382, 2309, 2375,
     2375, 2313, 2313, 2383, 2372, 2315, 2315, 2384, 2374, 2317,
     2317, 2318, 2318, 2386, 2376, 2321, 2321, 2381, 2381, 2327,
     2327, 2385, 2385, 2387, 2388, 2389, 2390, 2391, 2335, 2335,
     2322, 2392, 2392, 2404, 2328, 2337, 2337, 2393, 2393, 2339,
     2339, 2406, 2336, 2394, 2394, 2396, 2396, 2342, 2342, 2338,
     2398, 2398, 2399, 2399, 2345, 2345, 2409, 2395, 2410, 2397,
     2415, 2343, 2346, 2346, 2401, 2401, 2400, 2348, 2348, 2402,

     2402, 2350, 2350, 2352, 2352, 2419, 2347, 2405, 2405, 2355,
     2355, 2407, 2407, 2403, 2361, 2361, 2420, 2353, 2362, 2362,
     2411, 2411, 2364, 2364, 2421, 2408, 2365, 2365, 2413, 2413,
     2367, 2367, 2414, 2414, 2422, 2412, 2370, 2370, 2371, 2371,
     2423, 2366, 2416, 2416, 2424, 2368, 2373, 2373, 2417, 2417,
     2375, 2375, 2425, 2372, 2418, 2418, 2381, 2381, 2385, 2385,
     2426, 2374, 2427, 2428, 2429, 2376, 2392, 2392, 2393, 2393,
     2394, 2394, 2430, 2430, 2396, 2396, 2431, 2431, 2436, 2432,
     2437, 2433, 2398, 2398, 2395, 2399, 2399, 2448, 2397, 2434,
     2434, 2401, 2401, 2402, 2402, 2435, 2435, 2405, 2405, 2400,

     2407, 2407, 2438, 2438, 2439, 2439, 2449, 2403, 2441, 2441,
     2411, 2411, 2443, 2443, 2408, 2413, 2413, 2450, 2440, 2414,
     2414, 2451, 2442, 2444, 2444, 2412, 2416, 2416, 2417, 2417,
     2418, 2418, 2446, 2446, 2452, 2453, 2454, 2455, 2445, 2430,
     2430, 2431, 2431, 2456, 2432, 2457, 2433, 2447, 2434, 2434,
     2435, 2435, 2458, 2438, 2438, 2439, 2439, 2459, 2459, 2441,
     2441, 2460, 2460, 2443, 2443, 2444, 2444, 2461, 2461, 2440,
     2446, 2446, 2465, 2442, 2462, 2462, 2463, 2463, 2466, 2466,
     2445, 2468, 2468, 2470, 2471, 2447, 2472, 2473, 2473, 2459,
     2459, 2464, 2480, 2467, 2460, 2460, 2469, 2461, 2461, 2462,

     2462, 2474, 2463, 2463, 2475, 2475, 2476, 2476, 2466, 2466,
     2478, 2478, 2468, 2468, 2479, 2479, 2481, 2464, 2482, 2473,
     2473, 2477, 2485, 2467, 2483, 2483, 2486, 2469, 2475, 2475,
     2476, 2476, 2487, 2474, 2484, 2484, 2478, 2478, 2479, 2479,
     2483, 2483, 2484, 2484, 2488, 2477, 2489, 2490, 2491, 2491,
     2493, 2493, 2495, 2491, 2491, 2496, 2496, 2493, 2493, 2497,
     2497, 2498,   46, 2492,  988, 2494, 2496, 2496, 2492, 2497,
     2497,  985, 2494, 2499, 2499, 2499, 2499, 2501, 2501, 2501,
     2501,  970,  969,  968,  967,  965,  964, 2500,  963, 2500,
       24,   24,   24,   24,   24,   35,   35,   35,   35,   35,

       36,   36,   36,   36,   36,   37,   37,   37,   37,   37,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       42,   42,   42,   42,   42,  103,  103,  962,  103,  103,
      104,  104,  104,  961,  104,  105,  105,  105,  105,  960,
      959,  958,  957,  954,  953,  952,  951,  950,  949,  948,
      947,  946,  945,  944,  943,  940,  934,  933,  932,  931,
      930,  929,  926,  923,  920,  919,  918,  917,  916,  915,
      914,  913,  907,  906,  902,  901,  900,  899,  898,  896,
      895,  894,  893,  888,  887,  883,  882,  881,  879,  878,
      877,  876,  875,  874,  869,  868,  867,  866,  865,  864,

      863,  862,  861,  860,  859,  858,  857,  852,  851,  850,
      849,  848,  847,  846,  845,  844,  843,  842,  839,  838,
      837,  836,  835,  834,  833,  832,  831,  828,  826,  825,
      824,  823,  822,  821,  820,  819,  816,  811,  810,  807,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  793,
      792,  791,  790,  789,  788,  787,  786,  785,  783,  779,
      778,  777,  776,  774,  773,  772,  771,  770,  769,  768,
      767,  762,  761,  759,  758,  757,  756,  755,  754,  751,
      748,  747,  746,  743,  742,  741,  740,  739,  738,  733,
      732,  731,  730,  728,  727,  725,  724,  723,  720,  716,

      715,  711,  705,  704,  703,  702,  701,  700,  699,  694,
      693,  692,  690,  689,  688,  687,  686,  685,  684,  683,
      681,  680,  679,  678,  677,  676,  672,  671,  670,  669,
      667,  666,  665,  664,  663,  662,  661,  660,  657,  656,
      655,  654,  653,  652,  651,  650,  646,  643,  642,  641,
      637,  636,  635,  634,  633,  632,  629,  628,  627,  626,
      624,  623,  622,  621,  620,  617,  610,  609,  604,  603,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  586,  580,  579,  573,  571,  570,  569,  568,  567,
      566,  564,  563,  562,  556,  554,  553,  552,  545,  544,

      543,  542,  541,  537,  536,  535,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  518,  517,  516,  513,
      512,  511,  509,  508,  507,  506,  505,  504,  503,  500,
      499,  495,  494,  489,  488,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  469,  468,  462,
      460,  459,  458,  457,  456,  455,  453,  452,  451,  445,
      444,  443,  442,  437,  436,  435,  434,  433,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  419,  418,  417,
      414,  413,  412,  411,  410,  409,  406,  405,  404,  397,
      391,  390,  389,  388,  387,  383,  382,  381,  376,  375,

      374,  373,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  322,  321,
      320,  317,  316,  315,  314,  313,  312,  311,  310,  303,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  284,
      283,  282,  281,  280,  271,  250,  241,  236,  233,  232,
      229,  228,  227,  226,  223,  222,  221,  220,  219,  218,
      217,  216,  213,  209,  208,  207,  206,  203,  202,  201,
      200,  200,  199,  190,  170,  161,  156,  135,  132,  131,

      124,  123,  117,  114,  113,  112,  111,  110,  109,  108,
      102,  101,   76,  107,  106,  102,  101,   76,   72,   72,
     2502,   35,   35,   35,   35,   35,   35,   19, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502

    } ;

static yyconst flex_int16_t yy_chk[4094] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,  434,   16,    1,    0,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,  434,   64,   27,
       27,   65,   62,   26,   73,   73,   69,   83,   47,   27,
       27,   27,   62,   77,   77,   65,   95,   83,   64,   95,
       27,   65,   95,  821,    1,    2,    2,    2,    2,    2,
       69,    2,   84,    2,    2,    2,    2,    2,    2,    2,
       27,    2,    2,   84,   29,   29,   91,   48,   48,  822,
        2,   91,   29,    2,   29,   29,   29,   48,   48,   48,

       86,   68,   96,   68,   86,   29,   68,   94,   48,   75,
       75,   87,   88,   75,   75,   75,   86,   87,   68,   90,
       88,   94,  823,   87,   92,   29,   96,   90,   48,    2,
       21,   21,   92,   90,   21,  139,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  139,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   30,   50,   50,  117,   93,  151,  174,

       30,   93,   50,  117,   50,   50,   50,   30,   93,   98,
      174,   93,   30,   98,   99,   50,  126,   93,  110,   98,
       30,   98,  151,   99,   98,   98,  126,  110,   30,   30,
       30,   30,   30,   30,   30,   50,   30,  825,  138,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  138,   30,
       74,   74,  131,  136,  136,  115,  115,  200,  200,  131,
       74,   74,   74,  133,  133,  133,  134,  134,  136,  115,
      141,   74,  143,  142,  141,  145,  134,  134,  134,  142,
      143,  149,  146,  145,  154,  142,  141,  146,  147,  145,
      176,   74,   79,  154,  176,  149,  147,  826,  149,  150,

       79,  213,  150,  171,  171,  150,  186,  213,   79,   79,
       79,   79,   79,   79,   79,  115,   79,  186,  171,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  148,   79,
      190,  153,  148,  190,  256,  153,  828,  172,  256,  148,
      643,  153,  148,  153,  175,  175,  153,  153,  148,  161,
      161,  161,  172,  172,  210,  210,  161,  211,  211,  175,
      211,  643,  211,  212,  212,  234,  234,  494,  210,  235,
      235,  236,  236,  252,  241,  241,  241,  212,  245,  245,
      234,  241,  251,  251,  254,  831,  236,  271,  252,  252,
      271,  212,  267,  245,  287,  254,  212,  251,  255,  255,

      260,  260,  494,  267,  832,  281,  281,  329,  287,  288,
      288,  293,  293,  255,  426,  260,  294,  294,  329,  245,
      281,  298,  298,  624,  288,  426,  293,  299,  299,  306,
      306,  294,  307,  307,  309,  309,  298,  310,  310,  313,
      624,  313,  542,  313,  306,  326,  326,  330,  330,  309,
      333,  833,  310,  313,  336,  336,  542,  333,  342,  342,
      326,  342,  330,  342,  345,  345,  346,  346,  336,  834,
      294,  333,  350,  350,  354,  354,  355,  355,  345,  366,
      366,  370,  370,  371,  371,  835,  350,  839,  354,  842,
      355,  372,  372,  366,  310,  373,  373,  844,  371,  379,

      379,  380,  380,  384,  384,  385,  385,  387,  387,  845,
      373,  388,  388,  609,  379,  846,  380,  847,  384,  392,
      392,  848,  387,  393,  393,  849,  388,  400,  400,  401,
      401,  403,  403,  850,  392,  404,  404,  407,  407,  851,
      379,  857,  400,  408,  408,  409,  403,  409,  609,  409,
      404,  858,  407,  859,  379,  411,  411,  423,  423,  409,
      427,  427,  430,  430,  860,  388,  431,  431,  432,  432,
      411,  863,  423,  440,  440,  427,  864,  430,  441,  441,
      865,  431,  446,  446,  447,  447,  430,  866,  440,  448,
      448,  728,  404,  430,  449,  449,  411,  446,  454,  454,

      458,  458,  461,  461,  448,  463,  463,  430,  728,  458,
      464,  464,  465,  465,  867,  458,  466,  466,  477,  477,
      463,  468,  468,  486,  486,  487,  487,  465,  492,  492,
      468,  493,  493,  477,  501,  501,  468,  868,  486,  502,
      502,  510,  510,  492,  514,  514,  515,  515,  501,  519,
      519,  520,  520,  521,  521,  748,  522,  522,  514,  522,
      869,  522,  871,  519,  530,  530,  872,  521,  531,  531,
      533,  533,  534,  534,  874,  534,  748,  534,  530,  537,
      537,  875,  531,  878,  533,  538,  538,  539,  539,  540,
      540,  879,  531,  537,  546,  546,  547,  547,  550,  550,

      551,  551,  539,  555,  555,  557,  557,  558,  558,  546,
      559,  559,  881,  550,  560,  560,  561,  561,  565,  565,
      557,  569,  569,  572,  572,  559,  574,  574,  575,  575,
      882,  561,  576,  576,  577,  577,  569,  579,  579,  581,
      581,  574,  587,  587,  588,  588,  883,  576,  591,  591,
      592,  592,  579,  601,  601,  602,  602,  587,  607,  607,
      608,  608,  887,  591,  888,  592,  611,  611,  601,  612,
      612,  616,  616,  607,  625,  625,  630,  630,  631,  631,
      637,  611,  891,  637,  638,  638,  892,  640,  640,  644,
      644,  645,  645,  638,  646,  646,  647,  647,  893,  638,

      640,  649,  649,  658,  658,  647,  659,  659,  895,  646,
      896,  647,  661,  661,  649,  668,  668,  898,  658,  673,
      673,  675,  675,  682,  682,  688,  688,  661,  689,  689,
      691,  691,  695,  695,  706,  706,  675,  709,  709,  688,
      696,  696,  689,  696,  899,  696,  707,  707,  706,  707,
      900,  707,  708,  708,  712,  712,  901,  712,  902,  712,
      717,  717,  718,  718,  719,  719,  708,  723,  723,  726,
      726,  727,  727,  903,  717,  729,  729,  734,  734,  735,
      735,  904,  723,  736,  736,  906,  727,  737,  737,  743,
      744,  744,  743,  745,  745,  749,  749,  907,  736,  750,

      750,  751,  751,  752,  752,  744,  753,  753,  760,  760,
      763,  763,  764,  764,  765,  765,  751,  908,  752,  766,
      766,  914,  723,  768,  768,  763,  770,  770,  915,  765,
      775,  775,  778,  778,  779,  779,  780,  780,  768,  782,
      782,  770,  784,  784,  797,  797,  916,  778,  917,  779,
      807,  807,  808,  808,  782,  814,  814,  815,  815,  797,
      816,  816,  817,  817,  919,  808,  819,  819,  827,  827,
      814,  829,  829,  830,  830,  817,  836,  836,  841,  841,
      920,  819,  852,  852,  923,  836,  829,  778,  813,  813,
      813,  836,  926,  813,  813,  813,  852,  813,  813,  837,

      837,  813,  813,  813,  813,  840,  840,  853,  853,  854,
      854,  855,  855,  929,  837,  856,  856,  873,  873,  930,
      840,  853,  931,  870,  870,  855,  870,  932,  870,  940,
      837,  880,  880,  884,  884,  885,  885,  886,  886,  889,
      889,  890,  890,  894,  894,  897,  897,  943,  884,  905,
      905,  945,  886,  946,  889,  910,  910,  948,  894,  909,
      909,  911,  911,  912,  912,  949,  913,  913,  921,  921,
      910,  918,  918,  950,  909,  922,  922,  951,  909,  909,
      909,  913,  952,  909,  909,  909,  918,  909,  909,  924,
      924,  909,  909,  909,  909,  925,  925,  927,  927,  928,

      928,  933,  933,  953,  924,  934,  934,  935,  935,  936,
      936,  954,  927,  937,  937,  957,  933,  938,  938,  958,
      934,  960,  935,  939,  939,  941,  941,  963,  937,  942,
      942,  964,  938,  944,  944,  965,  934,  947,  947,  961,
      941,  955,  955,  956,  956,  967,  961,  969,  944,  966,
      966,  970,  947,  968,  968,  971,  955,  972,  973,  974,
      975,  976,  968,  972,  977,  976,  978,  979,  968,  974,
      980,  981,  978,  982,  983,  983,  980,  984,  984,  980,
      985,  986,  986,  987,  987,  979,  988,  989,  990,  991,
      992,  993,  994,  995,  995,  997,  986,  996,  996,  998,

      999, 1000, 1001, 1001, 1002, 1003, 1003, 1004, 1004, 1005,
     1005, 1001,  996, 1006, 1007, 1009,  996, 1001, 1003, 1008,
     1008, 1010, 1004, 1011, 1012, 1013, 1014, 1014, 1015, 1016,
     1017, 1018, 1018, 1019, 1019, 1020, 1020, 1021, 1021, 1022,
     1014, 1023, 1024, 1025, 1026, 1018, 1027, 1028, 1029, 1030,
     1031, 1032, 1014, 1027, 1027, 1027, 1036, 1027, 1037, 1027,
     1035, 1035, 1027, 1038, 1039, 1039, 1040, 1041, 1042, 1042,
     1043, 1043, 1044, 1044, 1035, 1045, 1046, 1047, 1047, 1039,
     1048, 1049, 1050, 1051, 1051, 1043, 1052, 1052, 1053, 1054,
     1055, 1055, 1056, 1057, 1058, 1058, 1059, 1060, 1051, 1061,

     1057, 1062, 1062, 1063, 1064, 1055, 1065, 1065, 1067, 1058,
     1066, 1066, 1068, 1069, 1070, 1071, 1062, 1073, 1068, 1072,
     1074, 1065, 1075, 1072, 1070, 1076, 1074, 1077, 1078, 1076,
     1079, 1079, 1080, 1080, 1082, 1076, 1081, 1081, 1076, 1083,
     1075, 1084, 1085, 1086, 1086, 1087, 1087, 1080, 1088, 1089,
     1090, 1091, 1091, 1092, 1092, 1093, 1093, 1094, 1086, 1095,
     1096, 1097, 1098, 1098, 1099, 1099, 1100, 1100, 1092, 1101,
     1101, 1102, 1092, 1103, 1103, 1104, 1104, 1098, 1105, 1105,
     1107, 1100, 1106, 1106, 1108, 1108, 1109, 1110, 1110, 1112,
     1104, 1111, 1111, 1113, 1114, 1114, 1115, 1115, 1116, 1117,

     1118, 1119, 1110, 1120, 1121, 1122, 1123, 1123, 1126, 1114,
     1127, 1128, 1129, 1130, 1132, 1133, 1133, 1134, 1135, 1135,
     1136, 1138, 1139, 1140, 1133, 1141, 1142, 1143, 1144, 1145,
     1133, 1135, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1158, 1159, 1160, 1161, 1163,
     1164, 1165, 1166, 1166, 1167, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1173, 1174, 1174, 1175, 1177, 1166, 1176, 1176,
     1178, 1179, 1180, 1181, 1182, 1183, 1174, 1184, 1184, 1185,
     1185, 1186, 1187, 1188, 1189, 1190, 1190, 1191, 1192, 1192,
     1193, 1184, 1194, 1194, 1195, 1196, 1197, 1198, 1199, 1200,

     1201, 1202, 1192, 1203, 1204, 1205, 1194, 1206, 1207, 1208,
     1208, 1209, 1209, 1210, 1211, 1211, 1212, 1213, 1213, 1214,
     1214, 1215, 1216, 1208, 1217, 1217, 1218, 1219, 1211, 1220,
     1221, 1222, 1213, 1223, 1223, 1224, 1224, 1225, 1225, 1226,
     1226, 1227, 1227, 1228, 1229, 1230, 1231, 1231, 1232, 1232,
     1224, 1233, 1225, 1234, 1226, 1235, 1235, 1236, 1236, 1237,
     1237, 1231, 1238, 1239, 1239, 1240, 1240, 1241, 1242, 1243,
     1235, 1244, 1236, 1245, 1246, 1247, 1248, 1249, 1239, 1250,
     1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1261, 1262, 1263, 1264, 1265, 1265, 1266, 1266, 1267,

     1268, 1269, 1270, 1270, 1271, 1271, 1272, 1273, 1274, 1275,
     1265, 1276, 1277, 1277, 1278, 1278, 1279, 1270, 1280, 1280,
     1281, 1282, 1283, 1283, 1284, 1285, 1285, 1286, 1286, 1287,
     1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1285, 1298, 1299, 1300, 1300, 1301, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1301, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1330, 1330, 1320, 1331, 1332,
     1285, 1333, 1334, 1335, 1336, 1336, 1337, 1338, 1339, 1340,
     1341, 1343, 1344, 1345, 1345, 1344, 1346, 1347, 1348, 1349,

     1350, 1351, 1351, 1344, 1352, 1352, 1353, 1354, 1354, 1355,
     1355, 1356, 1357, 1358, 1359, 1351, 1360, 1361, 1362, 1363,
     1364, 1354, 1365, 1366, 1367, 1368, 1369, 1369, 1370, 1371,
     1371, 1372, 1372, 1373, 1374, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1381, 1371, 1382, 1382, 1383, 1383, 1384, 1384,
     1385, 1385, 1386, 1386, 1387, 1388, 1389, 1390, 1390, 1382,
     1391, 1392, 1396, 1384, 1393, 1393, 1394, 1394, 1395, 1395,
     1397, 1397, 1398, 1398, 1399, 1399, 1400, 1401, 1402, 1393,
     1403, 1404, 1405, 1406, 1407, 1397, 1408, 1408, 1409, 1399,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1418,

     1419, 1408, 1420, 1421, 1422, 1422, 1424, 1416, 1423, 1423,
     1425, 1426, 1426, 1418, 1427, 1427, 1428, 1429, 1430, 1422,
     1431, 1432, 1433, 1434, 1435, 1436, 1426, 1408, 1440, 1399,
     1437, 1437, 1438, 1438, 1439, 1439, 1444, 1445, 1446, 1447,
     1448, 1449, 1450, 1418, 1451, 1437, 1452, 1453, 1453, 1439,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
     1464, 1465, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1481, 1482, 1483, 1484, 1486,
     1487, 1488, 1488, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
     1497, 1498, 1499, 1500, 1501, 1501, 1488, 1502, 1502, 1503,

     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1502, 1514, 1515, 1516, 1517, 1505, 1518, 1518, 1519,
     1519, 1520, 1521, 1521, 1522, 1522, 1523, 1523, 1524, 1511,
     1525, 1526, 1529, 1519, 1527, 1527, 1530, 1521, 1531, 1522,
     1532, 1523, 1528, 1528, 1533, 1534, 1534, 1535, 1536, 1536,
     1537, 1537, 1538, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1548, 1537, 1549, 1549, 1550, 1551,
     1551, 1552, 1553, 1554, 1555, 1555, 1556, 1557, 1548, 1558,
     1559, 1560, 1561, 1561, 1551, 1562, 1562, 1563, 1564, 1555,
     1565, 1566, 1567, 1567, 1568, 1568, 1569, 1561, 1570, 1570,

     1571, 1571, 1572, 1573, 1574, 1575, 1575, 1576, 1579, 1568,
     1577, 1577, 1580, 1570, 1578, 1578, 1581, 1581, 1582, 1582,
     1575, 1583, 1583, 1584, 1585, 1577, 1587, 1587, 1589, 1578,
     1588, 1588, 1590, 1582, 1591, 1587, 1592, 1593, 1593, 1588,
     1594, 1587, 1595, 1596, 1597, 1588, 1598, 1599, 1600, 1601,
     1602, 1605, 1593, 1606, 1607, 1608, 1610, 1612, 1613, 1614,
     1615, 1615, 1616, 1617, 1618, 1619, 1622, 1621, 1623, 1624,
     1625, 1625, 1626, 1626, 1627, 1615, 1621, 1628, 1629, 1630,
     1631, 1632, 1633, 1634, 1635, 1625, 1636, 1637, 1638, 1638,
     1639, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,

     1648, 1649, 1638, 1650, 1650, 1651, 1652, 1653, 1654, 1655,
     1656, 1656, 1657, 1657, 1658, 1659, 1659, 1650, 1660, 1660,
     1661, 1661, 1662, 1662, 1656, 1663, 1663, 1664, 1664, 1665,
     1659, 1666, 1666, 1667, 1667, 1661, 1668, 1668, 1669, 1670,
     1663, 1671, 1672, 1673, 1674, 1674, 1666, 1675, 1667, 1676,
     1677, 1668, 1678, 1679, 1680, 1681, 1682, 1682, 1683, 1683,
     1684, 1684, 1685, 1686, 1686, 1687, 1687, 1688, 1689, 1690,
     1694, 1682, 1696, 1683, 1691, 1691, 1692, 1692, 1686, 1693,
     1693, 1695, 1695, 1697, 1698, 1698, 1699, 1700, 1701, 1691,
     1702, 1703, 1703, 1705, 1693, 1708, 1695, 1704, 1704, 1706,

     1706, 1707, 1707, 1709, 1708, 1712, 1703, 1710, 1710, 1711,
     1711, 1713, 1713, 1714, 1714, 1717, 1707, 1715, 1715, 1716,
     1716, 1718, 1710, 1719, 1719, 1720, 1713, 1721, 1722, 1722,
     1723, 1726, 1715, 1724, 1724, 1725, 1725, 1722, 1727, 1727,
     1728, 1729, 1731, 1722, 1725, 1734, 1724, 1730, 1730, 1735,
     1725, 1727, 1732, 1732, 1733, 1733, 1730, 1736, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1744, 1745, 1732, 1746, 1747,
     1748, 1749, 1750, 1751, 1751, 1752, 1752, 1753, 1754, 1755,
     1757, 1758, 1759, 1760, 1761, 1762, 1762, 1763, 1751, 1764,
     1765, 1765, 1768, 1766, 1767, 1767, 1769, 1770, 1771, 1772,

     1773, 1774, 1774, 1775, 1765, 1766, 1776, 1776, 1767, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1784, 1787, 1785, 1785,
     1776, 1786, 1786, 1788, 1789, 1790, 1791, 1792, 1792, 1793,
     1797, 1778, 1785, 1794, 1794, 1795, 1795, 1796, 1796, 1798,
     1798, 1799, 1799, 1800, 1800, 1801, 1801, 1802, 1802, 1803,
     1803, 1804, 1805, 1807, 1798, 1806, 1806, 1808, 1800, 1809,
     1810, 1811, 1802, 1812, 1813, 1814, 1815, 1816, 1816, 1820,
     1806, 1817, 1817, 1818, 1818, 1819, 1819, 1821, 1821, 1822,
     1823, 1824, 1816, 1825, 1825, 1826, 1826, 1828, 1818, 1827,
     1827, 1829, 1829, 1830, 1830, 1831, 1832, 1833, 1834, 1835,

     1826, 1836, 1837, 1837, 1838, 1838, 1829, 1839, 1839, 1840,
     1840, 1841, 1842, 1843, 1844, 1844, 1845, 1846, 1846, 1838,
     1847, 1847, 1839, 1848, 1849, 1850, 1851, 1852, 1852, 1853,
     1853, 1854, 1855, 1855, 1856, 1856, 1857, 1858, 1859, 1860,
     1860, 1861, 1853, 1862, 1863, 1863, 1864, 1856, 1860, 1865,
     1866, 1867, 1868, 1869, 1870, 1872, 1873, 1874, 1875, 1876,
     1877, 1878, 1879, 1880, 1881, 1881, 1882, 1883, 1884, 1885,
     1887, 1888, 1889, 1890, 1891, 1892, 1892, 1893, 1893, 1894,
     1895, 1896, 1896, 1897, 1897, 1898, 1899, 1900, 1901, 1892,
     1902, 1903, 1904, 1905, 1905, 1896, 1906, 1906, 1907, 1908,

     1909, 1910, 1909, 1911, 1912, 1913, 1913, 1905, 1915, 1909,
     1914, 1914, 1916, 1916, 1909, 1917, 1909, 1918, 1919, 1913,
     1920, 1921, 1922, 1923, 1914, 1924, 1924, 1925, 1925, 1926,
     1926, 1927, 1928, 1929, 1929, 1930, 1930, 1931, 1932, 1933,
     1934, 1935, 1936, 1937, 1938, 1938, 1939, 1942, 1929, 1940,
     1940, 1941, 1941, 1943, 1944, 1945, 1946, 1946, 1947, 1938,
     1948, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1955,
     1956, 1956, 1957, 1957, 1958, 1959, 1959, 1960, 1961, 1962,
     1963, 1964, 1965, 1955, 1966, 1966, 1967, 1968, 1968, 1969,
     1959, 1970, 1971, 1972, 1972, 1973, 1974, 1976, 1979, 1981,

     1982, 1983, 1984, 1985, 1987, 1988, 1989, 1990, 1991, 1992,
     1993, 1994, 1995, 1996, 1998, 1999, 1999, 2000, 2001, 2002,
     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2008, 2009, 2009,
     2010, 2010, 2011, 2003, 2012, 2013, 2014, 2015, 2016, 2017,
     2008, 2018, 2009, 2019, 2020, 2021, 2021, 2022, 2022, 2023,
     2023, 2024, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2021,
     2031, 2032, 2033, 2023, 2034, 2035, 2035, 2036, 2037, 2037,
     2038, 2039, 2039, 2040, 2040, 2041, 2042, 2042, 2043, 2043,
     2044, 2044, 2045, 2037, 2046, 2047, 2039, 2048, 2040, 2049,
     2051, 2042, 2052, 2043, 2050, 2050, 2053, 2054, 2055, 2056,

     2057, 2057, 2058, 2059, 2059, 2060, 2060, 2061, 2062, 2050,
     2063, 2063, 2064, 2065, 2066, 2067, 2068, 2070, 2059, 2071,
     2071, 2072, 2073, 2074, 2075, 2063, 2076, 2077, 2078, 2079,
     2080, 2082, 2084, 2087, 2088, 2089, 2090, 2090, 2091, 2092,
     2092, 2093, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
     2100, 2090, 2104, 2092, 2106, 2093, 2101, 2101, 2107, 2101,
     2108, 2101, 2109, 2100, 2102, 2102, 2103, 2103, 2105, 2105,
     2110, 2111, 2112, 2113, 2114, 2114, 2115, 2115, 2102, 2116,
     2117, 2117, 2105, 2118, 2118, 2119, 2120, 2120, 2121, 2122,
     2123, 2124, 2124, 2125, 2117, 2126, 2129, 2118, 2127, 2127,

     2120, 2128, 2128, 2130, 2130, 2134, 2124, 2131, 2131, 2132,
     2132, 2133, 2133, 2127, 2135, 2135, 2136, 2136, 2130, 2137,
     2137, 2138, 2139, 2140, 2132, 2141, 2142, 2143, 2143, 2135,
     2144, 2144, 2145, 2145, 2146, 2147, 2147, 2148, 2149, 2149,
     2150, 2150, 2143, 2151, 2152, 2152, 2153, 2145, 2154, 2157,
     2147, 2155, 2155, 2149, 2160, 2150, 2156, 2156, 2161, 2162,
     2164, 2165, 2166, 2167, 2169, 2170, 2155, 2171, 2172, 2173,
     2174, 2175, 2177, 2177, 2178, 2178, 2179, 2180, 2180, 2181,
     2181, 2182, 2182, 2183, 2183, 2184, 2185, 2177, 2186, 2186,
     2187, 2180, 2188, 2189, 2191, 2182, 2190, 2190, 2192, 2190,

     2194, 2190, 2186, 2193, 2193, 2195, 2195, 2196, 2196, 2197,
     2197, 2198, 2199, 2199, 2200, 2201, 2201, 2202, 2203, 2195,
     2204, 2205, 2205, 2197, 2206, 2206, 2199, 2207, 2207, 2201,
     2208, 2208, 2209, 2209, 2210, 2205, 2211, 2211, 2206, 2213,
     2212, 2212, 2218, 2212, 2208, 2212, 2214, 2214, 2215, 2215,
     2211, 2213, 2216, 2216, 2217, 2217, 2219, 2219, 2220, 2220,
     2221, 2214, 2224, 2215, 2222, 2222, 2226, 2216, 2223, 2223,
     2228, 2219, 2225, 2225, 2227, 2227, 2229, 2230, 2231, 2231,
     2232, 2232, 2233, 2233, 2234, 2235, 2235, 2236, 2236, 2227,
     2237, 2238, 2238, 2239, 2239, 2232, 2240, 2240, 2241, 2241,

     2235, 2242, 2243, 2244, 2244, 2246, 2238, 2245, 2245, 2247,
     2248, 2240, 2249, 2250, 2250, 2253, 2257, 2258, 2244, 2259,
     2260, 2261, 2261, 2262, 2263, 2263, 2264, 2264, 2250, 2265,
     2265, 2266, 2266, 2267, 2267, 2268, 2268, 2269, 2270, 2271,
     2271, 2274, 2281, 2265, 2284, 2266, 2286, 2267, 2275, 2275,
     2276, 2276, 2291, 2271, 2277, 2277, 2278, 2278, 2279, 2279,
     2280, 2280, 2282, 2282, 2276, 2283, 2283, 2285, 2285, 2293,
     2278, 2294, 2279, 2287, 2287, 2295, 2282, 2288, 2288, 2289,
     2289, 2285, 2290, 2290, 2296, 2292, 2292, 2287, 2292, 2302,
     2292, 2297, 2297, 2298, 2298, 2299, 2299, 2300, 2300, 2301,

     2301, 2303, 2303, 2304, 2304, 2307, 2297, 2305, 2305, 2314,
     2299, 2306, 2306, 2308, 2308, 2316, 2303, 2309, 2309, 2310,
     2310, 2319, 2305, 2311, 2311, 2320, 2306, 2323, 2308, 2312,
     2312, 2313, 2313, 2324, 2310, 2315, 2315, 2325, 2311, 2317,
     2317, 2318, 2318, 2329, 2312, 2321, 2321, 2322, 2322, 2327,
     2327, 2328, 2328, 2330, 2331, 2332, 2333, 2334, 2335, 2335,
     2321, 2336, 2336, 2351, 2327, 2337, 2337, 2338, 2338, 2339,
     2339, 2354, 2335, 2340, 2340, 2341, 2341, 2342, 2342, 2337,
     2343, 2343, 2344, 2344, 2345, 2345, 2359, 2340, 2360, 2341,
     2369, 2342, 2346, 2346, 2347, 2347, 2344, 2348, 2348, 2349,

     2349, 2350, 2350, 2352, 2352, 2377, 2346, 2353, 2353, 2355,
     2355, 2356, 2356, 2349, 2361, 2361, 2378, 2352, 2362, 2362,
     2363, 2363, 2364, 2364, 2379, 2356, 2365, 2365, 2366, 2366,
     2367, 2367, 2368, 2368, 2380, 2363, 2370, 2370, 2371, 2371,
     2382, 2365, 2372, 2372, 2383, 2367, 2373, 2373, 2374, 2374,
     2375, 2375, 2384, 2371, 2376, 2376, 2381, 2381, 2385, 2385,
     2388, 2373, 2389, 2390, 2391, 2375, 2392, 2392, 2393, 2393,
     2394, 2394, 2395, 2395, 2396, 2396, 2397, 2397, 2404, 2397,
     2406, 2397, 2398, 2398, 2394, 2399, 2399, 2420, 2396, 2400,
     2400, 2401, 2401, 2402, 2402, 2403, 2403, 2405, 2405, 2399,

     2407, 2407, 2408, 2408, 2409, 2409, 2421, 2402, 2410, 2410,
     2411, 2411, 2412, 2412, 2407, 2413, 2413, 2422, 2409, 2414,
     2414, 2423, 2410, 2415, 2415, 2411, 2416, 2416, 2417, 2417,
     2418, 2418, 2419, 2419, 2424, 2425, 2427, 2432, 2415, 2430,
     2430, 2431, 2431, 2433, 2431, 2436, 2431, 2419, 2434, 2434,
     2435, 2435, 2437, 2438, 2438, 2439, 2439, 2440, 2440, 2441,
     2441, 2442, 2442, 2443, 2443, 2444, 2444, 2445, 2445, 2439,
     2446, 2446, 2449, 2441, 2447, 2447, 2448, 2448, 2450, 2450,
     2444, 2451, 2451, 2452, 2453, 2446, 2457, 2458, 2458, 2459,
     2459, 2448, 2470, 2450, 2460, 2460, 2451, 2461, 2461, 2462,

     2462, 2458, 2463, 2463, 2464, 2464, 2465, 2465, 2466, 2466,
     2467, 2467, 2468, 2468, 2469, 2469, 2471, 2463, 2472, 2473,
     2473, 2465, 2480, 2466, 2474, 2474, 2481, 2468, 2475, 2475,
     2476, 2476, 2482, 2473, 2477, 2477, 2478, 2478, 2479, 2479,
     2483, 2483, 2484, 2484, 2485, 2476, 2486, 2487, 2488, 2488,
     2489, 2489, 2490, 2491, 2491, 2492, 2492, 2493, 2493, 2494,
     2494, 2495, 2510, 2488,  820, 2489, 2496, 2496, 2491, 2497,
     2497,  818, 2493, 2498, 2498, 2499, 2499, 2500, 2500, 2501,
     2501,  812,  811,  810,  809,  806,  805, 2498,  804, 2499,
     2503, 2503, 2503, 2503, 2503, 2504, 2504, 2504, 2504, 2504,

     2505, 2505, 2505, 2505, 2505, 2506, 2506, 2506, 2506, 2506,
     2507, 2507, 2507, 2507, 2507, 2508, 2508, 2508, 2508, 2508,
     2509, 2509, 2509, 2509, 2509, 2511, 2511,  803, 2511, 2511,
     2512, 2512, 2512,  802, 2512, 2513, 2513, 2513, 2513,  801,
      800,  799,  798,  796,  795,  794,  793,  792,  790,  789,
      788,  787,  786,  785,  783,  781,  777,  776,  774,  773,
      772,  771,  769,  767,  762,  761,  759,  758,  757,  756,
      755,  754,  747,  746,  742,  741,  740,  739,  738,  733,
      732,  731,  730,  725,  724,  722,  721,  720,  716,  715,
      714,  713,  711,  710,  705,  704,  703,  702,  701,  700,

      699,  698,  697,  694,  693,  692,  690,  687,  686,  685,
      684,  683,  681,  680,  679,  678,  677,  676,  674,  671,
      670,  669,  667,  666,  665,  664,  662,  660,  657,  656,
      655,  654,  653,  652,  651,  650,  648,  642,  641,  639,
      636,  635,  634,  633,  632,  629,  628,  627,  626,  622,
      621,  620,  619,  618,  617,  615,  614,  613,  610,  606,
      605,  604,  603,  600,  599,  598,  597,  596,  595,  594,
      593,  590,  589,  586,  585,  584,  583,  582,  580,  578,
      573,  571,  570,  568,  567,  566,  564,  563,  562,  556,
      554,  553,  552,  549,  548,  545,  544,  543,  541,  536,

      535,  532,  529,  528,  527,  526,  525,  524,  523,  518,
      517,  516,  513,  512,  511,  507,  506,  505,  504,  503,
      500,  499,  498,  497,  496,  495,  491,  490,  489,  488,
      485,  484,  483,  482,  481,  480,  479,  478,  476,  475,
      474,  473,  472,  471,  470,  469,  467,  462,  460,  459,
      457,  456,  455,  453,  452,  451,  445,  444,  443,  442,
      439,  438,  437,  436,  435,  433,  429,  428,  425,  424,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  410,  406,  405,  402,  399,  398,  397,  396,  395,
      394,  391,  390,  389,  386,  383,  382,  381,  378,  377,

      376,  375,  374,  369,  368,  367,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  353,  352,  351,  349,
      348,  347,  344,  343,  341,  340,  339,  338,  337,  335,
      334,  332,  331,  328,  327,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  312,  311,  308,
      305,  304,  303,  302,  301,  300,  297,  296,  295,  292,
      291,  290,  289,  286,  285,  284,  283,  282,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  270,  269,  268,
      266,  265,  264,  263,  262,  261,  259,  258,  257,  253,
      250,  249,  248,  247,  246,  244,  243,  242,  240,  239,

      238,  237,  232,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  209,  208,  207,  206,  205,  204,  203,  202,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  189,  188,
      187,  185,  184,  183,  182,  181,  179,  178,  177,  173,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  160,
      159,  158,  157,  155,  152,  144,  140,  137,  135,  132,
      130,  129,  128,  127,  125,  124,  123,  122,  121,  120,
      119,  118,  116,  114,  113,  112,  111,  109,  108,  106,
      102,  101,  100,   97,   89,   85,   82,   78,   71,   70,

       67,   66,   63,   61,   60,   59,   58,   57,   56,   55,
       54,   53,   49,   44,   41,   33,   32,   28,   25,   23,
       19,   14,   13,    8,    7,    6,    5, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[324] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
    1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;

#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2310 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 2565 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2503 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4028 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXEXPRATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPREND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXIDENTITYEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 313:
#line 527 "../../../../OS/src/OSParsers/OSParseosil.l"
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 317:
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 4633 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2503 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2503 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2502);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 550 "../../../../OS/src/OSParsers/OSParseosil.l"




