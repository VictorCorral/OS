#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 353
#define YY_END_OF_BUFFER 354
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2945] =
    {   0,
        1,    1,    0,    0,  350,  350,  351,  351,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  354,  352,
        1,    1,    2,  340,    2,  340,    6,  340,    5,  352,
        4,  340,  340,    2,  353,  350,  351,  341,  343,  344,
      343,  347,  348,  347,    1,  340,  340,    6,  340,    5,
        0,    4,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
        3,    6,    6,  340,    7,    5,    0,    0,  346,  284,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  340,

      340,  350,  351,  341,    0,  349,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  286,    0,
        0,    0,    0,    0,    0,    0,    0,  124,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  240,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    6,  345,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  342,    0,  285,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  270,    0,    0,    0,    0,    0,    0,    0,  254,
        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  114,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,   43,   44,
      340,  169,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  285,    0,  287,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,    0,    0,    0,    0,  271,    0,    0,    0,    0,
        0,    0,    0,  255,    0,    0,    0,    0,    0,    0,
      241,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  266,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  262,    0,    0,    0,
        0,    0,  268,    0,  264,  293,    0,    0,    0,    0,
      270,    0,    0,    0,    0,    0,    0,  254,    0,    0,
      272,    0,  274,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
        0,    0,  276,    0,    0,    0,    0,    0,    0,  340,
      340,  340,  340,  340,  172,  340,  340,  340,  340,  340,
       41,   42,  169,  340,  340,  340,  340,  170,  340,  340,
      340,  340,  171,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  287,    0,  267,    0,
        0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
      263,    0,    0,    0,  125,    0,    0,  269,    0,  265,

        0,    0,    0,    0,    0,  271,    0,    0,    0,    0,
        0,    0,  255,    0,    0,  273,    0,  275,    0,    0,
        0,  241,    0,    0,    0,    0,    0,    0,  119,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  261,    0,    0,    0,    0,
        0,  277,    0,    0,    0,    0,  115,    0,    0,    0,
      266,    0,    0,    0,  203,    0,    0,    0,   60,    0,
      262,    0,    0,    0,    0,  268,  264,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  127,    0,    0,    0,
      272,  274,    0,    0,    0,  133,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  246,    0,    0,
        0,    0,   56,    0,    0,    0,    0,  260,    0,    0,
      106,  221,  276,    0,    0,    0,    0,    0,    0,    0,
      340,  340,  340,  340,  340,  172,  340,  340,  340,  340,
      340,  340,  340,  340,  170,  340,  340,  340,  171,  340,
      179,  180,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,   22,  340,  340,  340,  340,  340,
      195,  196,  340,  340,  340,   23,  340,  340,  267,    0,
        0,    0,    0,    0,    0,  117,    0,    0,    0,  263,
        0,    0,    0,    0,  269,  265,    0,  294,    0,    0,

        0,    0,    0,    0,    0,    0,  128,    0,    0,    0,
      273,  275,    0,    0,  134,    0,    0,    0,    0,    0,
        0,  119,    0,    0,    0,    0,   51,    0,    0,  247,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  261,
        0,    0,    0,    0,  277,    0,    0,    0,    0,  115,
        0,    0,    0,    0,    0,    0,  201,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,  127,    0,    0,    0,    0,
      197,    0,  248,  135,  133,    0,    0,    0,    0,    0,
        0,  282,    0,    0,    0,    0,  246,    0,    0,    0,

      252,    0,    0,    0,    0,    0,    0,    0,  104,    0,
        0,  242,    0,  227,  233,    0,    0,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,   18,  340,
       19,  340,  340,  340,  340,  177,  178,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  187,  188,   22,
      340,  340,  340,  340,  193,  194,  340,  340,   23,  340,
      340,    0,    0,    0,    0,  204,    0,    0,    0,    0,
        0,   61,    0,    0,    0,    0,    0,    0,  294,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,  249,  134,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   51,    0,  247,    0,    0,    0,
      253,    0,    0,   57,    0,    0,    0,    0,    0,    0,
        0,  107,    0,    0,  222,    0,    0,  243,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  244,    0,    0,   84,    0,    0,    0,
      225,    0,    0,    0,  129,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  248,  135,    0,    0,  250,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  252,    0,
        0,    0,    0,    0,    0,    0,  137,    0,  258,    0,

        0,  242,    0,    0,    0,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,   21,   18,   19,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  185,  186,  340,  340,  340,  340,  340,  340,  340,
      340,  340,    0,    0,    0,  204,    0,  202,    0,    0,
        0,   61,    0,    0,    0,    0,  245,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  198,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  249,    0,  251,    0,
        0,    0,    0,    0,  283,    0,    0,    0,    0,    0,

        0,  253,    0,   57,    0,    0,    0,    0,    0,  138,
        0,  259,    0,  107,    0,  105,  222,    0,  243,    0,
        0,  228,    0,  234,    0,    0,    0,  278,    0,    0,
        0,    0,    0,    0,    0,    0,  244,   80,  205,    0,
        0,    0,    0,    0,    0,  120,    0,    0,    0,  149,
        0,   58,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  250,    0,    0,    0,  223,
        0,    0,    0,    0,    0,    0,    0,  280,    0,    0,
        0,    0,    0,  139,  137,    0,  258,    0,    0,    0,

        0,  288,  340,  340,  340,  340,  340,  340,  340,  168,
      340,  340,  340,   21,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,   20,  340,
      340,  340,  340,  340,  340,  340,  340,   45,   46,    0,
      279,    0,    0,  202,    0,    0,    0,    0,    0,    0,
      245,    0,    0,    0,   85,    0,    0,    0,    0,    0,
      226,    0,    0,    0,    0,  150,    0,    0,  198,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  251,    0,    0,    0,    0,  283,    0,    0,    0,
        0,    0,    0,    0,  281,    0,    0,    0,    0,    0,
      138,  259,    0,  105,    0,    0,  228,  234,    0,    0,
      278,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  149,    0,    0,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
       82,    0,  280,    0,    0,    0,    0,    0,  139,    0,
        0,    0,    0,    0,  108,  340,  340,  340,  340,  340,

      340,  168,  340,  340,  340,  340,  340,   26,  340,  340,
       24,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  183,  184,  340,
      340,  340,   20,  340,  191,  192,  340,  340,  340,   28,
      340,  340,  279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   81,    0,  206,   85,    0,    0,    0,    0,
      226,    0,    0,    0,  121,  150,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  224,    0,    0,    0,    0,

        0,    0,  281,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  289,    0,    0,  199,  229,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      302,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,    0,    0,    0,    0,  231,
        0,    0,    0,  102,    0,    0,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,   26,  340,
       24,  340,  340,  340,  340,  340,  152,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  181,
      182,  340,  340,  340,  189,  190,  340,  340,   28,  340,
      340,    0,    0,    0,    0,    0,    0,    0,    0,   81,
      206,    0,    0,    0,    0,    0,    0,  121,    0,   59,
        0,  101,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,  224,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      289,    0,  109,    0,    0,    0,  110,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  316,    0,    0,    0,    0,  322,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
        0,    0,    0,    0,    0,  256,    0,    0,  340,  340,
      340,  340,  340,  340,  167,  340,  166,  340,  340,  340,
      340,  340,  340,   25,  340,  340,  340,  340,  340,  152,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,   27,
      340,    0,    0,  200,    0,  230,    0,   87,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       97,    0,    0,  323,    0,    0,    0,    0,    0,    0,
      303,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,  113,    0,    0,   83,    0,    0,    0,
        0,    0,  232,    0,    0,  257,    0,  103,    0,    0,
      109,    0,    0,    0,    0,    0,  141,    0,    0,  145,
        0,    0,    0,    0,    0,    0,  126,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  318,    0,    0,
      322,    0,    0,    0,    0,    0,    0,  324,    0,    0,

      297,    0,    0,    0,    0,  132,    0,    0,    0,    0,
      130,    0,    0,    0,    0,    0,    0,    0,  256,    0,
        0,  340,  340,  340,  340,  340,  167,  166,  340,  340,
      340,  340,  340,   25,  340,  340,  340,  340,  340,  340,
      292,  340,  340,  340,  340,  340,  153,  340,  340,  340,
      340,  340,  340,   34,  340,  340,  340,  340,  340,  340,
       27,  340,    0,  200,  230,   87,    0,    0,    0,  111,
        0,  142,    0,  146,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  317,    0,
      319,    0,    0,  323,    0,    0,    0,    0,    0,  303,

        0,  325,    0,    0,  298,    0,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,    0,   77,    0,    0,
        0,  232,    0,  257,  103,    0,    0,    0,    0,    0,
      143,  141,    0,  147,  145,    0,    0,    0,    0,    0,
        0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  318,    0,  320,    0,    0,    0,    0,    0,
        0,  324,    0,  297,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
        0,  340,   38,  340,  340,  340,  158,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,   14,

      340,  292,  340,  340,  340,  340,  340,  153,  340,  340,
      340,  340,  340,   34,  340,  340,  340,  340,  340,  340,
      340,    0,    0,    0,  111,  142,  146,    0,    0,    0,
        0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  317,  319,    0,  321,    0,    0,    0,    0,    0,
        0,  325,    0,  298,    0,    0,    0,    0,    0,    0,
        0,    0,  131,    0,    0,   77,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  143,    0,  147,    0,    0,
        0,    0,   53,    0,    0,  215,    0,    0,    0,    0,
        0,    0,  310,    0,  320,    0,    0,  326,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   68,    0,    0,    0,    0,  235,    0,   38,  340,
      340,  158,  340,  340,  175,  176,  340,  340,  340,  340,
      340,  340,  340,  155,  340,   14,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,   12,  340,  156,  340,
      157,  340,  340,  340,  340,  340,  340,  340,  340,  340,
        0,    0,    0,    0,    0,    0,   52,    0,    0,    0,
        0,    0,    0,    0,    0,  311,    0,  321,    0,    0,
      327,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,    0,    0,    0,   71,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  217,    0,
        0,  334,   53,    0,    0,    0,    0,    0,  306,    0,
      308,    0,  310,    0,    0,  326,    0,  304,    0,    0,
        0,  299,    0,    0,   90,    0,   62,   64,    0,  219,
        0,    0,    0,    0,    0,  340,  340,  340,  340,  173,
      174,  340,  340,  340,  340,  340,  340,  340,   36,  155,
      340,  154,  340,  340,  340,  340,  340,  340,  340,  340,
      340,   12,  156,  157,  340,  340,  340,  340,  340,  340,
      340,  340,  340,    0,    0,    0,    0,    0,    0,  335,
        0,    0,  216,    0,    0,    0,  307,    0,  309,    0,

      311,    0,    0,  327,    0,    0,    0,    0,    0,  300,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,   71,    0,    0,    0,  236,    0,  122,    0,  207,
        0,    0,    0,  334,   78,    0,    0,    0,  306,  308,
        0,    0,   94,    0,    0,    0,  299,    0,  332,    0,
        0,    0,    0,    0,   74,    0,  136,    0,  340,  164,
      340,  163,  340,  340,  340,  340,  340,  340,  340,  338,
      339,   36,  154,  340,  340,   13,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  165,  340,  340,
      340,  340,  340,  340,    0,    0,    0,    0,  218,    0,

      335,    0,  216,    0,    0,  307,  309,    0,    0,    0,
        0,    0,  305,    0,    0,  300,    0,  333,    0,    0,
       91,    0,    0,   63,    0,   65,    0,    0,  220,   69,
        0,    0,    0,  236,    0,    0,    0,    0,    0,    0,
       98,    0,  290,    0,   88,    0,    0,  332,    0,    0,
        0,    0,    0,  136,    0,  164,  163,  340,  340,  340,
      340,   35,  340,  340,  336,  337,  340,   13,  340,   17,
      340,   16,  340,  340,   15,  340,  340,  340,  340,    8,
      340,  340,  165,  340,  340,   49,   50,  340,  340,  340,
       29,  340,    0,  123,    0,    0,  208,  218,    0,    0,

       79,    0,    0,    0,    0,    0,   95,    0,  305,    0,
        0,  333,    0,   91,    0,   63,   65,    0,  220,    0,
        0,    0,   75,    0,    0,    0,    0,   66,    0,  148,
        0,  295,    0,    0,  328,    0,  330,    0,    0,    0,
        0,    0,    0,  340,  162,  340,  161,  340,   35,  340,
      340,   39,  340,   17,   16,  340,   15,  340,  340,   10,
      340,    8,  340,  340,   30,  340,   47,   48,  340,  340,
       29,  340,  123,    0,  208,    0,   79,    0,   99,    0,
      296,    0,  291,    0,   95,    0,   89,    0,  329,    0,
      331,    0,    0,    0,    0,    0,   75,    0,    0,    0,

        0,  148,  295,  312,  328,  330,  314,    0,    0,    0,
        0,    0,  162,  161,  340,  340,   37,   39,  340,    9,
      340,  301,  340,   10,  340,  340,   30,  340,   40,  340,
      340,  340,    0,    0,   67,   99,  296,  291,    0,   89,
      329,  331,    0,    0,    0,    0,    0,    0,  213,    0,
        0,  237,  211,    0,   72,  209,  340,   37,    9,  301,
      340,  340,  340,   40,  340,  160,  340,  159,  340,    0,
       67,    0,  313,    0,  315,    0,    0,    0,    0,    0,
        0,    0,   54,  340,   33,  340,  340,  340,   32,  160,
      159,  340,   31,    0,  214,  313,  315,    0,  238,    0,

      212,    0,    0,   73,    0,  210,    0,    0,   33,  340,
      340,   11,   32,   31,  214,  238,  212,    0,   55,   73,
      210,    0,    0,  340,   11,   55,    0,    0,  340,    0,
        0,  340,    0,  140,    0,  144,  340,  140,  144,  340,
      340,  239,  239,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2955] =
    {   0,
        0,   64,    0,    0, 4753, 4752, 4749, 4748,    0,    0,
        0,    0, 4739, 4738,   13,   16,    3,    5, 4752, 4759,
      127,    0, 4746,  189, 4743,   18,   38, 4732,   82,  245,
     4759, 4719, 4709, 4759, 4759,    0,    0,    0, 4759, 4759,
     4737, 4759, 4759, 4728,    0,    0,   23,   85, 4727,  210,
       16, 4759, 4714, 4704, 4680,    4, 4688, 4693, 4692, 4685,
        4, 4697,    0,    5,    7,   18,   61,   69, 4696, 4696,
     4759,   45,  248,  101, 4759,  114, 4724,  282, 4759, 4759,
     4706,   63,   34, 4679,  151,   71,  170, 4688,  216,    8,
      173,  302,   47,  217,   87, 4677,  301,   79, 4690, 4703,

     4697,    0,    0,    0, 4708, 4759, 4678, 4667, 4670,  154,
     4665, 4665, 4664,  313, 4678,  186, 4660, 4667, 4665, 4659,
     4663, 4665, 4670, 4667, 4649, 4670,  181, 4669, 4668, 4655,
     4649, 4653, 4649,  189,  187,  265,  305, 4692,  346, 4674,
      204,  188, 4647,  212,  301,  236, 4656,  324,  229,  265,
      319,  253,  331,  329, 4645,  336,  324, 4658, 4759, 4639,
     4645, 4637, 4640,  346, 4635, 4631, 4651, 4646, 4644, 4633,
     4645, 4635, 4632, 4640,  382,  289, 4639,  349,  389,  253,
     4629, 4629, 4634, 4759, 4626, 4626, 4628, 4617, 4616, 4614,
      349, 4619, 4628, 4631,  316, 4618, 4616, 4608, 4607, 4626,

     4613, 4612, 4623,  317,  192, 4759, 4604, 4617, 4618, 4614,
      368, 4599, 4599, 4608,  401,  405,  411,  356, 4601, 4614,
     4596, 4593, 4607, 4598, 4608, 4613, 4603, 4602, 4615, 4593,
     4589, 4594, 4586, 4583, 4587, 4592, 4582, 4592, 4581, 4594,
     4573,   56, 4759,  413,  262,  416, 4574, 4580, 4572, 4575,
      372, 4570, 4566, 4586,  423, 4580, 4569, 4581, 4571, 4568,
     4576,  432,  388, 4575,  380,  434,  381, 4565, 4565, 4570,
      445, 4562, 4562, 4564, 4553, 4563, 4551, 4549,  383, 4554,
     4563, 4566,  393, 4553, 4551, 4543, 4542, 4561, 4548, 4547,
     4558,  403,  452, 4573, 4552, 4553, 4562, 4538,  424,  457,

     4550, 4543, 4539, 4537,  461,  465, 4529, 4543, 4542, 4532,
      468,  470, 4540, 4524, 4538, 4529, 4536, 4535,  473,  481,
     4521,  484,  486, 4533, 4536,  428, 4534,  460, 4526, 4514,
     4514,  454, 4527, 4527, 4512, 4525, 4527, 4534, 4517,  492,
     4507, 4523,  452,  495, 4518, 4508, 4500,  473, 4535,  476,
     4508,  511, 4513, 4497, 4501, 4495, 4488,  519, 4545, 4542,
      515,  526, 4497, 4487, 4488,  530, 4494, 4487, 4497,  532,
      534, 4508, 4499, 4498, 4484, 4483, 4499, 4498, 4484, 4493,
     4491, 4475, 4489, 4488, 4480,  536, 4477, 4470, 4484, 4483,
     4462,  538,  540,  551,  553, 4501, 4480, 4481, 4490, 4466,

      556,  558, 4478, 4471, 4467,  560,  562, 4465,  564,  566,
     4457, 4471, 4470, 4460,  569,  576, 4468, 4452, 4466, 4457,
     4464, 4463,  582,  585, 4449,  588,  590, 4461, 4464,  592,
      594,  551, 4462,  608, 4454, 4450, 4441, 4441,  485, 4454,
     4454, 4439, 4452, 4454, 4461, 4444,  613, 4434, 4450,  562,
      616, 4445, 4435, 4427,  620,  625,  629, 4438,  606, 4435,
     4439, 4429, 4438, 4423, 4421,  637,  633, 4422, 4435, 4454,
     4432,  641,  649,  653,  657, 4759, 4421, 4451, 4416, 4413,
      659, 4408, 4430, 4412,  661, 4415, 4427,  665, 4418,  671,
      673,  677,  679, 4407,  681, 4405, 4415, 4418, 4407, 4416,

     4415, 4414, 4415, 4402, 4411,  683, 4397, 4406, 4395, 4391,
     4398, 4392, 4389, 4402, 4403,  687,  693, 4403, 4387, 4399,
     4383,  699,  703,  271, 4383, 4396, 4396, 4394, 4397, 4388,
     4395, 4377,    6,  705,  707, 4388, 4392, 4374, 4409, 4375,
     4759, 4759,  709, 4384, 4373, 4383,  711,  715, 4381, 4367,
     4360,  717,  720,  722,  727, 4380, 4364, 4375, 4396, 4374,
     4368, 4359, 4372, 4370,  733,  737, 4354, 4353, 4371,  739,
      741, 4366, 4352,  748, 4363, 4352,  754,  756,  758, 4358,
      610, 4355, 4359, 4349,  763,  765, 4358, 4343, 4341,  767,
      769, 4342, 4355, 4374,  772, 4352,  774,  776,  779,  783,

      785, 4341, 4371, 4336, 4333,  787, 4328, 4350, 4332,  790,
     4335, 4347,  792, 4338,  795,  797,  801,  803, 4327,  806,
     4325,  808, 4335, 4338, 4327, 4336, 4335,  811,  813, 4334,
     4335, 4322,  817, 4331,  819, 4317, 4326, 4315, 4311, 4318,
     4312, 4309, 4322, 4323,  822,  824, 4323, 4307, 4319, 4303,
      827,  829,  493, 4303, 4316,  835,  838, 4316, 4314, 4317,
      840, 4311, 4340, 4314, 4295, 4307, 4298, 4305, 4759,   66,
      843, 4301, 4304, 4293, 4293,  845,  847, 4288, 4287, 4303,
     4294, 4297, 4287,  449,  851, 4320,  854, 4296, 4280,  490,
      856,  858,  861,  863, 4317,  868, 4291, 4281, 4287, 4274,

     4274, 4273, 4284, 4269, 4274, 4269,  870,  873, 4302, 4280,
      879, 4281, 4759, 4282, 4277, 4275, 4275,  882, 4274, 4273,
     4258, 4759,  886, 4261,  888, 4269, 4255, 4249, 4266, 4269,
     4252, 4249, 4267, 4252, 4251,  890, 4260, 4250, 4243, 4238,
     4247,  892,  895, 4255,  897, 4270, 4249, 4268,  899,  907,
     4288, 4285, 4253, 4260, 4247, 4236, 4236, 4234, 4257, 4265,
     4240,  901,  913,  919,  904, 4241, 4226, 4252, 4222,  921,
     4273, 4270, 4250, 4229,  927,  929, 4232, 4231,  931, 4229,
     4254, 4224,  934, 4188, 4178,  936, 4185,  938,  401,  942,
     4181, 4184, 4173, 4173,  944,  946,  950,  954, 4159, 4155,

     4170,   10,   77,  174,  570,  956,  958,  241,  257,  540,
      960,  962,  966,  968,  972,  300,  301,  417,  444,  455,
      470,  974,  502,  517,  525,  976,  978,  527,  984,  986,
      582,  566,  989,  573,  992,  607,  605,  606,  615,  994,
      623,  627,  996, 1000, 1002,  619, 1005,  634,  631, 1008,
      630,  650,  658,  656,  683,  658, 4759,  670,  686,  689,
      686,  707,  694, 1012,  701,  697,  706,  741,  752,  760,
      777,  795,  809,  817, 1016, 1018,  856,  835,  856,  844,
     1032, 1021, 1023, 1025, 1028,  902, 1032,  877,  887,  881,
      890, 4759,  908,  908,  941,  921, 1034,  930,  943, 1039,

     1037,  943,  955,  975,  976, 1001, 1068, 1070, 4759,  995,
     1072, 1044,  996, 4759, 4759, 1008, 1002, 1015, 1009, 1025,
     1028, 1018, 1025, 1024, 1036, 1037, 1088, 1090, 1092, 1094,
     1096, 1062, 1045, 1027, 1059, 4759, 4759, 1052, 1059, 1050,
     1056, 1068, 1054, 1053, 1051, 1067, 1112, 1111, 1111, 1118,
     1061, 1061, 1086, 1083, 4759, 4759, 1085, 1066, 1126, 1075,
     1129, 1090, 1114, 1078, 1134, 1136, 1138, 1086, 1101, 1102,
     1144, 1146, 1099, 1114, 1100, 1154, 1103, 1101, 1157, 1106,
     1121, 1115, 1108, 1110, 1127, 1126, 1131, 1170, 1128, 1151,
     1133, 1174, 1176, 1178, 1180, 1182, 1144, 1149, 1142, 1137,

     1210, 1148, 1146, 1169, 1212, 1147, 1214, 1154, 1177, 1217,
     1219, 1166, 1222, 1226, 1169, 1189, 1175, 1189, 1233, 1235,
     1238, 1240, 1242, 1244, 1246, 1183, 1254, 1251, 1199, 1260,
     1262, 1216, 1211, 1264, 1223, 1215, 1230, 1222, 1219, 1218,
     1230, 1221, 1280, 1282, 1238, 1230, 4759, 1249, 1265, 1227,
     4759, 1248, 1251, 1243, 1291, 1250, 1296, 1251, 1245, 1250,
     1262, 1242, 1254, 1254, 1269, 1267, 1271, 1263, 1274, 1277,
     1277, 1267, 1283, 1322, 1324, 1271, 1328, 1331, 1290, 1279,
     1280, 1282, 1284, 1281, 1299, 1319, 1292, 1289, 1344, 1346,
     1304, 1319, 1310, 1307, 1353, 1337, 1356, 1358, 1363, 1305,

     1324, 1366, 1317, 1318, 1332, 1336, 1331, 1322, 1353, 1354,
     1339, 1380, 1332, 1329, 1384, 1386, 1388, 1390, 1348, 1334,
     1371, 1337, 1357, 1389, 1359, 1360, 1361, 1404, 1355, 1359,
     1360, 4759, 4759, 1411, 1413, 1367, 1397, 1367, 1404, 1389,
     1430, 1432, 1438, 1390, 1383, 1440, 1442, 1445, 1407, 1399,
     1396, 1450, 1397, 1410, 1400, 1458, 1460, 1416, 1408, 1463,
     1429, 1446, 1406, 1468, 1430, 1433, 1425, 1475, 1430, 1425,
     1480, 1484, 1432, 1447, 1427, 1439, 1439, 1452, 1453, 1457,
     1451, 1459, 1462, 1461, 1451, 1467, 1506, 1508, 1512, 1474,
     1460, 1461, 1463, 1519, 1521, 1471, 1468, 1486, 1506, 1479,

     1476, 1530, 1532, 1535, 1493, 1508, 1499, 1496, 1541, 1543,
     1545, 1548, 1500, 1552, 1554, 1557, 1561, 1523, 1563, 1512,
     1566, 1570, 1572, 1574, 1515, 1536, 1577, 1579, 1533, 1539,
     1529, 1530, 1546, 1567, 1540, 1546, 1593, 4759, 4759, 1536,
     1548, 1543, 1571, 1578, 1544, 4759, 1545, 1601, 1588, 1604,
     1566, 4759, 1558, 1553, 1573, 1556, 1561, 1556, 1556, 1562,
     1569, 1577, 1575, 1565, 1572, 1582, 1588, 1588, 1573, 1579,
     1596, 1593, 1579, 1578, 1596, 1633, 1582, 1592, 1593, 4759,
     1598, 1599, 1604, 1594, 1602, 1607, 1644, 1646, 1598, 1611,
     1594, 1596, 1603, 1653, 1655, 1648, 1660, 1608, 1618, 1615,

     1624, 1611, 1611, 1608, 1618, 1631, 1632, 1623, 1673, 1675,
     1641, 1629, 1659, 1680, 1646, 1683, 1646, 1688, 1664, 1643,
     1641, 1645, 1657, 1644, 1658, 1640, 1648, 1644, 1664, 1652,
     1679, 1679, 1706, 1708, 1655, 1658, 1670, 1715, 1717, 1721,
     1723, 1666, 1689, 1730, 1688, 1683, 1733, 4759, 4759, 1739,
     1741, 1688, 1699, 1745, 1692, 1693, 1709, 1729, 1702, 1708,
     1755, 1757, 1759, 1761, 1763, 1698, 1718, 1713, 1741, 1768,
     1770, 1753, 1720, 1777, 1779, 1781, 1744, 1785, 1787, 1740,
     1735, 1755, 1738, 1744, 1739, 1739, 1745, 1750, 1759, 1757,
     1747, 1754, 1764, 1770, 1770, 1755, 1761, 1778, 1775, 1761,

     1760, 1814, 1763, 1773, 1774, 1819, 1821, 1783, 1784, 1789,
     1779, 1787, 1792, 1829, 1831, 1783, 1797, 1780, 1782, 1789,
     1839, 1841, 1793, 1845, 1803, 1800, 1849, 1851, 1813, 1854,
     1856, 1822, 1800, 1806, 1807, 1813, 1816, 1809, 1815, 1816,
     1827, 1813, 1834, 1835, 1828, 1833, 1874, 1876, 1869, 1831,
     1826, 1841, 1840, 1850, 1831, 1845, 1846, 1845, 1832, 1854,
     1851, 1838, 1854, 1854, 1848, 1849, 1850, 1859, 1862, 1863,
     1862, 1859, 1856, 1884, 1849, 1850, 1860, 1856, 1872, 1873,
     4759, 1867, 1915, 1868, 1899, 1883, 1866, 1877, 1922, 1870,
     1870, 1877, 1891, 1879, 4759, 1885, 1909, 1881, 1873, 1875,

     1897, 1936, 1883, 1913, 1896, 1900, 1943, 1945, 1888, 1948,
     1950, 1916, 1903, 1907, 1958, 1904, 1905, 1912, 1918, 1928,
     1907, 1930, 1920, 1930, 1930, 1934, 1974, 1968, 1971, 1934,
     1960, 1926, 1982, 1984, 1983, 1983, 1946, 1936, 1992, 1994,
     1937, 1959, 1998, 1964, 1942, 1948, 1949, 1955, 1958, 1952,
     1958, 2009, 2011, 2013, 2015, 2017, 1969, 1980, 1966, 1986,
     2025, 1987, 1983, 2029, 2031, 2033, 1987, 2036, 2038, 2040,
     2002, 2001, 2012, 1993, 2007, 2008, 2007, 1994, 2016, 2053,
     2002, 2018, 2018, 2012, 2013, 2014, 2023, 2026, 2027, 2026,
     2069, 2046, 2014, 2015, 2073, 2077, 2026, 2025, 2041, 2041,

     2082, 2038, 2086, 2040, 2071, 2055, 2038, 2051, 2041, 2049,
     2063, 2051, 2101, 2103, 2105, 2054, 4759, 4759, 4759, 2070,
     2069, 2056, 2062, 2059, 2066, 2072, 2062, 2063, 2069, 2073,
     2122, 2077, 2085, 2071, 2074, 2078, 2085, 2090, 2078, 2079,
     2093, 2080, 2080, 2098, 2137, 2083, 2087, 2088, 2106, 2107,
     4759, 2090, 2109, 2106, 2093, 2095, 2113, 2110, 2092, 2113,
     2114, 2117, 4759, 2116, 2109, 2139, 2119, 2110, 2122, 4759,
     2107, 2113, 2164, 4759, 2111, 2129, 2118, 2120, 2131, 2116,
     2118, 2173, 2175, 2137, 2125, 2144, 2128, 2132, 2183, 2185,
     2190, 2150, 2154, 2137, 2154, 2195, 2197, 2147, 2148, 2155,

     2163, 2165, 2151, 2164, 2151, 2186, 2171, 2153, 2158, 4759,
     4759, 2163, 2171, 2176, 4759, 4759, 2158, 2165, 2219, 2221,
     2183, 2171, 2225, 2227, 2231, 2191, 2193, 2180, 2187, 2237,
     2243, 2186, 2193, 2202, 2192, 2193, 2199, 2250, 2212, 2253,
     2255, 2257, 2204, 2207, 2211, 2218, 2223, 2211, 2212, 2226,
     2213, 2213, 2271, 2273, 2231, 2275, 2221, 2225, 2226, 2244,
     2245, 2282, 2230, 2249, 2247, 2234, 2236, 2291, 2293, 2259,
     2237, 2258, 2259, 2300, 2264, 2303, 2265, 2259, 2308, 2310,
     2293, 2273, 2264, 2276, 2316, 2264, 2320, 2324, 2267, 2288,
     2327, 2329, 2332, 2274, 2296, 2289, 4759, 2340, 2342, 2298,

     2309, 2293, 2311, 2299, 2352, 2306, 2305, 2303, 2310, 2310,
     2312, 2307, 2308, 2330, 4759, 2364, 2326, 2313, 2369, 2371,
     2335, 2338, 2335, 2323, 2322, 2380, 2331, 2382, 2334, 2353,
     2350, 2388, 2339, 2372, 2373, 2353, 2341, 2356, 2348, 4759,
     2359, 2347, 2361, 2346, 2404, 2406, 2365, 2370, 2362, 2373,
     2354, 2378, 2375, 2416, 2420, 2422, 2424, 2392, 2382, 2372,
     2388, 2380, 2431, 2433, 2380, 2391, 2390, 2385, 2385, 2441,
     2443, 2402, 2403, 2410, 2396, 2450, 2412, 2413, 2415, 2419,
     2430, 2458, 2407, 2414, 2409, 2414, 2443, 2422, 2467, 2469,
     2445, 2413, 2474, 2476, 2478, 2482, 2484, 2486, 2440, 2440,

     2490, 2494, 2496, 2452, 2462, 2447, 2465, 2453, 2454, 2506,
     2451, 2460, 2461, 2464, 2459, 2460, 2482, 2516, 2518, 2480,
     2521, 2468, 2524, 2526, 2490, 2493, 2490, 2479, 2479, 2535,
     2537, 2540, 2495, 2543, 2494, 2513, 2547, 2512, 2500, 2533,
     2534, 2514, 2556, 2559, 2508, 2522, 2563, 2515, 2566, 2528,
     2516, 2572, 2574, 2530, 2578, 2582, 2584, 2588, 2532, 2540,
     2590, 2566, 2571, 2554, 2595, 2582, 2600, 2602, 2583, 2605,
     2558, 2559, 2565, 2614, 2593, 2619, 2621, 2578, 2569, 2589,
     2582, 2591, 2588, 2575, 2590, 2578, 2632, 2635, 2637, 2595,
     2640, 2587, 2595, 2595, 2612, 2593, 2648, 2650, 2617, 2654,

     2656, 2608, 2606, 2613, 2661, 2664, 2613, 2617, 2618, 2649,
     4759, 2622, 2623, 2632, 2634, 2639, 2658, 2625, 2679, 2631,
     2661, 2683, 2667, 2687, 2632, 2689, 2691, 2693, 2659, 2637,
     2646, 2662, 2666, 2704, 2656, 2653, 2659, 2709, 2658, 2712,
     2714, 2678, 2668, 2663, 2683, 2720, 2724, 2668, 2673, 2669,
     2692, 2694, 2731, 2735, 2689, 2694, 2699, 2700, 2697, 2683,
     2743, 2710, 2727, 2748, 2750, 2752, 2733, 2715, 2756, 2758,
     2760, 2762, 2764, 2766, 2719, 2720, 2726, 2772, 2755, 2721,
     2741, 2734, 2744, 2741, 2728, 2743, 2731, 2785, 2788, 2790,
     2792, 2794, 2752, 2797, 2744, 2753, 2753, 2770, 2751, 2806,

     2810, 2812, 2772, 2814, 2816, 2768, 2766, 2773, 2768, 2772,
     2773, 2803, 2826, 2830, 2779, 2783, 2833, 2835, 2796, 2798,
     2803, 2840, 2823, 2843, 2846, 2799, 2829, 2815, 2805, 2804,
     2854, 2856, 2849, 2859, 2861, 2854, 2809, 2810, 2807, 2867,
     2855, 2821, 2872, 2835, 2823, 2834, 2830, 2833, 2827, 2838,
     2883, 2841, 2886, 2888, 2890, 2835, 2893, 2847, 2858, 2853,
     2855, 2900, 2849, 2904, 2852, 2863, 2869, 2910, 2872, 2864,
     2865, 2868, 2861, 2877, 2877, 4759, 2864, 2870, 2883, 2873,
     2876, 2924, 2926, 2878, 2879, 2930, 2932, 2879, 2935, 2940,
     2882, 2915, 2898, 2891, 2900, 2895, 2950, 2898, 2953, 2955,

     2921, 2958, 2920, 2942, 2922, 2919, 2910, 2968, 2971, 2973,
     2978, 2919, 2921, 2980, 2923, 2943, 2946, 2932, 2935, 2965,
     2935, 2955, 2946, 2945, 2995, 2997, 2999, 2946, 2947, 2944,
     3004, 3006, 2958, 2955, 2966, 2962, 2965, 2959, 2970, 3015,
     2973, 3020, 3022, 3024, 3026, 2961, 3028, 2983, 2994, 2989,
     2990, 3035, 2984, 3040, 2984, 2998, 3004, 3005, 2997, 2998,
     3001, 3049, 3051, 2998, 3014, 3055, 3016, 3058, 3005, 3011,
     3013, 3016, 3010, 3026, 3012, 3068, 3031, 3071, 3033, 3021,
     3057, 3077, 3079, 3032, 3033, 4759, 3034, 3048, 3085, 3087,
     3039, 3090, 3093, 3059, 3096, 3058, 3103, 3106, 3055, 3061,

     3060, 3050, 3110, 3072, 3077, 3060, 3061, 3076, 3077, 3079,
     3066, 4759, 3077, 3078, 3074, 3084, 4759, 3086, 3127, 3082,
     3072, 3131, 3114, 3134, 3133, 3133, 3087, 3102, 3083, 3099,
     3146, 3148, 3150, 3152, 3154, 3156, 3100, 3104, 3109, 3124,
     3123, 3129, 3130, 3110, 3125, 3170, 3172, 3174, 3176, 3178,
     3180, 3142, 3130, 3161, 3133, 3132, 3135, 3136, 3152, 3140,
     3139, 3155, 3141, 3143, 3179, 3199, 3201, 3154, 3204, 3157,
     3171, 3208, 3210, 3162, 3215, 3217, 3177, 3220, 3182, 3226,
     3228, 3180, 3191, 3184, 3174, 3234, 3196, 3201, 3184, 3185,
     3200, 3202, 3203, 3244, 3192, 3247, 3206, 3251, 3253, 3211,

     3207, 3257, 3219, 3224, 3213, 3209, 3224, 3221, 4759, 3217,
     3268, 3270, 3273, 3235, 3238, 3222, 3229, 3279, 3281, 3284,
     3286, 3239, 3289, 3242, 3238, 3295, 3244, 4759, 3257, 3281,
     3300, 3302, 3304, 3257, 4759, 3253, 4759, 4759, 3260, 4759,
     3271, 3272, 3271, 3312, 3266, 3316, 3320, 3268, 3272, 4759,
     4759, 3279, 3265, 3301, 3276, 3328, 3332, 3338, 3340, 3343,
     3345, 3347, 3282, 3349, 3287, 3306, 3300, 3301, 3302, 3316,
     3319, 3360, 3364, 3366, 3304, 3318, 3329, 3369, 3327, 3372,
     3319, 3316, 3332, 3341, 3330, 3325, 3380, 3332, 3384, 3387,
     3349, 3390, 3392, 3339, 3347, 3397, 3400, 3402, 3406, 3355,

     3408, 3361, 3357, 3413, 3366, 3418, 3376, 3403, 3421, 3423,
     3425, 3378, 3428, 3376, 3431, 3434, 3389, 3438, 3441, 3444,
     3409, 3450, 3410, 3412, 3454, 3457, 3411, 4759, 3420, 4759,
     3407, 3415, 3414, 3464, 4759, 3426, 3413, 3413, 3470, 3472,
     3420, 3433, 4759, 3434, 3423, 3423, 3479, 3481, 3483, 3443,
     3442, 3447, 3444, 3470, 4759, 3490, 3492, 3454, 3497, 3499,
     3501, 3503, 3448, 3448, 3448, 3508, 3471, 3463, 3513, 3514,
     3514, 3520, 3523, 3470, 3526, 3528, 3530, 3532, 3486, 3535,
     3516, 3484, 3506, 3541, 3484, 3486, 3547, 3550, 3502, 3553,
     3557, 3537, 3563, 3500, 3565, 3529, 3570, 3572, 3574, 3527,

     3578, 3581, 3583, 3532, 3533, 3589, 3591, 3539, 3552, 3597,
     3553, 3599, 3601, 3549, 3549, 3605, 3607, 3609, 3569, 3615,
     3617, 3569, 3619, 3623, 3625, 3627, 3581, 3631, 3635, 3637,
     3585, 3614, 3641, 3643, 3599, 3596, 3609, 3608, 3609, 3650,
     4759, 3652, 4759, 3607, 4759, 3657, 3659, 3661, 3608, 3613,
     3615, 3626, 3618, 3669, 3622, 3675, 3677, 3679, 3681, 3649,
     3683, 3685, 3628, 3688, 4759, 4759, 3636, 3691, 3698, 3700,
     3703, 3705, 3640, 3707, 3709, 3637, 3713, 3671, 3715, 3718,
     3696, 3722, 3724, 3677, 3730, 3725, 3727, 3684, 3687, 3738,
     3740, 3718, 3743, 3745, 3698, 3748, 3750, 3753, 3715, 3756,

     3759, 3761, 3764, 3766, 3721, 3769, 3772, 3774, 3777, 3782,
     3785, 3787, 3733, 3790, 3742, 3793, 3795, 3749, 3801, 3759,
     3753, 3804, 3806, 3759, 3754, 3757, 3792, 4759, 3812, 3814,
     3816, 3820, 3778, 3822, 3824, 3828, 3832, 3786, 3781, 3779,
     3786, 3787, 3783, 3839, 3841, 3844, 3846, 3809, 3849, 3851,
     3854, 3856, 3859, 3861, 3863, 3866, 3869, 3820, 3874, 3876,
     3819, 3878, 3842, 3882, 3884, 3886, 4759, 4759, 3842, 3832,
     3891, 3854, 3894, 3842, 3898, 3901, 3903, 3905, 3907, 3909,
     3911, 3913, 3917, 3875, 3921, 3925, 3929, 3931, 3933, 3935,
     3937, 3879, 3874, 3872, 3890, 3892, 3942, 3889, 3891, 3903,

     3895, 3951, 3953, 4759, 3955, 3957, 4759, 3895, 3905, 3905,
     3921, 3908, 3963, 3965, 3908, 3968, 3970, 3972, 3974, 3976,
     3978, 3980, 3930, 3984, 3938, 3928, 3989, 3993, 3995, 3997,
     3999, 3932, 3947, 4002, 4004, 4008, 4014, 4018, 4020, 4022,
     4024, 4026, 4028, 3952, 3956, 3957, 3976, 3976, 4759, 3980,
     3992, 4759, 4759, 3979, 4759, 4759, 4036, 4038, 4040, 4044,
     3994, 3988, 4046, 4048, 4051, 4053, 4055, 4057, 4061, 4063,
     4066, 4070, 4072, 4076, 4079, 4081, 4083, 4005, 4086, 4088,
     4013, 4038, 4759, 4092, 4094, 4036, 4099, 4104, 4107, 4109,
     4111, 4114, 4116, 4119, 4121, 4123, 4125, 4129, 4131, 4135,

     4137, 4139, 4141, 4145, 4147, 4151, 4053, 4047, 4157, 4073,
     4159, 4163, 4165, 4167, 4169, 4171, 4174, 4176, 4178, 4180,
     4182, 4083, 4093, 4105, 4184, 4186, 4104, 4102, 4111, 4188,
     4192, 4141, 4194, 4196, 4198, 4200, 4148, 4204, 4210, 4214,
     4216, 4218, 4220, 4759, 4232, 4236, 4240, 4244, 4248, 4252,
     4256, 4260, 4264, 4268
    } ;

static yyconst flex_int16_t yy_def[2955] =
    {   0,
     2945, 2945, 2946, 2946, 2947, 2947, 2948, 2948, 2946, 2946,
     2946, 2946, 2949, 2949, 2950, 2950, 2951, 2951, 2944, 2944,
     2944,   21, 2944,   21, 2944,   24,   24,   24,   24, 2944,
     2944,   24,   24, 2944, 2944, 2952, 2953, 2954, 2944, 2944,
     2944, 2944, 2944, 2944,   21,   24,   24,   24,   24,   24,
       30, 2944,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2944,   24,   24,   24, 2944,   24, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,

       24, 2952, 2953, 2954, 2944, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944,   24, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2944, 2944,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2944, 2944,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2944, 2944,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2944, 2944,   24,   24,   24,   24,   24,   24, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2944, 2944,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2944, 2944,   24,
       24,   24,   24,   24, 2944, 2944,   24,   24,   24,   24,
       24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2944, 2944,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2944, 2944,   24,
       24,   24,   24,   24, 2944, 2944,   24,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24, 2944,
     2944,   24,   24,   24, 2944, 2944,   24,   24,   24,   24,
       24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,
       24,   24,   24,   24, 2944, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24, 2944,
     2944,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2944,
     2944,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2944, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2944, 2944,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2944, 2944,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   24,   24,
       24,   24,   24,   24, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944,   24,   24, 2944, 2944, 2944,   24, 2944,
     2944,   24, 2944, 2944, 2944, 2944,   24, 2944, 2944,   24,
       24,   24,   24,    0, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944
    } ;

static yyconst flex_int16_t yy_nxt[4824] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2944,
       44,   41,   44, 2944,   41,   32,  734,   48,   33,   50,
       50,   50,   48, 2944,   50,   50,   50,  117,  735,   72,
       72,  108,  119,   53,  114,  122,   72,   72,   53,   73,
       73,   73,  109,  178,  115,  983,  120,  118,  179,  124,
       74,  123,  121,   34,   20,   21,   22,   20,   23,  125,
       25,  162,   26,   27,   28,   29,   29,   29,   30,   74,
       31,   20,  163,   76,   76,  187,   72,   72,  390,   32,
      391,   48,   33,   50,   50,   50,   73,   73,   73,  188,

      126,  160,  127,  861,   74,  128,  131,   74,  136,  136,
      132,  161,  137,  137,  137,   76,   76,  129,  984,  168,
      862,  193,  130,   74,  202,  169,   74,   34,   45,   45,
      133,  170,   46,  203,   46,   47,   48,   49,   50,   50,
       50,   51,   46,   52,  194,   46,   46,   46,   46,   46,
       46,   46,   53,   46,   46,   54,   46,   46,   46,   46,
       46,   46,   46,   46,   55,   56,   57,   58,   46,   59,
       46,   60,   61,   46,   46,   62,   63,   64,   65,   46,
       46,   66,   67,   68,   69,   70,   46,   46,   46,   46,
       46,   46,  165,   72,   72,  210,  166,   46,   46,   46,

       46,   46,   46, 2944,  211, 2944,  219,  171,  167,  239,
      180,   76,   76,  220,   46,  172,  240,   46,  181,   48,
      231,   50,   50,   50,  985,  249,   46,   46,   46,   46,
      232,   46,   74,   46,   46,  241,  250,   46,   46,   46,
       46,  242,  247,   46,   46,   46,   46,   46,   77,   72,
       72,   74,  248,  252,  189,   78,  174,  253,  175,   73,
       73,   73,   79,  392,  392,  190,  176,   80,  191,  254,
       74,  192,  177,  258,  265,   81,  137,  137,  137,  266,
      989,  259,   82,   83,   84,   85,   86,   87,   88,   74,
       89,  274,  724,   90,   91,   92,   93,   94,   95,   96,

       97,   98,  267,   99,  139,  275,   72,   72,  276,  321,
      268,  990,  140,  322,  215,  215,  137,  137,  137,  141,
      142,  143,  144,  145,  146,  147,  725,  148,  216,  313,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  182,
      158,  996,  196,  183,  314,  315,  197,  244,  244,  255,
      184,  997,  198,  185,  199,  256,  269,  200,  201,  186,
      270,  257,  245,  281,  261,  347,  262,  271,  277,  290,
      272,  348,  337,  217,  263,  338,  273,  284,  291,  278,
      264,  285,  279,  311,  311,  280,  282,  286,  317,  287,
      319,  319,  288,  289,  297,  298,  299,  332,  312,  318,

      353,  300,  215,  215,  365,  320,  358,  358,  333,  359,
      366,  360,  361,  361,  244,  244,  216,  393,  393,  421,
      399,  400,  401,  354,  406,  406,  362,  402,  417,  245,
      422,  439,  394,  415,  415,  423,  423,  425,  973,  407,
      363,  426,  440,  418,  419,  364,  430,  430,  416,  444,
      424,  454,  445,  456,  456,  974,  463,  455,  466,  466,
      998,  431,  472,  472,  408,  464,  474,  474,  457,  311,
      311,  481,  481,  467,  319,  319,  497,  473,  498,  465,
      499,  475,  488,  488,  312,  490,  490,  492,  492,  320,
      500,  507,  502,  516,  516,  520,  522,  522,  527,  999,

      491,  503,  493,  531,  873,  528,  521,  874,  517, 1000,
      532,  523,  534,  534,  846,  508,  361,  361,  529,  476,
      358,  358,  636,  359, 1001,  360,  535,  543,  543,  880,
      362,  547,  547,  552,  552,  554,  554,  570,  570,  392,
      392,  393,  393,  494, 1002,  548,  637,  553,  847,  555,
      881,  571,  577,  577,  578,  578,  394,  585,  585,  590,
      590,  406,  406,  595,  595,  597,  597,  599,  599,  579,
      415,  415,  586, 1003,  591, 1004,  407,  606,  606,  991,
      598, 1006,  600,  423,  423,  416,  613,  613,  587,  615,
      615,  617,  617,  430,  430,  622,  622,  588,  424,  623,

      992,  624, 1008,  625,  616,  649,  618, 1009,  431,  628,
      628,  589, 1012,  626,  645,  645,  650,  651,  651,  663,
      601,  656,  656,  781,  629,  986,  456,  456,  987,  646,
      661,  661,  652,  664,  671,  671,  657,  782,  466,  466,
      630,  457,  472,  472, 1015,  658, 1016,  619, 1017,  631,
      676,  676,  659,  467,  474,  474, 1018,  473,  677,  677,
      481,  481,  685,  685, 1019,  660,  488,  488, 1020,  475,
     1026,  686,  490,  490,  691,  691, 1029,  687,  492,  492,
      692,  692,  694,  694,  707,  707, 1030,  491,  516,  516,
     1031,  695, 1032,  493,  718,  718, 1033,  696, 1034,  708,

      522,  522, 1035,  517,  723,  723,  534,  534,  736,  736,
      543,  543,  547,  547, 1036,  523,  745,  745,  552,  552,
      535,  749,  749,  554,  554, 1037,  548, 1038,  750,  750,
     1039,  751,  553,  752,  762,  762, 1040,  555,  764,  764,
      570,  570,  770,  770, 1041,  771, 1042,  772,  763,  775,
      775, 1045,  765, 1046,  571,  577,  577,  578,  578,  779,
      779, 1047,  766,  776,  585,  585,  786,  786,  590,  590,
      790,  790,  579,  595,  595,  597,  597,  795,  795,  586,
      599,  599, 1048,  591,  796,  796,  797,  797,  606,  606,
      598,  806,  806,  613,  613,  600,  615,  615,  811,  811,

     1049,  798,  617,  617,  812,  812,  807,  814,  814,  622,
      622,  616,  628,  628,  822,  822, 1050,  618,  826,  826,
      829,  829,  815,  645,  645,  840,  840,  629,  651,  651,
      845,  845, 1051,  827, 1052,  830,  656,  656,  646,  850,
      850,  661,  661,  652,  671,  671,  676,  676,  677,  677,
     1053,  657,  685,  685, 1054,  876,  876,  691,  691,  692,
      692,  686,  882,  882,  694,  694, 1056,  687,  877,  885,
      885,  707,  707,  695,  897,  897, 1057,  883, 1058,  696,
      900,  900,  886,  718,  718, 1059,  708,  723,  723,  911,
      911,  736,  736,  928,  928,  901,  930,  930,  745,  745,

      749,  749,  762,  762,  912,  950,  950,  929,  750,  750,
      931,  751, 1076,  752,  947,  947,  763,  948, 1079,  949,
      764,  764,  770,  770, 1080,  771, 1081,  772,  775,  775,
      959,  959,  779,  779,  765,  965,  965,  786,  786,  971,
      971, 1082,  776,  790,  790,  795,  795,  796,  796, 1083,
      966,  797,  797, 1084,  972,  979,  979,  806,  806,  988,
      988,  811,  811,  812,  812, 1085,  798,  993,  993,  814,
      814, 1086,  807,  995,  995,  822,  822,  826,  826, 1005,
     1005, 1087,  994, 1088,  815,  829,  829, 1007, 1007,  967,
     1010, 1010,  827, 1013, 1013,  840,  840, 1021, 1021, 1090,

      830, 1024, 1024,  845,  845, 1011, 1027, 1027, 1014,  850,
      850, 1091, 1022, 1043, 1043, 1092, 1025, 1055, 1055,  876,
      876, 1028,  882,  882, 1074, 1074, 1075, 1075, 1044,  885,
      885, 1093,  877, 1077, 1077,  897,  897,  883, 1089, 1089,
      900,  900,  886, 1094, 1101, 1102, 1102, 1103, 1078, 1104,
     1105, 1023, 1060, 1061, 1062,  901, 1106, 1063, 1064, 1065,
     1066, 1067, 1068, 1107, 1069, 1070, 1071, 1072, 1073, 1095,
     1095, 1098, 1098,  911,  911, 1108, 1109, 1110, 1096, 1111,
     1112, 1113, 1114, 1119, 1097, 1120, 1099, 1121,  912, 1115,
     1115,  928,  928, 1117, 1117,  930,  930, 1118, 1118, 1122,

     1123, 1124, 1100, 1116, 1125,  929, 1126, 1127, 1128,  931,
     1129, 1130, 1131,  947,  947, 1132,  948, 1133,  949,  950,
      950, 1134, 1135, 1136, 1137, 1138, 1139,  959,  959, 1140,
     1141, 1141, 1143, 1144, 1145,  965,  965, 1146, 1146, 1147,
     1147, 1149, 1150, 1151, 1142,  971,  971, 1152, 1152, 1153,
      966, 1154, 1155, 1158, 1148, 1156, 1156, 1159,  979,  979,
      972, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1157,  988,  988, 1169, 1170, 1171, 1171,  993,  993, 1187,
     1187,  995,  995, 1188, 1188, 1190, 1191, 1192, 1193, 1196,
     1172, 1197,  994, 1198, 1173, 1174, 1175, 1199, 1189, 1176,

     1177, 1178, 1179, 1180, 1181, 1200, 1182, 1183, 1184, 1185,
     1186, 1194, 1194, 1005, 1005, 1007, 1007, 1201, 1010, 1010,
     1202, 1202, 1203, 1013, 1013, 1205, 1195, 1204, 1204, 1206,
     1207, 1208, 1218, 1011, 1209, 1209, 1211, 1211, 1014, 1021,
     1021, 1214, 1214, 1215, 1215, 1024, 1024, 1217, 1217, 1210,
     1220, 1212, 1219, 1219, 1022, 1027, 1027, 1225, 1216, 1226,
     1025, 1221, 1221, 1223, 1223, 1227, 1227, 1213, 1229, 1230,
     1028, 1231, 1232, 1233, 1234, 1235, 1222, 1236, 1224, 1238,
     1228, 1043, 1043, 1237, 1237, 1239, 1240, 1241, 1243, 1244,
     1245, 1246, 1055, 1055, 1242, 1247, 1044, 1248, 1248, 1251,

     1252, 1253, 1257, 1254, 1258, 1259, 1249, 1255, 1262, 1263,
     1260, 1264, 1250, 1256, 1261, 1266, 1267, 1265, 1269, 1273,
     1274, 1275, 1270, 1074, 1074, 1075, 1075, 1277, 1271, 1077,
     1077, 1272, 1276, 1276, 1268, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1078, 1089, 1089, 1287, 1287, 1290,
     1291, 1292, 1293, 1294, 1095, 1095, 1298, 1295, 1295, 1098,
     1098, 1299, 1288, 1096, 1297, 1297, 1289, 1102, 1102, 1097,
     1296, 1300, 1301, 1302, 1099, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1309, 1312, 1313, 1115, 1115, 1314, 1314, 1117,
     1117, 1118, 1118, 1315, 1316, 1310, 1317, 1318, 1319, 1116,

     1330, 1331, 1332, 1335, 1336, 1333, 1333, 1311, 1320, 1321,
     1337, 1322, 1338, 1338, 1340, 1340, 1323, 1324, 1325, 1334,
     1326, 1327, 1328, 1342, 1343, 1329, 1339, 1344, 1341, 1345,
     1346, 1141, 1141, 1347, 1347, 1352, 1348, 1353, 1349, 1350,
     1350, 1146, 1146, 1147, 1147, 1142, 1354, 1354, 1355, 1356,
     1357, 1152, 1152, 1358, 1351, 1359, 1360, 1362, 1148, 1156,
     1156, 1361, 1361, 1363, 1364, 1364, 1366, 1369, 1367, 1370,
     1370, 1372, 1373, 1374, 1157, 1368, 1375, 1375, 1377, 1365,
     1378, 1171, 1171, 1380, 1371, 1379, 1379, 1384, 1381, 1385,
     1386, 1376, 1382, 1387, 1389, 1390, 1172, 1388, 1383, 1391,

     1393, 1394, 1396, 1400, 1401, 1392, 1397, 1187, 1187, 1188,
     1188, 1403, 1398, 1402, 1402, 1399, 1404, 1405, 1406, 1395,
     1194, 1194, 1407, 1407, 1189, 1408, 1409, 1410, 1411, 1412,
     1413, 1202, 1202, 1414, 1414, 1195, 1204, 1204, 1417, 1418,
     1419, 1420, 1209, 1209, 1421, 1421, 1211, 1211, 1415, 1422,
     1422, 1423, 1416, 1214, 1214, 1215, 1215, 1210, 1424, 1424,
     1425, 1212, 1217, 1217, 1219, 1219, 1426, 1221, 1221, 1429,
     1216, 1427, 1427, 1223, 1223, 1428, 1428, 1430, 1227, 1227,
     1431, 1431, 1222, 1432, 1433, 1434, 1435, 1436, 1224, 1437,
     1438, 1439, 1440, 1228, 1237, 1237, 1441, 1442, 1443, 1444,

     1445, 1446, 1248, 1248, 1447, 1448, 1448, 1450, 1451, 1452,
     1453, 1249, 1454, 1455, 1456, 1457, 1458, 1250, 1449, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1276, 1276, 1474, 1475, 1476, 1477,
     1478, 1479, 1480, 1481, 1482, 1287, 1287, 1483, 1483, 1484,
     1485, 1486, 1487, 1488, 1489, 1489, 1295, 1295, 1490, 1491,
     1288, 1297, 1297, 1492, 1493, 1494, 1495, 1496, 1497, 1296,
     1498, 1499, 1500, 1501, 1309, 1309, 1502, 1502, 1503, 1504,
     1505, 1314, 1314, 1506, 1507, 1507, 1509, 1512, 1310, 1510,
     1510, 1513, 1514, 1515, 1517, 1518, 1519, 1520, 1508, 1521,

     1522, 1523, 1524, 1511, 1525, 1516, 1526, 1333, 1333, 1527,
     1527, 1530, 1528, 1531, 1529, 1532, 1338, 1338, 1533, 1533,
     1537, 1334, 1340, 1340, 1534, 1534, 1538, 1535, 1541, 1536,
     1339, 1539, 1539, 1542, 1347, 1347, 1341, 1348, 1544, 1349,
     1350, 1350, 1543, 1543, 1545, 1540, 1354, 1354, 1546, 1547,
     1548, 1549, 1550, 1551, 1557, 1351, 1361, 1361, 1552, 1552,
     1554, 1554, 1364, 1364, 1556, 1556, 1558, 1559, 1560, 1370,
     1370, 1561, 1561, 1553, 1562, 1555, 1563, 1365, 1564, 1564,
     1375, 1375, 1566, 1566, 1371, 1567, 1568, 1568, 1379, 1379,
     1570, 1571, 1572, 1565, 1573, 1376, 1574, 1575, 1576, 1577,

     1578, 1569, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1402, 1402, 1592, 1593, 1594,
     1595, 1595, 1407, 1407, 1597, 1598, 1599, 1600, 1601, 1602,
     1414, 1414, 1603, 1603, 1604, 1596, 1605, 1606, 1607, 1608,
     1421, 1421, 1422, 1422, 1609, 1415, 1424, 1424, 1610, 1611,
     1427, 1427, 1428, 1428, 1612, 1613, 1613, 1431, 1431, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1614, 1627, 1628, 1629, 1630, 1631, 1631, 1448, 1448, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1449, 1643, 1644, 1645, 1646, 1648, 1649, 1647, 1650, 1651,

     1652, 1653, 1654, 1656, 1657, 1658, 1659, 1660, 1661, 1615,
     1662, 1663, 1664, 1655, 1665, 1666, 1483, 1483, 1667, 1668,
     1669, 1670, 1671, 1489, 1489, 1672, 1673, 1674, 1675, 1676,
     1677, 1678, 1681, 1682, 1679, 1683, 1684, 1502, 1502, 1685,
     1686, 1687, 1680, 1688, 1507, 1507, 1689, 1689, 1690, 1510,
     1510, 1691, 1691, 1692, 1693, 1694, 1698, 1695, 1508, 1696,
     1696, 1699, 1700, 1511, 1701, 1702, 1703, 1704, 1705, 1707,
     1708, 1709, 1710, 1697, 1706, 1527, 1527, 1711, 1528, 1712,
     1529, 1713, 1714, 1533, 1533, 1534, 1534, 1715, 1535, 1716,
     1536, 1717, 1718, 1539, 1539, 1719, 1719, 1720, 1721, 1543,

     1543, 1722, 1723, 1724, 1725, 1726, 1727, 1540, 1728, 1729,
     1552, 1552, 1730, 1730, 1554, 1554, 1731, 1731, 1556, 1556,
     1732, 1733, 1734, 1735, 1736, 1553, 1561, 1561, 1737, 1555,
     1564, 1564, 1738, 1738, 1566, 1566, 1739, 1568, 1568, 1740,
     1740, 1741, 1741, 1744, 1745, 1565, 1746, 1747, 1748, 1749,
     1750, 1751, 1569, 1752, 1753, 1753, 1742, 1756, 1757, 1759,
     1760, 1758, 1761, 1762, 1763, 1764, 1765, 1767, 1771, 1754,
     1768, 1768, 1772, 1773, 1595, 1595, 1775, 1766, 1774, 1774,
     1776, 1777, 1778, 1779, 1779, 1769, 1781, 1603, 1603, 1596,
     1782, 1783, 1784, 1785, 1755, 1743, 1786, 1787, 1780, 1788,

     1789, 1790, 1613, 1613, 1791, 1791, 1792, 1792, 1794, 1795,
     1796, 1797, 1798, 1799, 1770, 1800, 1801, 1614, 1802, 1803,
     1804, 1793, 1805, 1631, 1631, 1806, 1807, 1808, 1809, 1810,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1819,
     1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
     1831, 1832, 1833, 1820, 1834, 1835, 1836, 1837, 1838, 1839,
     1840, 1841, 1842, 1843, 1844, 1845, 1845, 1847, 1848, 1849,
     1850, 1851, 1852, 1853, 1854, 1854, 1856, 1856, 1858, 1859,
     1846, 1860, 1861, 1862, 1689, 1689, 1863, 1863, 1855, 1865,
     1857, 1691, 1691, 1866, 1867, 1868, 1696, 1696, 1870, 1870,

     1864, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1869,
     1697, 1879, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
     1719, 1719, 1889, 1889, 1891, 1892, 1893, 1893, 1895, 1895,
     1899, 1880, 1897, 1897, 1900, 1901, 1890, 1902, 1730, 1730,
     1903, 1894, 1904, 1896, 1731, 1731, 1905, 1898, 1906, 1907,
     1908, 1738, 1738, 1909, 1740, 1740, 1741, 1741, 1910, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1922, 1742, 1753, 1753, 1921, 1921, 1923, 1923, 1925, 1926,
     1927, 1928, 1929, 1930, 1930, 1932, 1933, 1754, 1934, 1935,
     1936, 1924, 1768, 1768, 1937, 1937, 1938, 1939, 1931, 1940,

     1941, 1774, 1774, 1942, 1943, 1943, 1945, 1769, 1946, 1779,
     1779, 1947, 1947, 1948, 1949, 1950, 1951, 1952, 1952, 1944,
     1954, 1955, 1955, 1959, 1780, 1957, 1957, 1960, 1791, 1791,
     1792, 1792, 1953, 1961, 1961, 1962, 1956, 1963, 1964, 1971,
     1958, 1965, 1965, 1968, 1968, 1793, 1972, 1973, 1974, 1975,
     1966, 1978, 1969, 1976, 1976, 1979, 1967, 1980, 1970, 1981,
     1982, 1983, 1984, 1985, 1986, 1987, 1987, 1989, 1977, 1990,
     1819, 1819, 1991, 1991, 1992, 1993, 1994, 1995, 1996, 1999,
     1988, 1997, 1997, 2000, 2000, 1820, 2002, 2003, 2004, 2005,
     2005, 2007, 2008, 2009, 2010, 2011, 1998, 2012, 2001, 2013,

     2014, 2016, 2017, 2018, 2006, 1845, 1845, 2019, 2019, 2015,
     2020, 2021, 2022, 2023, 2024, 2025, 2026, 1854, 1854, 2029,
     1846, 2027, 2027, 1856, 1856, 2028, 2028, 2030, 2031, 2032,
     2033, 1855, 1863, 1863, 2034, 2034, 2035, 1857, 2036, 2037,
     2038, 2039, 1870, 1870, 2040, 2040, 1864, 2042, 2043, 2044,
     2045, 2046, 2046, 2048, 2049, 2050, 2051, 2052, 2041, 2053,
     2053, 2055, 2056, 2057, 2058, 2047, 2059, 2060, 1889, 1889,
     2061, 2061, 2062, 2054, 2063, 1893, 1893, 2064, 2064, 1895,
     1895, 2067, 1890, 2065, 2065, 1897, 1897, 2066, 2066, 2068,
     1894, 2069, 2069, 2075, 1896, 2071, 2071, 2073, 2073, 2076,

     1898, 2077, 2078, 2079, 2080, 2081, 2070, 1910, 1910, 2082,
     2072, 2083, 2074, 2084, 2085, 2086, 2087, 2088, 2088, 2090,
     2090, 2092, 1921, 1921, 2093, 1923, 1923, 2094, 2094, 2095,
     2096, 2097, 2089, 2098, 2091, 2099, 1930, 1930, 2100, 2100,
     1924, 2101, 2101, 2103, 2104, 2104, 2106, 2107, 1937, 1937,
     2108, 1931, 2109, 2110, 2111, 2112, 2102, 1943, 1943, 2105,
     2113, 2113, 2114, 2115, 1947, 1947, 2116, 2117, 2117, 2119,
     2121, 2123, 1944, 1952, 1952, 2122, 2122, 2126, 2120, 1955,
     1955, 2127, 2118, 2124, 2124, 1957, 1957, 2128, 1953, 2125,
     2125, 1961, 1961, 2129, 1956, 2130, 1965, 1965, 2131, 2134,

     1958, 2132, 2132, 1968, 1968, 1966, 2135, 2135, 2137, 2138,
     2139, 1967, 1969, 2142, 2133, 2140, 2140, 2144, 1970, 2136,
     1976, 1976, 2143, 2143, 2141, 2145, 2146, 2147, 2148, 2149,
     2150, 2151, 2152, 1987, 1987, 1977, 2153, 2153, 2154, 2154,
     2156, 1991, 1991, 2157, 2158, 2159, 2160, 2161, 1988, 1997,
     1997, 2162, 2162, 2155, 2163, 2000, 2000, 2164, 2164, 2165,
     2166, 2167, 2005, 2005, 1998, 2168, 2168, 2169, 2170, 2171,
     2001, 2172, 2173, 2174, 2175, 2176, 2177, 2006, 2178, 2179,
     2019, 2019, 2180, 2181, 2182, 2182, 2188, 2184, 2186, 2186,
     2189, 2189, 2027, 2027, 2028, 2028, 2191, 2192, 2183, 2185,

     2193, 2194, 2187, 2195, 2190, 2034, 2034, 2196, 2197, 2198,
     2199, 2199, 2201, 2040, 2040, 2202, 2202, 2203, 2205, 2206,
     2207, 2046, 2046, 2209, 2200, 2208, 2208, 2041, 2210, 2211,
     2212, 2213, 2053, 2053, 2215, 2047, 2214, 2214, 2204, 2216,
     2217, 2218, 2219, 2220, 2061, 2061, 2054, 2221, 2222, 2064,
     2064, 2065, 2065, 2066, 2066, 2223, 2224, 2069, 2069, 2225,
     2225, 2071, 2071, 2226, 2226, 2073, 2073, 2227, 2227, 2228,
     2229, 2230, 2070, 2231, 2231, 2233, 2072, 2234, 2235, 2236,
     2074, 2237, 2238, 2239, 2240, 2241, 2088, 2088, 2232, 2242,
     2242, 2090, 2090, 2243, 2243, 2244, 2244, 2246, 2094, 2094,

     2247, 2089, 2248, 2249, 2250, 2251, 2091, 2100, 2100, 2253,
     2245, 2101, 2101, 2252, 2252, 2104, 2104, 2254, 2254, 2255,
     2256, 2257, 2258, 2259, 2260, 2261, 2102, 2113, 2113, 2264,
     2105, 2262, 2262, 2265, 2117, 2117, 2266, 2266, 2267, 2268,
     2269, 2122, 2122, 2270, 2124, 2124, 2263, 2125, 2125, 2118,
     2271, 2272, 2273, 2274, 2275, 2276, 2276, 2132, 2132, 2277,
     2278, 2278, 2135, 2135, 2279, 2280, 2281, 2282, 2140, 2140,
     2133, 2283, 2284, 2143, 2143, 2136, 2285, 2141, 2286, 2287,
     2288, 2289, 2290, 2291, 2292, 2292, 2294, 2153, 2153, 2154,
     2154, 2295, 2295, 2296, 2297, 2297, 2299, 2300, 2301, 2293,

     2302, 2162, 2162, 2303, 2155, 2164, 2164, 2304, 2305, 2298,
     2306, 2168, 2168, 2307, 2308, 2309, 2310, 2311, 2312, 2313,
     2314, 2315, 2316, 2317, 2318, 2182, 2182, 2319, 2319, 2320,
     2321, 2186, 2186, 2322, 2322, 2323, 2189, 2189, 2327, 2183,
     2328, 2324, 2324, 2329, 2325, 2187, 2326, 2330, 2331, 2332,
     2190, 2333, 2333, 2335, 2199, 2199, 2336, 2336, 2337, 2202,
     2202, 2338, 2339, 2343, 2344, 2334, 2345, 2352, 2200, 2208,
     2208, 2340, 2346, 2346, 2348, 2348, 2341, 2353, 2342, 2350,
     2350, 2214, 2214, 2354, 2355, 2356, 2347, 2357, 2349, 2358,
     2359, 2360, 2361, 2351, 2362, 2363, 2225, 2225, 2226, 2226,

     2227, 2227, 2364, 2365, 2366, 2231, 2231, 2367, 2367, 2368,
     2369, 2370, 2371, 2372, 2373, 2374, 2375, 2375, 2377, 2379,
     2232, 2242, 2242, 2243, 2243, 2244, 2244, 2378, 2378, 2380,
     2380, 2376, 2382, 2383, 2384, 2385, 2252, 2252, 2386, 2387,
     2245, 2254, 2254, 2388, 2381, 2389, 2390, 2391, 2392, 2393,
     2262, 2262, 2394, 2394, 2395, 2396, 2266, 2266, 2397, 2398,
     2398, 2400, 2401, 2402, 2403, 2263, 2404, 2405, 2406, 2276,
     2276, 2407, 2278, 2278, 2399, 2408, 2409, 2410, 2411, 2411,
     2413, 2413, 2414, 2415, 2416, 2417, 2418, 2418, 2420, 2420,
     2422, 2292, 2292, 2412, 2423, 2423, 2424, 2295, 2295, 2425,

     2427, 2419, 2428, 2421, 2297, 2297, 2293, 2426, 2426, 2429,
     2430, 2431, 2431, 2433, 2434, 2435, 2436, 2437, 2438, 2298,
     2439, 2440, 2441, 2442, 2443, 2444, 2432, 2445, 2319, 2319,
     2446, 2447, 2322, 2322, 2448, 2324, 2324, 2450, 2325, 2451,
     2326, 2452, 2453, 2454, 2455, 2463, 2449, 2456, 2456, 2458,
     2458, 2333, 2333, 2460, 2460, 2461, 2461, 2336, 2336, 2464,
     2465, 2457, 2466, 2459, 2467, 2334, 2468, 2469, 2470, 2462,
     2471, 2346, 2346, 2472, 2472, 2348, 2348, 2473, 2473, 2350,
     2350, 2474, 2474, 2475, 2476, 2347, 2477, 2478, 2479, 2349,
     2480, 2481, 2482, 2351, 2483, 2484, 2485, 2486, 2487, 2488,

     2489, 2489, 2367, 2367, 2491, 2492, 2492, 2494, 2495, 2496,
     2496, 2498, 2498, 2500, 2502, 2490, 2375, 2375, 2501, 2501,
     2493, 2378, 2378, 2503, 2497, 2505, 2499, 2380, 2380, 2504,
     2504, 2376, 2506, 2507, 2508, 2509, 2509, 2511, 2512, 2513,
     2514, 2515, 2381, 2516, 2517, 2394, 2394, 2518, 2519, 2519,
     2510, 2521, 2398, 2398, 2522, 2522, 2523, 2524, 2525, 2525,
     2527, 2528, 2529, 2520, 2530, 2531, 2532, 2399, 2533, 2411,
     2411, 2534, 2534, 2526, 2413, 2413, 2535, 2536, 2537, 2538,
     2418, 2418, 2539, 2539, 2412, 2420, 2420, 2540, 2540, 2541,
     2423, 2423, 2542, 2543, 2544, 2419, 2426, 2426, 2545, 2546,

     2421, 2431, 2431, 2547, 2547, 2548, 2548, 2550, 2551, 2552,
     2553, 2554, 2555, 2556, 2556, 2558, 2432, 2559, 2559, 2563,
     2549, 2561, 2561, 2564, 2565, 2566, 2567, 2568, 2557, 2456,
     2456, 2560, 2574, 2569, 2569, 2562, 2570, 2577, 2571, 2458,
     2458, 2572, 2572, 2457, 2460, 2460, 2461, 2461, 2573, 2573,
     2575, 2575, 2578, 2459, 2579, 2580, 2581, 2582, 2583, 2584,
     2462, 2472, 2472, 2585, 2576, 2473, 2473, 2474, 2474, 2586,
     2587, 2587, 2589, 2590, 2590, 2592, 2593, 2594, 2595, 2596,
     2597, 2598, 2598, 2600, 2588, 2489, 2489, 2591, 2601, 2601,
     2602, 2492, 2492, 2603, 2603, 2604, 2599, 2605, 2496, 2496,

     2490, 2606, 2606, 2498, 2498, 2608, 2493, 2607, 2607, 2501,
     2501, 2609, 2610, 2497, 2504, 2504, 2611, 2614, 2499, 2612,
     2612, 2615, 2509, 2509, 2616, 2616, 2617, 2617, 2619, 2620,
     2620, 2622, 2623, 2623, 2613, 2625, 2625, 2510, 2627, 2628,
     2628, 2618, 2519, 2519, 2621, 2630, 2630, 2624, 2631, 2632,
     2626, 2522, 2522, 2633, 2629, 2525, 2525, 2520, 2634, 2634,
     2635, 2636, 2637, 2638, 2639, 2534, 2534, 2640, 2641, 2642,
     2526, 2539, 2539, 2540, 2540, 2643, 2644, 2645, 2646, 2647,
     2547, 2547, 2548, 2548, 2648, 2648, 2649, 2650, 2651, 2652,
     2653, 2556, 2556, 2654, 2654, 2655, 2658, 2549, 2559, 2559,

     2656, 2656, 2561, 2561, 2657, 2657, 2557, 2659, 2660, 2661,
     2661, 2663, 2560, 2664, 2569, 2569, 2562, 2570, 2665, 2571,
     2666, 2572, 2572, 2662, 2573, 2573, 2667, 2575, 2575, 2668,
     2668, 2669, 2669, 2671, 2671, 2673, 2674, 2674, 2676, 2677,
     2678, 2576, 2679, 2679, 2681, 2670, 2682, 2672, 2587, 2587,
     2675, 2683, 2683, 2684, 2590, 2590, 2680, 2688, 2685, 2685,
     2692, 2686, 2588, 2687, 2690, 2690, 2693, 2693, 2591, 2689,
     2695, 2696, 2696, 2598, 2598, 2698, 2698, 2699, 2691, 2601,
     2601, 2694, 2700, 2700, 2603, 2603, 2697, 2702, 2599, 2703,
     2606, 2606, 2607, 2607, 2704, 2705, 2708, 2701, 2706, 2706,

     2612, 2612, 2709, 2709, 2710, 2711, 2616, 2616, 2617, 2617,
     2712, 2712, 2713, 2707, 2715, 2613, 2620, 2620, 2714, 2714,
     2623, 2623, 2718, 2618, 2716, 2716, 2625, 2625, 2717, 2717,
     2720, 2621, 2628, 2628, 2721, 2624, 2719, 2719, 2630, 2630,
     2724, 2626, 2722, 2722, 2634, 2634, 2725, 2629, 2726, 2727,
     2728, 2729, 2729, 2731, 2731, 2733, 2738, 2723, 2734, 2734,
     2736, 2736, 2648, 2648, 2739, 2740, 2730, 2741, 2732, 2742,
     2654, 2654, 2743, 2735, 2748, 2737, 2656, 2656, 2657, 2657,
     2744, 2744, 2746, 2746, 2661, 2661, 2749, 2749, 2750, 2751,
     2751, 2753, 2668, 2668, 2745, 2756, 2747, 2758, 2662, 2669,

     2669, 2754, 2754, 2752, 2671, 2671, 2755, 2755, 2674, 2674,
     2757, 2757, 2761, 2670, 2759, 2759, 2679, 2679, 2672, 2762,
     2762, 2763, 2675, 2764, 2764, 2683, 2683, 2766, 2760, 2767,
     2680, 2685, 2685, 2768, 2686, 2769, 2687, 2765, 2770, 2690,
     2690, 2771, 2771, 2772, 2693, 2693, 2773, 2773, 2774, 2696,
     2696, 2775, 2775, 2691, 2698, 2698, 2776, 2700, 2700, 2694,
     2777, 2777, 2778, 2778, 2697, 2780, 2780, 2782, 2782, 2784,
     2706, 2706, 2701, 2785, 2785, 2786, 2786, 2779, 2709, 2709,
     2781, 2792, 2783, 2788, 2788, 2707, 2790, 2790, 2712, 2712,
     2787, 2714, 2714, 2793, 2716, 2716, 2717, 2717, 2789, 2794,

     2795, 2791, 2719, 2719, 2796, 2722, 2722, 2797, 2797, 2798,
     2799, 2800, 2801, 2729, 2729, 2802, 2802, 2731, 2731, 2804,
     2723, 2803, 2803, 2734, 2734, 2805, 2805, 2807, 2730, 2736,
     2736, 2808, 2732, 2806, 2806, 2809, 2810, 2811, 2735, 2812,
     2744, 2744, 2813, 2813, 2737, 2746, 2746, 2814, 2814, 2815,
     2749, 2749, 2816, 2816, 2745, 2751, 2751, 2818, 2818, 2747,
     2819, 2819, 2754, 2754, 2755, 2755, 2817, 2821, 2821, 2752,
     2757, 2757, 2823, 2825, 2820, 2759, 2759, 2824, 2824, 2762,
     2762, 2822, 2826, 2764, 2764, 2827, 2827, 2828, 2828, 2760,
     2830, 2831, 2771, 2771, 2832, 2773, 2773, 2765, 2833, 2775,

     2775, 2829, 2834, 2834, 2777, 2777, 2778, 2778, 2836, 2836,
     2780, 2780, 2837, 2837, 2782, 2782, 2839, 2835, 2838, 2838,
     2843, 2779, 2785, 2785, 2844, 2781, 2786, 2786, 2845, 2783,
     2840, 2840, 2788, 2788, 2841, 2841, 2790, 2790, 2842, 2842,
     2846, 2787, 2847, 2797, 2797, 2848, 2849, 2789, 2850, 2851,
     2852, 2791, 2802, 2802, 2803, 2803, 2805, 2805, 2806, 2806,
     2853, 2854, 2855, 2856, 2813, 2813, 2814, 2814, 2857, 2816,
     2816, 2858, 2858, 2818, 2818, 2819, 2819, 2859, 2859, 2821,
     2821, 2860, 2860, 2817, 2861, 2824, 2824, 2862, 2863, 2820,
     2827, 2827, 2869, 2822, 2828, 2828, 2864, 2864, 2865, 2865,

     2867, 2867, 2870, 2834, 2834, 2871, 2871, 2876, 2829, 2836,
     2836, 2877, 2866, 2878, 2868, 2837, 2837, 2879, 2835, 2838,
     2838, 2872, 2872, 2840, 2840, 2841, 2841, 2842, 2842, 2874,
     2874, 2880, 2881, 2882, 2883, 2886, 2873, 2884, 2884, 2858,
     2858, 2859, 2859, 2887, 2875, 2860, 2860, 2888, 2888, 2864,
     2864, 2885, 2865, 2865, 2890, 2890, 2867, 2867, 2891, 2891,
     2902, 2889, 2892, 2892, 2894, 2894, 2866, 2871, 2871, 2907,
     2868, 2872, 2872, 2896, 2896, 2908, 2893, 2874, 2874, 2895,
     2897, 2897, 2898, 2898, 2900, 2900, 2873, 2903, 2903, 2905,
     2905, 2910, 2875, 2884, 2884, 2909, 2909, 2899, 2922, 2901,

     2911, 2911, 2904, 2923, 2906, 2888, 2888, 2885, 2913, 2913,
     2890, 2890, 2891, 2891, 2912, 2892, 2892, 2914, 2914, 2889,
     2894, 2894, 2915, 2915, 2896, 2896, 2897, 2897, 2924, 2893,
     2898, 2898, 2916, 2916, 2927, 2895, 2900, 2900, 2917, 2917,
     2918, 2918, 2903, 2903, 2928, 2899, 2920, 2920, 2905, 2905,
     2929, 2901, 2921, 2921, 2930, 2919, 2931, 2904, 2909, 2909,
     2911, 2911, 2932, 2906, 2925, 2925, 2913, 2913, 2914, 2914,
     2915, 2915, 2916, 2916, 2912, 2917, 2917, 2918, 2918, 2926,
     2926, 2920, 2920, 2921, 2921, 2925, 2925, 2926, 2926, 2933,
     2933, 2937, 2919, 2935, 2935, 2933, 2933, 2938, 2938, 2935,

     2935, 2939, 2939, 2940, 2934, 2938, 2938,  982, 2936,  981,
     2934, 2939, 2939,  980, 2936, 2941, 2941, 2941, 2941, 2943,
     2943, 2943, 2943,  978,  977,  976,  975,  970,  969, 2942,
      968, 2942,   24,   24,   24,   24,   35,   35,   35,   35,
       36,   36,   36,   36,   37,   37,   37,   37,   38,   38,
       38,   38,   39,   39,   39,   39,   42,   42,   42,   42,
      102,  964,  102,  102,  103,  103,  963,  103,  104,  104,
      104,  962,  961,  960,  958,  957,  956,  955,  954,  953,
      952,  951,  946,  945,  944,  943,  942,  941,  940,  939,
      938,  937,  936,  935,  934,  933,  932,  927,  926,  925,

      924,  923,  922,  921,  920,  919,  918,  917,  916,  915,
      914,  913,  910,  909,  908,  907,  906,  905,  904,  903,
      902,  899,  898,  896,  895,  894,  893,  892,  891,  890,
      889,  888,  887,  884,  879,  878,  875,  872,  871,  870,
      869,  868,  867,  866,  865,  864,  863,  860,  859,  858,
      857,  856,  855,  854,  853,  852,  851,  849,  848,  844,
      843,  842,  841,  839,  838,  837,  836,  835,  834,  833,
      832,  831,  828,  825,  824,  823,  821,  820,  819,  818,
      817,  816,  813,  810,  809,  808,  805,  804,  803,  802,
      801,  800,  799,  794,  793,  792,  791,  789,  788,  787,

      785,  784,  783,  780,  778,  777,  774,  773,  769,  768,
      767,  761,  760,  759,  758,  757,  756,  755,  754,  753,
      748,  747,  746,  744,  743,  742,  741,  740,  739,  738,
      737,  733,  732,  731,  730,  729,  728,  727,  726,  722,
      721,  720,  719,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  693,  690,  689,  688,  684,  683,  682,  681,
      680,  679,  678,  675,  674,  673,  672,  670,  669,  668,
      667,  666,  665,  662,  655,  654,  653,  648,  647,  644,
      643,  642,  641,  640,  639,  638,  635,  634,  633,  632,

      627,  621,  620,  614,  612,  611,  610,  609,  608,  607,
      605,  604,  603,  602,  596,  594,  593,  592,  584,  583,
      582,  581,  580,  576,  575,  574,  573,  572,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  551,  550,  549,  546,  545,  544,  542,  541,
      540,  539,  538,  537,  536,  533,  530,  526,  525,  524,
      519,  518,  515,  514,  513,  512,  511,  510,  509,  506,
      505,  504,  501,  496,  495,  489,  487,  486,  485,  484,
      483,  482,  480,  479,  478,  477,  471,  470,  469,  468,
      462,  461,  460,  459,  458,  453,  452,  451,  450,  449,

      448,  447,  446,  443,  442,  441,  438,  437,  436,  435,
      434,  433,  432,  429,  428,  427,  420,  414,  413,  412,
      411,  410,  409,  405,  404,  403,  398,  397,  396,  395,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  357,  356,  355,  352,  351,  350,  349,
      346,  345,  344,  343,  342,  341,  340,  339,  336,  335,
      334,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      316,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  296,  295,  294,  293,  292,  283,  260,  251,  246,

      243,  238,  237,  236,  235,  234,  233,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  218,  214,  213,
      212,  209,  208,  207,  206,  205,  205,  204,  195,  173,
      164,  159,  138,  135,  134,  116,  113,  112,  111,  110,
      107,  101,  100,   75,  106,  105,  101,  100,   75,   71,
       71, 2944,   35,   35,   35,   35,   35,   35,   19, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944
    } ;

static yyconst flex_int16_t yy_chk[4824] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,    0,   16,    1,  533,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,   63,  533,   27,
       27,   56,   64,   26,   61,   65,   72,   72,   47,   27,
       27,   27,   56,   90,   61,  802,   64,   63,   90,   66,
       27,   65,   64,    1,    2,    2,    2,    2,    2,   66,
        2,   83,    2,    2,    2,    2,    2,    2,    2,   27,
        2,    2,   83,   29,   29,   93,   48,   48,  242,    2,
      242,   29,    2,   29,   29,   29,   48,   48,   48,   93,

       67,   82,   67,  670,   29,   67,   68,   48,   74,   74,
       68,   82,   74,   74,   74,   76,   76,   67,  803,   86,
      670,   95,   67,   29,   98,   86,   48,    2,   21,   21,
       68,   86,   21,   98,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   95,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       24,   24,   85,  205,  205,  110,   85,   24,   24,   24,

       24,   24,   24,   24,  110,   24,  116,   87,   85,  134,
       91,   50,   50,  116,   24,   87,  134,   24,   91,   50,
      127,   50,   50,   50,  804,  142,   24,   24,   24,   24,
      127,   24,   50,   24,   24,  135,  142,   24,   24,   24,
       24,  135,  141,   24,   24,   24,   24,   24,   30,   73,
       73,   50,  141,  144,   94,   30,   89,  144,   89,   73,
       73,   73,   30,  245,  245,   94,   89,   30,   94,  144,
       73,   94,   89,  146,  149,   30,  136,  136,  136,  149,
      808,  146,   30,   30,   30,   30,   30,   30,   30,   73,
       30,  152,  524,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  150,   30,   78,  152,  137,  137,  152,  180,
      150,  809,   78,  180,  114,  114,  137,  137,  137,   78,
       78,   78,   78,   78,   78,   78,  524,   78,  114,  176,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   92,
       78,  816,   97,   92,  176,  176,   97,  139,  139,  145,
       92,  817,   97,   92,   97,  145,  151,   97,   97,   92,
      151,  145,  139,  154,  148,  204,  148,  151,  153,  157,
      151,  204,  195,  114,  148,  195,  151,  156,  157,  153,
      148,  156,  153,  175,  175,  153,  154,  156,  178,  156,
      179,  179,  156,  156,  164,  164,  164,  191,  175,  178,

      211,  164,  215,  215,  218,  179,  216,  216,  191,  216,
      218,  216,  217,  217,  244,  244,  215,  246,  246,  265,
      251,  251,  251,  211,  255,  255,  217,  251,  263,  244,
      265,  279,  246,  262,  262,  266,  266,  267,  789,  255,
      217,  267,  279,  263,  263,  217,  271,  271,  262,  283,
      266,  292,  283,  293,  293,  789,  299,  292,  300,  300,
      818,  271,  305,  305,  255,  299,  306,  306,  293,  311,
      311,  312,  312,  300,  319,  319,  326,  305,  326,  299,
      326,  306,  320,  320,  311,  322,  322,  323,  323,  319,
      326,  332,  328,  340,  340,  343,  344,  344,  348,  819,

      322,  328,  323,  350,  684,  348,  343,  684,  340,  820,
      350,  344,  352,  352,  653,  332,  361,  361,  348,  306,
      358,  358,  439,  358,  821,  358,  352,  362,  362,  690,
      361,  366,  366,  370,  370,  371,  371,  386,  386,  392,
      392,  393,  393,  323,  823,  366,  439,  370,  653,  371,
      690,  386,  394,  394,  395,  395,  393,  401,  401,  402,
      402,  406,  406,  407,  407,  409,  409,  410,  410,  395,
      415,  415,  401,  824,  402,  825,  406,  416,  416,  810,
      409,  828,  410,  423,  423,  415,  424,  424,  401,  426,
      426,  427,  427,  430,  430,  431,  431,  401,  423,  432,

      810,  432,  831,  432,  426,  450,  427,  832,  430,  434,
      434,  401,  834,  432,  447,  447,  450,  451,  451,  459,
      410,  455,  455,  581,  434,  805,  456,  456,  805,  447,
      457,  457,  451,  459,  467,  467,  455,  581,  466,  466,
      434,  456,  472,  472,  836,  455,  837,  427,  838,  434,
      473,  473,  455,  466,  474,  474,  839,  472,  475,  475,
      481,  481,  485,  485,  841,  455,  488,  488,  842,  474,
      846,  485,  490,  490,  491,  491,  848,  485,  492,  492,
      493,  493,  495,  495,  506,  506,  849,  490,  516,  516,
      851,  495,  852,  492,  517,  517,  853,  495,  854,  506,

      522,  522,  855,  516,  523,  523,  534,  534,  535,  535,
      543,  543,  547,  547,  856,  522,  548,  548,  552,  552,
      534,  553,  553,  554,  554,  858,  547,  859,  555,  555,
      860,  555,  552,  555,  565,  565,  861,  554,  566,  566,
      570,  570,  571,  571,  862,  571,  863,  571,  565,  574,
      574,  865,  566,  866,  570,  577,  577,  578,  578,  579,
      579,  867,  566,  574,  585,  585,  586,  586,  590,  590,
      591,  591,  578,  595,  595,  597,  597,  598,  598,  585,
      599,  599,  868,  590,  600,  600,  601,  601,  606,  606,
      597,  610,  610,  613,  613,  599,  615,  615,  616,  616,

      869,  601,  617,  617,  618,  618,  610,  620,  620,  622,
      622,  615,  628,  628,  629,  629,  870,  617,  633,  633,
      635,  635,  620,  645,  645,  646,  646,  628,  651,  651,
      652,  652,  871,  633,  872,  635,  656,  656,  645,  657,
      657,  661,  661,  651,  671,  671,  676,  676,  677,  677,
      873,  656,  685,  685,  874,  687,  687,  691,  691,  692,
      692,  685,  693,  693,  694,  694,  877,  685,  687,  696,
      696,  707,  707,  694,  708,  708,  878,  693,  879,  694,
      711,  711,  696,  718,  718,  880,  707,  723,  723,  725,
      725,  736,  736,  742,  742,  711,  743,  743,  745,  745,

      749,  749,  762,  762,  725,  765,  765,  742,  750,  750,
      743,  750,  886,  750,  763,  763,  762,  763,  888,  763,
      764,  764,  770,  770,  889,  770,  890,  770,  775,  775,
      776,  776,  779,  779,  764,  783,  783,  786,  786,  788,
      788,  891,  775,  790,  790,  795,  795,  796,  796,  893,
      783,  797,  797,  894,  788,  798,  798,  806,  806,  807,
      807,  811,  811,  812,  812,  895,  797,  813,  813,  814,
      814,  896,  806,  815,  815,  822,  822,  826,  826,  827,
      827,  898,  813,  899,  814,  829,  829,  830,  830,  783,
      833,  833,  826,  835,  835,  840,  840,  843,  843,  902,

      829,  844,  844,  845,  845,  833,  847,  847,  835,  850,
      850,  903,  843,  864,  864,  904,  844,  875,  875,  876,
      876,  847,  882,  882,  883,  883,  884,  884,  864,  885,
      885,  905,  876,  887,  887,  897,  897,  882,  901,  901,
      900,  900,  885,  906,  910,  912,  912,  913,  887,  916,
      917,  843,  881,  881,  881,  900,  918,  881,  881,  881,
      881,  881,  881,  919,  881,  881,  881,  881,  881,  907,
      907,  908,  908,  911,  911,  920,  921,  922,  907,  923,
      924,  925,  926,  932,  907,  933,  908,  934,  911,  927,
      927,  928,  928,  929,  929,  930,  930,  931,  931,  935,

      938,  939,  908,  927,  940,  928,  941,  942,  943,  930,
      944,  945,  946,  947,  947,  948,  947,  949,  947,  950,
      950,  951,  952,  953,  954,  957,  958,  959,  959,  960,
      961,  961,  962,  963,  964,  965,  965,  966,  966,  967,
      967,  968,  969,  970,  961,  971,  971,  972,  972,  973,
      965,  974,  975,  977,  967,  976,  976,  978,  979,  979,
      971,  980,  981,  982,  983,  984,  985,  986,  987,  989,
      976,  988,  988,  990,  991,  992,  992,  993,  993,  994,
      994,  995,  995,  996,  996,  997,  998,  999, 1000, 1002,
      992, 1003,  993, 1004,  992,  992,  992, 1006,  996,  992,

      992,  992,  992,  992,  992, 1008,  992,  992,  992,  992,
      992, 1001, 1001, 1005, 1005, 1007, 1007, 1009, 1010, 1010,
     1011, 1011, 1012, 1013, 1013, 1015, 1001, 1014, 1014, 1016,
     1017, 1018, 1026, 1010, 1019, 1019, 1020, 1020, 1013, 1021,
     1021, 1022, 1022, 1023, 1023, 1024, 1024, 1025, 1025, 1019,
     1029, 1020, 1028, 1028, 1021, 1027, 1027, 1032, 1023, 1033,
     1024, 1030, 1030, 1031, 1031, 1034, 1034, 1020, 1035, 1036,
     1027, 1037, 1038, 1039, 1040, 1041, 1030, 1042, 1031, 1045,
     1034, 1043, 1043, 1044, 1044, 1046, 1048, 1049, 1050, 1052,
     1053, 1054, 1055, 1055, 1049, 1056, 1043, 1057, 1057, 1058,

     1059, 1060, 1062, 1061, 1063, 1064, 1057, 1061, 1066, 1067,
     1065, 1068, 1057, 1061, 1065, 1069, 1070, 1068, 1071, 1072,
     1073, 1076, 1071, 1074, 1074, 1075, 1075, 1079, 1071, 1077,
     1077, 1071, 1078, 1078, 1070, 1080, 1081, 1082, 1083, 1084,
     1085, 1086, 1087, 1088, 1077, 1089, 1089, 1090, 1090, 1091,
     1092, 1093, 1094, 1096, 1095, 1095, 1100, 1097, 1097, 1098,
     1098, 1101, 1090, 1095, 1099, 1099, 1090, 1102, 1102, 1095,
     1097, 1103, 1104, 1105, 1098, 1106, 1107, 1108, 1109, 1110,
     1111, 1112, 1112, 1113, 1114, 1115, 1115, 1116, 1116, 1117,
     1117, 1118, 1118, 1119, 1120, 1112, 1121, 1122, 1123, 1115,

     1125, 1126, 1127, 1129, 1130, 1128, 1128, 1112, 1124, 1124,
     1131, 1124, 1134, 1134, 1135, 1135, 1124, 1124, 1124, 1128,
     1124, 1124, 1124, 1136, 1137, 1124, 1134, 1138, 1135, 1139,
     1140, 1141, 1141, 1142, 1142, 1144, 1142, 1145, 1142, 1143,
     1143, 1146, 1146, 1147, 1147, 1141, 1148, 1148, 1149, 1150,
     1151, 1152, 1152, 1153, 1143, 1154, 1155, 1158, 1147, 1156,
     1156, 1157, 1157, 1159, 1160, 1160, 1161, 1163, 1162, 1164,
     1164, 1165, 1166, 1167, 1156, 1162, 1168, 1168, 1169, 1160,
     1170, 1171, 1171, 1173, 1164, 1172, 1172, 1175, 1174, 1176,
     1177, 1168, 1174, 1178, 1179, 1180, 1171, 1178, 1174, 1181,

     1182, 1183, 1184, 1185, 1186, 1181, 1184, 1187, 1187, 1188,
     1188, 1190, 1184, 1189, 1189, 1184, 1191, 1192, 1193, 1183,
     1194, 1194, 1195, 1195, 1188, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1202, 1203, 1203, 1194, 1204, 1204, 1205, 1206,
     1207, 1208, 1209, 1209, 1210, 1210, 1211, 1211, 1203, 1212,
     1212, 1213, 1203, 1214, 1214, 1215, 1215, 1209, 1216, 1216,
     1218, 1211, 1217, 1217, 1219, 1219, 1220, 1221, 1221, 1225,
     1215, 1222, 1222, 1223, 1223, 1224, 1224, 1226, 1227, 1227,
     1228, 1228, 1221, 1229, 1230, 1231, 1232, 1233, 1223, 1234,
     1235, 1236, 1240, 1227, 1237, 1237, 1241, 1242, 1243, 1244,

     1245, 1247, 1248, 1248, 1249, 1250, 1250, 1251, 1253, 1254,
     1255, 1248, 1256, 1257, 1258, 1259, 1260, 1248, 1250, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1272, 1273, 1274, 1275, 1276, 1276, 1277, 1278, 1279, 1281,
     1282, 1283, 1284, 1285, 1286, 1287, 1287, 1288, 1288, 1289,
     1290, 1291, 1292, 1293, 1294, 1294, 1295, 1295, 1296, 1298,
     1287, 1297, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1295,
     1305, 1306, 1307, 1308, 1309, 1309, 1310, 1310, 1311, 1312,
     1313, 1314, 1314, 1315, 1316, 1316, 1317, 1319, 1309, 1318,
     1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1316, 1327,

     1328, 1329, 1330, 1318, 1331, 1322, 1332, 1333, 1333, 1334,
     1334, 1335, 1334, 1336, 1334, 1337, 1338, 1338, 1339, 1339,
     1342, 1333, 1340, 1340, 1341, 1341, 1343, 1341, 1345, 1341,
     1338, 1344, 1344, 1346, 1347, 1347, 1340, 1347, 1352, 1347,
     1350, 1350, 1351, 1351, 1353, 1344, 1354, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1366, 1350, 1361, 1361, 1362, 1362,
     1363, 1363, 1364, 1364, 1365, 1365, 1367, 1368, 1369, 1370,
     1370, 1371, 1371, 1362, 1372, 1363, 1373, 1364, 1374, 1374,
     1375, 1375, 1376, 1376, 1370, 1377, 1378, 1378, 1379, 1379,
     1380, 1381, 1382, 1374, 1383, 1375, 1384, 1385, 1386, 1387,

     1388, 1378, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1402, 1403, 1404, 1405,
     1406, 1406, 1407, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1414, 1415, 1415, 1416, 1406, 1417, 1418, 1419, 1420,
     1421, 1421, 1422, 1422, 1423, 1414, 1424, 1424, 1425, 1426,
     1427, 1427, 1428, 1428, 1429, 1430, 1430, 1431, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1430, 1443, 1444, 1445, 1446, 1447, 1447, 1448, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1448, 1460, 1461, 1462, 1463, 1464, 1465, 1463, 1466, 1467,

     1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1430,
     1477, 1478, 1479, 1470, 1480, 1482, 1483, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1489, 1490, 1491, 1492, 1493, 1494,
     1496, 1497, 1498, 1499, 1497, 1500, 1501, 1502, 1502, 1503,
     1504, 1505, 1497, 1506, 1507, 1507, 1508, 1508, 1509, 1510,
     1510, 1511, 1511, 1512, 1513, 1514, 1516, 1514, 1507, 1515,
     1515, 1517, 1518, 1510, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1528, 1515, 1523, 1527, 1527, 1529, 1527, 1530,
     1527, 1531, 1532, 1533, 1533, 1534, 1534, 1535, 1534, 1536,
     1534, 1537, 1538, 1539, 1539, 1540, 1540, 1541, 1542, 1543,

     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1539, 1550, 1551,
     1552, 1552, 1553, 1553, 1554, 1554, 1555, 1555, 1556, 1556,
     1557, 1558, 1559, 1560, 1562, 1552, 1561, 1561, 1563, 1554,
     1564, 1564, 1565, 1565, 1566, 1566, 1567, 1568, 1568, 1569,
     1569, 1570, 1570, 1571, 1572, 1564, 1573, 1574, 1575, 1576,
     1577, 1578, 1568, 1579, 1580, 1580, 1570, 1581, 1582, 1583,
     1584, 1582, 1585, 1586, 1587, 1588, 1589, 1590, 1592, 1580,
     1591, 1591, 1593, 1594, 1595, 1595, 1597, 1589, 1596, 1596,
     1598, 1599, 1600, 1601, 1601, 1591, 1602, 1603, 1603, 1595,
     1604, 1605, 1606, 1607, 1580, 1570, 1608, 1609, 1601, 1610,

     1611, 1612, 1613, 1613, 1614, 1614, 1615, 1615, 1616, 1620,
     1621, 1622, 1623, 1624, 1591, 1625, 1626, 1613, 1627, 1628,
     1629, 1615, 1630, 1631, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1645,
     1646, 1647, 1648, 1649, 1650, 1652, 1653, 1654, 1655, 1656,
     1657, 1658, 1659, 1645, 1660, 1661, 1662, 1664, 1665, 1666,
     1667, 1668, 1669, 1671, 1672, 1673, 1673, 1675, 1676, 1677,
     1678, 1679, 1680, 1681, 1682, 1682, 1683, 1683, 1684, 1685,
     1673, 1686, 1687, 1688, 1689, 1689, 1690, 1690, 1682, 1692,
     1683, 1691, 1691, 1693, 1694, 1695, 1696, 1696, 1697, 1697,

     1690, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1695,
     1696, 1706, 1707, 1708, 1709, 1712, 1713, 1714, 1717, 1718,
     1719, 1719, 1720, 1720, 1721, 1722, 1723, 1723, 1724, 1724,
     1726, 1706, 1725, 1725, 1727, 1728, 1720, 1729, 1730, 1730,
     1732, 1723, 1733, 1724, 1731, 1731, 1734, 1725, 1735, 1736,
     1737, 1738, 1738, 1739, 1740, 1740, 1741, 1741, 1742, 1742,
     1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
     1755, 1741, 1753, 1753, 1754, 1754, 1756, 1756, 1757, 1758,
     1759, 1760, 1761, 1762, 1762, 1763, 1764, 1753, 1765, 1766,
     1767, 1756, 1768, 1768, 1769, 1769, 1770, 1771, 1762, 1772,

     1773, 1774, 1774, 1775, 1776, 1776, 1777, 1768, 1778, 1779,
     1779, 1780, 1780, 1781, 1782, 1783, 1784, 1785, 1785, 1776,
     1786, 1787, 1787, 1789, 1779, 1788, 1788, 1790, 1791, 1791,
     1792, 1792, 1785, 1793, 1793, 1794, 1787, 1795, 1796, 1800,
     1788, 1798, 1798, 1799, 1799, 1792, 1801, 1802, 1803, 1804,
     1798, 1806, 1799, 1805, 1805, 1807, 1798, 1808, 1799, 1809,
     1810, 1811, 1812, 1813, 1814, 1816, 1816, 1817, 1805, 1818,
     1819, 1819, 1820, 1820, 1821, 1822, 1823, 1824, 1825, 1827,
     1816, 1826, 1826, 1828, 1828, 1819, 1829, 1830, 1831, 1832,
     1832, 1833, 1834, 1835, 1836, 1837, 1826, 1838, 1828, 1839,

     1841, 1842, 1843, 1844, 1832, 1845, 1845, 1846, 1846, 1841,
     1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1854, 1858,
     1845, 1855, 1855, 1856, 1856, 1857, 1857, 1859, 1860, 1861,
     1862, 1854, 1863, 1863, 1864, 1864, 1865, 1856, 1866, 1867,
     1868, 1869, 1870, 1870, 1871, 1871, 1863, 1872, 1873, 1874,
     1875, 1876, 1876, 1877, 1878, 1879, 1880, 1881, 1871, 1882,
     1882, 1883, 1884, 1885, 1886, 1876, 1887, 1888, 1889, 1889,
     1890, 1890, 1891, 1882, 1892, 1893, 1893, 1894, 1894, 1895,
     1895, 1899, 1889, 1896, 1896, 1897, 1897, 1898, 1898, 1900,
     1893, 1901, 1901, 1904, 1895, 1902, 1902, 1903, 1903, 1905,

     1897, 1906, 1907, 1908, 1909, 1911, 1901, 1910, 1910, 1912,
     1902, 1913, 1903, 1914, 1915, 1916, 1917, 1918, 1918, 1919,
     1919, 1920, 1921, 1921, 1922, 1923, 1923, 1924, 1924, 1925,
     1926, 1927, 1918, 1928, 1919, 1929, 1930, 1930, 1931, 1931,
     1923, 1932, 1932, 1933, 1934, 1934, 1935, 1936, 1937, 1937,
     1938, 1930, 1939, 1940, 1941, 1942, 1932, 1943, 1943, 1934,
     1944, 1944, 1945, 1946, 1947, 1947, 1948, 1949, 1949, 1950,
     1951, 1954, 1943, 1952, 1952, 1953, 1953, 1959, 1950, 1955,
     1955, 1960, 1949, 1956, 1956, 1957, 1957, 1962, 1952, 1958,
     1958, 1961, 1961, 1963, 1955, 1964, 1965, 1965, 1966, 1969,

     1957, 1967, 1967, 1968, 1968, 1965, 1970, 1970, 1971, 1972,
     1973, 1965, 1968, 1975, 1967, 1974, 1974, 1978, 1968, 1970,
     1976, 1976, 1977, 1977, 1974, 1979, 1980, 1981, 1982, 1983,
     1984, 1985, 1986, 1987, 1987, 1976, 1988, 1988, 1989, 1989,
     1990, 1991, 1991, 1992, 1993, 1994, 1995, 1996, 1987, 1997,
     1997, 1998, 1998, 1989, 1999, 2000, 2000, 2001, 2001, 2002,
     2003, 2004, 2005, 2005, 1997, 2006, 2006, 2007, 2008, 2009,
     2000, 2010, 2012, 2013, 2014, 2015, 2016, 2005, 2017, 2018,
     2019, 2019, 2020, 2021, 2022, 2022, 2025, 2023, 2024, 2024,
     2026, 2026, 2027, 2027, 2028, 2028, 2029, 2030, 2022, 2023,

     2031, 2032, 2024, 2033, 2026, 2034, 2034, 2035, 2036, 2037,
     2038, 2038, 2039, 2040, 2040, 2041, 2041, 2042, 2043, 2044,
     2045, 2046, 2046, 2048, 2038, 2047, 2047, 2040, 2049, 2050,
     2051, 2052, 2053, 2053, 2055, 2046, 2054, 2054, 2042, 2056,
     2057, 2058, 2059, 2060, 2061, 2061, 2053, 2062, 2063, 2064,
     2064, 2065, 2065, 2066, 2066, 2067, 2068, 2069, 2069, 2070,
     2070, 2071, 2071, 2072, 2072, 2073, 2073, 2074, 2074, 2075,
     2076, 2077, 2069, 2078, 2078, 2079, 2071, 2080, 2081, 2082,
     2073, 2083, 2084, 2085, 2086, 2087, 2088, 2088, 2078, 2089,
     2089, 2090, 2090, 2091, 2091, 2092, 2092, 2093, 2094, 2094,

     2095, 2088, 2096, 2097, 2098, 2099, 2090, 2100, 2100, 2103,
     2092, 2101, 2101, 2102, 2102, 2104, 2104, 2105, 2105, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 2101, 2113, 2113, 2115,
     2104, 2114, 2114, 2116, 2117, 2117, 2118, 2118, 2119, 2120,
     2121, 2122, 2122, 2123, 2124, 2124, 2114, 2125, 2125, 2117,
     2126, 2127, 2128, 2129, 2130, 2131, 2131, 2132, 2132, 2133,
     2134, 2134, 2135, 2135, 2136, 2137, 2138, 2139, 2140, 2140,
     2132, 2141, 2142, 2143, 2143, 2135, 2144, 2140, 2145, 2146,
     2147, 2148, 2149, 2150, 2151, 2151, 2152, 2153, 2153, 2154,
     2154, 2155, 2155, 2156, 2157, 2157, 2158, 2159, 2160, 2151,

     2161, 2162, 2162, 2163, 2154, 2164, 2164, 2165, 2166, 2157,
     2167, 2168, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
     2177, 2178, 2179, 2180, 2181, 2182, 2182, 2183, 2183, 2184,
     2185, 2186, 2186, 2187, 2187, 2188, 2189, 2189, 2191, 2182,
     2192, 2190, 2190, 2193, 2190, 2186, 2190, 2194, 2195, 2196,
     2189, 2197, 2197, 2198, 2199, 2199, 2200, 2200, 2201, 2202,
     2202, 2203, 2204, 2205, 2206, 2197, 2207, 2212, 2199, 2208,
     2208, 2204, 2209, 2209, 2210, 2210, 2204, 2213, 2204, 2211,
     2211, 2214, 2214, 2215, 2216, 2217, 2209, 2218, 2210, 2219,
     2220, 2221, 2222, 2211, 2223, 2224, 2225, 2225, 2226, 2226,

     2227, 2227, 2228, 2229, 2230, 2231, 2231, 2232, 2232, 2233,
     2234, 2235, 2236, 2237, 2238, 2239, 2240, 2240, 2241, 2246,
     2231, 2242, 2242, 2243, 2243, 2244, 2244, 2245, 2245, 2247,
     2247, 2240, 2248, 2249, 2250, 2251, 2252, 2252, 2253, 2255,
     2244, 2254, 2254, 2256, 2247, 2257, 2258, 2259, 2260, 2261,
     2262, 2262, 2263, 2263, 2264, 2265, 2266, 2266, 2267, 2268,
     2268, 2269, 2270, 2271, 2272, 2262, 2273, 2274, 2275, 2276,
     2276, 2277, 2278, 2278, 2268, 2279, 2280, 2281, 2282, 2282,
     2283, 2283, 2284, 2285, 2287, 2288, 2289, 2289, 2290, 2290,
     2291, 2292, 2292, 2282, 2293, 2293, 2294, 2295, 2295, 2296,

     2299, 2289, 2300, 2290, 2297, 2297, 2292, 2298, 2298, 2301,
     2302, 2303, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2297,
     2310, 2311, 2313, 2314, 2315, 2316, 2303, 2318, 2319, 2319,
     2320, 2321, 2322, 2322, 2323, 2324, 2324, 2325, 2324, 2326,
     2324, 2327, 2328, 2329, 2330, 2337, 2323, 2331, 2331, 2332,
     2332, 2333, 2333, 2334, 2334, 2335, 2335, 2336, 2336, 2338,
     2339, 2331, 2340, 2332, 2341, 2333, 2342, 2343, 2344, 2335,
     2345, 2346, 2346, 2347, 2347, 2348, 2348, 2349, 2349, 2350,
     2350, 2351, 2351, 2352, 2353, 2346, 2354, 2355, 2356, 2348,
     2357, 2358, 2359, 2350, 2360, 2361, 2362, 2363, 2364, 2365,

     2366, 2366, 2367, 2367, 2368, 2369, 2369, 2370, 2371, 2372,
     2372, 2373, 2373, 2374, 2377, 2366, 2375, 2375, 2376, 2376,
     2369, 2378, 2378, 2379, 2372, 2382, 2373, 2380, 2380, 2381,
     2381, 2375, 2383, 2384, 2385, 2386, 2386, 2387, 2388, 2389,
     2390, 2391, 2380, 2392, 2393, 2394, 2394, 2395, 2396, 2396,
     2386, 2397, 2398, 2398, 2399, 2399, 2400, 2401, 2402, 2402,
     2403, 2404, 2405, 2396, 2406, 2407, 2408, 2398, 2410, 2411,
     2411, 2412, 2412, 2402, 2413, 2413, 2414, 2415, 2416, 2417,
     2418, 2418, 2419, 2419, 2411, 2420, 2420, 2421, 2421, 2422,
     2423, 2423, 2424, 2425, 2427, 2418, 2426, 2426, 2429, 2430,

     2420, 2431, 2431, 2432, 2432, 2433, 2433, 2434, 2436, 2439,
     2441, 2442, 2443, 2444, 2444, 2445, 2431, 2446, 2446, 2448,
     2433, 2447, 2447, 2449, 2452, 2453, 2454, 2455, 2444, 2456,
     2456, 2446, 2463, 2457, 2457, 2447, 2457, 2465, 2457, 2458,
     2458, 2459, 2459, 2456, 2460, 2460, 2461, 2461, 2462, 2462,
     2464, 2464, 2466, 2458, 2467, 2468, 2469, 2470, 2471, 2475,
     2461, 2472, 2472, 2476, 2464, 2473, 2473, 2474, 2474, 2477,
     2478, 2478, 2479, 2480, 2480, 2481, 2482, 2483, 2484, 2485,
     2486, 2487, 2487, 2488, 2478, 2489, 2489, 2480, 2490, 2490,
     2491, 2492, 2492, 2493, 2493, 2494, 2487, 2495, 2496, 2496,

     2489, 2497, 2497, 2498, 2498, 2500, 2492, 2499, 2499, 2501,
     2501, 2502, 2503, 2496, 2504, 2504, 2505, 2507, 2498, 2506,
     2506, 2508, 2509, 2509, 2510, 2510, 2511, 2511, 2512, 2513,
     2513, 2514, 2515, 2515, 2506, 2516, 2516, 2509, 2517, 2518,
     2518, 2511, 2519, 2519, 2513, 2520, 2520, 2515, 2521, 2523,
     2516, 2522, 2522, 2524, 2518, 2525, 2525, 2519, 2526, 2526,
     2527, 2529, 2531, 2532, 2533, 2534, 2534, 2536, 2537, 2538,
     2525, 2539, 2539, 2540, 2540, 2541, 2542, 2544, 2545, 2546,
     2547, 2547, 2548, 2548, 2549, 2549, 2550, 2551, 2552, 2553,
     2554, 2556, 2556, 2557, 2557, 2558, 2563, 2548, 2559, 2559,

     2560, 2560, 2561, 2561, 2562, 2562, 2556, 2564, 2565, 2566,
     2566, 2567, 2559, 2568, 2569, 2569, 2561, 2569, 2570, 2569,
     2571, 2572, 2572, 2566, 2573, 2573, 2574, 2575, 2575, 2576,
     2576, 2577, 2577, 2578, 2578, 2579, 2580, 2580, 2581, 2582,
     2583, 2575, 2584, 2584, 2585, 2577, 2586, 2578, 2587, 2587,
     2580, 2588, 2588, 2589, 2590, 2590, 2584, 2592, 2591, 2591,
     2594, 2591, 2587, 2591, 2593, 2593, 2595, 2595, 2590, 2592,
     2596, 2597, 2597, 2598, 2598, 2599, 2599, 2600, 2593, 2601,
     2601, 2595, 2602, 2602, 2603, 2603, 2597, 2604, 2598, 2605,
     2606, 2606, 2607, 2607, 2608, 2609, 2611, 2602, 2610, 2610,

     2612, 2612, 2613, 2613, 2614, 2615, 2616, 2616, 2617, 2617,
     2618, 2618, 2619, 2610, 2622, 2612, 2620, 2620, 2621, 2621,
     2623, 2623, 2627, 2617, 2624, 2624, 2625, 2625, 2626, 2626,
     2631, 2620, 2628, 2628, 2632, 2623, 2629, 2629, 2630, 2630,
     2635, 2625, 2633, 2633, 2634, 2634, 2636, 2628, 2637, 2638,
     2639, 2640, 2640, 2642, 2642, 2644, 2649, 2633, 2646, 2646,
     2647, 2647, 2648, 2648, 2650, 2651, 2640, 2652, 2642, 2653,
     2654, 2654, 2655, 2646, 2660, 2647, 2656, 2656, 2657, 2657,
     2658, 2658, 2659, 2659, 2661, 2661, 2662, 2662, 2663, 2664,
     2664, 2667, 2668, 2668, 2658, 2673, 2659, 2676, 2661, 2669,

     2669, 2670, 2670, 2664, 2671, 2671, 2672, 2672, 2674, 2674,
     2675, 2675, 2678, 2669, 2677, 2677, 2679, 2679, 2671, 2680,
     2680, 2681, 2674, 2682, 2682, 2683, 2683, 2684, 2677, 2686,
     2679, 2685, 2685, 2687, 2685, 2688, 2685, 2682, 2689, 2690,
     2690, 2691, 2691, 2692, 2693, 2693, 2694, 2694, 2695, 2696,
     2696, 2697, 2697, 2690, 2698, 2698, 2699, 2700, 2700, 2693,
     2701, 2701, 2702, 2702, 2696, 2703, 2703, 2704, 2704, 2705,
     2706, 2706, 2700, 2707, 2707, 2708, 2708, 2702, 2709, 2709,
     2703, 2713, 2704, 2710, 2710, 2706, 2711, 2711, 2712, 2712,
     2708, 2714, 2714, 2715, 2716, 2716, 2717, 2717, 2710, 2718,

     2720, 2711, 2719, 2719, 2721, 2722, 2722, 2723, 2723, 2724,
     2725, 2726, 2727, 2729, 2729, 2730, 2730, 2731, 2731, 2733,
     2722, 2732, 2732, 2734, 2734, 2735, 2735, 2738, 2729, 2736,
     2736, 2739, 2731, 2737, 2737, 2740, 2741, 2742, 2734, 2743,
     2744, 2744, 2745, 2745, 2736, 2746, 2746, 2747, 2747, 2748,
     2749, 2749, 2750, 2750, 2744, 2751, 2751, 2752, 2752, 2746,
     2753, 2753, 2754, 2754, 2755, 2755, 2750, 2756, 2756, 2751,
     2757, 2757, 2758, 2761, 2753, 2759, 2759, 2760, 2760, 2762,
     2762, 2756, 2763, 2764, 2764, 2765, 2765, 2766, 2766, 2759,
     2769, 2770, 2771, 2771, 2772, 2773, 2773, 2764, 2774, 2775,

     2775, 2766, 2776, 2776, 2777, 2777, 2778, 2778, 2779, 2779,
     2780, 2780, 2781, 2781, 2782, 2782, 2784, 2776, 2783, 2783,
     2792, 2778, 2785, 2785, 2793, 2780, 2786, 2786, 2794, 2782,
     2787, 2787, 2788, 2788, 2789, 2789, 2790, 2790, 2791, 2791,
     2795, 2786, 2796, 2797, 2797, 2798, 2799, 2788, 2800, 2801,
     2808, 2790, 2802, 2802, 2803, 2803, 2805, 2805, 2806, 2806,
     2809, 2810, 2811, 2812, 2813, 2813, 2814, 2814, 2815, 2816,
     2816, 2817, 2817, 2818, 2818, 2819, 2819, 2820, 2820, 2821,
     2821, 2822, 2822, 2816, 2823, 2824, 2824, 2825, 2826, 2819,
     2827, 2827, 2832, 2821, 2828, 2828, 2829, 2829, 2830, 2830,

     2831, 2831, 2833, 2834, 2834, 2835, 2835, 2844, 2828, 2836,
     2836, 2845, 2830, 2846, 2831, 2837, 2837, 2847, 2834, 2838,
     2838, 2839, 2839, 2840, 2840, 2841, 2841, 2842, 2842, 2843,
     2843, 2848, 2850, 2851, 2854, 2861, 2839, 2857, 2857, 2858,
     2858, 2859, 2859, 2862, 2843, 2860, 2860, 2863, 2863, 2864,
     2864, 2857, 2865, 2865, 2866, 2866, 2867, 2867, 2868, 2868,
     2878, 2863, 2869, 2869, 2870, 2870, 2865, 2871, 2871, 2881,
     2867, 2872, 2872, 2873, 2873, 2882, 2869, 2874, 2874, 2870,
     2875, 2875, 2876, 2876, 2877, 2877, 2872, 2879, 2879, 2880,
     2880, 2886, 2874, 2884, 2884, 2885, 2885, 2876, 2907, 2877,

     2887, 2887, 2879, 2908, 2880, 2888, 2888, 2884, 2889, 2889,
     2890, 2890, 2891, 2891, 2887, 2892, 2892, 2893, 2893, 2888,
     2894, 2894, 2895, 2895, 2896, 2896, 2897, 2897, 2910, 2892,
     2898, 2898, 2899, 2899, 2922, 2894, 2900, 2900, 2901, 2901,
     2902, 2902, 2903, 2903, 2923, 2898, 2904, 2904, 2905, 2905,
     2924, 2900, 2906, 2906, 2927, 2902, 2928, 2903, 2909, 2909,
     2911, 2911, 2929, 2905, 2912, 2912, 2913, 2913, 2914, 2914,
     2915, 2915, 2916, 2916, 2911, 2917, 2917, 2918, 2918, 2919,
     2919, 2920, 2920, 2921, 2921, 2925, 2925, 2926, 2926, 2930,
     2930, 2932, 2918, 2931, 2931, 2933, 2933, 2934, 2934, 2935,

     2935, 2936, 2936, 2937, 2930, 2938, 2938,  801, 2931,  800,
     2933, 2939, 2939,  799, 2935, 2940, 2940, 2941, 2941, 2942,
     2942, 2943, 2943,  794,  793,  792,  791,  787,  785, 2940,
      784, 2941, 2945, 2945, 2945, 2945, 2946, 2946, 2946, 2946,
     2947, 2947, 2947, 2947, 2948, 2948, 2948, 2948, 2949, 2949,
     2949, 2949, 2950, 2950, 2950, 2950, 2951, 2951, 2951, 2951,
     2952,  782, 2952, 2952, 2953, 2953,  781, 2953, 2954, 2954,
     2954,  780,  778,  777,  774,  773,  772,  771,  769,  768,
      767,  766,  761,  760,  759,  758,  757,  756,  755,  754,
      753,  752,  751,  748,  747,  746,  744,  741,  740,  739,

      738,  737,  735,  734,  733,  732,  731,  730,  729,  728,
      727,  726,  724,  721,  720,  719,  717,  716,  715,  714,
      712,  710,  709,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  695,  689,  688,  686,  683,  682,  681,
      680,  679,  678,  675,  674,  673,  672,  668,  667,  666,
      665,  664,  663,  662,  660,  659,  658,  655,  654,  650,
      649,  648,  647,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  634,  632,  631,  630,  627,  626,  625,  624,
      623,  621,  619,  614,  612,  611,  609,  608,  607,  605,
      604,  603,  602,  596,  594,  593,  592,  589,  588,  587,

      584,  583,  582,  580,  576,  575,  573,  572,  569,  568,
      567,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      551,  550,  549,  546,  545,  544,  540,  539,  538,  537,
      536,  532,  531,  530,  529,  528,  527,  526,  525,  521,
      520,  519,  518,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  494,  489,  487,  486,  484,  483,  482,  480,
      479,  478,  477,  471,  470,  469,  468,  465,  464,  463,
      462,  461,  460,  458,  454,  453,  452,  449,  448,  446,
      445,  444,  443,  442,  441,  440,  438,  437,  436,  435,

      433,  429,  428,  425,  422,  421,  420,  419,  418,  417,
      414,  413,  412,  411,  408,  405,  404,  403,  400,  399,
      398,  397,  396,  391,  390,  389,  388,  387,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  369,  368,  367,  365,  364,  363,  360,  359,
      357,  356,  355,  354,  353,  351,  349,  347,  346,  345,
      342,  341,  339,  338,  337,  336,  335,  334,  333,  331,
      330,  329,  327,  325,  324,  321,  318,  317,  316,  315,
      314,  313,  310,  309,  308,  307,  304,  303,  302,  301,
      298,  297,  296,  295,  294,  291,  290,  289,  288,  287,

      286,  285,  284,  282,  281,  280,  278,  277,  276,  275,
      274,  273,  272,  270,  269,  268,  264,  261,  260,  259,
      258,  257,  256,  254,  253,  252,  250,  249,  248,  247,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  214,  213,  212,  210,  209,  208,  207,
      203,  202,  201,  200,  199,  198,  197,  196,  194,  193,
      192,  190,  189,  188,  187,  186,  185,  183,  182,  181,
      177,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  163,  162,  161,  160,  158,  155,  147,  143,  140,

      138,  133,  132,  131,  130,  129,  128,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  115,  113,  112,
      111,  109,  108,  107,  105,  101,  100,   99,   96,   88,
       84,   81,   77,   70,   69,   62,   60,   59,   58,   57,
       55,   54,   53,   49,   44,   41,   33,   32,   28,   25,
       23,   19,   14,   13,    8,    7,    6,    5, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[354] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[353] =
    {   0,
      131,  135,  136,  137,  138,  140,  156,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  171,  172,  173,
      174,  175,  176,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  189,  190,  192,  193,  194,  195,  196,
      201,  202,  203,  204,  205,  206,  209,  210,  211,  212,
      216,  217,  218,  219,  220,  221,  222,  225,  226,  227,
      228,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  258,  259,  260,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,

      271,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
      293,  306,  307,  308,  309,  314,  315,  316,  317,  319,
      320,  322,  323,  324,  325,  327,  328,  329,  330,  332,
      333,  334,  335,  337,  338,  339,  340,  342,  343,  344,
      345,  347,  348,  349,  350,  351,  352,  354,  355,  356,
      357,  358,  359,  360,  361,  362,  363,  364,  366,  367,
      368,  369,  374,  375,  376,  377,  379,  380,  381,  382,
      384,  385,  386,  387,  389,  390,  391,  392,  394,  395,
      396,  397,  399,  400,  401,  402,  406,  407,  408,  409,

      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
      430,  432,  433,  434,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  452,  453,  454,  455,
      456,  458,  459,  460,  461,  462,  463,  464,  465,  466,
      467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
      477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
      487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
      497,  498,  499,  500,  501,  502,  503,  504,  505,  509,
      510,  511,  512,  513,  515,  516,  517,  518,  519,  520,

      524,  525,  526,  528,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  548,  549,  550,  551,  552,  553,  554,
      555,  556,  557,  558,  559,  563,  564,  565,  566,  571,
      572,  574,  575,  576,  577,  579,  580,  581,  582,  584,
      585,  587
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.
 *
 * IMPORTANT! Convention regarding common patterns, such as "name", etc.:
 * Commonly occuring patterns must be kept in one place in order to avoid ambiguity in the parser.
 * Maintenance is easier if they are placed into the OSgL section. At any rate, it is important
 * to place temporary data into the correct parser data object.
 */
#line 23 "../../../../OS/src/OSParsers/OSParseosil.l"

//#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("matched %i characters: %s\n", yyleng, yytext);
#else     
	#define YY_PRINT;
#endif

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;









#line 119 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2748 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 3068 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2945 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4759 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 353 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 353 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 354 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 135 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 136 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 137 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 138 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 140 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TEMPLATEMATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(REFERENCEMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONESTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLYHEDRALCONEEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVALUESATT);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(IDXATT);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COEFATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* patterns for <matrixExpressions> */
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFEXPR);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPRSTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPREND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTSTART);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTEND);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* patterns for <matrixTerms> in <matrixConstraints> and <matrixObjectives>*/
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXREFERENCESTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXREFERENCEEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATESTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXNEGATEEND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 572 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 574 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 343:
#line 576 "../../../../OS/src/OSParsers/OSParseosil.l"
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 576 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 577 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 347:
#line 581 "../../../../OS/src/OSParsers/OSParseosil.l"
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 582 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 585 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 587 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 599 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 5349 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2945 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2945 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2944);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void osil_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
/* %if-c-only */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void osilensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 599 "../../../../OS/src/OSParsers/OSParseosil.l"




