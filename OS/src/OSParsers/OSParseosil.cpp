#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 244
#define YY_END_OF_BUFFER 245
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1803] =
    {   0,
        1,    1,    0,    0,  241,  241,  242,  242,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  245,  243,
        1,    1,    2,  231,    2,  231,    6,  231,    5,  243,
        4,  231,  231,    2,  244,  241,  242,  232,  234,  235,
      234,  238,  239,  238,    1,  231,  231,    6,  231,    5,
        0,    4,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,    3,    6,    6,  231,    7,    5,
        0,    0,  237,  221,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  231,  231,  241,  242,  232,    0,  240,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  223,    0,    0,
        0,    0,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      177,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  236,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  233,

        0,  222,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   57,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  207,    0,    0,    0,    0,    0,    0,    0,
      191,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,  231,  231,  231,

      231,  231,  231,   26,   27,  231,   15,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  222,    0,
      224,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   90,    0,    0,    0,    0,    0,    0,  208,
        0,    0,    0,    0,    0,    0,    0,  192,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  203,    0,
        0,    0,    0,    0,    0,    0,  199,    0,    0,    0,
        0,    0,  205,    0,  201,    0,    0,  207,    0,    0,

        0,    0,    0,    0,  191,    0,    0,  209,    0,  211,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,    0,  213,    0,    0,    0,
        0,    0,  231,  231,  174,  231,  231,  231,   24,   25,
       15,  231,  231,  231,   18,  231,   19,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  224,    0,  204,    0,
        0,    0,    0,    0,   58,    0,    0,    0,  200,    0,
        0,    0,   90,    0,    0,  206,    0,  202,    0,    0,
      208,    0,    0,    0,    0,    0,    0,  192,    0,    0,

      210,    0,  212,    0,    0,    0,  178,    0,    0,    0,
        0,    0,    0,   60,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  198,    0,    0,
        0,    0,    0,  214,    0,    0,    0,   56,    0,    0,
        0,  203,    0,    0,    0,  139,    0,   65,    0,  199,
        0,    0,    0,    0,  205,  201,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,  209,  211,    0,
        0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  183,    0,    0,    0,   41,    0,    0,    0,
        0,  197,    0,    0,   47,  157,  213,    0,    0,    0,

        0,    0,    0,  231,  174,  231,  231,  231,  231,  231,
       18,   19,  231,   30,   31,  231,  231,  231,   22,  231,
      231,  231,   34,   35,  231,   23,  204,    0,    0,    0,
        0,    0,   58,    0,    0,  200,    0,    0,    0,    0,
      206,  202,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,  210,  212,    0,    0,   99,    0,    0,    0,
        0,    0,    0,   60,    0,    0,    0,   36,    0,  184,
        0,    0,    0,    0,    0,    0,    0,    0,  198,    0,
        0,    0,    0,  214,    0,    0,    0,   56,    0,    0,
        0,    0,    0,    0,  137,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   94,   92,
        0,    0,    0,    0,  133,    0,  185,  100,   98,    0,
        0,    0,    0,    0,    0,  219,    0,    0,  183,    0,
        0,  189,    0,    0,    0,    0,    0,    0,    0,   45,
        0,    0,  179,    0,  169,    0,    0,  231,  231,  231,
      231,  231,   16,  231,   17,   28,   29,  231,  231,   22,
      231,  231,   32,   33,   23,    0,    0,    0,    0,  140,
        0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,  186,   99,    0,    0,    0,    0,    0,    0,

        0,    0,   36,  184,    0,    0,  190,    0,    0,   42,
        0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
      158,    0,    0,  180,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  181,    0,    0,    0,
        0,  161,    0,    0,    0,   94,    0,    0,    0,    0,
        0,  185,  100,    0,    0,  187,    0,    0,    0,    0,
        0,    0,    0,  189,    0,    0,    0,    0,    0,    0,
        0,  102,    0,  195,    0,    0,  179,    0,    0,    0,
      231,  231,  231,  231,   21,   16,   17,  231,  231,  231,
      231,    0,    0,    0,  140,    0,  138,    0,   66,    0,

        0,    0,    0,  182,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  134,    0,  186,    0,
      188,    0,    0,    0,    0,    0,  220,    0,    0,    0,
      190,    0,   42,    0,    0,    0,    0,    0,  103,    0,
      196,    0,   48,    0,   46,  158,    0,  180,    0,    0,
      170,    0,    0,    0,  215,    0,    0,    0,    0,    0,
        0,  181,   83,  141,    0,    0,    0,    0,    0,   61,
        0,    0,    0,  114,    0,   63,    0,    0,    0,  187,
        0,    0,    0,  159,    0,    0,    0,    0,  217,    0,
        0,    0,    0,    0,  104,  102,    0,  195,    0,    0,

        0,    0,  225,  231,  231,  128,  231,   21,  231,  231,
      231,  231,  231,  231,  231,  231,  231,   20,  231,    0,
      216,    0,    0,  138,    0,    0,    0,    0,  182,    0,
        0,    0,    0,    0,    0,  162,    0,    0,    0,    0,
      115,    0,    0,  134,    0,    0,  188,    0,    0,    0,
        0,  220,    0,    0,    0,    0,  218,    0,    0,    0,
        0,    0,  103,  196,    0,   46,    0,    0,  170,    0,
        0,  215,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,  217,    0,    0,

        0,    0,    0,  104,    0,    0,    0,    0,    0,   49,
      231,  128,  231,  231,  231,  231,  231,  231,  231,  231,
      231,   20,  231,  216,    0,    0,    0,    0,    0,    0,
        0,   84,    0,  142,    0,    0,    0,  162,    0,    0,
        0,   62,  115,    0,    0,   64,    0,    0,    0,    0,
        0,    0,  160,    0,    0,    0,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  226,    0,    0,
      135,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
       53,    0,    0,    0,    0,  167,    0,    0,    0,   43,

        0,    0,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,    0,    0,    0,    0,    0,
        0,   84,  142,    0,    0,    0,    0,    0,   62,    0,
       64,    0,    0,    0,    0,    0,  160,    0,    0,    0,
       86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      226,    0,   50,    0,    0,   51,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  227,    0,    0,    0,
        0,    0,   79,    0,    0,    0,    0,    0,  193,    0,
        0,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,    0,    0,  136,    0,  166,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   54,    0,   86,    0,    0,
        0,    0,  168,    0,    0,  194,    0,   44,    0,    0,
       50,    0,    0,    0,    0,  106,    0,    0,  110,    0,
        0,    0,    0,    0,   91,    0,    0,    0,    0,   97,
        0,    0,    0,   95,    0,    0,    0,    0,    0,  193,
        0,    0,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,    0,  136,  166,    0,
        0,   52,    0,  107,    0,  111,    0,    0,    0,    0,
        0,    0,    0,  228,    0,    0,    0,   54,    0,    0,

       80,    0,    0,    0,  168,    0,  194,   44,    0,    0,
        0,    0,  108,  106,    0,  112,  110,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,   97,    0,    0,
        0,    0,   73,    0,    0,    0,    0,    0,  231,  231,
      231,  117,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,    0,    0,   52,  107,  111,    0,
        0,    0,   37,    0,    0,    0,  228,    0,    0,    0,
        0,   96,   80,    0,    0,    0,    0,    0,    0,    0,
        0,  108,    0,  112,    0,    0,    0,   38,    0,    0,
      151,  229,    0,    0,    0,    0,    0,    0,    0,  171,

        0,  231,  231,  117,  231,  231,  231,  231,  231,  231,
      231,  231,   12,  231,  127,  231,  231,  231,    0,    0,
        0,    0,   37,    0,    0,    0,    0,    0,    0,   96,
        0,    0,   74,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,   38,    0,    0,    0,   67,   69,    0,
        0,    0,    0,    0,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,   12,  127,  231,  231,  231,    0,
        0,    0,    0,    0,    0,  152,    0,  230,    0,    0,
        0,    0,   74,    0,    0,    0,  172,    0,   87,  143,
        0,    0,    0,   81,    0,    0,    0,    0,   77,    0,

      101,    0,  231,  123,  231,  122,  231,  231,  231,  231,
      231,   13,  231,  231,  231,  231,  231,  124,  231,    0,
        0,    0,  154,    0,    0,  152,  230,    0,    0,   68,
        0,   70,    0,    0,    0,  172,    0,    0,    0,    0,
        0,    0,    0,    0,  101,    0,  123,  122,  231,  231,
      231,  231,   13,  231,  231,  231,  231,    8,  124,  231,
      231,    0,   88,    0,  144,  154,    0,    0,   82,    0,
       68,   70,    0,    0,    0,   78,    0,    0,    0,   71,
        0,  113,    0,    0,    0,    0,  231,  121,  231,  120,
      231,  231,  231,  231,   10,  231,    8,  231,  231,   88,

      144,    0,   82,    0,    0,    0,   78,    0,    0,    0,
      113,    0,    0,    0,    0,  121,  120,  231,  231,  231,
        9,  231,   10,  231,  231,  231,    0,   72,    0,    0,
        0,    0,    0,    0,  175,    0,   75,  145,  231,  131,
      132,    9,  231,  231,  231,  119,  231,  118,   72,    0,
        0,    0,    0,    0,    0,   39,  129,  130,  231,  231,
      119,  118,    0,  176,    0,    0,   76,    0,  146,    0,
        0,  231,  231,   11,  176,    0,   40,   76,  146,    0,
        0,  231,   11,   40,    0,    0,  231,    0,    0,  231,
        0,  105,    0,  109,  231,  105,  109,  231,  231,  173,

      173,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,    6,    6,    6,   26,   27,   28,   29,
       30,   31,   32,   33,    6,   34,    6,   35,    6,    6,
        1,    6,    1,    1,    6,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1814] =
    {   0,
        0,   62,    0,    0, 3672, 3671, 3668, 3667,    0,    0,
        0,    0, 3658, 3657,   13,   17,    3,    5, 3671, 3678,
      123,  179, 3665,   13, 3662,   19,   38,   20,  235,  272,
     3678,   30,   66, 3678, 3678,    0,    0,    0, 3678, 3678,
     3659, 3678, 3678, 3650,    0,   31,   78,  105,   39,  328,
       20, 3678,   67,   94,   95,   89,   82,   99,  136,   44,
      106,  159,  169,  129, 3678,  153,  229,  246, 3678,  196,
     3657,  347, 3678, 3678, 3640,    2,   49, 3614,  103,  105,
     3619, 3622,  146,  158,   69,  230,   64,  162,  170, 3611,
      241,  177, 3624,  250,  193,    0,    0,    0, 3642, 3678,

      283,  317,  257,  300,  344,  267,  289,  334,  357,  318,
      341,  356,  363,  364,  350,  404, 3649,  222, 3632,   21,
      217, 3606,  368,  209, 3611, 3614,  374,  191,  235,  386,
      376,  378,  319, 3603,  394,  234, 3616, 3678, 3597, 3603,
     3595, 3598,  394, 3593, 3589, 3609, 3604, 3602, 3591, 3594,
     3591,  286,  398, 3599,  269,  437,  114, 3589, 3589, 3594,
     3678, 3586, 3586, 3588, 3577, 3575,  281, 3580, 3589, 3592,
       99, 3579, 3577, 3569, 3568, 3587, 3574, 3573, 3584, 3566,
      453, 3678,  442,  430,  443,  446,  447,  463,  470,  486,
      452,  466,  459,  469,  475,  479,  483,  493,  492, 3678,

      509,   40,  513, 3564, 3570, 3562, 3565,  480, 3560, 3556,
     3576,  521, 3570, 3559, 3562, 3559,  533,  489, 3567,  306,
      537,  124, 3557, 3557, 3562,  539, 3554, 3554, 3556, 3545,
     3555, 3542,  473, 3547, 3556, 3559,  244, 3546, 3544, 3536,
     3535, 3554, 3541, 3540, 3551, 3533,  543, 3564, 3544, 3545,
     3554,  464,  549, 3543, 3536, 3532, 3530,  555,  560, 3537,
     3536,  562,  126, 3535, 3519, 3533, 3524, 3531, 3530,  565,
      390, 3516,  567,  571, 3528, 3531,  529, 3529, 3525, 3520,
     3509, 3526, 3521, 3521, 3506, 3519, 3521, 3528, 3511,  583,
     3501, 3517,  539,  591, 3512, 3502,  558,  580,  596,  532,

      586,  590,  613, 3545, 3542,  607,  623,  604,  538,  629,
      632,  652,  622,  635,  626,  642,  658,  648,  674,  676,
      681,  683, 3527, 3507, 3508, 3517,  687,  689, 3506, 3499,
     3495,  692,  694, 3493,  696,  699, 3500, 3499,  705,  708,
     3498, 3482, 3496, 3487, 3494, 3493,  712,  715, 3479,  717,
      721, 3491, 3494,  723,  728,  686, 3492,  740, 3484, 3480,
     3472, 3489, 3484, 3484, 3469, 3482, 3484, 3491, 3474,  742,
     3464, 3480,  679,  746, 3475, 3465,  748,  750,  752, 3469,
       72, 3466, 3470, 3456, 3454,  758,  766, 3455, 3468, 3486,
     3465,  768,  779,  781,  784, 3484, 3450,  786, 3443, 3465,

     3447,  788, 3450, 3462,  791, 3453,  793,  798,  800,  804,
     3442,  809, 3440, 3450, 3453, 3442, 3451, 3450, 3451, 3438,
      806, 3434, 3433, 3429, 3436, 3430, 3427, 3440, 3441,  811,
      813, 3441, 3425, 3437, 3421,  816,  819,  550, 3421, 3435,
     3433, 3436,  761,  822,  827,  817,  641,  655, 3678, 3678,
      833,  826,  830,  852,  855,  858,  861,  879,  882,  862,
      871,  888,  749,  904,  920,  914,  849,  909,  890, 3427,
      406, 3424, 3428,  930,  898, 3414, 3412,  936,  906, 3413,
     3426, 3444,  938, 3423,  940,  942,  946,  948, 3442, 3408,
      952, 3401, 3423, 3405,  956, 3408, 3420,  958, 3411,  962,

      964,  966,  968, 3400,  972, 3398,  974, 3408, 3411, 3400,
     3409, 3408,  978,  982, 3409, 3396,  984,  988, 3392, 3391,
     3387, 3394, 3388, 3385, 3398, 3399,  990,  994, 3399, 3383,
     3395, 3379,  996, 1000,  612, 3379, 1006, 1008, 3411, 3391,
     3394, 1012, 3388, 3415, 3391, 3372, 3384, 3678,  703, 1014,
     3380, 3383, 3372, 3372, 1016, 1018, 3367, 3383, 3378, 3368,
      560, 1022, 3399, 1025, 3377, 3361,  824, 1027, 1029, 1032,
     1034, 3396, 1039, 3372, 3362, 3368, 3355, 3355, 3354, 3351,
     3356, 1041, 1044, 3384, 1050, 3365, 3678, 3366, 3361, 3359,
     3359, 1053, 3358, 3357, 3342, 3678, 1057, 3345, 1059, 3353,

     3334, 3351, 3354, 1033, 1062,  989, 1051, 1054, 1070, 1078,
     1081, 1087, 1103, 3385, 3382, 1084, 1096, 1112, 1121, 1092,
     1104, 1130, 3383, 3380, 1137, 1140, 1072, 3345, 3372, 3348,
     1146, 3342, 1114, 1148, 1105, 1123, 3338, 3341, 3330, 3330,
     1157, 1159, 3325, 3341, 3336, 3326,  792, 1164, 1166, 3336,
     3320, 1019, 1168, 1170, 1172, 1174, 1176, 3332, 3322, 3328,
     3315, 3315, 3314, 1180, 3311, 3316, 1182, 1184, 1190, 1192,
     3344, 1194, 3325, 1199, 3326, 3321, 3319, 3319, 1201, 3318,
     3317, 1203, 1206, 1210, 3306, 1212, 3314, 1215, 3319, 3312,
     3315, 3310, 3331, 3294, 3678, 3294, 3298, 3310, 3294, 1219,

     3295, 3288, 3302, 3294, 3286, 3301, 3298, 3301, 1222, 1224,
     3325, 3295, 3312, 3293, 3299, 1228, 1230, 1232, 1235, 3320,
     1238, 3290, 3293, 3284, 3277, 3678, 3282, 3301, 1240, 3274,
     1244, 1246, 3268, 3267, 3282, 3266, 3278, 1249, 1251, 3678,
     3270, 1256, 1260, 3267, 3678, 3276, 3268,  919, 1173, 1250,
     1268, 1272, 1275, 1278, 1294, 3678, 3678, 1283, 1284, 1300,
     1289, 1290, 3678, 3678, 1310, 3273, 3294, 3257, 1316, 1318,
     1320, 3257, 1326, 1328, 3261, 3273, 3257, 1332, 3258, 3251,
     3265, 3257, 3249, 3264, 3261, 3264, 1336, 3259, 3276, 3257,
     1339, 1342, 1344, 1348, 1350, 3256, 3259, 3250, 3243, 1352,

     3248, 3267, 1355, 1358, 3240, 1360, 1362, 3234, 1368, 1371,
     3233, 3248, 3232, 3244, 1373, 1376, 1378, 1380, 1384, 1386,
     1389, 3236, 1394, 1396, 3233, 1402, 3242, 3234, 1406, 3236,
     3226, 3238, 3222, 3232, 3220, 1410, 1412, 3234, 3219, 3236,
      837, 3678, 3231, 3232, 3222, 1414, 3224, 1418, 3220, 3212,
     1047, 1422, 1428, 3216, 1430, 1434, 3228, 3208, 3207, 3207,
     3203, 3219, 3209, 1436, 1438, 3213, 3226, 3215, 3210, 1440,
     3236, 1446, 1442, 1450, 3202, 3215, 1460, 3197, 3196, 3208,
     1439, 1462, 1451, 1469, 1472, 1478, 1488, 1482, 1477, 1504,
     1351, 1498, 3203, 3193, 1467, 1515, 1520, 3205, 1523, 3189,

     3199, 3187, 1525, 1527, 3201, 3186, 3203,  924, 1531, 3198,
     3199, 3189, 1533, 3188, 3180, 1535, 1537, 1226, 1541, 1543,
     1551, 3197, 3177, 3176, 3176, 1553, 1555, 3172, 3188, 3178,
     1559, 1561, 1563, 3182, 3195, 3184, 3179, 1565, 1569, 1571,
     1573, 3172, 1577, 1581, 1583, 1587, 3185, 1589, 3167, 1591,
     1593, 3166, 3178, 1597, 1599, 3168, 3172, 3160, 3192, 3164,
     3168, 1601, 3678, 3678, 3156, 3163, 3156, 3187, 3152, 3678,
     3151, 1604, 3188, 1607, 3164, 3678, 3171, 3166, 3165, 1609,
     3147, 3150, 3144, 3678, 3144, 3147, 3103, 1614, 1616, 3091,
     3098, 3073, 3071, 3073, 1621, 1623, 3107, 1625, 3064, 3045,

     3026, 3029, 3009, 1615, 1631, 1634, 1624, 1640, 1635, 1639,
     1643, 1299, 1411, 1496, 1644, 1532, 1666, 1669, 1648, 1674,
     1642, 3010, 3001, 1664, 2978, 3008, 2972,   26, 1676, 1685,
     1687,  145,  171,  239, 1692, 1694,  327,  315, 1696, 1703,
     1705,  350, 1708, 1712,  378,  399, 1714,  398,  451,  469,
     1716, 1719,  477,  501,  519, 1721, 1724,  525,  553,  573,
      581,  615, 1726, 1728,  637, 1732,  659,  664, 1734,  688,
     1737, 1739,  700,  687,  704,  715,  717,  724,  777,  791,
      785,  820,  827,  858, 1741, 1743,  891,  862,  876,  880,
      880,  934,  905,  921,  928,  949, 3678, 1745,  945,  980,

      976,  968,  982, 1747, 1009, 1015, 1033, 1056, 1085, 3678,
     1738, 1749, 1742, 1385, 1750, 1754, 1757, 1758, 1761, 1762,
     1765, 1781, 1770, 1759, 1108, 1087, 1102, 1117, 1125, 1148,
     1790, 1786, 1808, 1797, 1160, 1179, 1189, 1810, 1220, 1220,
     1814, 1816, 1818, 1221, 1820, 1824, 1248, 1253, 1286, 1253,
     1275, 1826, 1830, 1330, 1355, 1832, 1836, 1361, 1398, 1386,
     1392, 1406, 1405, 1424, 1440, 1433, 1838, 1842, 1844, 1435,
     3678, 3678, 1456, 1450, 1482, 1488, 1511, 1526, 1522, 1547,
     1557, 1848, 1566, 1580, 1593, 1595, 1600, 1594, 1622, 1630,
     3678, 1633, 1652, 1650, 1664, 3678, 1657, 1682, 1850, 3678,

     1701, 1730, 1839, 1791, 1842, 1843, 1847, 1851, 1848, 1854,
     1857, 1858, 1861, 1862, 1865, 1728, 1882, 1889, 1746, 1741,
     1752, 1887, 1900, 1751, 1776, 1793, 1787, 1798, 1905, 1830,
     1907, 1845, 1847, 1834, 1858, 1871, 1912, 1914, 1872, 1916,
     1918, 1882, 1873, 1886, 1924, 1873, 1927, 1932, 1877, 1898,
     1935, 1937, 1940, 1885, 1898, 3678, 1945, 1948, 1912, 1917,
     1919, 1908, 1958, 1914, 1914, 1917, 3678, 1964, 1917, 1949,
     1950, 1918, 3678, 1933, 1919, 1934, 1920, 1975, 1977, 1939,
     1944, 1970, 1971, 1974, 1978, 1979, 1982, 1985, 1986, 1989,
     1996, 1999, 2003, 1990, 2000, 1930, 2029, 2019, 2038, 2041,

     1950, 2045, 2047, 2049, 1968, 1976, 1983, 1976, 1979, 1986,
     2051, 1984, 2025, 2036, 2055, 2057, 2008, 2067, 2071, 2027,
     2010, 2075, 2077, 2025, 2079, 2081, 2083, 2087, 2027, 2035,
     2091, 2066, 2051, 2095, 2078, 2099, 2102, 2082, 2105, 2054,
     2060, 2113, 2090, 2115, 2119, 2073, 2068, 2089, 2124, 2126,
     2077, 2081, 2083, 3678, 2093, 2095, 2100, 2117, 2085, 2137,
     2092, 2121, 2129, 2148, 2130, 2137, 2138, 2141, 2144, 2151,
     2152, 2155, 2156, 2159, 2160, 2163, 2127, 2179, 2182, 2117,
     2184, 2187, 2195, 2192, 2197, 2200, 2113, 2156, 2208, 2188,
     2158, 2180, 2215, 2217, 2168, 2172, 2173, 2224, 2226, 2228,

     2231, 2183, 2195, 2200, 2235, 2219, 2238, 2244, 2192, 2222,
     2212, 2200, 2248, 2250, 2243, 2253, 2255, 2248, 2205, 2206,
     2260, 2247, 2216, 2265, 2229, 2218, 2220, 2272, 2236, 2228,
     2229, 2238, 3678, 2225, 2231, 2244, 2234, 2237, 2270, 2271,
     2287, 2290, 2279, 2283, 2280, 2284, 2295, 2294, 2298, 2315,
     2324, 2308, 2327, 2328, 2255, 2257, 2326, 2334, 2344, 2259,
     2264, 2346, 2348, 2272, 2279, 2299, 2354, 2314, 2309, 2310,
     2358, 2362, 2366, 2321, 2368, 2311, 2322, 2324, 2327, 2321,
     2322, 2376, 2341, 2380, 2343, 2332, 2367, 2386, 2341, 2342,
     3678, 3678, 2338, 2353, 2354, 2351, 2352, 2348, 2358, 3678,

     2359, 2385, 2386, 2402, 2391, 2392, 2395, 2398, 2399, 2403,
     2406, 2425, 2428, 2446, 2451, 2419, 2440, 2441, 2369, 2370,
     2372, 2409, 2435, 2397, 2462, 2467, 2393, 2411, 2427, 2469,
     2429, 2472, 2474, 2434, 2431, 2479, 2443, 2449, 2432, 2447,
     2444, 3678, 2440, 2489, 2454, 2459, 2444, 3678, 3678, 2461,
     2462, 2461, 2500, 2456, 2503, 2506, 2495, 2496, 2499, 2509,
     2525, 2515, 2519, 2518, 2535, 2545, 2534, 2561, 2538, 2471,
     2461, 2563, 2475, 2489, 2567, 2541, 2569, 2571, 2485, 2579,
     2587, 2516, 2589, 2519, 2521, 2592, 2595, 2519, 3678, 3678,
     2521, 2532, 2534, 3678, 2545, 2543, 2555, 2580, 3678, 2599,

     2603, 2563, 2605, 2608, 2611, 2615, 2614, 2618, 2619, 2622,
     2638, 2641, 2630, 2631, 2634, 2663, 2666, 2669, 2672, 2671,
     2688, 2691, 2660, 2563, 2693, 2695, 2697, 2571, 2699, 2704,
     2709, 2711, 2575, 2604, 2715, 2717, 2598, 2604, 2610, 2617,
     2719, 2610, 2624, 2620, 2721, 2626, 2725, 2728, 2731, 2735,
     2724, 2738, 2754, 2743, 2759, 2748, 2765, 2770, 2781, 2749,
     2774, 2791, 2775, 2798, 2801, 2803, 2664, 2808, 2810, 2659,
     2814, 2816, 2675, 2675, 2818, 2820, 2680, 2682, 2724, 3678,
     2824, 2826, 2700, 2705, 2710, 2715, 2828, 2831, 2834, 2837,
     2853, 2856, 2845, 2861, 2864, 2865, 2872, 2868, 2780, 2888,

     2890, 2892, 2895, 2737, 2741, 2758, 2897, 2754, 2770, 2779,
     2899, 2788, 2792, 2813, 2803, 2902, 2905, 2908, 2924, 2930,
     2933, 2899, 2940, 2913, 2951, 2956, 2960, 2910, 2807, 2810,
     2844, 2832, 2837, 2863, 3678, 2852, 3678, 3678, 2973, 2916,
     2927, 2967, 2934, 2964, 2983, 2989, 2992, 2999, 2935, 2994,
     2886, 3010, 3017, 2889, 2920, 3678, 3678, 3678, 2972, 3020,
     3026, 3029, 3022, 2962, 3045, 3047, 3049, 3051, 3053, 2916,
     2928, 2988, 3055, 3058, 3063, 3074, 3076, 3078, 3080, 2943,
     2960, 3023, 3082, 3084, 2966, 2964, 3073, 3090, 3092, 3081,
     3098, 3100, 3102, 3108, 3091, 3110, 3114, 3118, 3122, 3125,

     3129, 3678, 3146, 3151, 3156, 3161, 3166, 3171, 3176, 3180,
     3185, 3190, 3195
    } ;

static yyconst flex_int16_t yy_def[1814] =
    {   0,
     1803, 1803, 1804, 1804, 1805, 1805, 1806, 1806, 1804, 1804,
     1804, 1804, 1807, 1807, 1808, 1808, 1809, 1809, 1802, 1802,
     1810, 1810, 1802, 1810, 1802, 1810, 1810, 1810, 1810, 1802,
     1802, 1810, 1810, 1802, 1802, 1811, 1812, 1813, 1802, 1802,
     1802, 1802, 1802, 1802,   22, 1810, 1810, 1810, 1810, 1810,
       30, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1802, 1810, 1810, 1810, 1802, 1810,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1810, 1810, 1811, 1812, 1813, 1802, 1802,

     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1810, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810, 1810,

     1810, 1810, 1810, 1802, 1802, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1802, 1802, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1802, 1802, 1810, 1810, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1802, 1802, 1810, 1810, 1810,
     1810, 1810, 1802, 1802, 1810, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
     1810, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1810, 1802,
     1802, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1810, 1810,
     1810, 1810, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1810, 1810, 1810, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1810, 1810, 1802, 1802, 1802, 1810, 1802, 1802, 1810,
     1802, 1802, 1802, 1802, 1810, 1802, 1802, 1810, 1810, 1810,

     1810,    0, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802
    } ;

static yyconst flex_int16_t yy_nxt[3741] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20, 1802,   40,
       44,   41,   44, 1802,   32,   41,   33, 1802,   48, 1802,
       50,   50,   50, 1802, 1802, 1802,   69, 1802,  139,   66,
       66,  319,  319,   53, 1802, 1802, 1802, 1802,  140,   67,
       67,   67, 1802, 1802, 1802,   69,   94,  204, 1802,   68,
     1802,   34,   20,   21,   22,   20,   23,  205,   25, 1130,
       26,   27,   28,   29,   29,   29,   30,   68,   31,   20,
     1802, 1802, 1802, 1802,  141,  544,   32,   48,   33,   50,
       50,   50, 1802,   94, 1802,  142, 1802,  545, 1802,  107,

      164,   95,   53, 1802,  157, 1802,   66,   66, 1802, 1802,
     1802, 1802,  158, 1802,  165, 1802,   67,   67,   67, 1802,
     1802, 1802, 1802,   34,   45,   45,   68,  398,  398,   95,
      101,   47,   48,   49,   50,   50,   50,   51,  102,   52,
      103,  108,  144, 1802,   68, 1802,  145,   53,  104,   54,
     1802,  147, 1802,  287,   66,   66,  288,  148,  146,   55,
       56,  109,   57,  149,  114,   58,   59, 1802,  272, 1802,
       60,   61,  273, 1802,  105, 1802,   62,   63,  349,   64,
       45,   45,  350, 1802,  106, 1802,  152,   47,   48,   49,
       50,   50,   50,   51,  153,   52,  110,   70,   70, 1135,

      154,  155,  169,   53,  112,   54,  156, 1802,  166, 1802,
     1802,  167, 1802,  111,  168,   55,   56, 1136,   57,  181,
      178,   58,   59,  201,  201,  170,   60,   61,  113,  179,
       66,   66,   62,   63,  220,   64,   70,   70,  202,  221,
       67,   67,   67, 1802,   48, 1802,   50,   50,   50, 1802,
       68, 1802,  206,  115,  115,  212,   68,  116,  116,  116,
     1802,  213, 1802,  207, 1802,  159, 1802,  214,   68,  160,
      222, 1802,  181, 1802,   68,   71,  161,  244,  223,  162,
      172, 1802,   72, 1802,  173,  163,  245,  262,  262,   73,
      174, 1137,  175,   74,  186,  176,  177, 1802,  367, 1802,

       75,  368,  263, 1802,  191, 1802,  268,   76,   77,   78,
       79,   80,   81,   82, 1802,   83, 1802,  269,   84,   85,
       86,   87,   88,   89,   90,   91,   92,  282,   93,   70,
       70, 1802, 1802, 1802, 1802,  192,  183,   48,  283,   50,
       50,   50, 1802,  345, 1802,  188,  188, 1139, 1802,   68,
     1802,  235,  187,  195,  346, 1802,  184, 1802, 1802,  189,
     1802,  116,  116,  116, 1802,  185, 1802,   68,  118, 1140,
     1802, 1802, 1802, 1802,  236,  119,  196, 1802, 1802, 1802,
     1802,  193,  120,  121,  122,  123,  124,  125,  126, 1144,
      127,  405,  405,  128,  129,  130,  131,  132,  133,  134,

      135,  136,  190,  137,  194,   66,   66,  209,  197, 1147,
      199,  210,  229,  198,  217,  116,  116,  116, 1802,  629,
     1802,  224,  218,  211,  232,  225,  230,  233,  219,  231,
      234,  630,  226,  238, 1148,  227,  264,  239,  270,  270,
      251,  228,  252,  240, 1802,  241, 1802,  253,  242,  243,
     1149,  265,  266,  271,   66,   66, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802,  188,  188, 1802, 1802, 1802, 1802,
      299,  303,  303, 1802,  304, 1802,  305, 1802,  189, 1802,
     1802,  298, 1802, 1802, 1802, 1802, 1802,  306,  306, 1802,
      302, 1802,  301, 1802, 1150, 1802,  300, 1802,  312, 1802,

     1802,  307, 1802,  384,  310,  313, 1802, 1802, 1802, 1802,
      201,  201, 1151,  308,  320,  320, 1154,  385,  309,  362,
      311,  314,  332,  332,  316,  202,  326,  341,  327,  321,
      363,  315,  317,  328,  339,  339, 1155,  333,  347,  347,
      354,  354,  342,  343,  378,  378, 1802,  318, 1802,  340,
      386,  386, 1802,  348, 1802,  355,  392,  392, 1156,  379,
      334,  394,  394,  262,  262,  387,  270,  270,  407,  407,
      598,  393,  409,  409, 1158,  414,  395,  415,  263,  416,
      434,  271,  440,  408,  430,  430,  446,  410,  441,  417,
     1159,  435,  436,  436, 1802,  453, 1802,  444,  444,  431,

     1802,  442, 1802,  599, 1802,  443, 1802,  437,  306,  306,
     1802,  445, 1802,  707,  303,  303,  708,  304, 1802,  305,
     1802, 1802,  307, 1802,  451,  451,  411, 1802, 1160, 1802,
      454,  454,  685,  456,  456, 1161, 1802, 1802, 1802, 1802,
     1802,  447, 1802, 1802,  455, 1802, 1802,  457, 1802, 1802,
      448, 1802,  452,  458,  458, 1802, 1802, 1802, 1802,  464,
      464,  460, 1802, 1162, 1802,  686, 1802,  459, 1802, 1802,
      461, 1802, 1802,  465, 1802,  319,  319,  320,  320,  607,
      462,  463,  467,  467,  468,  468, 1163,  466,  474,  474,
      478,  478,  321,  332,  332,  483,  483,  485,  485,  469,

      487,  487, 1164,  475,  608,  479,  339,  339,  333,  491,
      491, 1165,  486,  347,  347,  488,  498,  498,  500,  500,
      531,  340,  502,  502,  354,  354,  476, 1166,  348,  507,
      507,  532,  508,  501,  509, 1170,  510,  503,  697,  355,
      477,  513,  513,  527,  527, 1171,  511,  533,  533,  537,
      537,  378,  378,  542,  542,  698,  514, 1172,  528,  386,
      386, 1173,  534, 1802,  538, 1802,  379,  550,  550,  392,
      392, 1174,  539, 1175,  387, 1802,  504, 1802,  540,  515,
      555,  555,  394,  394,  393,  556,  556,  398,  398,  562,
      562,  541,  405,  405,  407,  407,  604,  395,  563,  568,

      568,  409,  409,  621,  564,  569,  569,  582,  582,  408,
      571,  571,  430,  430,  592,  592,  410,  436,  436,  572,
      597,  597,  583,  444,  444,  573, 1176,  431,  605,  605,
     1177, 1802,  437, 1802,  451,  451, 1802,  445, 1802, 1178,
     1802, 1802, 1802, 1802, 1802,  785, 1802, 1802,  786, 1802,
      467,  467,  606,  454,  454, 1179,  611,  611,  966,  456,
      456,  714,  612,  612,  967,  609, 1802,  455, 1802, 1802,
     1180, 1802, 1802,  457, 1802, 1802, 1802, 1802, 1802,  610,
      458,  458,  715,  613,  613, 1802,  614, 1802,  615,  618,
      618,  627,  627, 1802,  459, 1802, 1802, 1181, 1802,  633,

      633, 1183, 1802,  619, 1802,  464,  464,  636,  636, 1184,
      468,  468,  620, 1185,  616,  625,  625, 1186, 1802,  465,
     1802,  622,  622,  617,  623,  469,  624, 1187, 1802,  626,
     1802,  474,  474, 1802, 1802, 1802, 1802,  478,  478,  483,
      483,  485,  485,  641,  641, 1033,  475,  487,  487,  642,
      642, 1034,  479,  491,  491, 1188,  486,  648,  648,  498,
      498, 1189,  488,  500,  500,  653,  653,  502,  502,  654,
      654,  881,  649,  656,  656,  507,  507, 1190,  501,  513,
      513, 1191,  503,  664,  664,  667,  667, 1192,  657,  669,
      669,  527,  527, 1193,  514,  679,  679,  533,  533, 1194,

      668,  684,  684, 1802,  670, 1802,  528,  537,  537,  688,
      688, 1195,  534,  542,  542,  550,  550,  555,  555,  556,
      556, 1196,  538,  562,  562, 1197,  710,  710,  568,  568,
      569,  569,  563,  716,  716,  571,  571,  749,  564,  711,
      719,  719,  582,  582,  572,  729,  729, 1802,  717, 1802,
      573,  731,  731,  720,  592,  592,  790,  583,  597,  597,
      742,  742, 1198,  605,  605, 1802,  732, 1802, 1802, 1199,
     1802,  752,  752,  627,  627,  743, 1802,  791, 1802,  754,
      754, 1200,  611,  611, 1802,  753, 1802,  748,  612,  612,
      750, 1201, 1802,  755, 1802, 1802,  977, 1802, 1802,  978,

     1802, 1802,  751, 1802,  613,  613, 1802,  614, 1802,  615,
     1802,  758, 1802,  618,  618,  633,  633, 1802, 1802, 1802,
     1802,  759,  760,  760,  636,  636, 1802,  619, 1802,  762,
      761,  622,  622, 1202,  623, 1802,  624, 1802,  625,  625,
      775,  765,  765, 1216, 1802, 1217, 1802,  769,  769,  773,
      773, 1802,  626, 1802, 1802, 1218, 1802,  776,  641,  641,
      642,  642,  770, 1219,  774,  648,  648,  787,  787,  653,
      653,  654,  654,  792,  792,  656,  656,  794,  794, 1220,
      649,  664,  664,  667,  667,  803,  803, 1802,  793, 1802,
      657,  669,  669,  804,  804,  806,  806, 1221,  668,  771,

      809,  809,  679,  679,  817,  817,  670,  820,  820, 1224,
      807,  684,  684,  823,  823,  810,  688,  688, 1225,  818,
      836,  836,  821,  846,  846,  710,  710,  882,  824,  716,
      716,  852,  852,  853,  853,  837,  719,  719,  711,  855,
      855,  729,  729, 1226,  717,  731,  731,  864,  864,  720,
      870,  870,  873,  873,  856, 1227,  819,  742,  742,  871,
      732,  877,  877, 1228, 1802,  872, 1802,  874, 1230,  884,
      884,  883,  743,  752,  752, 1045,  886,  886, 1046,  754,
      754,  875, 1802,  885, 1802, 1232, 1802,  753, 1802, 1802,
     1233, 1802, 1802,  755, 1802,  887,  887, 1802, 1802, 1802,

     1802,  760,  760, 1802, 1802, 1802, 1802, 1234, 1802, 1235,
     1802,  765,  765, 1802, 1802, 1802, 1802,  769,  769,  895,
      895,  896,  896,  888, 1802,  891, 1802,  773,  773,  899,
      899, 1236,  770,  903,  903, 1117,  897,  787,  787,  889,
      916,  916,  774,  792,  792,  919,  919,  890,  904,  794,
      794,  920,  920,  926,  926,  917,  803,  803,  793,  804,
      804,  806,  806,  931,  931, 1802,  921, 1802,  927,  809,
      809,  918,  933,  933,  938,  938,  807,  940,  940,  817,
      817,  943,  943, 1238,  810,  944,  944,  820,  820,  939,
      946,  946,  941, 1239,  818,  823,  823,  948,  948, 1802,

      945, 1802,  821,  950,  950, 1019,  942,  954,  954, 1242,
      824,  836,  836,  962,  962,  846,  846, 1243,  951,  972,
      972, 1244,  955,  852,  852, 1802,  837, 1802,  973,  853,
      853,  855,  855, 1207,  974,  980,  980,  864,  864,  988,
      988,  870,  870,  873,  873, 1245,  856,  996,  996, 1246,
      871,  998,  998, 1802,  989, 1802,  872,  990,  874, 1247,
      997,  877,  877, 1005, 1005, 1802, 1118, 1802,  895,  895,
      884,  884, 1248, 1008, 1008, 1249, 1802, 1006, 1802,  886,
      886, 1250, 1004, 1802,  885, 1802, 1802, 1254, 1802,  887,
      887, 1802, 1802, 1802, 1802, 1255, 1802, 1007, 1802, 1020,

     1020, 1009, 1802, 1256, 1802, 1017, 1017, 1010, 1011, 1012,
     1802, 1013, 1802, 1014, 1021, 1015,  896,  896, 1802, 1018,
     1802, 1024, 1024, 1016,  899,  899,  903,  903, 1029, 1029,
     1257,  897, 1035, 1035, 1040, 1040,  916,  916, 1044, 1044,
     1258,  904,  919,  919,  920,  920, 1802, 1036, 1802, 1041,
     1119,  917, 1047, 1047,  926,  926, 1052, 1052, 1259,  921,
      931,  931, 1056, 1056,  933,  933,  938,  938, 1260,  927,
     1063, 1063,  940,  940, 1064, 1064, 1261, 1057,  943,  943,
     1058,  939,  944,  944, 1066, 1066, 1121,  941,  946,  946,
      948,  948,  950,  950, 1069, 1069, 1262,  945,  954,  954,

     1072, 1072,  962,  962, 1263,  972,  972,  951, 1086, 1086,
      980,  980, 1264,  955,  973,  988,  988, 1098, 1098, 1265,
      974, 1087, 1104, 1104,  996,  996,  998,  998, 1266, 1802,
      989, 1802, 1005, 1005, 1267, 1112, 1112,  997, 1802, 1268,
     1802, 1008, 1008, 1124, 1124, 1802, 1006, 1802, 1802, 1802,
     1802, 1802, 1269, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1270, 1802, 1113, 1802, 1024, 1024, 1017, 1017, 1271,
     1122, 1122, 1272, 1111, 1115, 1020, 1020, 1029, 1029, 1120,
     1802, 1018, 1802, 1802, 1114, 1802, 1131, 1131, 1133, 1133,
     1021, 1273, 1116, 1035, 1035, 1138, 1138, 1141, 1141, 1274,

     1123, 1132, 1275, 1134, 1040, 1040, 1143, 1143, 1036, 1145,
     1145, 1276, 1142, 1044, 1044, 1047, 1047, 1152, 1152, 1041,
     1052, 1052, 1056, 1056, 1146, 1157, 1157, 1063, 1063, 1064,
     1064, 1277, 1153, 1066, 1066, 1069, 1069, 1057, 1167, 1167,
     1072, 1072, 1182, 1182, 1086, 1086, 1098, 1098, 1104, 1104,
     1112, 1112, 1802, 1168, 1802, 1280, 1802, 1087, 1802, 1203,
     1124, 1124, 1204, 1802, 1802, 1802, 1802, 1281, 1802, 1205,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1296, 1802, 1122, 1122, 1802, 1301, 1802, 1222, 1222, 1206,
     1169, 1131, 1131, 1211, 1302, 1802, 1212, 1802, 1223, 1223,

     1303, 1210, 1209, 1304, 1208, 1802, 1132, 1802, 1214, 1133,
     1133, 1138, 1138, 1215, 1213, 1141, 1141, 1229, 1229, 1143,
     1143, 1145, 1145, 1305, 1134, 1231, 1231, 1152, 1152, 1283,
     1142, 1237, 1237, 1240, 1240, 1306, 1146, 1157, 1157, 1167,
     1167, 1307, 1153, 1251, 1251, 1252, 1252, 1308, 1241, 1182,
     1182, 1278, 1278, 1802, 1168, 1802, 1802, 1802, 1802, 1802,
     1253, 1802, 1802, 1802, 1802, 1802, 1279, 1802, 1802, 1309,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1310, 1802, 1285, 1297, 1297, 1292, 1311, 1282, 1222, 1222,
     1299, 1299, 1312, 1289, 1288, 1290, 1284, 1313, 1298, 1291,

     1286, 1223, 1223, 1287, 1293, 1300, 1229, 1229, 1231, 1231,
     1314, 1317, 1294, 1237, 1237, 1315, 1315, 1240, 1240, 1318,
     1318, 1319, 1320, 1295, 1321, 1322, 1322, 1324, 1325, 1325,
     1316, 1329, 1241, 1327, 1327, 1330, 1251, 1251, 1252, 1252,
     1323, 1331, 1331, 1326, 1332, 1333, 1334, 1334, 1328, 1337,
     1337, 1340, 1341, 1253, 1342, 1335, 1343, 1346, 1338, 1344,
     1344, 1336, 1347, 1348, 1339, 1349, 1349, 1351, 1352, 1353,
     1354, 1357, 1355, 1358, 1345, 1359, 1278, 1278, 1360, 1360,
     1350, 1356, 1361, 1362, 1802, 1802, 1802, 1802, 1802, 1377,
     1802, 1279, 1802, 1802, 1802, 1802, 1802, 1380, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1387, 1363, 1365,
     1802, 1388, 1802, 1802, 1802, 1802, 1802, 1802, 1389, 1802,
     1378, 1378, 1376, 1370, 1390, 1368, 1366, 1391, 1369, 1364,
     1297, 1297, 1392, 1367, 1395, 1372, 1375, 1373, 1374, 1299,
     1299, 1371, 1379, 1379, 1396, 1298, 1381, 1381, 1383, 1383,
     1385, 1385, 1393, 1393, 1300, 1397, 1315, 1315, 1398, 1398,
     1399, 1382, 1404, 1384, 1406, 1386, 1402, 1394, 1318, 1318,
     1409, 1316, 1400, 1400, 1410, 1403, 1322, 1322, 1405, 1405,
     1325, 1325, 1407, 1407, 1327, 1327, 1411, 1401, 1408, 1408,
     1412, 1323, 1331, 1331, 1413, 1326, 1334, 1334, 1416, 1328,

     1414, 1414, 1419, 1337, 1337, 1335, 1417, 1417, 1420, 1423,
     1425, 1336, 1338, 1415, 1421, 1421, 1344, 1344, 1339, 1418,
     1424, 1424, 1426, 1422, 1427, 1349, 1349, 1428, 1428, 1429,
     1430, 1345, 1431, 1432, 1433, 1434, 1435, 1436, 1360, 1360,
     1350, 1437, 1438, 1802, 1802, 1802, 1802, 1455, 1439, 1441,
     1441, 1802, 1802, 1802, 1802, 1802, 1456, 1802, 1802, 1440,
     1802, 1460, 1802, 1442, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1446, 1802,
     1378, 1378, 1443, 1379, 1379, 1381, 1381, 1449, 1457, 1457,
     1445, 1444, 1447, 1458, 1458, 1452, 1383, 1383, 1385, 1385,

     1382, 1459, 1459, 1453, 1461, 1448, 1454, 1464, 1450, 1462,
     1462, 1384, 1465, 1386, 1451, 1466, 1393, 1393, 1467, 1467,
     1468, 1469, 1470, 1474, 1463, 1398, 1398, 1471, 1471, 1400,
     1400, 1394, 1473, 1473, 1475, 1476, 1405, 1405, 1477, 1407,
     1407, 1478, 1472, 1479, 1401, 1408, 1408, 1480, 1481, 1482,
     1482, 1414, 1414, 1483, 1484, 1484, 1417, 1417, 1485, 1486,
     1487, 1421, 1421, 1488, 1415, 1489, 1424, 1424, 1490, 1418,
     1422, 1491, 1492, 1428, 1428, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1500, 1501, 1802, 1802, 1802, 1802, 1441, 1441,
     1519, 1504, 1504, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1442, 1802, 1802, 1520, 1802, 1506, 1802, 1802,
     1802, 1802, 1802, 1521, 1802, 1507, 1512, 1512, 1522, 1502,
     1503, 1524, 1802, 1508, 1802, 1514, 1514, 1457, 1457, 1802,
     1513, 1802, 1525, 1505, 1509, 1458, 1458, 1510, 1802, 1515,
     1802, 1802, 1802, 1802, 1802, 1459, 1459, 1462, 1462, 1523,
     1523, 1526, 1511, 1527, 1516, 1467, 1467, 1528, 1529, 1471,
     1471, 1531, 1463, 1530, 1530, 1534, 1517, 1473, 1473, 1532,
     1532, 1535, 1536, 1537, 1472, 1538, 1539, 1482, 1482, 1540,
     1518, 1484, 1484, 1541, 1533, 1542, 1543, 1544, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1802,

     1802, 1802, 1802, 1504, 1504, 1802, 1802, 1802, 1802, 1802,
     1557, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1558, 1802, 1570, 1571, 1572, 1512, 1512, 1573, 1565,
     1565, 1555, 1559, 1802, 1562, 1802, 1523, 1523, 1560, 1802,
     1513, 1802, 1802, 1556, 1802, 1574, 1579, 1514, 1514, 1564,
     1580, 1561, 1566, 1566, 1802, 1802, 1802, 1802, 1567, 1563,
     1802, 1515, 1802, 1575, 1575, 1802, 1581, 1802, 1577, 1577,
     1530, 1530, 1582, 1532, 1532, 1583, 1583, 1584, 1576, 1585,
     1586, 1586, 1588, 1578, 1589, 1590, 1591, 1592, 1533, 1593,
     1544, 1544, 1568, 1594, 1569, 1587, 1595, 1596, 1597, 1598,

     1599, 1600, 1600, 1602, 1603, 1603, 1620, 1605, 1605, 1802,
     1802, 1802, 1802, 1802, 1621, 1802, 1601, 1802, 1604, 1802,
     1802, 1606, 1802, 1802, 1624, 1802, 1611, 1611, 1625, 1802,
     1609, 1802, 1802, 1802, 1802, 1802, 1565, 1565, 1628, 1802,
     1612, 1802, 1626, 1626, 1607, 1608, 1566, 1566, 1802, 1802,
     1802, 1802, 1802, 1633, 1802, 1615, 1634, 1610, 1614, 1802,
     1635, 1802, 1617, 1617, 1622, 1622, 1637, 1613, 1575, 1575,
     1577, 1577, 1627, 1627, 1638, 1802, 1618, 1802, 1639, 1623,
     1629, 1629, 1640, 1576, 1641, 1578, 1642, 1616, 1631, 1631,
     1583, 1583, 1619, 1586, 1586, 1630, 1636, 1636, 1643, 1644,

     1600, 1600, 1646, 1632, 1645, 1645, 1603, 1603, 1587, 1647,
     1647, 1667, 1605, 1605, 1670, 1601, 1648, 1648, 1673, 1802,
     1604, 1802, 1802, 1674, 1802, 1802, 1606, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1677, 1802, 1611,
     1611, 1678, 1653, 1653, 1802, 1802, 1802, 1802, 1802, 1679,
     1802, 1654, 1802, 1612, 1802, 1802, 1680, 1802, 1651, 1683,
     1649, 1666, 1666, 1684, 1657, 1657, 1656, 1617, 1617, 1685,
     1659, 1659, 1662, 1662, 1686, 1650, 1652, 1802, 1658, 1802,
     1802, 1618, 1802, 1802, 1655, 1802, 1802, 1663, 1802, 1664,
     1664, 1660, 1622, 1622, 1668, 1668, 1626, 1626, 1627, 1627,

     1629, 1629, 1661, 1702, 1665, 1671, 1671, 1623, 1704, 1669,
     1631, 1631, 1672, 1672, 1705, 1630, 1675, 1675, 1636, 1636,
     1681, 1681, 1645, 1645, 1706, 1632, 1647, 1647, 1708, 1648,
     1648, 1676, 1687, 1687, 1709, 1682, 1689, 1689, 1802, 1802,
     1802, 1802, 1802, 1710, 1802, 1802, 1688, 1802, 1712, 1802,
     1690, 1802, 1802, 1713, 1802, 1653, 1653, 1802, 1714, 1802,
     1694, 1694, 1802, 1802, 1802, 1802, 1657, 1657, 1802, 1715,
     1802, 1697, 1697, 1802, 1695, 1802, 1700, 1700, 1691, 1802,
     1658, 1802, 1659, 1659, 1802, 1729, 1802, 1696, 1802, 1730,
     1802, 1692, 1662, 1662, 1802, 1802, 1802, 1802, 1698, 1664,

     1664, 1693, 1701, 1701, 1666, 1666, 1731, 1663, 1732, 1668,
     1668, 1703, 1703, 1733, 1665, 1671, 1671, 1672, 1672, 1675,
     1675, 1707, 1707, 1699, 1669, 1681, 1681, 1711, 1711, 1687,
     1687, 1734, 1716, 1716, 1676, 1689, 1689, 1726, 1717, 1717,
     1682, 1735, 1802, 1688, 1802, 1802, 1736, 1802, 1802, 1690,
     1802, 1802, 1737, 1802, 1718, 1718, 1738, 1720, 1720, 1802,
     1750, 1802, 1694, 1694, 1751, 1723, 1723, 1802, 1719, 1802,
     1802, 1721, 1802, 1697, 1697, 1802, 1695, 1802, 1802, 1802,
     1802, 1802, 1802, 1752, 1802, 1753, 1802, 1754, 1802, 1700,
     1700, 1701, 1701, 1727, 1727, 1722, 1703, 1703, 1707, 1707,

     1711, 1711, 1755, 1716, 1716, 1756, 1717, 1717, 1728, 1718,
     1718, 1749, 1749, 1802, 1725, 1802, 1802, 1724, 1802, 1802,
     1757, 1802, 1802, 1719, 1802, 1739, 1739, 1802, 1740, 1802,
     1741, 1720, 1720, 1758, 1742, 1742, 1749, 1749, 1802, 1765,
     1802, 1723, 1723, 1770, 1802, 1721, 1802, 1802, 1802, 1802,
     1802, 1743, 1745, 1745, 1802, 1771, 1802, 1747, 1747, 1780,
     1744, 1727, 1727, 1775, 1775, 1802, 1746, 1802, 1742, 1742,
     1802, 1748, 1802, 1759, 1739, 1739, 1728, 1740, 1802, 1741,
     1802, 1802, 1781, 1802, 1745, 1745, 1802, 1802, 1802, 1802,
     1761, 1761, 1785, 1747, 1747, 1763, 1763, 1802, 1746, 1802,

     1762, 1762, 1802, 1802, 1802, 1802, 1802, 1748, 1802, 1786,
     1764, 1766, 1766, 1802, 1788, 1802, 1789, 1760, 1768, 1768,
     1129, 1773, 1773, 1763, 1763, 1772, 1767, 1761, 1761, 1128,
     1762, 1762, 1127, 1769, 1802, 1774, 1802, 1802, 1764, 1802,
     1802, 1782, 1802, 1802, 1126, 1802, 1776, 1776, 1766, 1766,
     1778, 1778, 1768, 1768, 1779, 1779, 1773, 1773, 1125, 1783,
     1783, 1777, 1110, 1767, 1775, 1775, 1787, 1769, 1109, 1802,
     1774, 1802, 1802, 1108, 1802, 1776, 1776, 1784, 1784, 1778,
     1778, 1779, 1779, 1783, 1783, 1784, 1784, 1802, 1107, 1802,
     1777, 1791, 1791, 1793, 1793, 1802, 1802, 1802, 1802, 1791,

     1791, 1796, 1796, 1793, 1793, 1802, 1792, 1802, 1794, 1797,
     1797, 1796, 1796, 1106, 1792, 1797, 1797, 1105, 1794, 1799,
     1799, 1103, 1790, 1799, 1799, 1102, 1801, 1801, 1101, 1795,
     1801, 1801, 1802, 1800, 1802, 1100, 1802, 1800, 1802, 1802,
     1099, 1802, 1097, 1802, 1798, 1802,   24,   24,   24,   24,
       24,   35,   35,   35,   35,   35,   36,   36,   36,   36,
       36,   37,   37,   37,   37,   37,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   42,   42,   42,   42,
       42,   46, 1096, 1095,   46,   96,   96, 1094,   96,   96,
       97,   97,   97, 1093,   97,   98,   98,   98,   98, 1092,

     1091, 1090, 1089, 1088, 1085, 1084, 1083, 1082, 1081, 1080,
     1079, 1078, 1077, 1076, 1075, 1074, 1073, 1071, 1070, 1068,
     1067, 1065, 1062, 1061, 1060, 1059, 1055, 1054, 1053, 1051,
     1050, 1049, 1048, 1043, 1042, 1039, 1038, 1037, 1032, 1031,
     1030, 1028, 1027, 1026, 1025, 1023, 1022, 1003, 1002, 1001,
     1000,  999,  995,  994,  993,  992,  991,  987,  986,  985,
      984,  983,  982,  981,  979,  976,  975,  971,  970,  969,
      968,  965,  964,  963,  961,  960,  959,  958,  957,  956,
      953,  952,  949,  947,  937,  936,  935,  934,  932,  930,
      929,  928,  925,  924,  923,  922,  915,  914,  913,  912,

      911,  910,  909,  908,  907,  906,  905,  902,  901,  900,
      898,  894,  893,  892,  880,  879,  878,  876,  869,  868,
      867,  866,  865,  863,  862,  861,  860,  859,  858,  857,
      854,  851,  850,  849,  848,  847,  845,  844,  843,  842,
      841,  840,  839,  838,  835,  834,  833,  832,  831,  830,
      829,  828,  827,  826,  825,  822,  816,  815,  814,  813,
      812,  811,  808,  805,  802,  801,  800,  799,  798,  797,
      796,  795,  789,  788,  784,  783,  782,  781,  780,  779,
      778,  777,  772,  768,  767,  766,  764,  763,  757,  756,
      747,  746,  745,  744,  741,  740,  739,  738,  737,  736,

      735,  734,  733,  730,  728,  727,  726,  725,  724,  723,
      722,  721,  718,  713,  712,  709,  706,  705,  704,  703,
      702,  701,  700,  699,  696,  695,  694,  693,  692,  691,
      690,  689,  687,  683,  682,  681,  680,  678,  677,  676,
      675,  674,  673,  672,  671,  666,  665,  663,  662,  661,
      660,  659,  658,  655,  652,  651,  650,  647,  646,  645,
      644,  643,  640,  639,  638,  637,  635,  634,  632,  631,
      628,  603,  602,  601,  600,  596,  595,  594,  593,  591,
      590,  589,  588,  587,  586,  585,  584,  581,  580,  579,
      578,  577,  576,  575,  574,  570,  567,  566,  565,  561,

      560,  559,  558,  557,  554,  553,  552,  551,  549,  548,
      547,  546,  543,  536,  535,  530,  529,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  512,  506,
      505,  499,  497,  496,  495,  494,  493,  492,  490,  489,
      484,  482,  481,  480,  473,  472,  471,  470,  450,  449,
      439,  438,  433,  432,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  413,  412,  406,  404,
      403,  402,  401,  400,  399,  397,  396,  391,  390,  389,
      388,  383,  382,  381,  380,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  366,  365,  364,  361,  360,  359,

      358,  357,  356,  353,  352,  351,  344,  338,  337,  336,
      335,  331,  330,  329,  325,  324,  323,  322,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  286,  285,  284,
      281,  280,  279,  278,  277,  276,  275,  274,  267,  261,
      260,  259,  258,  257,  256,  255,  254,  250,  249,  248,
      247,  246,  237,  216,  215,  208,  203,  200,  182,  180,
      171,  151,  150,  143,  138,  117,  100,   99,   65,   65,
     1802,   35,   35,   35,   35,   35,   35,   19, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802
    } ;

static yyconst flex_int16_t yy_chk[3741] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,   51,    1,   16,    1,   24,   26,   24,
       26,   26,   26,   26,   28,   26,   28,   51,   76,   27,
       27,  202,  202,   26,   32,   46,   32,   46,   76,   27,
       27,   27,   27,   49,   27,   49,   32,  120,   60,   27,
       60,    1,    2,    2,    2,    2,    2,  120,    2, 1028,
        2,    2,    2,    2,    2,    2,    2,   27,    2,    2,
       33,   53,   33,   53,   77,  381,    2,   47,    2,   47,
       47,   47,   47,   53,   47,   77,   57,  381,   57,   60,

       87,   33,   47,   56,   85,   56,   48,   48,   54,   55,
       54,   55,   85,   58,   87,   58,   48,   48,   48,   48,
       61,   48,   61,    2,   21,   21,   48,  263,  263,   54,
       55,   21,   21,   21,   21,   21,   21,   21,   56,   21,
       57,   61,   79,   64,   48,   64,   79,   21,   58,   21,
       59,   80,   59,  171,   66,   66,  171,   80,   79,   21,
       21,   61,   21,   80,   64,   21,   21,   66,  157,   66,
       21,   21,  157,   62,   59,   62,   21,   21,  222,   21,
       22,   22,  222,   63,   59,   63,   83,   22,   22,   22,
       22,   22,   22,   22,   83,   22,   62,   70,   70, 1032,

       83,   84,   89,   22,   63,   22,   84,   95,   88,   95,
       70,   88,   70,   62,   88,   22,   22, 1033,   22,   95,
       92,   22,   22,  118,  118,   89,   22,   22,   63,   92,
       67,   67,   22,   22,  128,   22,   29,   29,  118,  128,
       67,   67,   67,   67,   29,   67,   29,   29,   29,   29,
       67,   29,  121,   68,   68,  124,   29,   68,   68,   68,
       68,  124,   68,  121,   94,   86,   94,  124,   67,   86,
      129,  103,   94,  103,   29,   30,   86,  136,  129,   86,
       91,  106,   30,  106,   91,   86,  136,  152,  152,   30,
       91, 1034,   91,   30,  103,   91,   91,  101,  237,  101,

       30,  237,  152,  107,  106,  107,  155,   30,   30,   30,
       30,   30,   30,   30,  104,   30,  104,  155,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  167,   30,   50,
       50,  102,  110,  102,  110,  107,  101,   50,  167,   50,
       50,   50,   50,  220,   50,  105,  105, 1037,  108,   50,
      108,  133,  104,  110,  220,  111,  102,  111,  105,  105,
      105,  115,  115,  115,  115,  102,  115,   50,   72, 1038,
      112,  109,  112,  109,  133,   72,  111,  113,  114,  113,
      114,  108,   72,   72,   72,   72,   72,   72,   72, 1042,
       72,  271,  271,   72,   72,   72,   72,   72,   72,   72,

       72,   72,  105,   72,  109,  116,  116,  123,  112, 1045,
      114,  123,  131,  113,  127,  116,  116,  116,  116,  471,
      116,  130,  127,  123,  132,  130,  131,  132,  127,  131,
      132,  471,  130,  135, 1046,  130,  153,  135,  156,  156,
      143,  130,  143,  135,  184,  135,  184,  143,  135,  135,
     1048,  153,  153,  156,  181,  181,  183,  185,  183,  185,
      186,  187,  186,  187,  188,  188,  191,  181,  191,  181,
      184,  189,  189,  193,  189,  193,  189,  188,  188,  188,
      192,  183,  192,  194,  189,  194,  189,  190,  190,  195,
      187,  195,  186,  196, 1049,  196,  185,  197,  193,  197,

      190,  190,  190,  252,  191,  194,  199,  198,  199,  198,
      201,  201, 1050,  190,  203,  203, 1053,  252,  190,  233,
      192,  195,  212,  212,  197,  201,  208,  218,  208,  203,
      233,  196,  198,  208,  217,  217, 1054,  212,  221,  221,
      226,  226,  218,  218,  247,  247,  300,  199,  300,  217,
      253,  253,  309,  221,  309,  226,  258,  258, 1055,  247,
      212,  259,  259,  262,  262,  253,  270,  270,  273,  273,
      438,  258,  274,  274, 1058,  277,  259,  277,  262,  277,
      293,  270,  297,  273,  290,  290,  300,  274,  297,  277,
     1059,  293,  294,  294,  298,  309,  298,  299,  299,  290,

      301,  297,  301,  438,  302,  298,  302,  294,  306,  306,
      299,  299,  299,  561,  303,  303,  561,  303,  308,  303,
      308,  306,  306,  306,  307,  307,  274,  303, 1060,  303,
      310,  310,  535,  311,  311, 1061,  313,  307,  313,  307,
      315,  301,  315,  310,  310,  310,  311,  311,  311,  314,
      302,  314,  308,  312,  312,  447,  316,  447,  316,  317,
      317,  313,  318, 1062,  318,  535,  312,  312,  312,  448,
      314,  448,  317,  317,  317,  319,  319,  320,  320,  447,
      315,  316,  321,  321,  322,  322, 1065,  318,  327,  327,
      328,  328,  320,  332,  332,  333,  333,  335,  335,  322,

      336,  336, 1067,  327,  448,  328,  339,  339,  332,  340,
      340, 1068,  335,  347,  347,  336,  348,  348,  350,  350,
      373,  339,  351,  351,  354,  354,  327, 1070,  347,  355,
      355,  373,  356,  350,  356, 1073,  356,  351,  549,  354,
      327,  358,  358,  370,  370, 1074,  356,  374,  374,  377,
      377,  378,  378,  379,  379,  549,  358, 1075,  370,  386,
      386, 1076,  374,  463,  377,  463,  378,  387,  387,  392,
      392, 1077,  377, 1078,  386,  443,  351,  443,  377,  358,
      393,  393,  394,  394,  392,  395,  395,  398,  398,  402,
      402,  377,  405,  405,  407,  407,  443,  394,  402,  408,

      408,  409,  409,  463,  402,  410,  410,  421,  421,  407,
      412,  412,  430,  430,  431,  431,  409,  436,  436,  412,
      437,  437,  421,  444,  444,  412, 1079,  430,  445,  445,
     1080,  446,  436,  446,  451,  451,  444,  444,  444, 1081,
      452,  445,  452,  445,  453,  647,  453,  451,  647,  451,
      467,  467,  446,  454,  454, 1082,  455,  455,  841,  456,
      456,  567,  457,  457,  841,  452,  454,  454,  454,  455,
     1083,  455,  456,  456,  456,  457,  460,  457,  460,  453,
      458,  458,  567,  459,  459,  461,  459,  461,  459,  462,
      462,  469,  469,  458,  458,  458,  459, 1084,  459,  475,

      475, 1087,  462,  462,  462,  464,  464,  479,  479, 1088,
      468,  468,  462, 1089,  460,  466,  466, 1090,  464,  464,
      464,  465,  465,  461,  465,  468,  465, 1091,  466,  466,
      466,  474,  474,  748,  465,  748,  465,  478,  478,  483,
      483,  485,  485,  486,  486,  908,  474,  487,  487,  488,
      488,  908,  478,  491,  491, 1092,  485,  495,  495,  498,
      498, 1093,  487,  500,  500,  501,  501,  502,  502,  503,
      503,  748,  495,  505,  505,  507,  507, 1094,  500,  513,
      513, 1095,  502,  514,  514,  517,  517, 1096,  505,  518,
      518,  527,  527, 1099,  513,  528,  528,  533,  533, 1100,

      517,  534,  534,  606,  518,  606,  527,  537,  537,  538,
      538, 1101,  533,  542,  542,  550,  550,  555,  555,  556,
      556, 1102,  537,  562,  562, 1103,  564,  564,  568,  568,
      569,  569,  562,  570,  570,  571,  571,  606,  562,  564,
      573,  573,  582,  582,  571,  583,  583,  604,  570,  604,
      571,  585,  585,  573,  592,  592,  652,  582,  597,  597,
      599,  599, 1105,  605,  605,  607,  585,  607,  608, 1106,
      608,  609,  609,  627,  627,  599,  605,  652,  605,  610,
      610, 1107,  611,  611,  609,  609,  609,  604,  612,  612,
      607, 1108,  610,  610,  610,  611,  851,  611,  616,  851,

      616,  612,  608,  612,  613,  613,  620,  613,  620,  613,
      617,  616,  617,  618,  618,  633,  633,  613,  621,  613,
      621,  617,  619,  619,  636,  636,  618,  618,  618,  621,
      620,  622,  622, 1109,  622,  619,  622,  619,  625,  625,
      635,  626,  626, 1125,  622, 1126,  622,  631,  631,  634,
      634,  625,  625,  625,  626, 1127,  626,  635,  641,  641,
      642,  642,  631, 1128,  634,  648,  648,  649,  649,  653,
      653,  654,  654,  655,  655,  656,  656,  657,  657, 1129,
      648,  664,  664,  667,  667,  668,  668,  749,  655,  749,
      656,  669,  669,  670,  670,  672,  672, 1130,  667,  631,

      674,  674,  679,  679,  682,  682,  669,  683,  683, 1135,
      672,  684,  684,  686,  686,  674,  688,  688, 1136,  682,
      700,  700,  683,  709,  709,  710,  710,  749,  686,  716,
      716,  717,  717,  718,  718,  700,  719,  719,  710,  721,
      721,  729,  729, 1137,  716,  731,  731,  732,  732,  719,
      738,  738,  739,  739,  721, 1139,  682,  742,  742,  738,
      731,  743,  743, 1140,  750,  738,  750,  739, 1144,  751,
      751,  750,  742,  752,  752,  918,  753,  753,  918,  754,
      754,  739,  751,  751,  751, 1147,  752,  752,  752,  753,
     1148,  753,  754,  754,  754,  755,  755,  758,  759,  758,

      759,  760,  760,  761,  762,  761,  762, 1149,  755, 1150,
      755,  765,  765, 1012,  760, 1012,  760,  769,  769,  770,
      770,  771,  771,  758,  765,  762,  765,  773,  773,  774,
      774, 1151,  769,  778,  778, 1012,  771,  787,  787,  759,
      791,  791,  773,  792,  792,  793,  793,  761,  778,  794,
      794,  795,  795,  800,  800,  791,  803,  803,  792,  804,
      804,  806,  806,  807,  807,  891,  795,  891,  800,  809,
      809,  791,  810,  810,  815,  815,  806,  816,  816,  817,
      817,  818,  818, 1154,  809,  819,  819,  820,  820,  815,
      821,  821,  816, 1155,  817,  823,  823,  824,  824, 1114,

      819, 1114,  820,  826,  826,  891,  816,  829,  829, 1158,
      823,  836,  836,  837,  837,  846,  846, 1159,  826,  848,
      848, 1160,  829,  852,  852, 1013,  836, 1013,  848,  853,
      853,  855,  855, 1114,  848,  856,  856,  864,  864,  865,
      865,  870,  870,  873,  873, 1161,  855,  872,  872, 1162,
      870,  874,  874,  881,  865,  881,  870,  865,  873, 1163,
      872,  877,  877,  882,  882,  883, 1013,  883,  895,  895,
      884,  884, 1164,  885,  885, 1165,  882,  882,  882,  886,
      886, 1166,  881,  884,  884,  884,  885, 1170,  885,  887,
      887,  889,  886,  889,  886, 1173,  888,  883,  888,  892,

      892,  888,  887, 1174,  887,  890,  890,  888,  888,  888,
     1014,  888, 1014,  888,  892,  888,  896,  896,  890,  890,
      890,  897,  897,  889,  899,  899,  903,  903,  904,  904,
     1175,  896,  909,  909,  913,  913,  916,  916,  917,  917,
     1176,  903,  919,  919,  920,  920, 1016,  909, 1016,  913,
     1014,  916,  921,  921,  926,  926,  927,  927, 1177,  920,
      931,  931,  932,  932,  933,  933,  938,  938, 1178,  926,
      939,  939,  940,  940,  941,  941, 1179,  932,  943,  943,
      932,  938,  944,  944,  945,  945, 1016,  940,  946,  946,
      948,  948,  950,  950,  951,  951, 1180,  944,  954,  954,

      955,  955,  962,  962, 1181,  972,  972,  950,  974,  974,
      980,  980, 1183,  954,  972,  988,  988,  989,  989, 1184,
      972,  974,  995,  995,  996,  996,  998,  998, 1185, 1004,
      988, 1004, 1005, 1005, 1186, 1006, 1006,  996, 1007, 1187,
     1007, 1008, 1008, 1021, 1021, 1005, 1005, 1005, 1006, 1009,
     1006, 1009, 1188, 1010, 1008, 1010, 1008, 1011, 1015, 1011,
     1015, 1189, 1019, 1007, 1019, 1024, 1024, 1017, 1017, 1190,
     1018, 1018, 1192, 1004, 1010, 1020, 1020, 1029, 1029, 1015,
     1017, 1017, 1017, 1018, 1009, 1018, 1030, 1030, 1031, 1031,
     1020, 1193, 1011, 1035, 1035, 1036, 1036, 1039, 1039, 1194,

     1019, 1030, 1195, 1031, 1040, 1040, 1041, 1041, 1035, 1043,
     1043, 1197, 1039, 1044, 1044, 1047, 1047, 1051, 1051, 1040,
     1052, 1052, 1056, 1056, 1043, 1057, 1057, 1063, 1063, 1064,
     1064, 1198, 1051, 1066, 1066, 1069, 1069, 1056, 1071, 1071,
     1072, 1072, 1085, 1085, 1086, 1086, 1098, 1098, 1104, 1104,
     1112, 1112, 1111, 1071, 1111, 1201, 1113, 1086, 1113, 1111,
     1124, 1124, 1111, 1112, 1115, 1112, 1115, 1202, 1116, 1111,
     1116, 1117, 1118, 1117, 1118, 1119, 1120, 1119, 1120, 1121,
     1216, 1121, 1122, 1122, 1123, 1219, 1123, 1132, 1132, 1113,
     1071, 1131, 1131, 1118, 1220, 1122, 1119, 1122, 1134, 1134,

     1221, 1117, 1116, 1224, 1115, 1204, 1131, 1204, 1121, 1133,
     1133, 1138, 1138, 1123, 1120, 1141, 1141, 1142, 1142, 1143,
     1143, 1145, 1145, 1225, 1133, 1146, 1146, 1152, 1152, 1204,
     1141, 1153, 1153, 1156, 1156, 1226, 1145, 1157, 1157, 1167,
     1167, 1227, 1152, 1168, 1168, 1169, 1169, 1228, 1156, 1182,
     1182, 1199, 1199, 1203, 1167, 1203, 1205, 1206, 1205, 1206,
     1169, 1207, 1209, 1207, 1209, 1208, 1199, 1208, 1210, 1230,
     1210, 1211, 1212, 1211, 1212, 1213, 1214, 1213, 1214, 1215,
     1232, 1215, 1206, 1217, 1217, 1213, 1233, 1203, 1222, 1222,
     1218, 1218, 1234, 1210, 1209, 1211, 1205, 1235, 1217, 1212,

     1207, 1223, 1223, 1208, 1213, 1218, 1229, 1229, 1231, 1231,
     1236, 1239, 1214, 1237, 1237, 1238, 1238, 1240, 1240, 1241,
     1241, 1242, 1243, 1215, 1244, 1245, 1245, 1246, 1247, 1247,
     1238, 1249, 1240, 1248, 1248, 1250, 1251, 1251, 1252, 1252,
     1245, 1253, 1253, 1247, 1254, 1255, 1257, 1257, 1248, 1258,
     1258, 1259, 1260, 1252, 1261, 1257, 1262, 1264, 1258, 1263,
     1263, 1257, 1265, 1266, 1258, 1268, 1268, 1269, 1270, 1271,
     1272, 1275, 1274, 1276, 1263, 1277, 1278, 1278, 1279, 1279,
     1268, 1274, 1280, 1281, 1282, 1283, 1282, 1283, 1284, 1296,
     1284, 1278, 1285, 1286, 1285, 1286, 1287, 1301, 1287, 1288,

     1289, 1288, 1289, 1290, 1294, 1290, 1294, 1305, 1282, 1284,
     1291, 1306, 1291, 1292, 1295, 1292, 1295, 1293, 1307, 1293,
     1298, 1298, 1295, 1289, 1308, 1287, 1285, 1309, 1288, 1283,
     1297, 1297, 1310, 1286, 1312, 1291, 1294, 1292, 1293, 1299,
     1299, 1290, 1300, 1300, 1313, 1297, 1302, 1302, 1303, 1303,
     1304, 1304, 1311, 1311, 1299, 1314, 1315, 1315, 1316, 1316,
     1317, 1302, 1321, 1303, 1324, 1304, 1320, 1311, 1318, 1318,
     1329, 1315, 1319, 1319, 1330, 1320, 1322, 1322, 1323, 1323,
     1325, 1325, 1326, 1326, 1327, 1327, 1332, 1319, 1328, 1328,
     1333, 1322, 1331, 1331, 1335, 1325, 1334, 1334, 1338, 1327,

     1336, 1336, 1340, 1337, 1337, 1334, 1339, 1339, 1341, 1343,
     1346, 1334, 1337, 1336, 1342, 1342, 1344, 1344, 1337, 1339,
     1345, 1345, 1347, 1342, 1348, 1349, 1349, 1350, 1350, 1351,
     1352, 1344, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1360,
     1349, 1361, 1362, 1363, 1365, 1363, 1365, 1377, 1363, 1364,
     1364, 1366, 1367, 1366, 1367, 1368, 1380, 1368, 1369, 1363,
     1369, 1387, 1364, 1364, 1364, 1370, 1371, 1370, 1371, 1372,
     1373, 1372, 1373, 1374, 1375, 1374, 1375, 1376, 1368, 1376,
     1378, 1378, 1365, 1379, 1379, 1381, 1381, 1371, 1382, 1382,
     1367, 1366, 1369, 1384, 1384, 1374, 1383, 1383, 1385, 1385,

     1381, 1386, 1386, 1375, 1388, 1370, 1376, 1390, 1372, 1389,
     1389, 1383, 1391, 1385, 1373, 1392, 1393, 1393, 1394, 1394,
     1395, 1396, 1397, 1402, 1389, 1398, 1398, 1399, 1399, 1400,
     1400, 1393, 1401, 1401, 1403, 1404, 1405, 1405, 1406, 1407,
     1407, 1409, 1399, 1410, 1400, 1408, 1408, 1411, 1412, 1413,
     1413, 1414, 1414, 1415, 1416, 1416, 1417, 1417, 1418, 1419,
     1420, 1421, 1421, 1422, 1414, 1423, 1424, 1424, 1425, 1417,
     1421, 1426, 1427, 1428, 1428, 1429, 1430, 1431, 1432, 1434,
     1435, 1436, 1437, 1438, 1439, 1440, 1439, 1440, 1441, 1441,
     1455, 1442, 1442, 1443, 1445, 1443, 1445, 1444, 1446, 1444,

     1446, 1441, 1441, 1441, 1442, 1456, 1442, 1444, 1448, 1447,
     1448, 1447, 1449, 1460, 1449, 1445, 1450, 1450, 1461, 1439,
     1440, 1464, 1452, 1446, 1452, 1451, 1451, 1457, 1457, 1450,
     1450, 1450, 1465, 1443, 1447, 1458, 1458, 1448, 1451, 1451,
     1451, 1453, 1454, 1453, 1454, 1459, 1459, 1462, 1462, 1463,
     1463, 1466, 1449, 1468, 1452, 1467, 1467, 1469, 1470, 1471,
     1471, 1474, 1462, 1472, 1472, 1476, 1453, 1473, 1473, 1475,
     1475, 1477, 1478, 1479, 1471, 1480, 1481, 1482, 1482, 1483,
     1454, 1484, 1484, 1485, 1475, 1486, 1487, 1488, 1488, 1489,
     1490, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1501, 1502,

     1503, 1502, 1503, 1504, 1504, 1505, 1506, 1505, 1506, 1507,
     1505, 1507, 1508, 1509, 1508, 1509, 1504, 1510, 1504, 1510,
     1511, 1505, 1511, 1519, 1520, 1521, 1512, 1512, 1522, 1513,
     1513, 1502, 1506, 1516, 1509, 1516, 1523, 1523, 1507, 1512,
     1512, 1512, 1513, 1503, 1513, 1524, 1527, 1514, 1514, 1511,
     1528, 1508, 1515, 1515, 1517, 1518, 1517, 1518, 1516, 1510,
     1514, 1514, 1514, 1525, 1525, 1515, 1529, 1515, 1526, 1526,
     1530, 1530, 1531, 1532, 1532, 1533, 1533, 1534, 1525, 1535,
     1536, 1536, 1537, 1526, 1538, 1539, 1540, 1541, 1532, 1543,
     1544, 1544, 1517, 1545, 1518, 1536, 1546, 1547, 1550, 1551,

     1552, 1553, 1553, 1554, 1555, 1555, 1570, 1556, 1556, 1557,
     1558, 1557, 1558, 1559, 1571, 1559, 1553, 1555, 1555, 1555,
     1556, 1556, 1556, 1560, 1573, 1560, 1561, 1561, 1574, 1562,
     1559, 1562, 1564, 1563, 1564, 1563, 1565, 1565, 1579, 1561,
     1561, 1561, 1576, 1576, 1557, 1558, 1566, 1566, 1567, 1565,
     1567, 1565, 1569, 1582, 1569, 1564, 1584, 1560, 1563, 1566,
     1585, 1566, 1568, 1568, 1572, 1572, 1588, 1562, 1575, 1575,
     1577, 1577, 1578, 1578, 1591, 1568, 1568, 1568, 1592, 1572,
     1580, 1580, 1593, 1575, 1595, 1577, 1596, 1567, 1581, 1581,
     1583, 1583, 1569, 1586, 1586, 1580, 1587, 1587, 1597, 1598,

     1600, 1600, 1602, 1581, 1601, 1601, 1603, 1603, 1586, 1604,
     1604, 1624, 1605, 1605, 1628, 1600, 1606, 1606, 1633, 1603,
     1603, 1603, 1604, 1634, 1604, 1605, 1605, 1605, 1607, 1606,
     1607, 1606, 1608, 1609, 1608, 1609, 1610, 1637, 1610, 1611,
     1611, 1638, 1612, 1612, 1613, 1614, 1613, 1614, 1615, 1639,
     1615, 1613, 1611, 1611, 1611, 1612, 1640, 1612, 1609, 1642,
     1607, 1623, 1623, 1643, 1616, 1616, 1615, 1617, 1617, 1644,
     1618, 1618, 1620, 1620, 1646, 1608, 1610, 1616, 1616, 1616,
     1617, 1617, 1617, 1618, 1614, 1618, 1619, 1620, 1619, 1621,
     1621, 1619, 1622, 1622, 1625, 1625, 1626, 1626, 1627, 1627,

     1629, 1629, 1619, 1667, 1621, 1630, 1630, 1622, 1670, 1625,
     1631, 1631, 1632, 1632, 1673, 1629, 1635, 1635, 1636, 1636,
     1641, 1641, 1645, 1645, 1674, 1631, 1647, 1647, 1677, 1648,
     1648, 1635, 1649, 1649, 1678, 1641, 1650, 1650, 1651, 1647,
     1651, 1647, 1648, 1679, 1648, 1649, 1649, 1649, 1683, 1650,
     1650, 1650, 1652, 1684, 1652, 1653, 1653, 1654, 1685, 1654,
     1655, 1655, 1656, 1660, 1656, 1660, 1657, 1657, 1653, 1686,
     1653, 1658, 1658, 1655, 1655, 1655, 1663, 1663, 1651, 1657,
     1657, 1657, 1659, 1659, 1658, 1704, 1658, 1656, 1661, 1705,
     1661, 1652, 1662, 1662, 1699, 1659, 1699, 1659, 1660, 1664,

     1664, 1654, 1665, 1665, 1666, 1666, 1706, 1662, 1708, 1668,
     1668, 1669, 1669, 1709, 1664, 1671, 1671, 1672, 1672, 1675,
     1675, 1676, 1676, 1661, 1668, 1681, 1681, 1682, 1682, 1687,
     1687, 1710, 1688, 1688, 1675, 1689, 1689, 1699, 1690, 1690,
     1681, 1712, 1687, 1687, 1687, 1688, 1713, 1688, 1689, 1689,
     1689, 1690, 1714, 1690, 1691, 1691, 1715, 1692, 1692, 1693,
     1729, 1693, 1694, 1694, 1730, 1695, 1695, 1691, 1691, 1691,
     1692, 1692, 1692, 1697, 1697, 1694, 1694, 1694, 1695, 1696,
     1695, 1696, 1698, 1731, 1698, 1732, 1697, 1733, 1697, 1700,
     1700, 1701, 1701, 1702, 1702, 1693, 1703, 1703, 1707, 1707,

     1711, 1711, 1734, 1716, 1716, 1736, 1717, 1717, 1702, 1718,
     1718, 1728, 1728, 1722, 1698, 1722, 1716, 1696, 1716, 1717,
     1740, 1717, 1718, 1718, 1718, 1719, 1719, 1724, 1719, 1724,
     1719, 1720, 1720, 1741, 1721, 1721, 1749, 1749, 1719, 1751,
     1719, 1723, 1723, 1754, 1720, 1720, 1720, 1721, 1743, 1721,
     1743, 1722, 1725, 1725, 1723, 1755, 1723, 1726, 1726, 1770,
     1724, 1727, 1727, 1764, 1764, 1725, 1725, 1725, 1742, 1742,
     1726, 1726, 1726, 1743, 1739, 1739, 1727, 1739, 1744, 1739,
     1744, 1742, 1771, 1742, 1745, 1745, 1759, 1739, 1759, 1739,
     1746, 1746, 1780, 1747, 1747, 1750, 1750, 1745, 1745, 1745,

     1748, 1748, 1772, 1746, 1772, 1746, 1747, 1747, 1747, 1781,
     1750, 1752, 1752, 1748, 1785, 1748, 1786, 1744, 1753, 1753,
     1027, 1760, 1760, 1763, 1763, 1759, 1752, 1761, 1761, 1026,
     1762, 1762, 1025, 1753, 1760, 1760, 1760, 1782, 1763, 1782,
     1761, 1772, 1761, 1762, 1023, 1762, 1765, 1765, 1766, 1766,
     1767, 1767, 1768, 1768, 1769, 1769, 1773, 1773, 1022, 1774,
     1774, 1765, 1003, 1766, 1775, 1775, 1782, 1768, 1002, 1773,
     1773, 1773, 1774, 1001, 1774, 1776, 1776, 1777, 1777, 1778,
     1778, 1779, 1779, 1783, 1783, 1784, 1784, 1787, 1000, 1787,
     1776, 1788, 1788, 1789, 1789, 1790, 1783, 1790, 1783, 1791,

     1791, 1792, 1792, 1793, 1793, 1795, 1788, 1795, 1789, 1794,
     1794, 1796, 1796,  999, 1791, 1797, 1797,  997, 1793, 1798,
     1798,  994, 1787, 1799, 1799,  993, 1800, 1800,  992, 1790,
     1801, 1801, 1798, 1798, 1798,  991, 1799, 1799, 1799, 1800,
      990, 1800,  987, 1801, 1795, 1801, 1803, 1803, 1803, 1803,
     1803, 1804, 1804, 1804, 1804, 1804, 1805, 1805, 1805, 1805,
     1805, 1806, 1806, 1806, 1806, 1806, 1807, 1807, 1807, 1807,
     1807, 1808, 1808, 1808, 1808, 1808, 1809, 1809, 1809, 1809,
     1809, 1810,  986,  985, 1810, 1811, 1811,  983, 1811, 1811,
     1812, 1812, 1812,  982, 1812, 1813, 1813, 1813, 1813,  981,

      979,  978,  977,  975,  973,  971,  969,  968,  967,  966,
      965,  961,  960,  959,  958,  957,  956,  953,  952,  949,
      947,  942,  937,  936,  935,  934,  930,  929,  928,  925,
      924,  923,  922,  915,  914,  912,  911,  910,  907,  906,
      905,  902,  901,  900,  898,  894,  893,  880,  879,  878,
      876,  875,  871,  869,  868,  867,  866,  863,  862,  861,
      860,  859,  858,  857,  854,  850,  849,  847,  845,  844,
      843,  840,  839,  838,  835,  834,  833,  832,  831,  830,
      828,  827,  825,  822,  814,  813,  812,  811,  808,  805,
      802,  801,  799,  798,  797,  796,  790,  789,  788,  786,

      785,  784,  783,  782,  781,  780,  779,  777,  776,  775,
      772,  768,  767,  766,  747,  746,  744,  741,  737,  736,
      735,  734,  733,  730,  728,  727,  725,  724,  723,  722,
      720,  715,  714,  713,  712,  711,  708,  707,  706,  705,
      704,  703,  702,  701,  699,  698,  697,  696,  694,  693,
      692,  691,  690,  689,  687,  685,  681,  680,  678,  677,
      676,  675,  673,  671,  666,  665,  663,  662,  661,  660,
      659,  658,  651,  650,  646,  645,  644,  643,  640,  639,
      638,  637,  632,  630,  629,  628,  624,  623,  615,  614,
      603,  602,  601,  600,  598,  595,  594,  593,  591,  590,

      589,  588,  586,  584,  581,  580,  579,  578,  577,  576,
      575,  574,  572,  566,  565,  563,  560,  559,  558,  557,
      554,  553,  552,  551,  547,  546,  545,  544,  543,  541,
      540,  539,  536,  532,  531,  530,  529,  526,  525,  524,
      523,  522,  521,  520,  519,  516,  515,  512,  511,  510,
      509,  508,  506,  504,  499,  497,  496,  494,  493,  492,
      490,  489,  484,  482,  481,  480,  477,  476,  473,  472,
      470,  442,  441,  440,  439,  435,  434,  433,  432,  429,
      428,  427,  426,  425,  424,  423,  422,  420,  419,  418,
      417,  416,  415,  414,  413,  411,  406,  404,  403,  401,

      400,  399,  397,  396,  391,  390,  389,  388,  385,  384,
      383,  382,  380,  376,  375,  372,  371,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  357,  353,
      352,  349,  346,  345,  344,  343,  342,  341,  338,  337,
      334,  331,  330,  329,  326,  325,  324,  323,  305,  304,
      296,  295,  292,  291,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  276,  275,  272,  269,
      268,  267,  266,  265,  264,  261,  260,  257,  256,  255,
      254,  251,  250,  249,  248,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  236,  235,  234,  232,  231,  230,

      229,  228,  227,  225,  224,  223,  219,  216,  215,  214,
      213,  211,  210,  209,  207,  206,  205,  204,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  170,  169,  168,
      166,  165,  164,  163,  162,  160,  159,  158,  154,  151,
      150,  149,  148,  147,  146,  145,  144,  142,  141,  140,
      139,  137,  134,  126,  125,  122,  119,  117,   99,   93,
       90,   82,   81,   78,   75,   71,   44,   41,   25,   23,
       19,   14,   13,    8,    7,    6,    5, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[245] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;

//#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 1995 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 2250 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1803 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3678 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 234:
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 238:
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 3841 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1803 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1803 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1802);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"




