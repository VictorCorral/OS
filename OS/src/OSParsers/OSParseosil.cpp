#line 2 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 352
#define YY_END_OF_BUFFER 353
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2903] =
    {   0,
        1,    1,    0,    0,  349,  349,  350,  350,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  353,  351,
        1,    1,    2,  339,    2,  339,    6,  339,    5,  351,
        4,  339,  339,    2,  352,  349,  350,  340,  342,  343,
      342,  346,  347,  346,    1,  339,  339,    6,  339,    5,
        0,    4,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
        3,    6,    6,  339,    7,    5,    0,    0,  345,  293,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  339,

      339,  349,  350,  340,    0,  348,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  295,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  249,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    6,  344,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  341,    0,  294,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  136,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  279,    0,    0,    0,    0,    0,    0,    0,  263,
        0,    0,    0,    0,    0,    0,    0,  138,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  134,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,   47,   48,
      339,   20,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  294,    0,  296,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  145,    0,    0,    0,
        0,    0,    0,    0,    0,  280,    0,    0,    0,    0,
        0,    0,    0,  264,    0,    0,    0,    0,    0,    0,
      250,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  275,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  271,    0,    0,    0,
        0,    0,  277,    0,  273,  120,    0,    0,    0,    0,
      279,    0,    0,    0,    0,    0,    0,  263,    0,    0,
      281,    0,  283,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  269,    0,    0,    0,    0,
        0,  285,    0,    0,    0,    0,    0,    0,  339,  339,
      339,  339,  339,  246,  339,  339,  339,  339,  339,   45,
       46,   20,  339,  339,  339,  339,   23,  339,  339,  339,
      339,   24,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  296,    0,  276,    0,    0,
        0,    0,    0,    0,  137,    0,    0,    0,    0,  272,
        0,    0,    0,  145,    0,    0,  278,    0,  274,    0,

        0,    0,    0,    0,  280,    0,    0,    0,    0,    0,
        0,  264,    0,    0,  282,    0,  284,    0,    0,    0,
      250,    0,    0,    0,    0,    0,    0,  139,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  270,    0,    0,    0,    0,    0,  286,
        0,    0,    0,    0,  135,    0,    0,    0,  275,    0,
        0,    0,  211,    0,    0,    0,   76,    0,  271,    0,
        0,    0,    0,  277,  273,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  147,    0,    0,    0,  281,  283,
        0,    0,    0,  153,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  255,    0,    0,    0,   72,
        0,    0,    0,    0,  269,    0,    0,  126,  229,  285,
        0,    0,    0,    0,    0,    0,    0,  339,  339,  339,
      339,  339,  246,  339,  339,  339,  339,  339,  339,  339,
      339,   23,  339,  339,  339,   24,  339,   51,   52,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,   27,  339,  339,  339,  339,  339,   59,   60,  339,
      339,  339,   28,  339,  339,  276,    0,    0,    0,    0,
        0,    0,  137,    0,    0,    0,  272,    0,    0,    0,
        0,  278,  274,    0,  121,    0,    0,    0,    0,    0,

        0,    0,    0,  148,    0,    0,    0,  282,  284,    0,
        0,  154,    0,    0,    0,    0,    0,    0,  139,    0,
        0,    0,    0,   67,    0,    0,  256,    0,    0,    0,
        0,    0,    0,    0,    0,  270,    0,    0,    0,    0,
      286,    0,    0,    0,    0,  135,    0,    0,    0,    0,
        0,    0,  209,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      149,  147,    0,    0,    0,    0,  205,    0,  257,  155,
      153,    0,    0,    0,    0,    0,    0,  291,    0,    0,
        0,    0,  255,    0,    0,  261,    0,    0,    0,    0,

        0,    0,    0,  124,    0,    0,  251,    0,  235,  241,
        0,    0,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   21,  339,   22,  339,  339,  339,  339,
       49,   50,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,   55,   56,   27,  339,  339,  339,  339,   57,
       58,  339,  339,   28,  339,  339,    0,    0,    0,    0,
      212,    0,    0,    0,    0,    0,   77,    0,    0,    0,
        0,    0,    0,  121,    0,    0,    0,    0,    0,    0,
        0,    0,  148,    0,    0,    0,    0,    0,  258,  154,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   67,

        0,  256,    0,    0,  262,    0,    0,   73,    0,    0,
        0,    0,    0,    0,    0,  127,    0,    0,  230,    0,
        0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  253,    0,    0,
       98,    0,    0,    0,  233,    0,    0,    0,  149,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  257,  155,    0,    0,
      259,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      261,    0,    0,    0,    0,    0,    0,    0,  157,    0,
      267,    0,    0,  251,    0,    0,    0,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,   26,   21,   22,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   53,   54,  339,  339,  339,  339,  339,
      339,  339,  339,  339,    0,    0,    0,  212,    0,  210,
        0,    0,    0,   77,    0,    0,    0,    0,  254,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  206,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  258,    0,  260,
        0,    0,    0,    0,    0,  292,    0,    0,    0,    0,
        0,  262,    0,   73,    0,    0,    0,    0,    0,  158,

        0,  268,    0,  127,    0,  125,  230,    0,  252,    0,
        0,  236,    0,  242,    0,    0,    0,  287,    0,    0,
        0,    0,    0,    0,    0,    0,  253,   94,  213,    0,
        0,    0,    0,    0,    0,  140,    0,    0,    0,  169,
        0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  259,    0,    0,    0,  231,    0,
        0,    0,    0,    0,    0,  289,    0,    0,    0,    0,
        0,  159,  157,    0,  267,    0,    0,    0,    0,  297,
      339,  339,  339,  339,  339,  339,  339,  188,  339,  339,

      339,   26,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,   25,  339,  339,  339,
      339,  339,  339,  339,  339,   61,   62,    0,  288,    0,
        0,  210,    0,    0,    0,    0,    0,    0,  254,    0,
        0,    0,   99,    0,    0,    0,    0,    0,  234,    0,
        0,    0,    0,  170,    0,    0,  206,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  260,    0,
        0,    0,    0,  292,    0,    0,    0,    0,    0,    0,

      290,    0,    0,    0,    0,    0,  158,  268,    0,  125,
        0,    0,  236,  242,    0,    0,  287,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  169,    0,    0,  114,    0,    0,    0,
        0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
        0,    0,    0,    0,    0,   96,  289,    0,    0,    0,
        0,    0,  159,    0,    0,    0,    0,    0,  128,  339,
      339,  339,  339,  339,  339,  188,  339,  339,  339,  339,
      339,   31,  339,  339,   29,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  199,  200,  339,  339,  339,   25,  339,  203,  204,
      339,  339,  339,   33,  339,  339,  288,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   95,    0,  214,   99,
        0,    0,    0,    0,  234,    0,    0,    0,  141,  170,
        0,    0,   75,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  232,    0,
        0,    0,    0,    0,  290,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  298,    0,    0,  207,  237,

      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,    0,    0,    0,    0,    0,  239,
        0,    0,    0,  122,    0,    0,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,   31,  339,
       29,  339,  339,  339,  339,  339,  339,  172,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  197,
      198,  339,  339,  339,  201,  202,  339,  339,   33,  339,

      339,    0,    0,    0,    0,    0,    0,    0,    0,   95,
      214,    0,    0,    0,    0,    0,    0,  141,    0,   75,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  107,    0,    0,
        0,    0,  232,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  298,    0,
      129,    0,    0,    0,  130,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  317,    0,    0,    0,  321,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   90,    0,    0,    0,    0,
        0,  265,    0,    0,  339,  339,  339,  339,  339,  339,
      185,  339,  184,  339,  339,  339,  339,  339,  339,   30,
      339,  339,  339,  339,  339,  339,  172,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,   32,  339,    0,    0,  208,
        0,  238,    0,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  111,    0,    0,  322,    0,

        0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
        0,  107,    0,    0,    0,    0,    0,    0,  133,    0,
        0,   97,    0,    0,    0,    0,  240,    0,    0,  266,
        0,  123,    0,    0,  129,    0,    0,    0,    0,    0,
      161,    0,    0,  165,    0,    0,    0,    0,    0,    0,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  319,    0,  321,    0,    0,    0,    0,    0,    0,
      323,    0,    0,  301,    0,    0,    0,    0,  152,    0,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
      265,    0,    0,  339,  339,  339,  339,  339,  185,  184,

      339,  339,  339,  339,  339,   30,  339,  339,  339,  339,
      339,  339,  339,   19,  339,  339,  339,  339,  339,  173,
      339,  339,  339,  339,  339,  339,   38,  339,  339,  339,
      339,  339,   32,  339,    0,  208,  238,  101,    0,    0,
        0,  131,    0,  162,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      318,    0,  320,    0,  322,    0,    0,    0,    0,    0,
      117,    0,  324,    0,    0,  302,    0,    0,    0,    0,
        0,    0,    0,  133,    0,    0,    0,   91,    0,    0,
        0,  240,    0,  266,  123,    0,    0,    0,    0,    0,

      163,  161,    0,  167,  165,    0,    0,    0,    0,    0,
        0,    0,  146,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  319,    0,    0,    0,    0,    0,    0,  323,
        0,  301,    0,    0,    0,  152,    0,    0,    0,    0,
        0,    0,   84,    0,    0,    0,    0,    0,  339,   42,
      339,  339,  339,  176,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,   14,  339,   19,
      339,  339,  339,  339,  339,  173,  339,  339,  339,  339,
      339,   38,  339,  339,  339,  339,  339,  339,    0,    0,
        0,  131,  162,  166,    0,    0,    0,    0,   68,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  318,  320,
        0,    0,    0,    0,    0,    0,  324,    0,  302,    0,
        0,    0,    0,    0,    0,    0,    0,  151,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  163,
        0,  167,    0,    0,    0,    0,   69,    0,    0,  223,
        0,    0,    0,    0,    0,    0,  311,    0,    0,    0,
      325,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  243,    0,
       42,  339,  339,  176,  339,  339,  195,  196,  339,  339,
      339,  339,  339,  339,  339,  339,  175,  339,   14,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,   12,
      339,  186,  339,  187,  339,  339,  339,  339,  339,  339,
      339,  339,    0,    0,    0,    0,    0,    0,   68,    0,
        0,    0,    0,    0,    0,    0,    0,  312,    0,    0,
        0,  326,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,    0,    0,    0,   85,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  225,    0,
        0,  333,   69,    0,    0,    0,    0,    0,  307,    0,
      309,    0,  311,    0,    0,  325,    0,  305,    0,    0,
        0,  303,    0,    0,  104,    0,   78,   80,    0,  227,

        0,    0,    0,    0,    0,  339,  339,  339,  339,  193,
      194,  339,  339,  339,  339,  339,  339,  339,  339,  339,
       40,  175,  339,  174,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   12,  186,  187,  339,  339,  339,  339,
      339,  339,  339,  339,    0,    0,    0,    0,    0,    0,
      334,    0,    0,  224,    0,    0,    0,  308,    0,  310,
        0,  312,    0,    0,  326,    0,    0,    0,    0,    0,
      304,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,    0,    0,    0,  244,    0,  142,    0,  215,    0,
        0,    0,  333,   92,    0,    0,    0,  307,  309,    0,

        0,  108,    0,    0,    0,  303,    0,  331,    0,    0,
        0,    0,    0,   88,    0,  156,    0,  339,  182,  339,
      181,  339,  339,  339,  339,  339,  339,  339,  337,  338,
      339,  191,  192,   40,  174,  339,  339,   13,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  183,  339,
      339,  339,  339,  339,  339,    0,    0,    0,    0,  226,
        0,  334,    0,  224,    0,    0,  308,  310,    0,    0,
        0,    0,    0,  306,    0,    0,  304,    0,  332,    0,
        0,  105,    0,    0,   79,    0,   81,    0,    0,  228,
        0,    0,    0,  244,    0,    0,    0,    0,    0,    0,

      112,    0,  118,    0,  102,    0,    0,  331,    0,    0,
        0,    0,    0,  156,    0,  182,  181,  339,  339,  339,
      339,   39,  339,  339,  335,  336,  189,  190,  339,   13,
      339,   17,  339,   16,  339,  339,   15,  339,  339,  339,
      339,    8,  339,  183,  339,  339,   65,   66,  339,  339,
      339,   34,  339,    0,  143,    0,    0,  216,  226,    0,
        0,   93,    0,    0,    0,    0,    0,  109,    0,  306,
        0,    0,  332,    0,  105,    0,   79,   81,    0,  228,
        0,    0,    0,   89,    0,    0,    0,    0,   82,    0,
      168,    0,  299,    0,    0,  327,    0,  329,    0,    0,

        0,    0,    0,    0,  339,  180,  339,  179,  339,   39,
      339,  339,   43,  339,   17,   16,  339,   15,  339,  339,
       10,  339,    8,  339,  339,   63,   64,  339,  339,   34,
      339,  143,    0,  216,    0,   93,    0,  113,    0,  300,
        0,  119,    0,  109,    0,  103,    0,  328,    0,  330,
        0,    0,    0,    0,    0,   89,    0,    0,    0,    0,
      168,  299,  313,  327,  329,  315,    0,    0,    0,    0,
        0,  180,  179,  339,  339,   41,   43,  339,    9,  339,
       18,  339,   10,  339,  339,  339,   44,  339,  339,  339,
        0,    0,   83,  113,  300,  119,    0,  103,  328,  330,

        0,    0,    0,    0,    0,    0,  221,    0,    0,  247,
      219,    0,   86,  217,  339,   41,    9,   18,  339,  339,
      339,   44,  339,  178,  339,  177,  339,    0,   83,    0,
      314,    0,  316,    0,    0,    0,    0,    0,    0,    0,
       70,  339,   37,  339,  339,  339,   36,  178,  177,  339,
       35,    0,  222,  314,  316,    0,  248,    0,  220,    0,
        0,   87,    0,  218,    0,    0,   37,  339,  339,   11,
       36,   35,  222,  248,  220,    0,   71,   87,  218,    0,
        0,  339,   11,   71,    0,    0,  339,    0,    0,  339,
        0,  160,    0,  164,  339,  160,  164,  339,  339,  245,

      245,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,    6,    6,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2913] =
    {   0,
        0,   64,    0,    0, 4692, 4691, 4688, 4687,    0,    0,
        0,    0, 4678, 4677,   13,   16,    3,    5, 4691, 4698,
      127,    0, 4685,  189, 4682,   18,   38, 4671,   82,  245,
     4698, 4658, 4648, 4698, 4698,    0,    0,    0, 4698, 4698,
     4676, 4698, 4698, 4667,    0,    0,   23,   85, 4666,  210,
       16, 4698, 4653, 4643, 4619,    4, 4627, 4632, 4631, 4624,
        4, 4636,    0,    5,    7, 4622,   61,   69, 4634, 4634,
     4698,   57,  248,  101, 4698,  114, 4662,  282, 4698, 4698,
     4644,   63,   34, 4617,  151,   71,   10, 4626,  216,   40,
      170,  302,  157,  217,   87, 4615,  301,   79, 4628, 4641,

     4635,    0,    0,    0, 4646, 4698, 4616, 4605, 4608,  163,
     4603, 4603, 4602,  313, 4616,  198, 4598, 4605, 4603, 4608,
     4596, 4600, 4602, 4607, 4587, 4608,  167, 4607, 4606, 4593,
     4587, 4591, 4587,  215,  176,  265,  305, 4630,  346, 4612,
      172,   51, 4585,  212,  301,  236, 4594,  324,  191,  265,
      319,  253,  331,  329, 4583,  336,  324, 4596, 4698, 4577,
     4583, 4575, 4578,  346, 4573, 4569, 4589, 4584, 4582, 4571,
     4583, 4573, 4570, 4578,  382,  224, 4577,  213,  389,  253,
     4567, 4567, 4572, 4698, 4564, 4564, 4566, 4555, 4554, 4552,
      340, 4557, 4566, 4569,  270, 4556, 4554, 4546, 4545, 4564,

     4551, 4550, 4561,  297,  192, 4698, 4542, 4555, 4556, 4552,
      365, 4537, 4537, 4546,  401,  405,  411,  317, 4539, 4552,
     4534, 4531, 4545, 4548, 4535, 4545, 4550, 4540, 4553, 4531,
     4527, 4532, 4524, 4521, 4525, 4530, 4520, 4530, 4519, 4532,
     4511,   86, 4698,  413,  416,  420, 4512, 4518, 4510, 4513,
      375, 4508, 4504, 4524,  426, 4518, 4507, 4519, 4509, 4506,
     4514,  430,  379, 4513,  394,  436,  344, 4503, 4503, 4508,
      446, 4500, 4500, 4502, 4491, 4501, 4489, 4487,  391, 4492,
     4501, 4504,  285, 4491, 4489, 4481, 4480, 4499, 4486, 4485,
     4496,  395,  452, 4511, 4490, 4491, 4500, 4476,  419,  454,

     4488, 4481, 4477, 4475,  456,  462, 4467, 4481, 4480, 4470,
      464,  474, 4478, 4462, 4476, 4467, 4474, 4473,  480,  482,
     4459,  484,  486, 4471, 4474,  441, 4472,  458, 4464, 4452,
     4452, 4469, 4464, 4464, 4449, 4462, 4464, 4471, 4454,  493,
     4444, 4460,  454,  503, 4455, 4445, 4437,  481, 4472,  480,
     4445,  509, 4450, 4434, 4438, 4432, 4425,  516, 4482, 4479,
      526,  528, 4434, 4424, 4425,  530, 4431, 4424, 4434,  532,
      534, 4422, 4444, 4435, 4434, 4420, 4436, 4435, 4421, 4430,
     4428, 4412, 4426, 4425, 4417,  536, 4414, 4407, 4421, 4420,
     4399,  538,  551,  553,  555, 4438, 4417, 4418, 4427, 4403,

      557,  559, 4415, 4408, 4404,  561,  563, 4402,  567,  577,
     4394, 4408, 4407, 4397,  579,  583, 4405, 4389, 4403, 4394,
     4401, 4400,  585,  589, 4386,  595,  598, 4398, 4401,  601,
      603,  558, 4399,  617, 4391, 4387, 4378, 4378, 4395, 4390,
     4390, 4375, 4388, 4390, 4397, 4380,  614, 4370, 4386,  458,
      620, 4381, 4371, 4363,  622,  624,  626, 4374,  446, 4371,
     4375, 4365, 4374, 4359, 4357,  640,  633, 4358, 4371, 4390,
     4368,  643,  649,  659,  651, 4698, 4357, 4387, 4352, 4349,
      661, 4344, 4366, 4348,  663, 4351, 4363,  667, 4354,  669,
      675,  679,  681, 4343,  686, 4341, 4351, 4354, 4343, 4352,

     4351, 4350, 4351, 4338, 4347,  688, 4333, 4332, 4328, 4335,
     4329, 4326, 4339, 4340,  690,  692, 4340, 4324, 4336, 4320,
      696,  698,   48, 4320, 4333, 4333, 4331, 4334, 4325, 4332,
     4314,    6,  706,  708, 4325, 4329, 4311, 4346, 4312, 4698,
     4698,  712, 4321, 4310, 4320,  714,  716, 4318, 4304, 4297,
      718,  721,  723,  726, 4311, 4316, 4300, 4311, 4332, 4305,
     4296, 4309, 4307,  733,  735, 4291, 4290, 4308,  738,  740,
     4303, 4289,  750, 4300, 4289,  753,  755,  757, 4295,  561,
     4292, 4296, 4286,  760,  762, 4295, 4280, 4278,  765,  767,
     4279, 4292, 4311,  771, 4289,  773,  776,  778,  781,  783,

     4278, 4308, 4273, 4270,  785, 4265, 4287, 4269,  789, 4272,
     4284,  791, 4275,  794,  796,  799,  801, 4264,  805, 4262,
      807, 4272, 4275, 4264, 4273, 4272,  810,  812, 4271, 4272,
     4259,  815, 4268,  817, 4254, 4253, 4249, 4256, 4250, 4247,
     4260, 4261,  821,  823, 4261, 4245, 4257, 4241,  826,  828,
      521, 4241, 4254,  833,  837, 4254, 4252, 4255,  839, 4249,
     4278, 4252, 4233, 4245, 4236, 4243, 4698,  461,  842, 4239,
     4242, 4231, 4231,  844,  846, 4226, 4225, 4241, 4232, 4235,
     4225,  317,  849, 4258,  852, 4234, 4218,  432,  854,  856,
      859,  861, 4255,  866, 4229, 4219, 4225, 4212, 4212, 4211,

     4222, 4207, 4212, 4207,  868,  871, 4240,  877, 4220, 4698,
     4221, 4216, 4214, 4214,  880, 4213, 4212, 4197, 4698,  884,
     4200,  886, 4208, 4194, 4188, 4205, 4208, 4191, 4188, 4206,
     4191, 4190,  888, 4199, 4189, 4182, 4177, 4186,  890,  893,
     4194,  895, 4209, 4188, 4207,  897,  905, 4227, 4224, 4171,
     4191, 4198, 4185, 4174, 4173, 4196, 4204, 4179,  899,  911,
      917,  902, 4180, 4165, 4191, 4161,  919, 4212, 4209, 4189,
     4168,  925,  927, 4171, 4170,  929, 4168, 4193, 4163,  932,
     4127, 4117,  934, 4124,  936,  555,  940, 4120, 4123, 4112,
     4112,  942,  944,  948,  952, 4098, 4094, 4109,    8,  233,

      242,  574,  954,  956,  272,  354,  484,  958,  960,  964,
      966,  970,  369,  391,  418,  414,  423,  425,  972,  479,
      469,  496,  974,  976,  494,  982,  984,  530,  987,  527,
      990,  533,  531,  540,  553,  992,  566,  572,  994,  998,
     1000,  586, 1003,  597,  588, 1006,  586,  606,  619,  624,
      653,  618, 4698,  623,  643,  645,  651,  666,  653, 1010,
      661,  670,  676,  702,  697,  691,  694,  731,  747,  767,
     1014, 1016,  810,  791,  814,  811, 1030, 1019, 1021, 1023,
     1026,  854, 1030,  833,  839,  838,  859, 4698,  875,  877,
      900,  889, 1032,  896, 1037, 1035,  895,  907,  929,  924,

      939, 1066, 1042, 4698,  948, 1068, 1040,  958, 4698, 4698,
      972,  981, 1004,  993,  998, 1006, 1002, 1017, 1016, 1028,
     1030, 1076, 1078, 1084, 1086, 1088, 1060, 1043, 1032, 1054,
     4698, 4698, 1054, 1048, 1055, 1044, 1049, 1046, 1045, 1043,
     1059, 1104, 1103, 1103, 1110, 1053, 1053, 1078, 1075, 4698,
     4698, 1077, 1058, 1118, 1067, 1121, 1082, 1106, 1070, 1126,
     1128, 1130, 1078, 1093, 1094, 1136, 1138, 1091, 1106, 1092,
     1146, 1095, 1093, 1149, 1098, 1113, 1107, 1100, 1102, 1119,
     1118, 1123, 1162, 1120, 1143, 1125, 1166, 1168, 1170, 1172,
     1174, 1136, 1141, 1134, 1129, 1202, 1140, 1138, 1161, 1204,

     1139, 1206, 1143, 1208, 1210, 1141, 1212, 1214, 1161, 1179,
     1165, 1179, 1221, 1224, 1228, 1230, 1232, 1234, 1237, 1178,
     1241, 1244, 1190, 1250, 1252, 1206, 1201, 1257, 1210, 1206,
     1220, 1212, 1209, 1208, 1220, 1211, 1268, 1270, 1233, 1220,
     4698, 1239, 1256, 1216, 4698, 1238, 1241, 1233, 1281, 1241,
     1286, 1241, 1235, 1240, 1252, 1232, 1244, 1244, 1259, 1260,
     1251, 1260, 1267, 1266, 1256, 1272, 1311, 1313, 1260, 1317,
     1320, 1279, 1267, 1269, 1271, 1273, 1270, 1288, 1308, 1281,
     1333, 1335, 1287, 1307, 1298, 1295, 1340, 1327, 1343, 1345,
     1347, 1301, 1316, 1357, 1300, 1306, 1321, 1324, 1319, 1310,

     1341, 1342, 1327, 1368, 1320, 1317, 1372, 1374, 1376, 1378,
     1336, 1322, 1359, 1325, 1356, 1347, 1377, 1348, 1349, 1392,
     1343, 1347, 1348, 4698, 4698, 1399, 1401, 1355, 1385, 1355,
     1392, 1377, 1418, 1420, 1426, 1378, 1371, 1428, 1430, 1433,
     1395, 1387, 1384, 1438, 1385, 1398, 1388, 1446, 1448, 1404,
     1396, 1451, 1417, 1434, 1394, 1456, 1418, 1421, 1413, 1463,
     1418, 1413, 1468, 1472, 1420, 1435, 1415, 1427, 1427, 1440,
     1444, 1435, 1446, 1449, 1449, 1439, 1455, 1494, 1496, 1500,
     1456, 1443, 1448, 1450, 1506, 1508, 1457, 1455, 1473, 1493,
     1466, 1516, 1518, 1522, 1476, 1494, 1485, 1482, 1527, 1529,

     1531, 1534, 1486, 1538, 1540, 1543, 1547, 1509, 1549, 1498,
     1552, 1556, 1558, 1560, 1501, 1522, 1563, 1565, 1519, 1525,
     1515, 1516, 1532, 1553, 1526, 1532, 1579, 4698, 4698, 1522,
     1534, 1529, 1557, 1564, 1530, 4698, 1531, 1587, 1574, 1590,
     1552, 4698, 1544, 1539, 1559, 1542, 1547, 1542, 1542, 1548,
     1555, 1560, 1550, 1557, 1567, 1573, 1573, 1558, 1564, 1581,
     1578, 1564, 1563, 1581, 1618, 1567, 1577, 1578, 4698, 1583,
     1584, 1589, 1579, 1587, 1628, 1630, 1582, 1595, 1578, 1580,
     1587, 1637, 1639, 1632, 1644, 1592, 1602, 1599, 1608, 1595,
     1595, 1592, 1602, 1615, 1616, 1607, 1657, 1659, 1625, 1613,

     1643, 1664, 1630, 1667, 1630, 1672, 1634, 1652, 1628, 1626,
     1630, 1642, 1629, 1643, 1626, 1633, 1629, 1649, 1638, 1664,
     1690, 1692, 1639, 1642, 1654, 1699, 1701, 1705, 1707, 1650,
     1673, 1714, 1672, 1667, 1717, 4698, 4698, 1723, 1725, 1672,
     1683, 1729, 1676, 1677, 1693, 1713, 1686, 1692, 1739, 1741,
     1743, 1745, 1747, 1682, 1702, 1697, 1725, 1752, 1754, 1737,
     1704, 1761, 1763, 1765, 1728, 1769, 1771, 1724, 1719, 1739,
     1722, 1728, 1723, 1723, 1729, 1734, 1740, 1730, 1737, 1747,
     1753, 1753, 1738, 1744, 1761, 1758, 1744, 1743, 1797, 1746,
     1756, 1757, 1802, 1804, 1766, 1767, 1772, 1762, 1770, 1811,

     1813, 1765, 1778, 1762, 1764, 1771, 1821, 1823, 1775, 1827,
     1785, 1782, 1831, 1833, 1795, 1836, 1838, 1804, 1782, 1788,
     1789, 1795, 1798, 1791, 1797, 1798, 1809, 1795, 1816, 1817,
     1810, 1815, 1856, 1858, 1851, 1813, 1808, 1823, 1822, 1832,
     1813, 1827, 1828, 1827, 1814, 1832, 1819, 1835, 1835, 1829,
     1852, 1831, 1840, 1843, 1844, 1843, 1840, 1837, 1865, 1830,
     1831, 1840, 1837, 1853, 1854, 4698, 1895, 1848, 1879, 1863,
     1846, 1857, 1902, 1850, 1850, 1857, 1871, 1859, 4698, 1865,
     1889, 1861, 1853, 1855, 1877, 1916, 1863, 1893, 1876, 1880,
     1923, 1925, 1868, 1928, 1930, 1877, 1897, 1884, 1889, 1939,

     1884, 1886, 1894, 1899, 1909, 1888, 1911, 1901, 1911, 1911,
     1955, 1948, 1947, 1913, 1939, 1906, 1962, 1964, 1963, 1963,
     1926, 1916, 1972, 1974, 1917, 1939, 1978, 1944, 1922, 1928,
     1929, 1935, 1938, 1932, 1938, 1989, 1991, 1993, 1995, 1997,
     1949, 1960, 1946, 1966, 2005, 1967, 1963, 2009, 2011, 2013,
     1967, 2016, 2018, 2020, 1982, 1981, 1992, 1973, 1987, 1988,
     1987, 1974, 2032, 1980, 1997, 1997, 1991, 2014, 1993, 2002,
     2005, 2006, 2005, 2048, 2025, 1993, 1994, 2052, 2056, 2005,
     2004, 2020, 2020, 2061, 2064, 2017, 2049, 2033, 2016, 2027,
     2018, 2026, 2041, 2029, 2079, 2081, 2083, 2032, 4698, 4698,

     4698, 2048, 2047, 2034, 2040, 2037, 2043, 2050, 2040, 2041,
     2047, 2051, 2100, 2055, 2063, 2049, 2052, 2056, 2063, 2068,
     2056, 2057, 2071, 2058, 2075, 2114, 2060, 2064, 2065, 2083,
     2084, 4698, 2067, 2086, 2083, 2070, 2072, 2090, 2087, 2069,
     2090, 2091, 2094, 4698, 2093, 2086, 2095, 2086, 2098, 4698,
     2083, 2089, 2140, 4698, 2087, 2105, 2094, 2096, 2107, 2092,
     2094, 2149, 2151, 2113, 2101, 2120, 2104, 2108, 2159, 2161,
     2166, 2109, 2130, 2131, 2114, 2131, 2172, 2176, 2121, 2125,
     2132, 2140, 2142, 2128, 2141, 2128, 2163, 2148, 2130, 4698,
     4698, 2139, 2147, 2152, 4698, 4698, 2134, 2141, 2195, 2197,

     2159, 2147, 2201, 2203, 2205, 2170, 2169, 2156, 2163, 2213,
     2221, 2162, 2169, 2176, 2168, 2169, 2175, 2226, 2188, 2229,
     2231, 2233, 2180, 2183, 2187, 2194, 2199, 2187, 2188, 2202,
     2189, 2244, 2247, 2211, 2250, 2196, 2200, 2201, 2219, 2220,
     2257, 2206, 2225, 2222, 2209, 2211, 2266, 2268, 2234, 2212,
     2233, 2234, 2275, 2239, 2278, 2240, 2234, 2283, 2285, 2247,
     2238, 2250, 2290, 2237, 2294, 2296, 2244, 2262, 2301, 2303,
     2306, 2248, 2270, 2264, 4698, 2313, 2315, 2277, 2283, 2267,
     2285, 2274, 2325, 2283, 2280, 2278, 2284, 2284, 2286, 2281,
     2282, 2304, 4698, 2338, 2286, 2342, 2344, 2308, 2311, 2308,

     2296, 2295, 2351, 2307, 2355, 2307, 2326, 2323, 2361, 2312,
     2345, 2346, 2327, 2315, 2329, 4698, 2331, 2319, 2333, 2318,
     2377, 2381, 2331, 2339, 2334, 2345, 2326, 2350, 2347, 2388,
     2390, 2393, 2395, 2371, 2354, 2344, 2360, 2352, 2403, 2405,
     2368, 2354, 2364, 2363, 2358, 2358, 2414, 2418, 2372, 2376,
     2383, 2369, 2423, 2385, 2386, 2388, 2392, 2403, 2430, 2386,
     2381, 2386, 2414, 2394, 2439, 2441, 2417, 2385, 2446, 2448,
     2450, 2454, 2456, 2458, 2412, 2412, 2462, 2466, 2468, 2424,
     2434, 2419, 2437, 2425, 2426, 2478, 2423, 2432, 2433, 2436,
     2431, 2432, 2454, 2488, 2490, 2492, 2439, 2495, 2497, 2461,

     2464, 2461, 2449, 2449, 2506, 2508, 2511, 2466, 2514, 2465,
     2484, 2518, 2483, 2471, 2504, 2505, 2485, 2527, 2530, 2479,
     2493, 2534, 2536, 2498, 2486, 2540, 2543, 2505, 2548, 2552,
     2556, 2558, 2502, 2510, 2560, 2534, 2541, 2524, 2565, 2552,
     2568, 2575, 2555, 2572, 2528, 2529, 2535, 2582, 2567, 2587,
     2592, 2551, 2539, 2559, 2552, 2561, 2558, 2545, 2560, 2548,
     2603, 2605, 2563, 2608, 2555, 2563, 2563, 2580, 2561, 2615,
     2619, 2581, 2621, 2623, 2575, 2573, 2580, 2628, 2631, 2580,
     2584, 2585, 2616, 4698, 2589, 2598, 2600, 2605, 2623, 2591,
     2645, 2597, 2627, 2649, 2633, 2653, 2598, 2655, 2657, 2659,

     2625, 2603, 2612, 2628, 2632, 2670, 2619, 2623, 2620, 2626,
     2676, 2625, 2679, 2681, 2645, 2635, 2630, 2650, 2687, 2691,
     2635, 2640, 2636, 2659, 2661, 2698, 2702, 2656, 2665, 2666,
     2663, 2649, 2709, 2675, 2693, 2714, 2716, 2718, 2699, 2681,
     2722, 2724, 2726, 2728, 2730, 2732, 2685, 2686, 2692, 2738,
     2721, 2687, 2707, 2700, 2710, 2707, 2694, 2709, 2697, 2751,
     2754, 2756, 2758, 2716, 2761, 2708, 2716, 2716, 2734, 2715,
     2769, 2772, 2774, 2740, 2777, 2779, 2731, 2729, 2736, 2731,
     2735, 2736, 2767, 2789, 2793, 2742, 2795, 2797, 2758, 2760,
     2765, 2802, 2785, 2805, 2811, 2757, 2788, 2777, 2767, 2766,

     2816, 2818, 2811, 2821, 2823, 2816, 2771, 2772, 2769, 2829,
     2817, 2783, 2834, 2797, 2785, 2796, 2792, 2795, 2789, 2800,
     2845, 2803, 2848, 2793, 2851, 2805, 2816, 2811, 2812, 2857,
     2806, 2861, 2809, 2820, 2825, 2867, 2829, 2821, 2822, 2825,
     2818, 2833, 4698, 2820, 2826, 2839, 2829, 2832, 2880, 2882,
     2834, 2835, 2886, 2888, 2835, 2891, 2896, 2838, 2871, 2854,
     2847, 2856, 2855, 2853, 2907, 2855, 2910, 2912, 2878, 2915,
     2877, 2899, 2879, 2876, 2867, 2925, 2928, 2930, 2935, 2876,
     2878, 2937, 2899, 2902, 2887, 2890, 2921, 2891, 2911, 2901,
     2901, 2951, 2953, 2955, 2902, 2903, 2900, 2960, 2962, 2914,

     2911, 2922, 2918, 2921, 2915, 2926, 2971, 2929, 2976, 2978,
     2917, 2980, 2934, 2945, 2940, 2941, 2987, 2936, 2990, 2938,
     2949, 2954, 2956, 2948, 2949, 2952, 3000, 3002, 2949, 3005,
     2966, 3008, 2955, 2961, 2963, 2966, 2959, 2976, 2962, 3018,
     2981, 3021, 2983, 2971, 3007, 3027, 3029, 2982, 2983, 4698,
     2984, 2998, 3035, 3037, 2989, 3040, 3043, 3009, 3006, 3047,
     3053, 3005, 3011, 3008, 2998, 3058, 3020, 3025, 3009, 3010,
     3025, 3026, 3027, 3014, 3025, 3026, 3022, 3032, 4698, 3034,
     3075, 3030, 3020, 3079, 3062, 3082, 3081, 3081, 3035, 3050,
     3031, 3047, 3094, 3096, 3098, 3100, 3102, 3104, 3106, 3048,

     3055, 3061, 3076, 3075, 3080, 3081, 3062, 3076, 3121, 3123,
     3125, 3127, 3129, 3131, 3093, 3081, 3083, 3082, 3084, 3086,
     3102, 3089, 3089, 3105, 3091, 3093, 3129, 3149, 3151, 3104,
     3154, 3107, 3121, 3158, 3160, 3112, 3165, 3167, 3127, 3130,
     3171, 3176, 3130, 3138, 3131, 3122, 3182, 3144, 3149, 3133,
     3134, 3149, 3150, 3151, 3192, 3140, 3151, 3198, 3200, 3152,
     3153, 3203, 3165, 3170, 3159, 3154, 3169, 3166, 4698, 3161,
     3214, 3216, 3219, 3172, 3183, 3167, 3174, 3224, 3226, 3230,
     3232, 3179, 3234, 3187, 3183, 3240, 3189, 4698, 3202, 3226,
     3246, 3248, 3250, 3195, 4698, 3198, 4698, 4698, 3205, 4698,

     3216, 3217, 3216, 3257, 3211, 3262, 3266, 3210, 3214, 4698,
     4698, 3224, 3210, 3246, 3221, 3273, 3278, 3284, 3288, 3294,
     3296, 3299, 3301, 3303, 3226, 3305, 3228, 3237, 3233, 3237,
     3239, 3267, 3271, 3310, 3312, 3316, 3260, 3274, 3320, 3278,
     3323, 3270, 3267, 3283, 3292, 3281, 3276, 3331, 3283, 3335,
     3338, 3300, 3341, 3343, 3290, 3298, 3348, 3351, 3353, 3357,
     3306, 3359, 3312, 3308, 3364, 3317, 3369, 3327, 3354, 3372,
     3374, 3376, 3329, 3379, 3327, 3382, 3385, 3340, 3389, 3354,
     3395, 3355, 3358, 3401, 3405, 3351, 4698, 3363, 4698, 3353,
     3361, 3360, 3410, 4698, 3372, 3359, 3359, 3417, 3419, 3361,

     3379, 4698, 3380, 3369, 3369, 3425, 3427, 3429, 3389, 3388,
     3393, 3390, 3416, 4698, 3436, 3438, 3400, 3443, 3445, 3447,
     3449, 3394, 3394, 3394, 3454, 3417, 3409, 3459, 3460, 3460,
     3466, 3467, 3467, 3473, 3475, 3422, 3478, 3480, 3482, 3484,
     3438, 3487, 3468, 3436, 3458, 3493, 3436, 3499, 3502, 3447,
     3504, 3509, 3489, 3515, 3447, 3521, 3471, 3523, 3525, 3527,
     3468, 3530, 3532, 3534, 3465, 3482, 3541, 3543, 3485, 3503,
     3548, 3504, 3550, 3552, 3500, 3500, 3556, 3558, 3560, 3520,
     3566, 3568, 3520, 3570, 3574, 3576, 3578, 3532, 3582, 3586,
     3536, 3565, 3588, 3592, 3550, 3545, 3557, 3556, 3558, 3599,

     4698, 3601, 4698, 3557, 4698, 3605, 3607, 3609, 3564, 3562,
     3564, 3575, 3567, 3618, 3572, 3623, 3625, 3627, 3629, 3607,
     3632, 3634, 3577, 3637, 4698, 4698, 4698, 4698, 3585, 3644,
     3647, 3649, 3652, 3654, 3586, 3656, 3658, 3583, 3662, 3620,
     3664, 3667, 3645, 3671, 3624, 3674, 3677, 3676, 3632, 3633,
     3684, 3686, 3664, 3689, 3691, 3644, 3694, 3696, 3699, 3661,
     3702, 3705, 3707, 3710, 3712, 3667, 3715, 3718, 3720, 3723,
     3728, 3731, 3733, 3679, 3736, 3688, 3739, 3741, 3695, 3747,
     3705, 3699, 3750, 3752, 3705, 3700, 3703, 3738, 4698, 3758,
     3760, 3762, 3766, 3724, 3768, 3770, 3774, 3778, 3732, 3727,

     3725, 3732, 3733, 3729, 3785, 3787, 3790, 3792, 3755, 3795,
     3797, 3800, 3802, 3805, 3807, 3809, 3812, 3815, 3766, 3820,
     3822, 3765, 3824, 3788, 3828, 4698, 4698, 3783, 3773, 3832,
     3796, 3836, 3783, 3839, 3843, 3845, 3847, 3849, 3851, 3853,
     3855, 3859, 3801, 3863, 3867, 3871, 3873, 3875, 3877, 3879,
     3817, 3812, 3810, 3820, 3832, 3883, 3830, 3832, 3843, 3836,
     3890, 3893, 4698, 3895, 3897, 4698, 3845, 3846, 3846, 3862,
     3849, 3904, 3906, 3849, 3909, 3911, 3913, 3915, 3917, 3919,
     3921, 3871, 3925, 3879, 3869, 3930, 3934, 3936, 3938, 3873,
     3886, 3941, 3945, 3947, 3953, 3957, 3959, 3961, 3963, 3965,

     3967, 3889, 3895, 3896, 3915, 3915, 4698, 3919, 3931, 4698,
     4698, 3918, 4698, 4698, 3975, 3977, 3979, 3983, 3933, 3927,
     3985, 3987, 3990, 3992, 3994, 3996, 4000, 4002, 4005, 4009,
     4011, 4015, 4018, 4020, 4022, 3944, 4025, 4027, 3952, 3977,
     4698, 4031, 4033, 3975, 4038, 4043, 4046, 4048, 4050, 4053,
     4055, 4058, 4060, 4062, 4064, 4068, 4070, 4074, 4076, 4078,
     4080, 4084, 4086, 4090, 3992, 3986, 4096, 4012, 4098, 4102,
     4104, 4106, 4108, 4110, 4113, 4115, 4117, 4119, 4121, 4022,
     4032, 4044, 4123, 4125, 4043, 4041, 4050, 4127, 4131, 4080,
     4133, 4135, 4137, 4139, 4087, 4143, 4149, 4153, 4155, 4157,

     4159, 4698, 4171, 4175, 4179, 4183, 4187, 4191, 4195, 4199,
     4203, 4207
    } ;

static yyconst flex_int16_t yy_def[2913] =
    {   0,
     2903, 2903, 2904, 2904, 2905, 2905, 2906, 2906, 2904, 2904,
     2904, 2904, 2907, 2907, 2908, 2908, 2909, 2909, 2902, 2902,
     2902,   21, 2902,   21, 2902,   24,   24,   24,   24, 2902,
     2902,   24,   24, 2902, 2902, 2910, 2911, 2912, 2902, 2902,
     2902, 2902, 2902, 2902,   21,   24,   24,   24,   24,   24,
       30, 2902,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2902,   24,   24,   24, 2902,   24, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,

       24, 2910, 2911, 2912, 2902, 2902,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902,   24, 2902,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2902, 2902,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2902,
     2902,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2902, 2902,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2902, 2902,   24,
       24,   24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2902, 2902,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2902, 2902,   24,   24,   24,   24,   24, 2902,
     2902,   24,   24,   24,   24,   24, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2902, 2902,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2902, 2902,   24,   24,   24,   24,   24, 2902, 2902,
       24,   24,   24,   24,   24,   24, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2902,
     2902,   24,   24,   24, 2902, 2902,   24,   24,   24,   24,

       24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
       24,   24,   24,   24,   24,   24, 2902, 2902,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902,   24,   24,   24,   24, 2902,
     2902,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2902, 2902,
       24, 2902, 2902,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2902, 2902, 2902, 2902,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2902, 2902,   24,   24,
       24,   24,   24, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2902, 2902,   24,   24,   24,
       24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902,   24,   24,   24,   24,
       24,   24, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902,   24,   24, 2902, 2902, 2902,   24, 2902, 2902,   24,
     2902, 2902, 2902, 2902,   24, 2902, 2902,   24,   24,   24,

       24,    0, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902
    } ;

static yyconst flex_int16_t yy_nxt[4763] =
    {   0,
       20,   21,   22,   20,   23,   43,   25,   43,   26,   27,
       28,   29,   29,   29,   30,   40,   31,   20,   40, 2902,
       44,   41,   44, 2902,   41,   32,  731,   48,   33,   50,
       50,   50,   48, 2902,   50,   50,   50,  117,  732,   72,
       72,  108,  119,   53,  114,  123,  120,  171,   53,   73,
       73,   73,  109,  978,  115,  172,  121,  118,   72,   72,
       74,  124,  122,   34,   20,   21,   22,   20,   23,  721,
       25,  162,   26,   27,   28,   29,   29,   29,   30,   74,
       31,   20,  163,   76,   76,  178,   72,   72,  249,   32,
      179,   48,   33,   50,   50,   50,   73,   73,   73,  250,

      126,  160,  127,  722,   74,  128,  131,   74,  136,  136,
      132,  161,  137,  137,  137,   76,   76,  129,  390,  168,
      391,  193,  130,   74,  202,  169,   74,   34,   45,   45,
      133,  170,   46,  203,   46,   47,   48,   49,   50,   50,
       50,   51,   46,   52,  194,   46,   46,   46,   46,   46,
       46,   46,   53,   46,   46,   54,   46,   46,   46,   46,
       46,   46,   46,   46,   55,   56,   57,   58,   46,   59,
       46,   60,   61,   46,   46,   62,   63,   64,   65,   46,
       46,   66,   67,   68,   69,   70,   46,   46,   46,   46,
       46,   46,  165,   72,   72,  187,  166,   46,   46,   46,

       46,   46,   46, 2902,  210, 2902,  231,  180,  167,  188,
      247,   76,   76,  211,   46,  181,  232,   46,  219,   48,
      248,   50,   50,   50,  241,  220,   46,   46,   46,   46,
      242,   46,   74,   46,   46,  239,  265,   46,   46,   46,
       46,  266,  240,   46,   46,   46,   46,   46,   77,   72,
       72,   74,  317,  252,  189,   78,  174,  253,  175,   73,
       73,   73,   79,  318,  313,  190,  176,   80,  191,  254,
       74,  192,  177,  258,  979,   81,  137,  137,  137,  314,
      315,  259,   82,   83,   84,   85,   86,   87,   88,   74,
       89,  274,  980,   90,   91,   92,   93,   94,   95,   96,

       97,   98,  267,   99,  139,  275,   72,   72,  276,  321,
      268,  984,  140,  322,  215,  215,  137,  137,  137,  141,
      142,  143,  144,  145,  146,  147,  337,  148,  216,  338,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  182,
      158,  444,  196,  183,  445,  347,  197,  244,  244,  255,
      184,  348,  198,  185,  199,  256,  269,  200,  201,  186,
      270,  257,  245,  281,  261,  365,  262,  271,  277,  290,
      272,  366,  869,  217,  263,  870,  273,  284,  291,  278,
      264,  285,  279,  311,  311,  280,  282,  286,  332,  287,
      319,  319,  288,  289,  297,  298,  299,  353,  312,  333,

      425,  300,  215,  215,  426,  320,  358,  358,  985,  359,
      991,  360,  361,  361,  244,  244,  216,  392,  392,  417,
      354,  393,  393,  399,  400,  401,  362,  406,  406,  245,
      402,  415,  415,  421,  418,  419,  394,  423,  423,  439,
      363,  992,  407,  454,  422,  364,  416,  430,  430,  455,
      440,  463,  424,  456,  456,  466,  466,  472,  472,  661,
      464,  993,  431,  474,  474,  311,  311,  408,  457,  994,
      467,  876,  473,  662,  465,  481,  481,  995,  475,  996,
      312,  319,  319,  488,  488,  490,  490,  492,  492,  497,
      502,  498,  877,  499,  515,  515,  320,  519,  857,  503,

      491,  647,  493,  500,  521,  521,  526,  530,  520,  516,
      533,  533,  648,  527,  531,  858,  476,  358,  358,  522,
      359,  997,  360,  986,  534,  998,  528,  361,  361,  542,
      542,  546,  546,  551,  551,  553,  553,  569,  569,  392,
      392,  362,  842,  494,  987,  547,  999,  552, 1001,  554,
     1003,  570,  393,  393,  576,  576,  577,  577,  584,  584,
      589,  589,  406,  406,  594,  594, 1006,  394,  596,  596,
     1009,  578, 1010,  585,  778,  590,  843,  407,  598,  598,
      415,  415, 1011,  597,  605,  605,  423,  423,  779,  586,
      612,  612,  968,  599, 1012,  416,  614,  614,  587,  616,

      616,  424,  430,  430,  621,  621,  622, 1013,  623,  969,
      624,  615,  588, 1014,  617,  643,  643,  431,  627,  627,
      625,  649,  649,  654,  654,  456,  456,  659,  659,  981,
      644,  600,  982,  628,  669,  669,  650, 1020,  655, 1023,
      457,  466,  466, 1024,  472,  472, 1025,  656, 1026,  629,
      674,  674,  675,  675,  657,  618,  467, 1027,  630,  473,
      474,  474,  481,  481,  683,  683, 1028,  658,  488,  488,
      490,  490, 1029,  684, 1030,  475,  689,  689, 1031,  685,
      492,  492,  690,  690, 1032,  491, 1033,  692,  692,  705,
      705,  515,  515,  715,  715,  493,  693,  521,  521,  720,

      720, 1034,  694, 1035,  706, 1036,  516,  533,  533,  733,
      733, 1039,  522,  542,  542,  546,  546,  742,  742,  551,
      551,  534,  746,  746,  553,  553, 1040,  747,  747,  547,
      748, 1041,  749,  552,  759,  759,  761,  761,  554,  569,
      569,  767,  767, 1042,  768, 1043,  769, 1044,  760, 1045,
      762,  772,  772,  570,  576,  576,  577,  577,  776,  776,
      763,  584,  584,  783,  783,  773,  589,  589,  787,  787,
     1046,  578,  594,  594,  596,  596,  585,  792,  792,  598,
      598,  590,  793,  793,  794,  794,  605,  605, 1047,  597,
      803,  803,  612,  612,  599,  614,  614,  808,  808,  795,

      616,  616,  809,  809, 1048,  804,  811,  811,  621,  621,
      615,  627,  627,  819,  819,  617,  823,  823,  826,  826,
     1050,  812,  643,  643,  836,  836,  628,  649,  649,  841,
      841,  824, 1051,  827,  654,  654, 1052,  644,  846,  846,
      659,  659,  650,  669,  669,  674,  674,  675,  675,  655,
      683,  683, 1053,  872,  872,  689,  689,  690,  690,  684,
      878,  878,  692,  692, 1069,  685,  873,  881,  881,  705,
      705,  693,  893,  893, 1072,  879, 1073,  694,  895,  895,
      882,  715,  715, 1074,  706,  720,  720,  906,  906,  733,
      733,  923,  923,  896,  925,  925,  742,  742,  746,  746,

      759,  759,  907,  945,  945,  924,  747,  747,  926,  748,
     1075,  749,  942,  942,  760,  943, 1076,  944,  761,  761,
      767,  767, 1077,  768, 1078,  769,  772,  772,  954,  954,
      776,  776,  762,  960,  960,  783,  783,  966,  966, 1079,
      773,  787,  787,  792,  792,  793,  793, 1080,  961,  794,
      794, 1082,  967,  974,  974,  803,  803,  983,  983,  808,
      808,  809,  809, 1083,  795,  988,  988,  811,  811, 1084,
      804,  990,  990,  819,  819,  823,  823, 1000, 1000, 1085,
      989, 1086,  812,  826,  826, 1002, 1002,  962, 1004, 1004,
      824, 1007, 1007,  836,  836, 1015, 1015, 1093,  827, 1018,

     1018,  841,  841, 1005, 1021, 1021, 1008,  846,  846, 1095,
     1016, 1037, 1037, 1096, 1019, 1049, 1049,  872,  872, 1022,
      878,  878, 1067, 1067, 1068, 1068, 1038,  881,  881, 1097,
      873, 1070, 1070,  893,  893,  879, 1081, 1081,  895,  895,
      882, 1094, 1094, 1090, 1090, 1098, 1071, 1099, 1100, 1017,
     1054, 1055, 1056,  896, 1101, 1057, 1058, 1059, 1091, 1060,
     1061, 1102, 1062, 1063, 1064, 1065, 1066, 1087, 1087,  906,
      906, 1103, 1104, 1105, 1092, 1106, 1088, 1107, 1107,  923,
      923, 1111, 1089, 1112,  907, 1109, 1109,  925,  925, 1110,
     1110, 1108, 1113,  924, 1114, 1115, 1116, 1117, 1118, 1119,

     1120,  926, 1121, 1122, 1123,  942,  942, 1124,  943, 1125,
      944,  945,  945, 1126, 1127, 1128, 1129, 1130, 1131,  954,
      954, 1132, 1133, 1133, 1135, 1136, 1137,  960,  960, 1138,
     1138, 1139, 1139, 1141, 1142, 1143, 1134,  966,  966, 1144,
     1144, 1145,  961, 1146, 1147, 1150, 1140, 1148, 1148, 1151,
      974,  974,  967, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1149,  983,  983, 1161, 1162, 1163, 1163,  988,
      988, 1178, 1178,  990,  990, 1179, 1179, 1181, 1182, 1183,
     1184, 1187, 1164, 1188,  989, 1189, 1165, 1166, 1167, 1190,
     1180, 1168, 1169, 1170, 1191, 1171, 1172, 1193, 1173, 1174,

     1175, 1176, 1177, 1185, 1185, 1000, 1000, 1002, 1002, 1004,
     1004, 1192, 1192, 1007, 1007, 1194, 1194, 1195, 1186, 1196,
     1197, 1198, 1199, 1199, 1005, 1201, 1201, 1208, 1008, 1015,
     1015, 1204, 1204, 1205, 1205, 1018, 1018, 1200, 1207, 1207,
     1202, 1210, 1021, 1021, 1016, 1209, 1209, 1215, 1206, 1216,
     1019, 1211, 1211, 1213, 1213, 1219, 1203, 1022, 1217, 1217,
     1220, 1221, 1222, 1223, 1224, 1225, 1212, 1226, 1214, 1037,
     1037, 1227, 1227, 1218, 1228, 1229, 1230, 1233, 1231, 1234,
     1235, 1236, 1049, 1049, 1038, 1232, 1237, 1238, 1238, 1241,
     1242, 1243, 1247, 1244, 1248, 1249, 1239, 1245, 1252, 1253,

     1250, 1255, 1240, 1246, 1251, 1254, 1256, 1258, 1262, 1263,
     1264, 1259, 1067, 1067, 1068, 1068, 1266, 1260, 1070, 1070,
     1261, 1265, 1265, 1267, 1257, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1278, 1071, 1081, 1081, 1275, 1275, 1279, 1280,
     1281, 1087, 1087, 1282, 1283, 1283, 1090, 1090, 1285, 1285,
     1088, 1276, 1286, 1287, 1288, 1277, 1089, 1284, 1094, 1094,
     1289, 1091, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1297, 1300, 1301, 1107, 1107, 1302, 1302, 1109, 1109, 1110,
     1110, 1303, 1304, 1298, 1305, 1306, 1307, 1108, 1308, 1319,
     1320, 1323, 1324, 1321, 1321, 1299, 1309, 1310, 1325, 1311,

     1326, 1326, 1328, 1328, 1312, 1313, 1314, 1322, 1315, 1316,
     1317, 1330, 1331, 1318, 1327, 1332, 1329, 1333, 1334, 1133,
     1133, 1335, 1335, 1340, 1336, 1341, 1337, 1338, 1338, 1138,
     1138, 1139, 1139, 1134, 1342, 1342, 1343, 1344, 1345, 1144,
     1144, 1346, 1339, 1347, 1348, 1350, 1140, 1148, 1148, 1349,
     1349, 1351, 1352, 1352, 1354, 1357, 1355, 1358, 1358, 1360,
     1361, 1362, 1149, 1356, 1363, 1363, 1365, 1353, 1366, 1163,
     1163, 1368, 1359, 1367, 1367, 1372, 1369, 1373, 1374, 1364,
     1370, 1375, 1377, 1378, 1164, 1376, 1371, 1380, 1381, 1379,
     1383, 1387, 1388, 1390, 1384, 1178, 1178, 1179, 1179, 1391,

     1385, 1389, 1389, 1386, 1392, 1393, 1382, 1185, 1185, 1394,
     1394, 1395, 1180, 1396, 1397, 1398, 1399, 1192, 1192, 1400,
     1400, 1403, 1186, 1194, 1194, 1404, 1405, 1406, 1199, 1199,
     1407, 1407, 1201, 1201, 1401, 1408, 1408, 1409, 1402, 1204,
     1204, 1205, 1205, 1200, 1410, 1410, 1411, 1202, 1207, 1207,
     1209, 1209, 1412, 1211, 1211, 1415, 1206, 1413, 1413, 1213,
     1213, 1414, 1414, 1416, 1217, 1217, 1417, 1417, 1212, 1418,
     1419, 1420, 1421, 1422, 1214, 1423, 1424, 1425, 1426, 1218,
     1227, 1227, 1427, 1428, 1429, 1430, 1431, 1432, 1238, 1238,
     1433, 1434, 1434, 1436, 1437, 1438, 1439, 1239, 1440, 1441,

     1442, 1443, 1444, 1240, 1435, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1265,
     1265, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1275,
     1275, 1467, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473,
     1283, 1283, 1474, 1475, 1276, 1285, 1285, 1476, 1477, 1478,
     1479, 1480, 1481, 1284, 1482, 1483, 1484, 1485, 1297, 1297,
     1486, 1486, 1487, 1488, 1489, 1302, 1302, 1490, 1491, 1491,
     1493, 1496, 1298, 1494, 1494, 1497, 1498, 1499, 1500, 1502,
     1503, 1504, 1492, 1505, 1506, 1507, 1508, 1495, 1509, 1510,
     1501, 1321, 1321, 1511, 1511, 1514, 1512, 1515, 1513, 1516,

     1326, 1326, 1517, 1517, 1521, 1322, 1328, 1328, 1518, 1518,
     1522, 1519, 1525, 1520, 1327, 1523, 1523, 1526, 1335, 1335,
     1329, 1336, 1528, 1337, 1338, 1338, 1527, 1527, 1529, 1524,
     1342, 1342, 1530, 1531, 1532, 1533, 1534, 1535, 1541, 1339,
     1349, 1349, 1536, 1536, 1538, 1538, 1352, 1352, 1540, 1540,
     1542, 1543, 1544, 1358, 1358, 1545, 1545, 1537, 1546, 1539,
     1547, 1353, 1548, 1548, 1363, 1363, 1550, 1550, 1359, 1551,
     1552, 1552, 1367, 1367, 1554, 1555, 1556, 1549, 1557, 1364,
     1558, 1559, 1560, 1561, 1562, 1553, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1389, 1389,

     1575, 1576, 1577, 1578, 1578, 1394, 1394, 1580, 1581, 1582,
     1583, 1584, 1400, 1400, 1585, 1585, 1586, 1587, 1579, 1588,
     1589, 1590, 1407, 1407, 1408, 1408, 1591, 1401, 1410, 1410,
     1592, 1593, 1413, 1413, 1414, 1414, 1594, 1595, 1595, 1417,
     1417, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1596, 1609, 1610, 1611, 1612, 1613, 1613, 1434,
     1434, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1435, 1625, 1626, 1627, 1629, 1630, 1628, 1631,
     1632, 1633, 1634, 1635, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1597, 1644, 1645, 1636, 1646, 1467, 1467, 1647, 1648,

     1649, 1650, 1651, 1473, 1473, 1652, 1653, 1654, 1655, 1656,
     1657, 1658, 1661, 1662, 1659, 1663, 1664, 1486, 1486, 1665,
     1666, 1667, 1660, 1668, 1491, 1491, 1669, 1669, 1670, 1494,
     1494, 1671, 1671, 1672, 1673, 1674, 1679, 1675, 1492, 1676,
     1677, 1677, 1680, 1495, 1681, 1682, 1683, 1684, 1685, 1686,
     1688, 1689, 1690, 1691, 1678, 1687, 1511, 1511, 1692, 1512,
     1693, 1513, 1694, 1517, 1517, 1518, 1518, 1695, 1519, 1696,
     1520, 1697, 1698, 1523, 1523, 1699, 1699, 1700, 1701, 1527,
     1527, 1702, 1703, 1704, 1705, 1706, 1707, 1524, 1708, 1709,
     1536, 1536, 1710, 1710, 1538, 1538, 1711, 1711, 1540, 1540,

     1712, 1713, 1714, 1715, 1716, 1537, 1545, 1545, 1717, 1539,
     1548, 1548, 1718, 1718, 1550, 1550, 1719, 1552, 1552, 1720,
     1720, 1721, 1721, 1724, 1725, 1549, 1726, 1727, 1728, 1729,
     1730, 1731, 1553, 1732, 1732, 1735, 1722, 1736, 1738, 1739,
     1737, 1740, 1741, 1742, 1743, 1744, 1746, 1750, 1733, 1747,
     1747, 1751, 1752, 1578, 1578, 1754, 1745, 1753, 1753, 1755,
     1756, 1757, 1758, 1758, 1748, 1585, 1585, 1760, 1579, 1761,
     1762, 1763, 1764, 1734, 1765, 1723, 1766, 1759, 1767, 1768,
     1595, 1595, 1769, 1769, 1770, 1770, 1772, 1773, 1774, 1775,
     1776, 1777, 1778, 1749, 1779, 1596, 1780, 1781, 1782, 1771,

     1783, 1613, 1613, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1796, 1798, 1799, 1800,
     1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
     1797, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
     1820, 1821, 1821, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
     1830, 1830, 1832, 1832, 1834, 1835, 1822, 1836, 1837, 1838,
     1669, 1669, 1839, 1839, 1831, 1841, 1833, 1671, 1671, 1842,
     1843, 1844, 1845, 1677, 1677, 1848, 1840, 1847, 1847, 1849,
     1850, 1851, 1852, 1853, 1854, 1855, 1846, 1678, 1856, 1858,
     1859, 1860, 1861, 1862, 1863, 1864, 1699, 1699, 1865, 1865,

     1867, 1868, 1869, 1869, 1871, 1871, 1873, 1873, 1857, 1875,
     1876, 1877, 1866, 1878, 1710, 1710, 1879, 1870, 1880, 1872,
     1881, 1874, 1711, 1711, 1882, 1883, 1884, 1718, 1718, 1885,
     1720, 1720, 1721, 1721, 1886, 1886, 1887, 1888, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1732, 1732, 1722, 1896, 1896,
     1897, 1898, 1898, 1900, 1901, 1902, 1903, 1904, 1905, 1905,
     1733, 1907, 1908, 1909, 1910, 1911, 1899, 1747, 1747, 1912,
     1912, 1913, 1914, 1906, 1915, 1916, 1753, 1753, 1917, 1918,
     1918, 1920, 1748, 1921, 1758, 1758, 1922, 1922, 1923, 1924,
     1925, 1926, 1926, 1928, 1919, 1929, 1929, 1931, 1931, 1759,

     1933, 1934, 1769, 1769, 1770, 1770, 1927, 1935, 1935, 1936,
     1930, 1937, 1932, 1938, 1939, 1939, 1942, 1942, 1945, 1771,
     1946, 1947, 1948, 1940, 1949, 1943, 1950, 1950, 1952, 1941,
     1953, 1944, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
     1961, 1951, 1963, 1796, 1796, 1964, 1964, 1965, 1966, 1967,
     1968, 1969, 1970, 1970, 1962, 1972, 1973, 1973, 1797, 1975,
     1976, 1977, 1978, 1978, 1980, 1981, 1982, 1971, 1983, 1984,
     1985, 1974, 1986, 1988, 1989, 1990, 1992, 1979, 1821, 1821,
     1993, 1987, 1991, 1991, 1994, 1995, 1996, 1997, 1998, 1830,
     1830, 1999, 1999, 1822, 1832, 1832, 2000, 2000, 2001, 2002,

     2003, 2004, 2005, 1831, 1839, 1839, 2006, 2006, 1833, 2007,
     2008, 2009, 2010, 2011, 2012, 1847, 1847, 2015, 1840, 2013,
     2013, 2016, 2017, 2018, 2019, 2019, 2021, 2022, 2023, 2024,
     2025, 2026, 2026, 2014, 2028, 2029, 2030, 2031, 2020, 2032,
     1865, 1865, 2033, 2033, 2034, 2027, 2035, 1869, 1869, 2036,
     2036, 1871, 1871, 2039, 1866, 2037, 2037, 1873, 1873, 2038,
     2038, 2040, 1870, 2041, 2041, 2047, 1872, 2043, 2043, 2045,
     2045, 2048, 1874, 2049, 2050, 2051, 2052, 2053, 2042, 1886,
     1886, 2054, 2044, 2055, 2046, 2056, 2057, 2058, 2059, 2060,
     2060, 2062, 2062, 1896, 1896, 2064, 1898, 1898, 2065, 2065,

     2066, 2067, 2068, 2069, 2061, 2070, 2063, 1905, 1905, 2071,
     2071, 1899, 2072, 2072, 2074, 2075, 2075, 2077, 2078, 1912,
     1912, 2079, 1906, 2080, 2081, 2082, 2083, 2073, 1918, 1918,
     2076, 2084, 2084, 2085, 2086, 1922, 1922, 2087, 2087, 2089,
     2091, 1926, 1926, 1919, 2092, 2092, 2093, 2096, 2090, 1929,
     1929, 2097, 2088, 2094, 2094, 2098, 1927, 1931, 1931, 2095,
     2095, 1935, 1935, 2099, 1930, 2100, 1939, 1939, 2101, 2102,
     2102, 2104, 1932, 2105, 2105, 1940, 1942, 1942, 2107, 2108,
     2109, 1941, 2103, 2110, 2110, 1943, 2106, 2112, 1950, 1950,
     2114, 1944, 2111, 2113, 2113, 2115, 2116, 2117, 2118, 2119,

     2120, 2121, 2122, 1951, 1961, 1961, 2123, 2123, 2124, 1964,
     1964, 2125, 2126, 2127, 2128, 2129, 1970, 1970, 2131, 1962,
     2130, 2130, 1973, 1973, 2132, 2132, 2133, 2134, 2135, 1978,
     1978, 1971, 2136, 2136, 2137, 2138, 2139, 1974, 2140, 2141,
     2142, 2143, 2144, 2145, 1979, 2146, 1991, 1991, 2147, 2148,
     2149, 2149, 2155, 2151, 2153, 2153, 2156, 2156, 1999, 1999,
     2000, 2000, 2158, 2159, 2150, 2152, 2160, 2161, 2154, 2162,
     2157, 2006, 2006, 2163, 2164, 2165, 2166, 2167, 2167, 2169,
     2013, 2013, 2170, 2170, 2171, 2173, 2174, 2175, 2019, 2019,
     2177, 2168, 2176, 2176, 2014, 2178, 2179, 2180, 2181, 2026,

     2026, 2183, 2020, 2182, 2182, 2172, 2184, 2185, 2186, 2187,
     2033, 2033, 2188, 2027, 2189, 2036, 2036, 2037, 2037, 2038,
     2038, 2190, 2191, 2041, 2041, 2192, 2192, 2043, 2043, 2193,
     2193, 2045, 2045, 2194, 2194, 2195, 2196, 2197, 2042, 2198,
     2198, 2200, 2044, 2201, 2202, 2203, 2046, 2204, 2205, 2206,
     2207, 2208, 2060, 2060, 2199, 2209, 2209, 2062, 2062, 2210,
     2210, 2211, 2065, 2065, 2212, 2213, 2214, 2061, 2215, 2216,
     2071, 2071, 2063, 2072, 2072, 2217, 2217, 2218, 2075, 2075,
     2219, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2073, 2226,
     2084, 2084, 2229, 2076, 2227, 2227, 2087, 2087, 2230, 2230,

     2231, 2232, 2233, 2092, 2092, 2234, 2094, 2094, 2235, 2228,
     2236, 2088, 2095, 2095, 2237, 2238, 2239, 2240, 2240, 2102,
     2102, 2241, 2242, 2242, 2105, 2105, 2243, 2244, 2245, 2246,
     2110, 2110, 2103, 2247, 2248, 2113, 2113, 2106, 2249, 2111,
     2250, 2251, 2252, 2253, 2254, 2255, 2256, 2256, 2258, 2123,
     2123, 2259, 2260, 2260, 2262, 2263, 2264, 2265, 2130, 2130,
     2266, 2257, 2132, 2132, 2267, 2268, 2269, 2261, 2136, 2136,
     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
     2280, 2149, 2149, 2281, 2281, 2282, 2283, 2153, 2153, 2284,
     2284, 2285, 2156, 2156, 2289, 2150, 2290, 2286, 2286, 2291,

     2287, 2154, 2288, 2292, 2293, 2294, 2157, 2295, 2296, 2296,
     2298, 2167, 2167, 2299, 2299, 2300, 2170, 2170, 2301, 2302,
     2306, 2307, 2297, 2308, 2315, 2168, 2176, 2176, 2303, 2309,
     2309, 2311, 2311, 2304, 2316, 2305, 2313, 2313, 2182, 2182,
     2317, 2318, 2319, 2310, 2320, 2312, 2321, 2322, 2323, 2324,
     2314, 2325, 2192, 2192, 2193, 2193, 2194, 2194, 2326, 2327,
     2328, 2198, 2198, 2329, 2329, 2330, 2331, 2332, 2333, 2334,
     2335, 2336, 2337, 2337, 2339, 2340, 2199, 2209, 2209, 2210,
     2210, 2341, 2341, 2343, 2344, 2345, 2346, 2338, 2217, 2217,
     2347, 2219, 2219, 2348, 2349, 2350, 2342, 2351, 2352, 2353,

     2354, 2227, 2227, 2355, 2355, 2356, 2230, 2230, 2357, 2358,
     2358, 2360, 2361, 2362, 2363, 2364, 2228, 2365, 2366, 2240,
     2240, 2367, 2242, 2242, 2359, 2368, 2369, 2370, 2371, 2371,
     2373, 2373, 2374, 2375, 2376, 2377, 2378, 2378, 2380, 2380,
     2382, 2256, 2256, 2372, 2383, 2383, 2384, 2385, 2260, 2260,
     2387, 2379, 2388, 2381, 2386, 2386, 2257, 2389, 2390, 2391,
     2391, 2393, 2394, 2261, 2395, 2396, 2397, 2398, 2399, 2400,
     2401, 2402, 2403, 2404, 2392, 2405, 2281, 2281, 2406, 2407,
     2284, 2284, 2408, 2286, 2286, 2410, 2287, 2411, 2288, 2412,
     2413, 2414, 2415, 2425, 2409, 2416, 2416, 2418, 2418, 2420,

     2420, 2296, 2296, 2422, 2422, 2423, 2423, 2299, 2299, 2417,
     2426, 2419, 2427, 2421, 2428, 2297, 2429, 2430, 2431, 2424,
     2432, 2433, 2309, 2309, 2434, 2434, 2311, 2311, 2435, 2435,
     2313, 2313, 2436, 2436, 2437, 2438, 2310, 2439, 2440, 2441,
     2312, 2442, 2443, 2444, 2314, 2445, 2446, 2447, 2448, 2449,
     2450, 2450, 2329, 2329, 2452, 2453, 2453, 2455, 2456, 2457,
     2457, 2459, 2459, 2461, 2463, 2451, 2337, 2337, 2462, 2462,
     2454, 2464, 2341, 2341, 2458, 2466, 2460, 2465, 2465, 2467,
     2468, 2338, 2469, 2470, 2470, 2472, 2473, 2342, 2474, 2475,
     2476, 2477, 2478, 2355, 2355, 2479, 2480, 2482, 2471, 2358,

     2358, 2481, 2481, 2483, 2484, 2484, 2486, 2487, 2488, 2489,
     2490, 2491, 2492, 2494, 2359, 2371, 2371, 2493, 2493, 2485,
     2373, 2373, 2495, 2496, 2497, 2378, 2378, 2498, 2498, 2500,
     2372, 2380, 2380, 2499, 2499, 2383, 2383, 2501, 2502, 2503,
     2379, 2386, 2386, 2504, 2505, 2509, 2381, 2391, 2391, 2506,
     2506, 2507, 2507, 2510, 2511, 2512, 2513, 2514, 2515, 2515,
     2517, 2522, 2392, 2518, 2518, 2523, 2508, 2520, 2520, 2524,
     2525, 2526, 2527, 2516, 2416, 2416, 2536, 2519, 2539, 2528,
     2528, 2521, 2529, 2540, 2530, 2418, 2418, 2541, 2417, 2531,
     2531, 2542, 2532, 2543, 2533, 2420, 2420, 2534, 2534, 2419,

     2422, 2422, 2423, 2423, 2535, 2535, 2537, 2537, 2544, 2421,
     2545, 2434, 2434, 2435, 2435, 2546, 2424, 2436, 2436, 2547,
     2538, 2548, 2548, 2550, 2551, 2551, 2553, 2554, 2555, 2556,
     2557, 2558, 2559, 2559, 2561, 2549, 2450, 2450, 2552, 2562,
     2562, 2563, 2453, 2453, 2564, 2564, 2565, 2560, 2566, 2457,
     2457, 2451, 2567, 2567, 2459, 2459, 2569, 2454, 2568, 2568,
     2462, 2462, 2570, 2571, 2458, 2465, 2465, 2572, 2575, 2460,
     2573, 2573, 2576, 2470, 2470, 2577, 2577, 2578, 2578, 2580,
     2581, 2581, 2583, 2584, 2584, 2574, 2586, 2586, 2471, 2588,
     2589, 2589, 2579, 2591, 2592, 2582, 2481, 2481, 2585, 2593,

     2595, 2587, 2484, 2484, 2596, 2590, 2594, 2594, 2597, 2598,
     2599, 2493, 2493, 2600, 2601, 2602, 2603, 2485, 2498, 2498,
     2499, 2499, 2604, 2605, 2606, 2607, 2506, 2506, 2507, 2507,
     2608, 2608, 2609, 2610, 2611, 2612, 2613, 2515, 2515, 2614,
     2614, 2615, 2618, 2508, 2518, 2518, 2616, 2616, 2520, 2520,
     2617, 2617, 2516, 2619, 2620, 2621, 2621, 2623, 2519, 2624,
     2528, 2528, 2521, 2529, 2625, 2530, 2626, 2531, 2531, 2622,
     2532, 2627, 2533, 2628, 2534, 2534, 2535, 2535, 2629, 2537,
     2537, 2630, 2630, 2631, 2631, 2633, 2633, 2635, 2636, 2636,
     2638, 2639, 2640, 2538, 2641, 2641, 2643, 2632, 2645, 2634,

     2548, 2548, 2637, 2644, 2644, 2551, 2551, 2653, 2642, 2649,
     2646, 2646, 2656, 2647, 2549, 2648, 2651, 2651, 2660, 2552,
     2663, 2650, 2654, 2654, 2657, 2657, 2559, 2559, 2659, 2659,
     2652, 2562, 2562, 2661, 2661, 2564, 2564, 2655, 2664, 2658,
     2665, 2560, 2567, 2567, 2568, 2568, 2666, 2669, 2662, 2667,
     2667, 2573, 2573, 2670, 2670, 2671, 2672, 2577, 2577, 2578,
     2578, 2673, 2673, 2674, 2668, 2676, 2574, 2581, 2581, 2675,
     2675, 2584, 2584, 2679, 2579, 2677, 2677, 2586, 2586, 2678,
     2678, 2681, 2582, 2589, 2589, 2682, 2585, 2680, 2680, 2683,
     2683, 2685, 2587, 2594, 2594, 2686, 2687, 2688, 2590, 2689,

     2690, 2690, 2692, 2692, 2684, 2694, 2695, 2695, 2697, 2697,
     2608, 2608, 2699, 2700, 2701, 2691, 2702, 2693, 2703, 2614,
     2614, 2696, 2704, 2698, 2616, 2616, 2617, 2617, 2705, 2705,
     2707, 2707, 2709, 2621, 2621, 2710, 2710, 2711, 2712, 2712,
     2714, 2717, 2706, 2719, 2708, 2630, 2630, 2622, 2631, 2631,
     2715, 2715, 2713, 2633, 2633, 2716, 2716, 2636, 2636, 2718,
     2718, 2722, 2632, 2720, 2720, 2641, 2641, 2634, 2723, 2723,
     2724, 2637, 2644, 2644, 2725, 2646, 2646, 2721, 2647, 2642,
     2648, 2726, 2727, 2728, 2729, 2651, 2651, 2730, 2730, 2731,
     2654, 2654, 2732, 2732, 2733, 2657, 2657, 2734, 2734, 2652,

     2659, 2659, 2735, 2661, 2661, 2655, 2736, 2736, 2737, 2737,
     2658, 2739, 2739, 2741, 2741, 2743, 2667, 2667, 2662, 2744,
     2744, 2745, 2745, 2738, 2670, 2670, 2740, 2751, 2742, 2747,
     2747, 2668, 2749, 2749, 2673, 2673, 2746, 2675, 2675, 2752,
     2677, 2677, 2678, 2678, 2748, 2753, 2754, 2750, 2680, 2680,
     2755, 2683, 2683, 2756, 2756, 2757, 2758, 2759, 2760, 2690,
     2690, 2761, 2761, 2692, 2692, 2763, 2684, 2762, 2762, 2695,
     2695, 2764, 2764, 2766, 2691, 2697, 2697, 2767, 2693, 2765,
     2765, 2768, 2769, 2770, 2696, 2771, 2705, 2705, 2772, 2772,
     2698, 2707, 2707, 2773, 2773, 2774, 2710, 2710, 2775, 2775,

     2706, 2712, 2712, 2777, 2777, 2708, 2778, 2778, 2715, 2715,
     2716, 2716, 2776, 2780, 2780, 2713, 2718, 2718, 2782, 2784,
     2779, 2720, 2720, 2783, 2783, 2723, 2723, 2781, 2785, 2786,
     2786, 2788, 2789, 2730, 2730, 2721, 2790, 2732, 2732, 2791,
     2734, 2734, 2797, 2787, 2792, 2792, 2736, 2736, 2737, 2737,
     2794, 2794, 2739, 2739, 2795, 2795, 2741, 2741, 2801, 2793,
     2796, 2796, 2802, 2738, 2744, 2744, 2803, 2740, 2745, 2745,
     2804, 2742, 2798, 2798, 2747, 2747, 2799, 2799, 2749, 2749,
     2800, 2800, 2805, 2746, 2756, 2756, 2806, 2807, 2808, 2748,
     2809, 2761, 2761, 2750, 2762, 2762, 2764, 2764, 2765, 2765,

     2810, 2811, 2812, 2813, 2814, 2772, 2772, 2773, 2773, 2815,
     2775, 2775, 2816, 2816, 2777, 2777, 2778, 2778, 2817, 2817,
     2780, 2780, 2818, 2818, 2776, 2819, 2783, 2783, 2820, 2821,
     2779, 2786, 2786, 2827, 2781, 2822, 2822, 2823, 2823, 2825,
     2825, 2828, 2792, 2792, 2834, 2787, 2829, 2829, 2794, 2794,
     2835, 2824, 2836, 2826, 2795, 2795, 2837, 2793, 2796, 2796,
     2830, 2830, 2798, 2798, 2799, 2799, 2800, 2800, 2832, 2832,
     2838, 2839, 2840, 2841, 2844, 2831, 2842, 2842, 2816, 2816,
     2817, 2817, 2845, 2833, 2818, 2818, 2846, 2846, 2822, 2822,
     2843, 2823, 2823, 2848, 2848, 2825, 2825, 2849, 2849, 2860,

     2847, 2850, 2850, 2852, 2852, 2824, 2829, 2829, 2865, 2826,
     2830, 2830, 2854, 2854, 2866, 2851, 2832, 2832, 2853, 2855,
     2855, 2856, 2856, 2858, 2858, 2831, 2861, 2861, 2863, 2863,
     2868, 2833, 2842, 2842, 2867, 2867, 2857, 2880, 2859, 2869,
     2869, 2862, 2881, 2864, 2846, 2846, 2843, 2871, 2871, 2848,
     2848, 2849, 2849, 2870, 2850, 2850, 2872, 2872, 2847, 2852,
     2852, 2873, 2873, 2854, 2854, 2855, 2855, 2882, 2851, 2856,
     2856, 2874, 2874, 2885, 2853, 2858, 2858, 2875, 2875, 2876,
     2876, 2861, 2861, 2886, 2857, 2878, 2878, 2863, 2863, 2887,
     2859, 2879, 2879, 2888, 2877, 2889, 2862, 2867, 2867, 2869,

     2869, 2890, 2864, 2883, 2883, 2871, 2871, 2872, 2872, 2873,
     2873, 2874, 2874, 2870, 2875, 2875, 2876, 2876, 2884, 2884,
     2878, 2878, 2879, 2879, 2883, 2883, 2884, 2884, 2891, 2891,
     2895, 2877, 2893, 2893, 2891, 2891, 2896, 2896, 2893, 2893,
     2897, 2897, 2898, 2892, 2896, 2896,  977, 2894,  976, 2892,
     2897, 2897,  975, 2894, 2899, 2899, 2899, 2899, 2901, 2901,
     2901, 2901,  973,  972,  971,  970,  965,  964, 2900,  963,
     2900,   24,   24,   24,   24,   35,   35,   35,   35,   36,
       36,   36,   36,   37,   37,   37,   37,   38,   38,   38,
       38,   39,   39,   39,   39,   42,   42,   42,   42,  102,

      959,  102,  102,  103,  103,  958,  103,  104,  104,  104,
      957,  956,  955,  953,  952,  951,  950,  949,  948,  947,
      946,  941,  940,  939,  938,  937,  936,  935,  934,  933,
      932,  931,  930,  929,  928,  927,  922,  921,  920,  919,
      918,  917,  916,  915,  914,  913,  912,  911,  910,  909,
      908,  905,  904,  903,  902,  901,  900,  899,  898,  897,
      894,  892,  891,  890,  889,  888,  887,  886,  885,  884,
      883,  880,  875,  874,  871,  868,  867,  866,  865,  864,
      863,  862,  861,  860,  859,  856,  855,  854,  853,  852,
      851,  850,  849,  848,  847,  845,  844,  840,  839,  838,

      837,  835,  834,  833,  832,  831,  830,  829,  828,  825,
      822,  821,  820,  818,  817,  816,  815,  814,  813,  810,
      807,  806,  805,  802,  801,  800,  799,  798,  797,  796,
      791,  790,  789,  788,  786,  785,  784,  782,  781,  780,
      777,  775,  774,  771,  770,  766,  765,  764,  758,  757,
      756,  755,  754,  753,  752,  751,  750,  745,  744,  743,
      741,  740,  739,  738,  737,  736,  735,  734,  730,  729,
      728,  727,  726,  725,  724,  723,  719,  718,  717,  716,
      714,  713,  712,  711,  710,  709,  708,  707,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  691,  688,

      687,  686,  682,  681,  680,  679,  678,  677,  676,  673,
      672,  671,  670,  668,  667,  666,  665,  664,  663,  660,
      653,  652,  651,  646,  645,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  626,  620,  619,
      613,  611,  610,  609,  608,  607,  606,  604,  603,  602,
      601,  595,  593,  592,  591,  583,  582,  581,  580,  579,
      575,  574,  573,  572,  571,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  550,
      549,  548,  545,  544,  543,  541,  540,  539,  538,  537,
      536,  535,  532,  529,  525,  524,  523,  518,  517,  514,

      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      501,  496,  495,  489,  487,  486,  485,  484,  483,  482,
      480,  479,  478,  477,  471,  470,  469,  468,  462,  461,
      460,  459,  458,  453,  452,  451,  450,  449,  448,  447,
      446,  443,  442,  441,  438,  437,  436,  435,  434,  433,
      432,  429,  428,  427,  420,  414,  413,  412,  411,  410,
      409,  405,  404,  403,  398,  397,  396,  395,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  357,  356,  355,  352,  351,  350,  349,  346,  345,

      344,  343,  342,  341,  340,  339,  336,  335,  334,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  316,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  296,
      295,  294,  293,  292,  283,  260,  251,  246,  243,  238,
      237,  236,  235,  234,  233,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  218,  214,  213,  212,  209,
      208,  207,  206,  205,  205,  204,  195,  173,  164,  159,
      138,  135,  134,  125,  116,  113,  112,  111,  110,  107,
      101,  100,   75,  106,  105,  101,  100,   75,   71,   71,
     2902,   35,   35,   35,   35,   35,   35,   19, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902
    } ;

static yyconst flex_int16_t yy_chk[4763] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,   51,
       17,   15,   18,    0,   16,    1,  532,   26,    1,   26,
       26,   26,   47,   51,   47,   47,   47,   63,  532,   27,
       27,   56,   64,   26,   61,   65,   64,   87,   47,   27,
       27,   27,   56,  799,   61,   87,   64,   63,   72,   72,
       27,   65,   64,    1,    2,    2,    2,    2,    2,  523,
        2,   83,    2,    2,    2,    2,    2,    2,    2,   27,
        2,    2,   83,   29,   29,   90,   48,   48,  142,    2,
       90,   29,    2,   29,   29,   29,   48,   48,   48,  142,

       67,   82,   67,  523,   29,   67,   68,   48,   74,   74,
       68,   82,   74,   74,   74,   76,   76,   67,  242,   86,
      242,   95,   67,   29,   98,   86,   48,    2,   21,   21,
       68,   86,   21,   98,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   95,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       24,   24,   85,  205,  205,   93,   85,   24,   24,   24,

       24,   24,   24,   24,  110,   24,  127,   91,   85,   93,
      141,   50,   50,  110,   24,   91,  127,   24,  116,   50,
      141,   50,   50,   50,  135,  116,   24,   24,   24,   24,
      135,   24,   50,   24,   24,  134,  149,   24,   24,   24,
       24,  149,  134,   24,   24,   24,   24,   24,   30,   73,
       73,   50,  178,  144,   94,   30,   89,  144,   89,   73,
       73,   73,   30,  178,  176,   94,   89,   30,   94,  144,
       73,   94,   89,  146,  800,   30,  136,  136,  136,  176,
      176,  146,   30,   30,   30,   30,   30,   30,   30,   73,
       30,  152,  801,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  150,   30,   78,  152,  137,  137,  152,  180,
      150,  805,   78,  180,  114,  114,  137,  137,  137,   78,
       78,   78,   78,   78,   78,   78,  195,   78,  114,  195,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   92,
       78,  283,   97,   92,  283,  204,   97,  139,  139,  145,
       92,  204,   97,   92,   97,  145,  151,   97,   97,   92,
      151,  145,  139,  154,  148,  218,  148,  151,  153,  157,
      151,  218,  682,  114,  148,  682,  151,  156,  157,  153,
      148,  156,  153,  175,  175,  153,  154,  156,  191,  156,
      179,  179,  156,  156,  164,  164,  164,  211,  175,  191,

      267,  164,  215,  215,  267,  179,  216,  216,  806,  216,
      813,  216,  217,  217,  244,  244,  215,  245,  245,  263,
      211,  246,  246,  251,  251,  251,  217,  255,  255,  244,
      251,  262,  262,  265,  263,  263,  246,  266,  266,  279,
      217,  814,  255,  292,  265,  217,  262,  271,  271,  292,
      279,  299,  266,  293,  293,  300,  300,  305,  305,  459,
      299,  815,  271,  306,  306,  311,  311,  255,  293,  816,
      300,  688,  305,  459,  299,  312,  312,  817,  306,  818,
      311,  319,  319,  320,  320,  322,  322,  323,  323,  326,
      328,  326,  688,  326,  340,  340,  319,  343,  668,  328,

      322,  450,  323,  326,  344,  344,  348,  350,  343,  340,
      352,  352,  450,  348,  350,  668,  306,  358,  358,  344,
      358,  820,  358,  807,  352,  821,  348,  361,  361,  362,
      362,  366,  366,  370,  370,  371,  371,  386,  386,  392,
      392,  361,  651,  323,  807,  366,  822,  370,  825,  371,
      828,  386,  393,  393,  394,  394,  395,  395,  401,  401,
      402,  402,  406,  406,  407,  407,  830,  393,  409,  409,
      832,  395,  833,  401,  580,  402,  651,  406,  410,  410,
      415,  415,  834,  409,  416,  416,  423,  423,  580,  401,
      424,  424,  786,  410,  835,  415,  426,  426,  401,  427,

      427,  423,  430,  430,  431,  431,  432,  837,  432,  786,
      432,  426,  401,  838,  427,  447,  447,  430,  434,  434,
      432,  451,  451,  455,  455,  456,  456,  457,  457,  802,
      447,  410,  802,  434,  467,  467,  451,  842,  455,  844,
      456,  466,  466,  845,  472,  472,  847,  455,  848,  434,
      473,  473,  475,  475,  455,  427,  466,  849,  434,  472,
      474,  474,  481,  481,  485,  485,  850,  455,  488,  488,
      490,  490,  851,  485,  852,  474,  491,  491,  854,  485,
      492,  492,  493,  493,  855,  490,  856,  495,  495,  506,
      506,  515,  515,  516,  516,  492,  495,  521,  521,  522,

      522,  857,  495,  858,  506,  859,  515,  533,  533,  534,
      534,  861,  521,  542,  542,  546,  546,  547,  547,  551,
      551,  533,  552,  552,  553,  553,  862,  554,  554,  546,
      554,  863,  554,  551,  564,  564,  565,  565,  553,  569,
      569,  570,  570,  864,  570,  865,  570,  866,  564,  867,
      565,  573,  573,  569,  576,  576,  577,  577,  578,  578,
      565,  584,  584,  585,  585,  573,  589,  589,  590,  590,
      868,  577,  594,  594,  596,  596,  584,  597,  597,  598,
      598,  589,  599,  599,  600,  600,  605,  605,  869,  596,
      609,  609,  612,  612,  598,  614,  614,  615,  615,  600,

      616,  616,  617,  617,  870,  609,  619,  619,  621,  621,
      614,  627,  627,  628,  628,  616,  632,  632,  634,  634,
      873,  619,  643,  643,  644,  644,  627,  649,  649,  650,
      650,  632,  874,  634,  654,  654,  875,  643,  655,  655,
      659,  659,  649,  669,  669,  674,  674,  675,  675,  654,
      683,  683,  876,  685,  685,  689,  689,  690,  690,  683,
      691,  691,  692,  692,  882,  683,  685,  694,  694,  705,
      705,  692,  706,  706,  884,  691,  885,  692,  708,  708,
      694,  715,  715,  886,  705,  720,  720,  722,  722,  733,
      733,  739,  739,  708,  740,  740,  742,  742,  746,  746,

      759,  759,  722,  762,  762,  739,  747,  747,  740,  747,
      887,  747,  760,  760,  759,  760,  889,  760,  761,  761,
      767,  767,  890,  767,  891,  767,  772,  772,  773,  773,
      776,  776,  761,  780,  780,  783,  783,  785,  785,  892,
      772,  787,  787,  792,  792,  793,  793,  894,  780,  794,
      794,  897,  785,  795,  795,  803,  803,  804,  804,  808,
      808,  809,  809,  898,  794,  810,  810,  811,  811,  899,
      803,  812,  812,  819,  819,  823,  823,  824,  824,  900,
      810,  901,  811,  826,  826,  827,  827,  780,  829,  829,
      823,  831,  831,  836,  836,  839,  839,  905,  826,  840,

      840,  841,  841,  829,  843,  843,  831,  846,  846,  908,
      839,  860,  860,  911,  840,  871,  871,  872,  872,  843,
      878,  878,  879,  879,  880,  880,  860,  881,  881,  912,
      872,  883,  883,  893,  893,  878,  896,  896,  895,  895,
      881,  907,  907,  903,  903,  913,  883,  914,  915,  839,
      877,  877,  877,  895,  916,  877,  877,  877,  903,  877,
      877,  917,  877,  877,  877,  877,  877,  902,  902,  906,
      906,  918,  919,  920,  903,  921,  902,  922,  922,  923,
      923,  927,  902,  928,  906,  924,  924,  925,  925,  926,
      926,  922,  929,  923,  930,  933,  934,  935,  936,  937,

      938,  925,  939,  940,  941,  942,  942,  943,  942,  944,
      942,  945,  945,  946,  947,  948,  949,  952,  953,  954,
      954,  955,  956,  956,  957,  958,  959,  960,  960,  961,
      961,  962,  962,  963,  964,  965,  956,  966,  966,  967,
      967,  968,  960,  969,  970,  972,  962,  971,  971,  973,
      974,  974,  966,  975,  976,  977,  978,  979,  980,  981,
      982,  984,  971,  983,  983,  985,  986,  987,  987,  988,
      988,  989,  989,  990,  990,  991,  991,  992,  993,  994,
      995,  997,  987,  998,  988,  999,  987,  987,  987, 1001,
      991,  987,  987,  987, 1003,  987,  987, 1006,  987,  987,

      987,  987,  987,  996,  996, 1000, 1000, 1002, 1002, 1004,
     1004, 1005, 1005, 1007, 1007, 1008, 1008, 1009,  996, 1010,
     1011, 1012, 1013, 1013, 1004, 1014, 1014, 1020, 1007, 1015,
     1015, 1016, 1016, 1017, 1017, 1018, 1018, 1013, 1019, 1019,
     1014, 1023, 1021, 1021, 1015, 1022, 1022, 1026, 1017, 1027,
     1018, 1024, 1024, 1025, 1025, 1029, 1014, 1021, 1028, 1028,
     1030, 1031, 1032, 1033, 1034, 1035, 1024, 1036, 1025, 1037,
     1037, 1038, 1038, 1028, 1039, 1040, 1042, 1044, 1043, 1046,
     1047, 1048, 1049, 1049, 1037, 1043, 1050, 1051, 1051, 1052,
     1053, 1054, 1056, 1055, 1057, 1058, 1051, 1055, 1060, 1061,

     1059, 1062, 1051, 1055, 1059, 1061, 1063, 1064, 1065, 1066,
     1069, 1064, 1067, 1067, 1068, 1068, 1072, 1064, 1070, 1070,
     1064, 1071, 1071, 1073, 1063, 1074, 1075, 1076, 1077, 1078,
     1079, 1080, 1083, 1070, 1081, 1081, 1082, 1082, 1084, 1085,
     1086, 1087, 1087, 1088, 1089, 1089, 1090, 1090, 1091, 1091,
     1087, 1082, 1092, 1093, 1095, 1082, 1087, 1089, 1094, 1094,
     1096, 1090, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1104, 1105, 1106, 1107, 1107, 1108, 1108, 1109, 1109, 1110,
     1110, 1111, 1112, 1104, 1113, 1114, 1115, 1107, 1116, 1118,
     1119, 1121, 1122, 1120, 1120, 1104, 1117, 1117, 1123, 1117,

     1126, 1126, 1127, 1127, 1117, 1117, 1117, 1120, 1117, 1117,
     1117, 1128, 1129, 1117, 1126, 1130, 1127, 1131, 1132, 1133,
     1133, 1134, 1134, 1136, 1134, 1137, 1134, 1135, 1135, 1138,
     1138, 1139, 1139, 1133, 1140, 1140, 1141, 1142, 1143, 1144,
     1144, 1145, 1135, 1146, 1147, 1150, 1139, 1148, 1148, 1149,
     1149, 1151, 1152, 1152, 1153, 1155, 1154, 1156, 1156, 1157,
     1158, 1159, 1148, 1154, 1160, 1160, 1161, 1152, 1162, 1163,
     1163, 1165, 1156, 1164, 1164, 1167, 1166, 1168, 1169, 1160,
     1166, 1170, 1171, 1172, 1163, 1170, 1166, 1173, 1174, 1172,
     1175, 1176, 1177, 1181, 1175, 1178, 1178, 1179, 1179, 1182,

     1175, 1180, 1180, 1175, 1183, 1184, 1174, 1185, 1185, 1186,
     1186, 1187, 1179, 1188, 1189, 1190, 1191, 1192, 1192, 1193,
     1193, 1195, 1185, 1194, 1194, 1196, 1197, 1198, 1199, 1199,
     1200, 1200, 1201, 1201, 1193, 1202, 1202, 1203, 1193, 1204,
     1204, 1205, 1205, 1199, 1206, 1206, 1208, 1201, 1207, 1207,
     1209, 1209, 1210, 1211, 1211, 1215, 1205, 1212, 1212, 1213,
     1213, 1214, 1214, 1216, 1217, 1217, 1218, 1218, 1211, 1219,
     1220, 1221, 1222, 1223, 1213, 1224, 1225, 1226, 1230, 1217,
     1227, 1227, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1238,
     1239, 1240, 1240, 1241, 1243, 1244, 1245, 1238, 1246, 1247,

     1248, 1249, 1250, 1238, 1240, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275,
     1275, 1276, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1282,
     1283, 1283, 1284, 1286, 1275, 1285, 1285, 1287, 1288, 1289,
     1290, 1291, 1292, 1283, 1293, 1294, 1295, 1296, 1297, 1297,
     1298, 1298, 1299, 1300, 1301, 1302, 1302, 1303, 1304, 1304,
     1305, 1307, 1297, 1306, 1306, 1308, 1309, 1310, 1311, 1312,
     1313, 1314, 1304, 1315, 1316, 1317, 1318, 1306, 1319, 1320,
     1311, 1321, 1321, 1322, 1322, 1323, 1322, 1324, 1322, 1325,

     1326, 1326, 1327, 1327, 1330, 1321, 1328, 1328, 1329, 1329,
     1331, 1329, 1333, 1329, 1326, 1332, 1332, 1334, 1335, 1335,
     1328, 1335, 1340, 1335, 1338, 1338, 1339, 1339, 1341, 1332,
     1342, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1354, 1338,
     1349, 1349, 1350, 1350, 1351, 1351, 1352, 1352, 1353, 1353,
     1355, 1356, 1357, 1358, 1358, 1359, 1359, 1350, 1360, 1351,
     1361, 1352, 1362, 1362, 1363, 1363, 1364, 1364, 1358, 1365,
     1366, 1366, 1367, 1367, 1368, 1369, 1370, 1362, 1371, 1363,
     1372, 1373, 1374, 1375, 1376, 1366, 1377, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1389,

     1390, 1391, 1392, 1393, 1393, 1394, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1400, 1401, 1401, 1402, 1403, 1393, 1404,
     1405, 1406, 1407, 1407, 1408, 1408, 1409, 1400, 1410, 1410,
     1411, 1412, 1413, 1413, 1414, 1414, 1415, 1416, 1416, 1417,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1416, 1429, 1430, 1431, 1432, 1433, 1433, 1434,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1434, 1446, 1447, 1448, 1449, 1450, 1448, 1451,
     1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1416, 1463, 1464, 1455, 1465, 1467, 1467, 1468, 1469,

     1470, 1471, 1472, 1473, 1473, 1474, 1475, 1476, 1477, 1478,
     1480, 1481, 1482, 1483, 1481, 1484, 1485, 1486, 1486, 1487,
     1488, 1489, 1481, 1490, 1491, 1491, 1492, 1492, 1493, 1494,
     1494, 1495, 1495, 1496, 1497, 1498, 1501, 1499, 1491, 1499,
     1500, 1500, 1502, 1494, 1503, 1504, 1505, 1506, 1507, 1508,
     1509, 1510, 1512, 1513, 1500, 1508, 1511, 1511, 1514, 1511,
     1515, 1511, 1516, 1517, 1517, 1518, 1518, 1519, 1518, 1520,
     1518, 1521, 1522, 1523, 1523, 1524, 1524, 1525, 1526, 1527,
     1527, 1528, 1529, 1530, 1531, 1532, 1533, 1523, 1534, 1535,
     1536, 1536, 1537, 1537, 1538, 1538, 1539, 1539, 1540, 1540,

     1541, 1542, 1543, 1544, 1546, 1536, 1545, 1545, 1547, 1538,
     1548, 1548, 1549, 1549, 1550, 1550, 1551, 1552, 1552, 1553,
     1553, 1554, 1554, 1555, 1556, 1548, 1557, 1558, 1559, 1560,
     1561, 1562, 1552, 1563, 1563, 1564, 1554, 1565, 1566, 1567,
     1565, 1568, 1569, 1570, 1571, 1572, 1573, 1575, 1563, 1574,
     1574, 1576, 1577, 1578, 1578, 1580, 1572, 1579, 1579, 1581,
     1582, 1583, 1584, 1584, 1574, 1585, 1585, 1586, 1578, 1587,
     1588, 1589, 1590, 1563, 1591, 1554, 1592, 1584, 1593, 1594,
     1595, 1595, 1596, 1596, 1597, 1597, 1598, 1602, 1603, 1604,
     1605, 1606, 1607, 1574, 1608, 1595, 1609, 1610, 1611, 1597,

     1612, 1613, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
     1621, 1622, 1623, 1624, 1625, 1626, 1626, 1627, 1628, 1629,
     1630, 1631, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
     1626, 1641, 1642, 1643, 1645, 1646, 1647, 1648, 1649, 1651,
     1652, 1653, 1653, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
     1662, 1662, 1663, 1663, 1664, 1665, 1653, 1666, 1667, 1668,
     1669, 1669, 1670, 1670, 1662, 1672, 1663, 1671, 1671, 1673,
     1674, 1675, 1676, 1677, 1677, 1679, 1670, 1678, 1678, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1676, 1677, 1687, 1688,
     1689, 1692, 1693, 1694, 1697, 1698, 1699, 1699, 1700, 1700,

     1701, 1702, 1703, 1703, 1704, 1704, 1705, 1705, 1687, 1706,
     1707, 1708, 1700, 1709, 1710, 1710, 1712, 1703, 1713, 1704,
     1714, 1705, 1711, 1711, 1715, 1716, 1717, 1718, 1718, 1719,
     1720, 1720, 1721, 1721, 1722, 1722, 1723, 1724, 1725, 1726,
     1727, 1728, 1729, 1730, 1731, 1732, 1732, 1721, 1733, 1733,
     1734, 1735, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1741,
     1732, 1742, 1743, 1744, 1745, 1746, 1735, 1747, 1747, 1748,
     1748, 1749, 1750, 1741, 1751, 1752, 1753, 1753, 1754, 1755,
     1755, 1756, 1747, 1757, 1758, 1758, 1759, 1759, 1760, 1761,
     1762, 1763, 1763, 1764, 1755, 1765, 1765, 1766, 1766, 1758,

     1767, 1768, 1769, 1769, 1770, 1770, 1763, 1771, 1771, 1772,
     1765, 1773, 1766, 1774, 1776, 1776, 1777, 1777, 1778, 1770,
     1779, 1780, 1781, 1776, 1782, 1777, 1783, 1783, 1784, 1776,
     1785, 1777, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1794,
     1794, 1783, 1795, 1796, 1796, 1797, 1797, 1798, 1799, 1800,
     1801, 1802, 1803, 1803, 1794, 1804, 1805, 1805, 1796, 1806,
     1807, 1808, 1809, 1809, 1810, 1811, 1812, 1803, 1813, 1814,
     1815, 1805, 1817, 1818, 1819, 1820, 1823, 1809, 1821, 1821,
     1824, 1817, 1822, 1822, 1825, 1826, 1827, 1828, 1829, 1830,
     1830, 1831, 1831, 1821, 1832, 1832, 1833, 1833, 1834, 1835,

     1836, 1837, 1838, 1830, 1839, 1839, 1840, 1840, 1832, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1847, 1849, 1839, 1848,
     1848, 1850, 1851, 1852, 1853, 1853, 1854, 1855, 1856, 1857,
     1858, 1859, 1859, 1848, 1860, 1861, 1862, 1863, 1853, 1864,
     1865, 1865, 1866, 1866, 1867, 1859, 1868, 1869, 1869, 1870,
     1870, 1871, 1871, 1875, 1865, 1872, 1872, 1873, 1873, 1874,
     1874, 1876, 1869, 1877, 1877, 1880, 1871, 1878, 1878, 1879,
     1879, 1881, 1873, 1882, 1883, 1884, 1885, 1887, 1877, 1886,
     1886, 1888, 1878, 1889, 1879, 1890, 1891, 1892, 1893, 1894,
     1894, 1895, 1895, 1896, 1896, 1897, 1898, 1898, 1899, 1899,

     1900, 1901, 1902, 1903, 1894, 1904, 1895, 1905, 1905, 1906,
     1906, 1898, 1907, 1907, 1908, 1909, 1909, 1910, 1911, 1912,
     1912, 1913, 1905, 1914, 1915, 1916, 1917, 1907, 1918, 1918,
     1909, 1919, 1919, 1920, 1921, 1922, 1922, 1923, 1923, 1924,
     1925, 1926, 1926, 1918, 1927, 1927, 1928, 1933, 1924, 1929,
     1929, 1934, 1923, 1930, 1930, 1936, 1926, 1931, 1931, 1932,
     1932, 1935, 1935, 1937, 1929, 1938, 1939, 1939, 1940, 1941,
     1941, 1943, 1931, 1944, 1944, 1939, 1942, 1942, 1945, 1946,
     1947, 1939, 1941, 1948, 1948, 1942, 1944, 1949, 1950, 1950,
     1952, 1942, 1948, 1951, 1951, 1953, 1954, 1955, 1956, 1957,

     1958, 1959, 1960, 1950, 1961, 1961, 1962, 1962, 1963, 1964,
     1964, 1965, 1966, 1967, 1968, 1969, 1970, 1970, 1972, 1961,
     1971, 1971, 1973, 1973, 1974, 1974, 1975, 1976, 1977, 1978,
     1978, 1970, 1979, 1979, 1980, 1981, 1982, 1973, 1983, 1985,
     1986, 1987, 1988, 1989, 1978, 1990, 1991, 1991, 1992, 1993,
     1994, 1994, 1997, 1995, 1996, 1996, 1998, 1998, 1999, 1999,
     2000, 2000, 2001, 2002, 1994, 1995, 2003, 2004, 1996, 2005,
     1998, 2006, 2006, 2007, 2008, 2009, 2010, 2011, 2011, 2012,
     2013, 2013, 2014, 2014, 2015, 2016, 2017, 2018, 2019, 2019,
     2021, 2011, 2020, 2020, 2013, 2022, 2023, 2024, 2025, 2026,

     2026, 2028, 2019, 2027, 2027, 2015, 2029, 2030, 2031, 2032,
     2033, 2033, 2034, 2026, 2035, 2036, 2036, 2037, 2037, 2038,
     2038, 2039, 2040, 2041, 2041, 2042, 2042, 2043, 2043, 2044,
     2044, 2045, 2045, 2046, 2046, 2047, 2048, 2049, 2041, 2050,
     2050, 2051, 2043, 2052, 2053, 2054, 2045, 2055, 2056, 2057,
     2058, 2059, 2060, 2060, 2050, 2061, 2061, 2062, 2062, 2063,
     2063, 2064, 2065, 2065, 2066, 2067, 2068, 2060, 2069, 2070,
     2071, 2071, 2062, 2072, 2072, 2073, 2073, 2074, 2075, 2075,
     2076, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2072, 2083,
     2084, 2084, 2086, 2075, 2085, 2085, 2087, 2087, 2088, 2088,

     2089, 2090, 2091, 2092, 2092, 2093, 2094, 2094, 2096, 2085,
     2097, 2087, 2095, 2095, 2098, 2099, 2100, 2101, 2101, 2102,
     2102, 2103, 2104, 2104, 2105, 2105, 2106, 2107, 2108, 2109,
     2110, 2110, 2102, 2111, 2112, 2113, 2113, 2105, 2114, 2110,
     2115, 2116, 2117, 2118, 2119, 2120, 2121, 2121, 2122, 2123,
     2123, 2124, 2125, 2125, 2126, 2127, 2128, 2129, 2130, 2130,
     2131, 2121, 2132, 2132, 2133, 2134, 2135, 2125, 2136, 2136,
     2137, 2138, 2139, 2140, 2141, 2142, 2144, 2145, 2146, 2147,
     2148, 2149, 2149, 2150, 2150, 2151, 2152, 2153, 2153, 2154,
     2154, 2155, 2156, 2156, 2158, 2149, 2159, 2157, 2157, 2160,

     2157, 2153, 2157, 2161, 2162, 2163, 2156, 2164, 2165, 2165,
     2166, 2167, 2167, 2168, 2168, 2169, 2170, 2170, 2171, 2172,
     2173, 2174, 2165, 2175, 2180, 2167, 2176, 2176, 2172, 2177,
     2177, 2178, 2178, 2172, 2181, 2172, 2179, 2179, 2182, 2182,
     2183, 2184, 2185, 2177, 2186, 2178, 2187, 2188, 2189, 2190,
     2179, 2191, 2192, 2192, 2193, 2193, 2194, 2194, 2195, 2196,
     2197, 2198, 2198, 2199, 2199, 2200, 2201, 2202, 2203, 2204,
     2205, 2206, 2207, 2207, 2208, 2211, 2198, 2209, 2209, 2210,
     2210, 2212, 2212, 2213, 2214, 2215, 2216, 2207, 2217, 2217,
     2218, 2219, 2219, 2220, 2221, 2222, 2212, 2223, 2224, 2225,

     2226, 2227, 2227, 2228, 2228, 2229, 2230, 2230, 2231, 2232,
     2232, 2233, 2234, 2235, 2236, 2237, 2227, 2238, 2239, 2240,
     2240, 2241, 2242, 2242, 2232, 2243, 2244, 2245, 2246, 2246,
     2247, 2247, 2248, 2249, 2251, 2252, 2253, 2253, 2254, 2254,
     2255, 2256, 2256, 2246, 2257, 2257, 2258, 2259, 2260, 2260,
     2262, 2253, 2263, 2254, 2261, 2261, 2256, 2264, 2265, 2266,
     2266, 2267, 2268, 2260, 2269, 2270, 2271, 2272, 2273, 2274,
     2275, 2276, 2277, 2278, 2266, 2280, 2281, 2281, 2282, 2283,
     2284, 2284, 2285, 2286, 2286, 2287, 2286, 2288, 2286, 2289,
     2290, 2291, 2292, 2300, 2285, 2293, 2293, 2294, 2294, 2295,

     2295, 2296, 2296, 2297, 2297, 2298, 2298, 2299, 2299, 2293,
     2301, 2294, 2302, 2295, 2303, 2296, 2304, 2305, 2306, 2298,
     2307, 2308, 2309, 2309, 2310, 2310, 2311, 2311, 2312, 2312,
     2313, 2313, 2314, 2314, 2315, 2316, 2309, 2317, 2318, 2319,
     2311, 2320, 2321, 2322, 2313, 2323, 2324, 2325, 2326, 2327,
     2328, 2328, 2329, 2329, 2330, 2331, 2331, 2332, 2333, 2334,
     2334, 2335, 2335, 2336, 2339, 2328, 2337, 2337, 2338, 2338,
     2331, 2340, 2341, 2341, 2334, 2343, 2335, 2342, 2342, 2344,
     2345, 2337, 2346, 2347, 2347, 2348, 2349, 2341, 2350, 2351,
     2352, 2353, 2354, 2355, 2355, 2356, 2357, 2360, 2347, 2358,

     2358, 2359, 2359, 2361, 2362, 2362, 2363, 2364, 2365, 2366,
     2367, 2368, 2370, 2374, 2358, 2371, 2371, 2372, 2372, 2362,
     2373, 2373, 2375, 2376, 2377, 2378, 2378, 2379, 2379, 2382,
     2371, 2380, 2380, 2381, 2381, 2383, 2383, 2384, 2385, 2387,
     2378, 2386, 2386, 2389, 2390, 2394, 2380, 2391, 2391, 2392,
     2392, 2393, 2393, 2396, 2399, 2401, 2402, 2403, 2404, 2404,
     2405, 2408, 2391, 2406, 2406, 2409, 2393, 2407, 2407, 2412,
     2413, 2414, 2415, 2404, 2416, 2416, 2425, 2406, 2427, 2417,
     2417, 2407, 2417, 2428, 2417, 2418, 2418, 2429, 2416, 2419,
     2419, 2430, 2419, 2431, 2419, 2420, 2420, 2421, 2421, 2418,

     2422, 2422, 2423, 2423, 2424, 2424, 2426, 2426, 2432, 2420,
     2433, 2434, 2434, 2435, 2435, 2437, 2423, 2436, 2436, 2438,
     2426, 2439, 2439, 2440, 2441, 2441, 2442, 2443, 2444, 2445,
     2446, 2447, 2448, 2448, 2449, 2439, 2450, 2450, 2441, 2451,
     2451, 2452, 2453, 2453, 2454, 2454, 2455, 2448, 2456, 2457,
     2457, 2450, 2458, 2458, 2459, 2459, 2461, 2453, 2460, 2460,
     2462, 2462, 2463, 2464, 2457, 2465, 2465, 2466, 2468, 2459,
     2467, 2467, 2469, 2470, 2470, 2471, 2471, 2472, 2472, 2473,
     2474, 2474, 2475, 2476, 2476, 2467, 2477, 2477, 2470, 2478,
     2479, 2479, 2472, 2480, 2482, 2474, 2481, 2481, 2476, 2483,

     2486, 2477, 2484, 2484, 2488, 2479, 2485, 2485, 2490, 2491,
     2492, 2493, 2493, 2495, 2496, 2497, 2500, 2484, 2498, 2498,
     2499, 2499, 2501, 2503, 2504, 2505, 2506, 2506, 2507, 2507,
     2508, 2508, 2509, 2510, 2511, 2512, 2513, 2515, 2515, 2516,
     2516, 2517, 2522, 2507, 2518, 2518, 2519, 2519, 2520, 2520,
     2521, 2521, 2515, 2523, 2524, 2525, 2525, 2526, 2518, 2527,
     2528, 2528, 2520, 2528, 2529, 2528, 2530, 2531, 2531, 2525,
     2531, 2532, 2531, 2533, 2534, 2534, 2535, 2535, 2536, 2537,
     2537, 2538, 2538, 2539, 2539, 2540, 2540, 2541, 2542, 2542,
     2543, 2544, 2545, 2537, 2546, 2546, 2547, 2539, 2550, 2540,

     2548, 2548, 2542, 2549, 2549, 2551, 2551, 2555, 2546, 2553,
     2552, 2552, 2557, 2552, 2548, 2552, 2554, 2554, 2561, 2551,
     2565, 2553, 2556, 2556, 2558, 2558, 2559, 2559, 2560, 2560,
     2554, 2562, 2562, 2563, 2563, 2564, 2564, 2556, 2566, 2558,
     2569, 2559, 2567, 2567, 2568, 2568, 2570, 2572, 2563, 2571,
     2571, 2573, 2573, 2574, 2574, 2575, 2576, 2577, 2577, 2578,
     2578, 2579, 2579, 2580, 2571, 2583, 2573, 2581, 2581, 2582,
     2582, 2584, 2584, 2588, 2578, 2585, 2585, 2586, 2586, 2587,
     2587, 2591, 2581, 2589, 2589, 2592, 2584, 2590, 2590, 2593,
     2593, 2595, 2586, 2594, 2594, 2596, 2597, 2598, 2589, 2599,

     2600, 2600, 2602, 2602, 2593, 2604, 2606, 2606, 2607, 2607,
     2608, 2608, 2609, 2610, 2611, 2600, 2612, 2602, 2613, 2614,
     2614, 2606, 2615, 2607, 2616, 2616, 2617, 2617, 2618, 2618,
     2619, 2619, 2620, 2621, 2621, 2622, 2622, 2623, 2624, 2624,
     2629, 2635, 2618, 2638, 2619, 2630, 2630, 2621, 2631, 2631,
     2632, 2632, 2624, 2633, 2633, 2634, 2634, 2636, 2636, 2637,
     2637, 2640, 2631, 2639, 2639, 2641, 2641, 2633, 2642, 2642,
     2643, 2636, 2644, 2644, 2645, 2646, 2646, 2639, 2646, 2641,
     2646, 2647, 2648, 2649, 2650, 2651, 2651, 2652, 2652, 2653,
     2654, 2654, 2655, 2655, 2656, 2657, 2657, 2658, 2658, 2651,

     2659, 2659, 2660, 2661, 2661, 2654, 2662, 2662, 2663, 2663,
     2657, 2664, 2664, 2665, 2665, 2666, 2667, 2667, 2661, 2668,
     2668, 2669, 2669, 2663, 2670, 2670, 2664, 2674, 2665, 2671,
     2671, 2667, 2672, 2672, 2673, 2673, 2669, 2675, 2675, 2676,
     2677, 2677, 2678, 2678, 2671, 2679, 2681, 2672, 2680, 2680,
     2682, 2683, 2683, 2684, 2684, 2685, 2686, 2687, 2688, 2690,
     2690, 2691, 2691, 2692, 2692, 2694, 2683, 2693, 2693, 2695,
     2695, 2696, 2696, 2699, 2690, 2697, 2697, 2700, 2692, 2698,
     2698, 2701, 2702, 2703, 2695, 2704, 2705, 2705, 2706, 2706,
     2697, 2707, 2707, 2708, 2708, 2709, 2710, 2710, 2711, 2711,

     2705, 2712, 2712, 2713, 2713, 2707, 2714, 2714, 2715, 2715,
     2716, 2716, 2711, 2717, 2717, 2712, 2718, 2718, 2719, 2722,
     2714, 2720, 2720, 2721, 2721, 2723, 2723, 2717, 2724, 2725,
     2725, 2728, 2729, 2730, 2730, 2720, 2731, 2732, 2732, 2733,
     2734, 2734, 2743, 2725, 2735, 2735, 2736, 2736, 2737, 2737,
     2738, 2738, 2739, 2739, 2740, 2740, 2741, 2741, 2751, 2735,
     2742, 2742, 2752, 2737, 2744, 2744, 2753, 2739, 2745, 2745,
     2754, 2741, 2746, 2746, 2747, 2747, 2748, 2748, 2749, 2749,
     2750, 2750, 2755, 2745, 2756, 2756, 2757, 2758, 2759, 2747,
     2760, 2761, 2761, 2749, 2762, 2762, 2764, 2764, 2765, 2765,

     2767, 2768, 2769, 2770, 2771, 2772, 2772, 2773, 2773, 2774,
     2775, 2775, 2776, 2776, 2777, 2777, 2778, 2778, 2779, 2779,
     2780, 2780, 2781, 2781, 2775, 2782, 2783, 2783, 2784, 2785,
     2778, 2786, 2786, 2790, 2780, 2787, 2787, 2788, 2788, 2789,
     2789, 2791, 2792, 2792, 2802, 2786, 2793, 2793, 2794, 2794,
     2803, 2788, 2804, 2789, 2795, 2795, 2805, 2792, 2796, 2796,
     2797, 2797, 2798, 2798, 2799, 2799, 2800, 2800, 2801, 2801,
     2806, 2808, 2809, 2812, 2819, 2797, 2815, 2815, 2816, 2816,
     2817, 2817, 2820, 2801, 2818, 2818, 2821, 2821, 2822, 2822,
     2815, 2823, 2823, 2824, 2824, 2825, 2825, 2826, 2826, 2836,

     2821, 2827, 2827, 2828, 2828, 2823, 2829, 2829, 2839, 2825,
     2830, 2830, 2831, 2831, 2840, 2827, 2832, 2832, 2828, 2833,
     2833, 2834, 2834, 2835, 2835, 2830, 2837, 2837, 2838, 2838,
     2844, 2832, 2842, 2842, 2843, 2843, 2834, 2865, 2835, 2845,
     2845, 2837, 2866, 2838, 2846, 2846, 2842, 2847, 2847, 2848,
     2848, 2849, 2849, 2845, 2850, 2850, 2851, 2851, 2846, 2852,
     2852, 2853, 2853, 2854, 2854, 2855, 2855, 2868, 2850, 2856,
     2856, 2857, 2857, 2880, 2852, 2858, 2858, 2859, 2859, 2860,
     2860, 2861, 2861, 2881, 2856, 2862, 2862, 2863, 2863, 2882,
     2858, 2864, 2864, 2885, 2860, 2886, 2861, 2867, 2867, 2869,

     2869, 2887, 2863, 2870, 2870, 2871, 2871, 2872, 2872, 2873,
     2873, 2874, 2874, 2869, 2875, 2875, 2876, 2876, 2877, 2877,
     2878, 2878, 2879, 2879, 2883, 2883, 2884, 2884, 2888, 2888,
     2890, 2876, 2889, 2889, 2891, 2891, 2892, 2892, 2893, 2893,
     2894, 2894, 2895, 2888, 2896, 2896,  798, 2889,  797, 2891,
     2897, 2897,  796, 2893, 2898, 2898, 2899, 2899, 2900, 2900,
     2901, 2901,  791,  790,  789,  788,  784,  782, 2898,  781,
     2899, 2903, 2903, 2903, 2903, 2904, 2904, 2904, 2904, 2905,
     2905, 2905, 2905, 2906, 2906, 2906, 2906, 2907, 2907, 2907,
     2907, 2908, 2908, 2908, 2908, 2909, 2909, 2909, 2909, 2910,

      779, 2910, 2910, 2911, 2911,  778, 2911, 2912, 2912, 2912,
      777,  775,  774,  771,  770,  769,  768,  766,  765,  764,
      763,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  745,  744,  743,  741,  738,  737,  736,  735,
      734,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      723,  721,  718,  717,  716,  714,  713,  712,  711,  709,
      707,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  693,  687,  686,  684,  681,  680,  679,  678,  677,
      676,  673,  672,  671,  670,  666,  665,  664,  663,  662,
      661,  660,  658,  657,  656,  653,  652,  648,  647,  646,

      645,  642,  641,  640,  639,  638,  637,  636,  635,  633,
      631,  630,  629,  626,  625,  624,  623,  622,  620,  618,
      613,  611,  610,  608,  607,  606,  604,  603,  602,  601,
      595,  593,  592,  591,  588,  587,  586,  583,  582,  581,
      579,  575,  574,  572,  571,  568,  567,  566,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  550,  549,  548,
      545,  544,  543,  539,  538,  537,  536,  535,  531,  530,
      529,  528,  527,  526,  525,  524,  520,  519,  518,  517,
      514,  513,  512,  511,  510,  509,  508,  507,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  494,  489,

      487,  486,  484,  483,  482,  480,  479,  478,  477,  471,
      470,  469,  468,  465,  464,  463,  462,  461,  460,  458,
      454,  453,  452,  449,  448,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  433,  429,  428,
      425,  422,  421,  420,  419,  418,  417,  414,  413,  412,
      411,  408,  405,  404,  403,  400,  399,  398,  397,  396,
      391,  390,  389,  388,  387,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  369,
      368,  367,  365,  364,  363,  360,  359,  357,  356,  355,
      354,  353,  351,  349,  347,  346,  345,  342,  341,  339,

      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      327,  325,  324,  321,  318,  317,  316,  315,  314,  313,
      310,  309,  308,  307,  304,  303,  302,  301,  298,  297,
      296,  295,  294,  291,  290,  289,  288,  287,  286,  285,
      284,  282,  281,  280,  278,  277,  276,  275,  274,  273,
      272,  270,  269,  268,  264,  261,  260,  259,  258,  257,
      256,  254,  253,  252,  250,  249,  248,  247,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  214,  213,  212,  210,  209,  208,  207,  203,  202,

      201,  200,  199,  198,  197,  196,  194,  193,  192,  190,
      189,  188,  187,  186,  185,  183,  182,  181,  177,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  163,
      162,  161,  160,  158,  155,  147,  143,  140,  138,  133,
      132,  131,  130,  129,  128,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  115,  113,  112,  111,  109,
      108,  107,  105,  101,  100,   99,   96,   88,   84,   81,
       77,   70,   69,   66,   62,   60,   59,   58,   57,   55,
       54,   53,   49,   44,   41,   33,   32,   28,   25,   23,
       19,   14,   13,    8,    7,    6,    5, 2902, 2902, 2902,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[353] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[352] =
    {   0,
      126,  130,  131,  132,  133,  135,  151,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  188,  189,  191,
      192,  193,  194,  195,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  220,  221,  222,  223,  227,  228,  229,  230,
      231,  232,  233,  236,  237,  238,  239,  241,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  261,  262,  263,

      264,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
      286,  289,  290,  291,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  311,  312,  313,  314,  329,  330,  331,  332,  334,
      335,  337,  338,  339,  340,  342,  343,  344,  345,  347,
      348,  349,  350,  352,  353,  354,  355,  357,  358,  359,
      360,  362,  363,  364,  365,  367,  368,  369,  370,  371,
      372,  373,  374,  375,  376,  377,  378,  379,  383,  384,
      385,  386,  388,  389,  390,  391,  393,  394,  395,  396,

      398,  399,  400,  401,  405,  406,  407,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  431,
      432,  433,  434,  435,  436,  437,  438,  439,  440,  441,
      442,  443,  444,  445,  451,  453,  455,  456,  457,  458,
      459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
      469,  470,  471,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
      499,  500,  501,  502,  503,  504,  505,  506,  508,  509,

      510,  511,  512,  513,  515,  516,  517,  518,  519,  520,
      521,  522,  523,  524,  525,  526,  527,  528,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  548,  549,  550,  551,  556,  557,
      559,  560,  561,  562,  564,  565,  566,  567,  569,  570,
      572
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file OSParseosil.l.1
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 *
 * \remarks
 * Copyright (C) 2005-2014, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosil.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosil.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosil.l"

#define OSILPARSERDEBUG

#ifdef OSILPARSERDEBUG
	#define YY_PRINT  printf("matched %i characters: %s\n", yyleng, yytext);
#else     
	#define YY_PRINT;
#endif

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSiLParserData.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;









#line 114 "../../../../OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 2717 "../../../../OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define osilattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 124 "../../../../OS/src/OSParsers/OSParseosil.l"

 
#line 3037 "../../../../OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2903 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4698 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 352 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 352 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 353 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 133 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 135 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	} 
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRICESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXTERMSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFMATRIXEXPRATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXIDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBMATRIXIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LBCONEIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBMATRIXIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(UBCONEIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TEMPLATEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEMATRIXIDXATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORDERCONEIDXATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTMATRIXIDXATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NORMSCALEFACTORATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DISTORTIONMATRIXIDXATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(AXISDIRECTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FIRSTAXISDIRECTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SECONDAXISDIRECTIONATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYIDATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSHAPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SHAPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSEMIDEFINITENESSATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SEMIDEFINITENESSATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATASTARTEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <matrices> and <cones> */
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRICESEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONESEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONNEGATIVECONEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONPOSITIVECONEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ORTHANTCONEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(QUADRATICCONEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONESTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROTATEDQUADRATICCONEEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONESTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(SEMIDEFINITECONEEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONESTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PRODUCTCONEEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INTERSECTIONCONEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(DUALCONEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(POLARCONEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(FACTORSEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COMPONENTSEND);}
	YY_BREAK
/* patterns for <matrixProgramming> */
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXPROGRAMMINGEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARIABLESEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVARSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXVAREND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJECTIVESEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXOBJEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTRAINTSEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXCONEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXTERMEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRESSIONSEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPRSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEXPREND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> */
/*
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosil.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVALUESATT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTSTART);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDETERMINANTEND);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(MATRIXREFERENCESTART);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXREFERENCEEND);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTSTART);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXPRODUCTEND);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXSTART);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IDENTITYMATRIXEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosil.l */
/* environments and comments */
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosil.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 342:
#line 561 "../../../../OS/src/OSParsers/OSParseosil.l"
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 346:
#line 566 "../../../../OS/src/OSParsers/OSParseosil.l"
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 567 "../../../../OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 572 "../../../../OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 5310 "../../../../OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2903 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2903 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2902);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void osil_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
/* %if-c-only */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void osilpop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void osilensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 584 "../../../../OS/src/OSParsers/OSParseosil.l"




