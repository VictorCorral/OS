#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 290
#define YY_END_OF_BUFFER 291
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2216] =
    {   0,
        1,    1,  288,  288,  286,  286,  287,  287,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  291,  289,
        1,    2,  276,    2,  276,    6,  276,    5,  289,    4,
      276,  276,    2,  288,  290,  286,  287,  277,  279,  280,
      279,  283,  284,  283,    1,  276,  276,    6,  276,    5,
        0,    4,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,    3,
        6,    6,  276,    7,    5,    0,    0,  282,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,  276,  276,

      288,  286,  287,  277,    0,  285,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,  281,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  278,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,    0,    0,    0,    0,    0,  226,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  218,    0,    0,
        0,    0,    0,    0,  220,  276,  276,  276,  276,  276,

      276,  276,   27,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,   98,   99,  276,  276,
      276,  276,  276,  276,  276,  276,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,  156,    0,    0,    0,  276,  276,
      276,  276,  276,  276,  276,   27,  276,  102,  276,  276,
      276,  276,  276,  103,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,    0,    0,    0,    0,    0,    0,    0,  235,    0,
        0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  227,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  219,    0,

        0,    0,    0,    0,    0,    0,    0,  221,    0,    0,
        0,    0,    0,    0,  200,  250,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  253,  128,    0,    0,    0,    0,    0,    0,
        0,    0,  257,    0,    0,    0,  106,  105,  142,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  276,  276,  276,  276,  276,   96,
       97,  276,  102,  276,  276,  276,  276,  103,  276,   56,
       57,  276,  276,  276,  276,  276,  276,  276,   72,   73,
      276,  276,  276,   82,   83,  276,  276,  276,  276,    0,

        0,    0,    0,    0,    0,    0,  235,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  254,  117,    0,    0,    0,    0,    0,    0,
        0,    0,  258,  227,    0,    0,    0,    0,  107,    0,
        0,    0,    0,  167,    0,    0,    0,    0,    0,    0,
      219,    0,    0,    0,    0,    0,  157,    0,    0,  221,
        0,    0,    0,    0,    0,    0,  248,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  208,  255,  253,    0,    0,    0,  244,    0,    0,
        0,    0,  259,  257,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      112,    0,    0,    0,  276,  276,  276,  276,  276,  276,
      276,  276,  276,   54,   55,  276,  276,  276,  104,  276,
      276,  276,   28,  276,   66,   67,  276,  276,   80,   81,
      276,   86,   87,  276,  276,  276,    0,    0,    0,    0,
        0,    0,  201,    0,  251,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  254,    0,  129,    0,    0,    0,    0,    0,    0,
        0,  258,    0,    0,    0,  107,    0,  143,    0,    0,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  157,    0,    0,    0,    0,  202,  204,    0,
        0,    0,  138,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,  255,    0,    0,  132,  158,
        0,    0,    0,    0,  259,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  190,    0,    0,  114,    0,    0,
        0,    0,    0,  261,    0,  212,    0,    0,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  104,  276,   64,   65,   28,  276,  276,  276,
      276,   84,   85,  276,  276,  276,   94,   95,    0,    0,
        0,    0,    0,  201,  251,    0,  249,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  209,  129,    0,    0,    0,  245,    0,    0,
        0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,    0,    0,  113,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      273,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  136,  178,    0,    0,    0,    0,    0,    0,
        0,    0,  263,  261,    0,    0,  134,    0,  276,  276,

      276,   38,   39,  276,  276,  276,  276,  276,  276,   50,
       51,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,   60,   61,   62,   63,  276,  276,  276,
       78,   79,  276,   90,   91,   92,   93,    0,    0,  203,
        0,  205,    0,    0,  249,    0,    0,  139,    0,    0,
        0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  209,    0,  274,    0,
      133,  245,    0,  159,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  191,    0,    0,
        0,    0,  115,    0,    0,    0,    0,    0,  262,    0,

      113,    0,  213,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  275,  273,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      263,    0,    0,  192,  276,   34,   35,   36,   37,  276,
      276,   46,   47,  276,  276,   48,   49,  276,  276,  100,
      101,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,   58,   59,  276,  276,   76,   77,   88,
       89,    0,  203,  205,    0,    0,    0,  139,    0,    0,

        0,    0,    0,    0,    0,  111,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  274,  133,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      137,    0,  179,  191,    0,    0,    0,    0,  115,    0,
        0,    0,    0,    0,    0,  213,    0,  135,    0,  206,
        0,  246,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  275,    0,    0,    0,    0,    0,    0,  222,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,    0,    0,    0,  210,   32,   33,  276,   44,   45,

      276,  276,  276,  276,  276,   10,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
      179,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  135,    0,  193,    0,  230,    0,    0,    0,  242,
        0,    0,  172,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  148,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  122,

        0,    0,    0,    0,  276,  276,  276,   29,  276,   30,
      276,  276,   25,  276,   10,  276,  276,  276,  276,   23,
      276,  276,  276,  276,  276,   21,  276,  276,   20,  276,
      276,  276,   31,    0,  207,    0,    0,  247,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  223,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  121,    0,    0,    0,    0,  211,  193,
        0,  162,    0,    0,  265,    0,    0,    0,  269,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  124,    0,

        0,  252,    0,  150,  144,    0,    0,  256,  118,  108,
      140,    0,    0,    0,    0,    0,    0,  240,    0,    0,
        0,  276,   42,   43,   29,   30,  276,  276,   25,  276,
      276,  276,  276,   23,  276,  276,  276,  276,  276,   21,
      276,   20,  276,  276,   31,  207,    0,  247,    0,  231,
        0,    0,  266,    0,    0,  243,    0,  270,    0,    0,
      173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  149,    0,    0,  223,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  123,  121,    0,
        0,    0,  211,    0,  267,  265,    0,    0,  271,  269,

        0,  186,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  252,    0,  146,  256,    0,    0,    0,    0,    0,
      168,  238,    0,    0,    0,   40,   41,  276,   53,   52,
      276,  276,  276,   13,  276,  276,  276,  276,  276,  276,
      276,   12,  276,  276,  276,  276,  276,    0,  231,    0,
      163,  266,    0,  243,  270,    0,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  125,    0,    0,  151,
      149,    0,  145,    0,    0,  119,    0,  109,    0,  141,
        0,    0,    0,    0,    0,    0,  123,    0,  241,    0,
        0,    0,    0,  267,    0,    0,    0,  271,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,    0,    0,  276,  276,   13,
      276,    9,  276,  276,  276,  276,  276,  276,   12,  276,
      276,  276,  276,   75,   74,    0,  163,    0,    0,    0,
      187,    0,    0,    0,    0,    0,    0,    0,    0,  125,
        0,  151,  145,    0,  147,  119,  109,  141,    0,    0,
        0,    0,    0,    0,  169,  241,    0,  239,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  188,    0,    0,
        0,    0,  276,  276,    9,  276,  276,  276,  276,  276,

      276,  276,  276,  276,    0,    0,    0,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  147,    0,    0,
        0,    0,    0,  169,  239,    0,  131,    0,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
      126,    0,    0,    0,    0,    0,    0,    0,    0,  260,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  189,    0,    0,  131,
        0,    0,    0,  170,    0,    0,    0,  236,    0,    0,
        0,    0,    0,    0,    0,  182,    0,    0,    0,  260,

      276,  276,  276,  276,  276,  276,  276,  276,   14,  276,
       15,  276,  276,   16,    0,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  177,    0,  127,    0,
        0,    0,  189,    0,    0,    0,    0,    0,    0,  198,
        0,    0,    0,    0,    0,    0,    0,  272,    0,  160,
        0,    0,  276,  276,  276,   17,  276,  276,  276,  276,
       14,   15,  276,   16,  153,    0,    0,  171,    0,    0,
        0,  237,    0,    0,    0,    0,  177,  127,    0,    0,
        0,  183,    0,    0,    0,    0,  184,    0,    0,    0,
        0,    0,    0,    0,  272,    0,  164,    0,  276,   18,

      276,   17,  276,  276,  276,  276,  276,    0,  171,    0,
      199,    0,  237,    0,    0,    0,    0,    0,    0,  183,
        0,  161,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,  276,   11,  276,  276,  276,
        8,  276,  276,    0,  185,  199,    0,    0,    0,    0,
        0,    0,    0,  161,    0,  165,    0,    0,    0,    0,
        0,    0,  194,    0,    0,    0,    0,   11,  276,  276,
        8,  276,  276,   26,  185,    0,    0,    0,    0,    0,
        0,    0,  165,    0,    0,    0,    0,  228,  224,    0,
      174,    0,    0,    0,  276,  276,  276,   26,    0,    0,

        0,    0,  195,    0,    0,    0,    0,    0,    0,    0,
      232,    0,    0,  180,    0,  276,  276,  276,    0,    0,
      229,    0,  225,  195,    0,    0,  175,    0,    0,    0,
        0,    0,    0,    0,    0,  276,  276,  276,    0,  233,
      229,  225,    0,  175,    0,    0,  181,    0,    0,    0,
        0,    0,    0,  276,  276,  276,  233,    0,    0,  181,
        0,    0,  264,    0,  268,    0,    0,    0,  276,  276,
      276,    0,    0,    0,  264,  268,  196,    0,  216,  276,
      276,  276,    0,    0,    0,    0,  276,  276,  276,   19,
        0,  197,    0,    0,  217,    0,  276,  276,   22,   19,

      197,    0,  217,    0,  276,   24,   22,    0,  214,   24,
        0,    0,  215,  215,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2228] =
    {   0,
        0,   65, 3425, 3424, 3435, 3434, 3431, 3430,    0,    0,
        0,    0, 3421, 3420,   13,   17,    3,    5, 3434, 3443,
      129, 3428,  192, 3425,   19,   38, 3414,   84,  250,   25,
     3400, 3390, 3443,    0, 3443,    0,    0,    0, 3443, 3443,
     3419, 3443, 3443, 3410,    0,    0,   24,   90, 3409,  216,
       35,   40, 3395, 3385,    6, 3380, 3370, 3365, 3364,    4,
        8,   25,   32, 3379,   10,   52,   33, 3379, 3374, 3443,
       52,  244,  105, 3443,   86, 3407,  272, 3443, 3357,    8,
     3361,   64,   49, 3366, 3369,   64, 3358, 3363,   81, 3370,
      156,   70, 3365,  168, 3344,   72, 3367,  195, 3382, 3374,

        0,    0,    0,    0, 3386, 3443, 3344, 3349, 3343, 3340,
     3345, 3344, 3334, 3354,  179, 3353, 3344, 3342, 3340, 3339,
     3341, 3324,  175,  260, 3348, 3332,  187, 3338,  214, 3337,
      259,  272, 3374, 3324,   84, 3328,  222,  227, 3333, 3336,
      281, 3325, 3330,  173, 3337,  287,  184, 3332,  294, 3311,
      203, 3334,  260, 3315, 3318, 3318,  224, 3313, 3443, 3309,
     3317, 3314,  301, 3342, 3321, 3323, 3321,  278, 3309, 3309,
     3311, 3300, 3304, 3310, 3297,  277, 3301, 3298, 3296,  292,
     3297, 3293, 3295, 3299, 3304, 3290,  358, 3443, 3302, 3309,
     3302, 3291, 3290, 3281,  360, 3283, 3279, 3298, 3297, 3292,

     3276, 3290, 3292, 3296, 3287, 3269, 3303,  362,  364, 3275,
     3283, 3266, 3285, 3265, 3263, 3286, 3275, 3443,  346, 3262,
     3265, 3265,  226, 3260,  370, 3256, 3264, 3261,  323, 3289,
     3268, 3270, 3268,  292, 3256, 3256, 3258, 3247, 3251, 3257,
     3244,  326, 3248, 3245, 3243,  329, 3244, 3240, 3242, 3246,
     3251, 3237, 3237, 3238, 3236,  309, 3248,  332, 3245, 3246,
     3243, 3234, 3241, 3240, 3224, 3222, 3222, 3236, 3222, 3226,
     3251, 3232, 3218, 3238,  371, 3229, 3228, 3223, 3219, 3225,
     3213, 3209, 3219, 3223, 3204, 3202, 3201, 3223, 3203, 3215,
     3199, 3213, 3203, 3198, 3206, 3207, 3188, 3194, 3214,  391,

     3194,  393,  395,  399, 3208, 3196, 3187, 3224,  401,  403,
     3200, 3179, 3210, 3197, 3197,  409, 3443, 3443, 3181,  418,
     3198, 3186,  420, 3192, 3171, 3187, 3177, 3178, 3176,  381,
     3188,  423, 3185, 3186, 3183,  427,  429, 3174, 3181, 3180,
     3164, 3162, 3162, 3176, 3162, 3166,  435, 3173, 3159, 3179,
      421, 3170,  444, 3165, 3161, 3167, 3155, 3151, 3161, 3165,
     3146, 3144, 3143,  446, 3146, 3158, 3142, 3156, 3146, 3141,
      451, 3137, 3134, 3140,   96, 3152, 3143, 3133, 3151, 3137,
     3132, 3146, 3143,  388, 3129, 3137, 3125, 3143, 3136, 3137,
      453, 3158, 3126, 3130, 3129, 3143, 3127, 3130,  455, 3131,

      382,  471, 3115, 3111, 3108, 3136, 3124,  396, 3119, 3122,
     3125, 3122, 3106, 3118, 3443, 3107, 3129, 3119, 3104, 3102,
     3108, 3091,  473,  488, 3115,  475,  483,  494, 3102, 3092,
     3103, 3096,  498,  500,  502,  504, 3092, 3093, 3102, 3089,
     3082, 3089,  510,  514, 3092, 3082,  520,  522,  528, 3086,
     3081, 3079, 3076, 3082,  453, 3094, 3085,  530,  532, 3075,
     3093, 3079, 3074, 3088,  535, 3085,  451, 3071, 3079, 3067,
     3085, 3078, 3079,  537,  539,  543, 3100, 3068, 3072, 3071,
     3085, 3069, 3072,  546,  548,  550, 3073,  441,  555, 3057,
     3053, 3050,  557, 3067,  422, 3062, 3065,  559,  564, 3068,

     3065, 3049, 3061,  566, 3050, 3072,  568,  575, 3062, 3061,
     3056, 3055, 3084, 3057, 3443, 3038, 3038, 3052, 3050, 3044,
     3032, 3033, 3032, 3052, 3047, 3046,  552, 3032, 3040, 3039,
      577, 3064,  584, 3443,  264, 3018, 3028, 3042, 3020, 3025,
      579, 3058,  589, 3016, 3026, 3020,  595, 3443, 3040, 3012,
     3016, 3029, 3010, 3009, 3009, 3023, 3007, 3006, 3018, 3020,
     3008, 2997, 3018, 3016, 2999, 3011, 2999, 2998,  598, 3443,
     3443, 3008,  604, 3013, 3006, 2995, 2993,  606,  608, 3041,
     3038, 3013, 3000,  614,  616,  618, 2989,  620, 3036, 3033,
     3002, 2995,  626, 3032, 3029,  633,  635, 2992,  641, 2995,

     2990, 2989, 3018, 2991,  643,  645,  648, 2973, 2987, 2985,
     2979, 2967, 2968, 2967, 2987, 2982, 2981,  572, 2967, 2975,
     2974,  650,  652,  656,  661,  615, 2954, 2964, 2978, 2956,
     2961,  663,  666,  668, 2953, 2963, 2957,  671,  673,  679,
     2950, 2954,  681,  683, 2967, 2948, 2947, 2947, 2961, 2945,
      687, 2944, 2956, 2958, 2946,  689,  691, 2935, 2956,  697,
     2954, 2943, 2936, 2935, 2971, 2931, 3443, 2949, 2929, 2943,
     2931, 2931, 2944, 2939, 2928, 2930, 2929, 2931, 2930, 2935,
     2919, 3443,  701,  705, 2963, 2930, 2929, 3443, 2928,  667,
     2921, 2916,  709,  711, 2957, 2920, 2902, 2941, 2910,  603,

     2907, 2915, 2904, 2902, 2916, 2915,  674, 2910,  713, 2917,
     3443, 2903, 2903, 2902, 2883,  715, 2882, 2850, 2844, 2851,
      719, 2837, 2825, 3443, 3443, 2843,  725,  730,  734,  736,
      740,  746,  748, 2830, 3443, 3443,   23,  751, 3443, 3443,
      753,   95,  129,  761,  763,  766,   97,  143,  185,  229,
      209,  772,  778,  780,  782,  784,  260,  260,  300,  321,
      332,  360,  367,  360,  368,  377,  404,  412,  421,  423,
      788,  790,  792,  796,  441,  467,  800,  472,  689,  471,
      475,  804,  496,  491,  540,  808,  810,  812,  530,  618,
      546,  816,  567,  604,  619,  636,  644,  694,  648,  818,

      695,  820,  822,  688,  693,  707,  712, 3443, 3443,  714,
      714,  725, 3443,  724,  720,  732,  738,  761,  787, 3443,
      809,  748,  776,  788,  795,  831,  789,  836, 3443, 3443,
      782,  788,  809,  788,  846,  793,  790,  812,  809,  796,
      808,  809,  815,  802,  816,  817,  819,  832,  809,  811,
      826,  864,  852,  868,  815, 3443,  830,  831,  874,  876,
      882,  833,  891,  837,  836,  893,  895,  853,  901,  888,
      913,  921,  903,  928,  886,  892,  909,  843,  868,  934,
      936, 3443, 3443,  942,  944,  950,  916,  920,  885,  957,
      959,  887,  884,  961,  963,  965,  967,  895,  969,  896,

      896,  900,  915,  936,  956,  976,  968,  924,  931,  940,
      947,  989,  992,  994,  998, 1000, 1005, 1007, 1009,  931,
      944,  970,  957,  954,  977,  975, 1017,  963,  976,  977,
      983,  971, 1026,  987,  989, 1030,  980,  982,  997, 1035,
     1037,  984, 1042, 1046, 1048,  999, 1003,  995, 1002, 1008,
     1004, 1016, 1011, 1014, 1015, 1005, 1021, 1028, 1029, 1017,
     1012, 1032, 1034, 1031, 1032, 1048, 1038, 1021, 1078, 1065,
     1081, 1034, 1043, 1033, 1025, 1051, 1048, 1034, 1054, 1047,
     1041, 1048, 3443, 3443, 1042, 1058, 1080, 1063, 1071, 1047,
     1081, 1067, 1106, 1108, 1101, 1066, 3443, 1057, 1113, 1115,

     1123, 1114, 1114, 1071, 1129, 1131, 1081, 1076, 1137, 1132,
     1134, 1080, 1144, 1146, 1097, 1102, 1097, 1103, 1117, 1120,
     1127, 1122, 1160, 1159, 1159, 3443, 3443, 1133, 1110, 1176,
     1165, 1164, 1182, 1167, 1166, 3443, 3443, 1116, 1188, 1190,
     1192, 1194, 1125, 1135, 1196, 1134, 1198, 1200, 1147, 1157,
     1159, 1160, 1150, 1167, 1172, 1210, 1214, 1175, 1165, 1160,
     1180, 1182, 1179, 1180, 1196, 1186, 1226, 1228, 1230, 1232,
     1234, 1236, 1238, 1240, 1193, 1203, 1193, 1185, 1207, 1193,
     1213, 1206, 1198, 1206, 1255, 1257, 1259, 1261, 1208, 1224,
     1246, 1268, 1275, 1229, 1240, 1217, 1254, 1240, 1279, 1236,

     1284, 1286, 1288, 1290, 1227, 1231, 1256, 1234, 1239, 1251,
     1246, 1257, 1248, 1249, 1254, 1256, 1249, 1256, 1270, 1262,
     1255, 1271, 1256, 1261, 1276, 1260, 1274, 1316, 1318, 1311,
     1283, 1281, 1286, 1292, 1276, 1271, 1282, 1288, 1278, 1289,
     1291, 1300, 1302, 1290, 1291, 1288, 1315, 1294, 1290, 1293,
     1342, 1289, 1306, 3443, 1346, 1345, 1345, 3443, 3443, 1302,
     1353, 1352, 1352, 1303, 1319, 3443, 3443, 1309, 1362, 3443,
     3443, 1314, 1368, 1309, 1329, 1333, 1326, 1329, 1318, 1324,
     1344, 1329, 1324, 3443, 3443, 1318, 1339, 3443, 3443, 3443,
     3443, 1320, 1383, 1385, 1350, 1328, 1333, 1390, 1347, 1342,

     1353, 1344, 1345, 1349, 1351, 1399, 1346, 1352, 1366, 1358,
     1351, 1367, 1352, 1357, 1372, 1356, 1411, 1413, 1415, 1379,
     1377, 1382, 1388, 1366, 1377, 1383, 1373, 1384, 1385, 1427,
     1429, 1431, 1433, 1435, 1404, 1406, 1394, 1395, 1443, 1392,
     1422, 1402, 1398, 1401, 1411, 1451, 1453, 1455, 1457, 3443,
     1405, 3443, 1405, 1420, 1412, 1408, 1414, 1411, 1425, 1426,
     1424, 1415, 1423, 1432, 1429, 1419, 1443, 1438, 1429, 1434,
     1431, 1481, 1435, 1443, 1445, 1447, 1442, 1447, 3443, 1438,
     1449, 1441, 1453, 1438, 1443, 1439, 1442, 1449, 1457, 3443,
     1448, 1442, 1460, 1451, 3443, 3443, 3443, 1503, 3443, 3443,

     1505, 1507, 1468, 1510, 1512, 1514, 1467, 1469, 1497, 1522,
     1484, 1483, 1489, 1529, 1473, 1532, 1482, 1537, 1539, 1481,
     1541, 1489, 1504, 1497, 1493, 1499, 1496, 1511, 1512, 1510,
     1502, 1510, 1518, 1515, 1505, 1529, 1525, 1517, 1522, 1527,
     1529, 1531, 1526, 1572, 1523, 1534, 1526, 1539, 1524, 1580,
     1582, 1533, 1529, 1532, 1540, 1548, 1590, 1541, 1535, 1553,
     1595, 1597, 1599, 1601, 1542, 3443, 1549, 1606, 1575, 3443,
     1611, 1553, 3443, 1558, 1560, 1582, 1579, 1582, 1571, 1572,
     1587, 1584, 1590, 1628, 1585, 1577, 3443, 1591, 1571, 1634,
     1586, 1583, 1583, 1583, 1607, 1616, 1605, 1603, 1604, 3443,

     1596, 1596, 1631, 1593, 1651, 1653, 1659, 1661, 1663, 1666,
     1668, 1670, 1674, 1599, 1678, 1616, 1617, 1657, 1680, 1685,
     1644, 1633, 1658, 1648, 1690, 1692, 1654, 1696, 1698, 1663,
     1660, 1702, 1705, 1707, 1711, 1648, 1714, 1717, 1719, 1666,
     1723, 1692, 1726, 1730, 1672, 1732, 1680, 1680, 1702, 1700,
     1703, 1691, 1692, 1707, 1705, 1711, 1695, 1750, 1711, 1691,
     1754, 1756, 1708, 1705, 1705, 1705, 1729, 1738, 1727, 1725,
     1726, 1770, 1772, 1774, 1718, 1725, 1760, 1778, 1780, 1782,
     1765, 3443, 1788, 1771, 1791, 1739, 1798, 1779, 1795, 1759,
     1769, 1748, 1768, 1750, 1771, 1756, 1784, 1756, 3443, 1776,

     1815, 1817, 1780, 3443, 3443, 1779, 1821, 1823, 3443, 3443,
     3443, 1774, 1775, 1782, 1774, 1790, 1776, 1777, 1786, 1780,
     1781, 1837, 1836, 1836, 1843, 1845, 1847, 1849, 1855, 1797,
     1799, 1857, 1804, 1862, 1804, 1846, 1828, 1866, 1813, 1869,
     1818, 1873, 1838, 1877, 1882, 1884, 1860, 1886, 1888, 1892,
     1894, 1896, 1898, 1839, 1900, 1904, 1906, 1912, 1861, 1916,
     1918, 1876, 1856, 1877, 1864, 1884, 1869, 1897, 1869, 1926,
     1890, 1929, 1932, 1934, 1936, 1897, 1939, 1942, 1945, 1948,
     1899, 1901, 1908, 1900, 1916, 1901, 1958, 1961, 1964, 1966,
     1921, 1915, 1970, 1935, 1974, 1976, 1969, 1960, 1982, 1984,

     1971, 3443, 1930, 1951, 1942, 1946, 1944, 1948, 1943, 1950,
     1948, 1998, 1959, 3443, 2001, 1949, 1977, 1957, 1950, 1951,
     3443, 3443, 1967, 1972, 1971, 3443, 3443, 2011, 3443, 3443,
     1976, 1978, 2017, 2019, 2022, 1979, 1974, 1988, 1990, 1983,
     2029, 2032, 1979, 2006, 1989, 2038, 2041, 2008, 2047, 2049,
     2053, 2055, 2032, 2057, 2060, 2062, 2065, 2011, 2031, 2021,
     2025, 2023, 2027, 2022, 2029, 2075, 2078, 2032, 2081, 2083,
     2085, 2087, 2091, 2093, 2097, 2099, 2103, 2105, 2109, 2113,
     2035, 2068, 2053, 2051, 2055, 2115, 2119, 2121, 2125, 2127,
     2076, 2086, 2073, 2131, 2093, 2093, 2098, 2137, 2097, 2103,

     2096, 2086, 2086, 2104, 2105, 2089, 2097, 2108, 2100, 2106,
     2101, 2105, 2121, 2104, 3443, 2106, 2116, 2113, 2103, 2160,
     2162, 2164, 2108, 2117, 2122, 2113, 2116, 2117, 2172, 2133,
     2123, 2136, 2178, 3443, 3443, 2124, 2184, 2141, 2149, 2187,
     2189, 2154, 2147, 2136, 2136, 2154, 2155, 2139, 2147, 2199,
     2160, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2172, 2167,
     2171, 2187, 2170, 2223, 2225, 2227, 2229, 2231, 2233, 2185,
     2199, 2196, 2191, 2193, 2196, 2186, 2193, 2204, 2205, 2212,
     2194, 2209, 2201, 2235, 2214, 2213, 2197, 3443, 2211, 2203,
     2219, 2259, 2211, 2217, 2263, 2224, 2211, 2226, 2223, 2224,

     2215, 2216, 2216, 2218, 2238, 2228, 2230, 2278, 2224, 2231,
     2241, 2242, 2249, 2230, 2245, 2237, 2271, 2289, 2250, 2234,
     2293, 2250, 2242, 2297, 2299, 2301, 2303, 2266, 3443, 2251,
     2266, 2268, 2262, 2254, 2256, 2258, 2297, 2278, 2284, 3443,
     3443, 2264, 2278, 2265, 2280, 2273, 2278, 2280, 2325, 2327,
     2273, 2279, 2276, 2277, 2295, 2284, 2299, 2337, 2341, 2294,
     2343, 2345, 2306, 2307, 2292, 2294, 2297, 2336, 2317, 2323,
     2358, 2361, 2309, 2309, 2324, 2366, 2368, 2321, 2327, 2374,
     2333, 2339, 2323, 3443, 2339, 2327, 2348, 3443, 2333, 2348,
     2338, 2336, 2351, 2389, 2358, 3443, 2351, 2352, 2349, 2395,

     2342, 2348, 2399, 2347, 2346, 2353, 2367, 2406, 2408, 2410,
     2414, 2361, 2416, 2418, 2421, 2425, 2367, 2427, 2374, 2396,
     2432, 2383, 2398, 2389, 2387, 2439, 2443, 2445, 2448, 2404,
     2417, 2451, 2455, 2412, 2416, 2413, 2405, 2420, 2444, 3443,
     2426, 2407, 2417, 2410, 2441, 2419, 2470, 2472, 2423, 3443,
     2420, 2426, 2477, 2424, 2480, 2482, 2447, 2441, 2432, 2440,
     2489, 2492, 2445, 2496, 2498, 2459, 2501, 2503, 2505, 2470,
     2508, 2510, 2455, 2465, 2457, 2488, 2517, 2521, 2469, 2473,
     2525, 2527, 2529, 2476, 2482, 2488, 3443, 2480, 2487, 2486,
     2480, 2497, 2488, 2502, 2542, 2518, 3443, 2503, 2547, 2549,

     2551, 2553, 2510, 2498, 2557, 2518, 2505, 2562, 2566, 2568,
     2572, 2516, 2574, 2520, 2519, 2537, 2528, 2541, 2554, 2584,
     2586, 2588, 2590, 2539, 2540, 2552, 2537, 2555, 2555, 2542,
     2540, 2555, 2549, 2566, 2603, 2606, 2608, 2560, 2570, 2612,
     2614, 2587, 2617, 2621, 2623, 2627, 2562, 2585, 2588, 2575,
     2574, 2589, 2583, 2637, 2639, 2641, 2599, 2587, 2607, 2604,
     2591, 2592, 2616, 2608, 2605, 2593, 2611, 2655, 2597, 2628,
     2658, 2608, 2661, 2663, 2665, 2626, 2613, 2614, 2670, 2631,
     2628, 2616, 2676, 2637, 2634, 2624, 2626, 3443, 3443, 2626,
     3443, 2633, 2643, 2641, 2658, 2636, 2633, 2690, 2637, 2693,

     2695, 2697, 2699, 2645, 2703, 2655, 2665, 2662, 2658, 2660,
     3443, 2659, 2671, 3443, 2672, 2664, 2661, 2674, 2720, 2722,
     2724, 2726, 2728, 2730, 2678, 2733, 2738, 2693, 2742, 2697,
     2694, 2691, 2701, 2711, 2705, 2694, 2706, 2701, 2753, 2755,
     2758, 2760, 2717, 2763, 2729, 2766, 2769, 2727, 2772, 2774,
     2726, 2736, 2722, 2734, 2729, 2732, 2783, 2735, 2745, 2790,
     2732, 2792, 2794, 2796, 2798, 2757, 2756, 2747, 2752, 2754,
     2750, 2763, 2763, 2754, 2812, 2814, 3443, 2767, 3443, 2766,
     2762, 2818, 2820, 2779, 2823, 2781, 2771, 2827, 2829, 2833,
     2836, 2839, 2787, 2844, 2846, 2786, 2848, 2852, 2854, 2856,

     2860, 2794, 2863, 2803, 2867, 2869, 2871, 2810, 3443, 2873,
     2875, 2877, 2879, 2882, 3443, 2894, 2899, 2904, 2909, 2914,
     2919, 2924, 2929, 2934, 2938, 2943, 2948
    } ;

static yyconst flex_int16_t yy_def[2228] =
    {   0,
     2216, 2216, 2217, 2217, 2218, 2218, 2219, 2219, 2220, 2220,
     2220, 2220, 2221, 2221, 2222, 2222, 2223, 2223, 2215, 2215,
     2215, 2215,   21, 2215,   23,   23,   23,   23, 2215, 2215,
       23,   23, 2215, 2224, 2215, 2225, 2226, 2227, 2215, 2215,
     2215, 2215, 2215, 2215,   21,   23,   23,   23,   23,   23,
       29, 2215,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2215,
       23,   23,   23, 2215,   23, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,

     2224, 2225, 2226, 2227, 2215, 2215,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215,   23, 2215,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2215, 2215,   23,   23,
       23,   23,   23,   23,   23,   23, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215,   23,   23,   23,   23,   23, 2215,
     2215,   23,   23,   23,   23,   23,   23,   23,   23, 2215,
     2215,   23,   23,   23,   23,   23,   23,   23, 2215, 2215,
       23,   23,   23, 2215, 2215,   23,   23,   23,   23, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2215, 2215,   23,   23, 2215, 2215,
       23, 2215, 2215,   23,   23,   23, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2215, 2215,   23,   23,   23,   23,
       23, 2215, 2215,   23,   23,   23, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,

       23, 2215, 2215,   23,   23,   23,   23,   23,   23, 2215,
     2215,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215, 2215, 2215,   23,   23,   23,
     2215, 2215,   23, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215,   23, 2215, 2215, 2215, 2215,   23,
       23, 2215, 2215,   23,   23, 2215, 2215,   23,   23, 2215,
     2215,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215,   23,   23, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215,   23, 2215, 2215,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215,   23, 2215, 2215,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215,   23, 2215, 2215,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,   23,
       23,   23,   23,   23, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215,   23,   23,   23,   23, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215,   23,   23,   23, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215,   23,   23,   23, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215,   23,   23,   23, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,   23,
       23, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,   23,
       23,   23, 2215, 2215, 2215, 2215,   23,   23,   23,   23,
     2215, 2215, 2215, 2215, 2215, 2215,   23,   23,   23,   23,

     2215, 2215, 2215, 2215,   23,   23,   23, 2215, 2215,   23,
     2215, 2215, 2215, 2215,    0, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215
    } ;

static yyconst flex_int16_t yy_nxt[3509] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2215,   40,
       44,   41,   44, 2215,   31,   41,   98,   98,   48,   32,
       50,   50,   50,   48, 2215,   50,   50,   50, 2215,   71,
       71,   98,   98,   53,  107,  113,  154,  115,   53,   72,
       72,   72, 2215,   71,   71,  114,  122,  155,  108,   73,
      116,  879,  123,  117,   33,   20,   21,   21,   20,   22,
      119,   24,  127,   25,   26,   27,   28,   28,   28,   29,
       73,   30,   20,  118,  128,   75,   75,   75,   75,   31,
      120,   71,   71,   48,   32,   50,   50,   50,  159,  882,

      160,   72,   72,   72,  124,   73,  157,  125,  176,  513,
      158,   73,  131,  131,  126,  163,  132,  132,  132,  168,
      164,  165,  220,  184,  514,  177,   73,  169,  185,   33,
       45,   45,   73,  221,   46,  883,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  889,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       56,   57,   58,   59,   46,   60,   46,   46,   61,   62,
       63,   64,   46,   46,   46,   65,   66,   67,   68,   69,
       46,   46,   46,   46,   46,  171,   98,   98,  890,  197,

       46,   46,   46,   46,   46,   46, 2215,  212, 2215,  172,
      179,  234,  173,  174,  175,  198,   46,   75,   75,  235,
      180,   46,  242,  213,  206,   48,  181,   50,   50,   50,
      182,  207,   46,   46,   46,   46,   46,   73,   46,  243,
      891,   46,   46,   46,   46,   71,   71,  892,   46,   46,
       46,   46,   46,   76,  250,   72,   72,   72,   73,  251,
       77,  208,  208,  215,  223,   73,  893,   78,  224,  216,
      132,  132,  132,   71,   71,  209,  225,  259,  226,  333,
      260,  253,  334,  132,  132,  132,   73,  254,   79,   80,
       81,   82,   83,   84,   85,  255,   86,   87,  898,   88,

       89,   90,   91,   92,  686,   93,   94,   95,   96,   97,
      134,  135,  136,  137,  138,  139,  140,  899,  141,  142,
      687,  143,  144,  145,  146,  147,  237,  148,  149,  150,
      151,  152,  229,  282,  283,  273,  245,  230,  231,  274,
      238,  287,  900,  239,  240,  241,  246,  265,  288,  349,
      289,  375,  247,  350,  266,  376,  248,  267,  268,   71,
       71,  302,  302,  208,  208,  316,  316,  327,  317,  341,
      318,  336,  336,  328,  901,  303,  342,  209,  363,  343,
      344,  329,  358,  359,  902,  364,  337,  365,  378,  379,
      396,  397,  423,  423,  302,  302,  426,  426,  903,  398,

      427,  427,  433,  433,  435,  435,  424,  523,  303,  904,
      316,  316,  905,  317,  428,  318,  434,  906,  436,  443,
      443,  447,  447,  455,  458,  458,  907,  456,  336,  336,
      465,  465,  545,  444,  546,  448,  475,  475,  554,  459,
      481,  482,  555,  337,  524,  485,  485,  498,  498,  483,
      908,  476,  507,  507,  531,  531,  541,  541,  909,  477,
      486,  910,  499,  532,  647,  542,  603,  508,  648,  533,
      614,  543,  547,  547,  423,  423,  426,  426,  911,  460,
      461,  604,  500,  915,  427,  427,  487,  548,  424,  569,
      569,  636,  570,  637,  571,  573,  573,  509,  428,  433,

      433,  578,  578,  435,  435,  579,  579,  615,  580,  916,
      581,  443,  443,  434,  919,  588,  588,  436,  589,  922,
      590,  447,  447,  593,  593,  444,  594,  923,  595,  596,
      596,  458,  458,  607,  607,  448,  465,  465,  622,  622,
      475,  475,  924,  597,  624,  624,  459,  632,  632,  485,
      485,  634,  634,  623,  925,  476,  638,  638,  643,  643,
      498,  498,  633,  926,  486,  651,  651,  656,  656,  507,
      507,  639,  678,  644,  679,  499,  660,  660,  531,  531,
      541,  541,  657,  928,  508,  684,  684,  532,  645,  542,
      694,  694,  767,  533,  768,  543,  547,  547,  685,  569,

      569,  931,  570,  695,  571,  573,  573,  578,  578,  579,
      579,  548,  580,  932,  581,  728,  728,  730,  730,  732,
      732,  588,  588,  841,  589,  842,  590,  593,  593,  729,
      594,  731,  595,  733,  596,  596,  741,  741,  929,  742,
      930,  743,  745,  745,  752,  752,  754,  754,  597,  607,
      607,  622,  622,  772,  772,  775,  746,  624,  624,  753,
      933,  755,  773,  773,  632,  632,  623,  782,  782,  634,
      634,  776,  638,  638,  786,  786,  934,  774,  935,  633,
      787,  787,  643,  643,  792,  792,  936,  639,  651,  651,
      656,  656,  803,  803,  939,  788,  831,  644,  660,  660,

      832,  756,  826,  826,  849,  657,  684,  684,  850,  789,
      835,  835,  694,  694,  852,  852,  860,  860,  920,  685,
      866,  866,  921,  853,  937,  695,  871,  871,  938,  854,
      861,  728,  728,  942,  867,  873,  873,  730,  730,  945,
      872,  874,  874,  946,  875,  729,  876,  732,  732,  877,
      877,  731,  880,  880,  741,  741,  947,  742,  948,  743,
      949,  733,  884,  884,  745,  745,  881,  886,  886,  950,
      887,  951,  888,  752,  752,  952,  885,  953,  746,  894,
      894,  754,  754,  895,  895,  896,  896,  954,  753,  912,
      912,  772,  772,  773,  773,  955,  755,  914,  914,  956,

      897,  917,  917,  964,  913,  782,  782,  957,  774,  786,
      786,  787,  787,  927,  927,  958,  918,  792,  792,  940,
      940,  943,  943,  803,  803,  965,  788,  959,  960,  961,
      966,  967,  826,  826,  941,  968,  944,  969,  969,  962,
      972,  973,  974,  975,  976,  963,  970,  835,  835,  977,
      978,  979,  971,  980,  981,  982,  983,  984,  985,  986,
      987,  988,  990,  991,  992,  852,  852,  989,  993,  994,
      994,  996,  997,  998,  853,  999,  999,  860,  860, 1004,
      854, 1007,  995, 1001, 1001, 1008, 1002, 1012, 1003, 1000,
     1026,  861, 1005, 1005,  866,  866, 1009, 1009, 1027, 1010,

     1028, 1011, 1013, 1013,  873,  873, 1006, 1015,  867, 1016,
      877,  877, 1017, 1018,  871,  871, 1014, 1029, 1019, 1020,
     1036, 1021, 1023, 1023, 1022, 1024, 1037, 1025,  872,  874,
      874, 1038,  875, 1043,  876,  880,  880, 1030, 1030, 1044,
     1031, 1046, 1032,  884,  884, 1033, 1033, 1049, 1034,  881,
     1035,  886,  886, 1050,  887, 1051,  888,  885, 1039, 1039,
     1041, 1041,  894,  894,  895,  895,  896,  896, 1045, 1045,
     1047, 1047, 1052, 1040, 1053, 1042, 1054, 1056, 1056, 1063,
     1064,  897, 1065, 1066, 1055, 1048, 1058, 1059, 1060, 1075,
      912,  912, 1057, 1067, 1067,  914,  914, 1076, 1061, 1068,

     1068, 1070, 1070, 1077, 1062,  913,  917,  917, 1072, 1072,
     1073, 1073, 1078, 1079, 1069, 1080, 1071, 1081,  927,  927,
     1082,  918, 1083, 1084, 1085, 1074, 1086, 1087, 1087, 1090,
     1091, 1092, 1092, 1096, 1097, 1098,  940,  940, 1099, 1099,
     1100, 1104, 1088,  943,  943, 1105, 1093, 1101, 1101, 1102,
     1102,  941, 1106, 1107, 1108, 1109, 1110, 1111,  944, 1094,
     1112, 1113, 1114, 1115, 1103, 1095, 1116, 1117, 1089, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1126, 1125, 1127,  969,
      969, 1128, 1129, 1129, 1131, 1132, 1133, 1134,  970, 1135,
     1136, 1137, 1138, 1139,  971, 1130, 1140, 1141, 1142, 1143,

     1144, 1146, 1145, 1147, 1148, 1149, 1150, 1151, 1151,  994,
      994, 1152, 1153, 1154,  999,  999, 1155, 1155, 1158, 1156,
     1159, 1157,  995, 1160, 1001, 1001, 1164, 1002, 1000, 1003,
     1005, 1005, 1161, 1161, 1165, 1162, 1166, 1163, 1009, 1009,
     1167, 1010, 1168, 1011, 1006, 1013, 1013, 1169, 1169, 1172,
     1170, 1173, 1171, 1174, 1175, 1176, 1177, 1181, 1179, 1014,
     1183, 1023, 1023, 1184, 1024, 1185, 1025, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1178, 1180, 1195, 1030, 1030, 1182,
     1031, 1196, 1032, 1033, 1033, 1197, 1034, 1199, 1035, 1039,
     1039, 1193, 1193, 1041, 1041, 1194, 1194, 1045, 1045, 1047,

     1047, 1198, 1198, 1200, 1040, 1201, 1202, 1203, 1042, 1204,
     1205, 1056, 1056, 1207, 1048, 1206, 1206, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1216, 1215, 1057, 1067, 1067, 1068,
     1068, 1217, 1217, 1070, 1070, 1218, 1218, 1072, 1072, 1073,
     1073, 1219, 1219, 1220, 1069, 1221, 1222, 1223, 1071, 1224,
     1225, 1226, 1227, 1228, 1074, 1229, 1230, 1230, 1232, 1232,
     1087, 1087, 1234, 1234, 1235, 1236, 1237, 1240, 1238, 1092,
     1092, 1231, 1241, 1233, 1242, 1088, 1239, 1239, 1243, 1244,
     1099, 1099, 1245, 1249, 1093, 1101, 1101, 1102, 1102, 1246,
     1246, 1247, 1247, 1250, 1251, 1252, 1253, 1254, 1255, 1256,

     1257, 1258, 1103, 1259, 1260, 1261, 1248, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1272, 1129,
     1129, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1130, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1151, 1151, 1294, 1295, 1155, 1155, 1296,
     1156, 1297, 1157, 1298, 1161, 1161, 1299, 1162, 1300, 1163,
     1301, 1302, 1303, 1169, 1169, 1304, 1170, 1307, 1171, 1305,
     1305, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1306, 1193, 1193, 1194, 1194, 1320, 1321,
     1322, 1198, 1198, 1323, 1324, 1325, 1326, 1327, 1328, 1329,

     1206, 1206, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1217, 1217, 1218, 1218, 1219, 1219, 1340, 1341,
     1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1230, 1230,
     1350, 1350, 1232, 1232, 1351, 1351, 1234, 1234, 1352, 1353,
     1354, 1355, 1356, 1231, 1239, 1239, 1357, 1233, 1358, 1359,
     1360, 1361, 1246, 1246, 1247, 1247, 1362, 1362, 1363, 1363,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1248,
     1374, 1375, 1376, 1364, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1272, 1272, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,

     1401, 1402, 1403, 1404, 1405, 1405, 1407, 1407, 1409, 1409,
     1411, 1412, 1412, 1305, 1305, 1415, 1415, 1416, 1406, 1417,
     1408, 1418, 1410, 1419, 1419, 1413, 1422, 1306, 1423, 1424,
     1425, 1425, 1427, 1428, 1428, 1431, 1436, 1420, 1432, 1432,
     1434, 1434, 1437, 1437, 1426, 1439, 1440, 1429, 1441, 1442,
     1443, 1444, 1433, 1445, 1446, 1435, 1447, 1438, 1448, 1449,
     1450, 1451, 1452, 1453, 1421, 1454, 1414, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1461, 1463, 1464, 1465, 1430, 1466,
     1467, 1350, 1350, 1351, 1351, 1468, 1469, 1470, 1462, 1471,
     1472, 1473, 1473, 1475, 1476, 1477, 1478, 1478, 1362, 1362,

     1363, 1363, 1480, 1480, 1481, 1482, 1474, 1483, 1483, 1486,
     1490, 1479, 1487, 1487, 1491, 1364, 1484, 1492, 1493, 1494,
     1495, 1488, 1485, 1496, 1497, 1498, 1499, 1489, 1500, 1501,
     1501, 1503, 1504, 1505, 1506, 1507, 1507, 1509, 1510, 1511,
     1512, 1513, 1514, 1515, 1502, 1516, 1517, 1518, 1519, 1520,
     1508, 1521, 1405, 1405, 1522, 1522, 1530, 1523, 1531, 1524,
     1407, 1407, 1525, 1525, 1409, 1409, 1406, 1526, 1526, 1527,
     1527, 1412, 1412, 1532, 1408, 1529, 1529, 1533, 1410, 1415,
     1415, 1419, 1419, 1528, 1535, 1413, 1534, 1534, 1536, 1537,
     1539, 1425, 1425, 1540, 1540, 1420, 1541, 1428, 1428, 1542,

     1542, 1543, 1544, 1432, 1432, 1426, 1545, 1545, 1434, 1434,
     1547, 1429, 1546, 1546, 1538, 1437, 1437, 1433, 1548, 1548,
     1549, 1549, 1551, 1435, 1552, 1552, 1554, 1555, 1555, 1559,
     1438, 1557, 1557, 1560, 1560, 1550, 1562, 1563, 1564, 1553,
     1565, 1566, 1556, 1567, 1568, 1569, 1558, 1570, 1561, 1571,
     1572, 1573, 1573, 1575, 1576, 1461, 1461, 1577, 1577, 1578,
     1579, 1580, 1581, 1582, 1583, 1584, 1574, 1585, 1586, 1590,
     1462, 1587, 1587, 1473, 1473, 1589, 1589, 1591, 1592, 1478,
     1478, 1593, 1593, 1480, 1480, 1594, 1588, 1595, 1474, 1483,
     1483, 1598, 1596, 1596, 1479, 1599, 1600, 1600, 1484, 1487,

     1487, 1602, 1603, 1604, 1485, 1597, 1605, 1606, 1488, 1601,
     1607, 1608, 1609, 1610, 1489, 1611, 1501, 1501, 1612, 1612,
     1613, 1614, 1507, 1507, 1615, 1615, 1616, 1617, 1618, 1619,
     1620, 1502, 1621, 1622, 1623, 1624, 1625, 1508, 1522, 1522,
     1626, 1523, 1627, 1524, 1525, 1525, 1526, 1526, 1527, 1527,
     1628, 1628, 1631, 1629, 1632, 1630, 1529, 1529, 1633, 1633,
     1635, 1636, 1528, 1534, 1534, 1637, 1640, 1641, 1641, 1643,
     1540, 1540, 1634, 1644, 1542, 1542, 1638, 1645, 1646, 1646,
     1648, 1642, 1639, 1545, 1545, 1546, 1546, 1548, 1548, 1549,
     1549, 1653, 1647, 1649, 1649, 1650, 1650, 1552, 1552, 1652,

     1652, 1555, 1555, 1656, 1550, 1654, 1654, 1557, 1557, 1658,
     1651, 1659, 1553, 1655, 1655, 1660, 1556, 1560, 1560, 1657,
     1657, 1661, 1558, 1662, 1663, 1664, 1665, 1666, 1666, 1668,
     1669, 1669, 1561, 1573, 1573, 1671, 1671, 1672, 1672, 1674,
     1577, 1577, 1667, 1675, 1675, 1670, 1677, 1677, 1574, 1679,
     1679, 1681, 1673, 1682, 1683, 1684, 1685, 1686, 1676, 1587,
     1587, 1678, 1687, 1687, 1680, 1589, 1589, 1688, 1688, 1691,
     1692, 1593, 1593, 1693, 1588, 1694, 1694, 1596, 1596, 1695,
     1696, 1699, 1689, 1698, 1698, 1600, 1600, 1700, 1697, 1701,
     1597, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1601, 1612,

     1612, 1709, 1615, 1615, 1710, 1711, 1712, 1713, 1714, 1715,
     1716, 1717, 1628, 1628, 1718, 1629, 1719, 1630, 1633, 1633,
     1720, 1720, 1690, 1721, 1721, 1723, 1724, 1725, 1727, 1728,
     1641, 1641, 1634, 1729, 1729, 1730, 1731, 1722, 1732, 1646,
     1646, 1726, 1733, 1733, 1642, 1734, 1736, 1735, 1649, 1649,
     1650, 1650, 1738, 1647, 1737, 1737, 1652, 1652, 1654, 1654,
     1739, 1655, 1655, 1740, 1740, 1651, 1657, 1657, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1666, 1666, 1741, 1750,
     1750, 1751, 1669, 1669, 1752, 1752, 1671, 1671, 1672, 1672,
     1759, 1667, 1753, 1753, 1754, 1754, 1760, 1670, 1675, 1675,

     1756, 1756, 1761, 1673, 1677, 1677, 1757, 1757, 1762, 1755,
     1679, 1679, 1763, 1676, 1758, 1758, 1764, 1764, 1769, 1678,
     1687, 1687, 1688, 1688, 1770, 1680, 1766, 1766, 1767, 1767,
     1771, 1765, 1694, 1694, 1772, 1773, 1774, 1689, 1698, 1698,
     1775, 1776, 1777, 1768, 1778, 1779, 1780, 1781, 1782, 1783,
     1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
     1794, 1720, 1720, 1721, 1721, 1795, 1795, 1796, 1797, 1798,
     1799, 1800, 1801, 1729, 1729, 1802, 1803, 1722, 1804, 1733,
     1733, 1805, 1734, 1806, 1735, 1737, 1737, 1807, 1740, 1740,
     1808, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,

     1750, 1750, 1817, 1741, 1752, 1752, 1753, 1753, 1754, 1754,
     1818, 1818, 1756, 1756, 1757, 1757, 1758, 1758, 1819, 1820,
     1821, 1822, 1823, 1755, 1764, 1764, 1824, 1824, 1766, 1766,
     1767, 1767, 1825, 1825, 1826, 1826, 1828, 1829, 1830, 1765,
     1831, 1832, 1833, 1834, 1835, 1768, 1836, 1837, 1838, 1827,
     1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
     1849, 1849, 1851, 1852, 1795, 1795, 1853, 1854, 1855, 1856,
     1857, 1858, 1859, 1860, 1861, 1850, 1862, 1863, 1864, 1808,
     1808, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
     1818, 1818, 1874, 1875, 1876, 1876, 1878, 1879, 1824, 1824,

     1825, 1825, 1826, 1826, 1880, 1880, 1881, 1882, 1883, 1877,
     1884, 1885, 1886, 1887, 1888, 1889, 1891, 1827, 1892, 1893,
     1894, 1895, 1896, 1897, 1898, 1899, 1849, 1849, 1900, 1900,
     1901, 1902, 1903, 1890, 1904, 1905, 1906, 1907, 1908, 1908,
     1912, 1850, 1910, 1910, 1913, 1913, 1915, 1915, 1917, 1918,
     1919, 1920, 1909, 1921, 1922, 1924, 1911, 1925, 1914, 1926,
     1926, 1916, 1928, 1928, 1930, 1931, 1932, 1876, 1876, 1933,
     1933, 1934, 1923, 1935, 1927, 1880, 1880, 1929, 1936, 1937,
     1938, 1939, 1877, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
     1947, 1947, 1949, 1950, 1951, 1952, 1900, 1900, 1953, 1954,

     1955, 1955, 1957, 1958, 1959, 1948, 1960, 1908, 1908, 1961,
     1961, 1910, 1910, 1963, 1956, 1962, 1962, 1913, 1913, 1964,
     1964, 1909, 1915, 1915, 1966, 1911, 1965, 1965, 1967, 1967,
     1969, 1914, 1970, 1971, 1971, 1973, 1974, 1916, 1975, 1976,
     1926, 1926, 1979, 1968, 1977, 1977, 1928, 1928, 1972, 1978,
     1978, 1980, 1981, 1981, 1983, 1927, 1933, 1933, 1984, 1985,
     1986, 1929, 1987, 1988, 1989, 1990, 1991, 1982, 1992, 1993,
     1994, 1947, 1947, 1995, 1995, 1996, 1997, 1998, 1999, 1999,
     2001, 1955, 1955, 2002, 2002, 2003, 1948, 2004, 2005, 2006,
     1961, 1961, 2000, 1962, 1962, 1956, 2007, 1964, 1964, 1965,

     1965, 2008, 1967, 1967, 2009, 2009, 2010, 2010, 2012, 1971,
     1971, 2013, 2013, 2014, 2015, 2016, 2017, 1968, 1977, 1977,
     2018, 2011, 1978, 1978, 1972, 2019, 1981, 1981, 2020, 2020,
     2021, 2021, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 1982, 2032, 1995, 1995, 2022, 2033, 2034, 1999, 1999,
     2035, 2035, 2036, 2036, 2002, 2002, 2038, 2039, 2040, 2040,
     2042, 2043, 2000, 2044, 2044, 2047, 2037, 2009, 2009, 2010,
     2010, 2048, 2041, 2046, 2046, 2013, 2013, 2049, 2045, 2050,
     2051, 2052, 2053, 2057, 2011, 2020, 2020, 2021, 2021, 2054,
     2054, 2055, 2055, 2058, 2059, 2060, 2061, 2062, 2063, 2064,

     2065, 2066, 2022, 2067, 2035, 2035, 2056, 2036, 2036, 2068,
     2068, 2069, 2070, 2040, 2040, 2071, 2071, 2072, 2073, 2073,
     2076, 2037, 2044, 2044, 2075, 2075, 2077, 2041, 2046, 2046,
     2078, 2079, 2074, 2080, 2081, 2082, 2084, 2045, 2054, 2054,
     2055, 2055, 2083, 2083, 2085, 2086, 2087, 2088, 2089, 2090,
     2091, 2092, 2093, 2094, 2095, 2056, 2068, 2068, 2096, 2071,
     2071, 2097, 2073, 2073, 2098, 2098, 2075, 2075, 2099, 2100,
     2101, 2102, 2102, 2105, 2106, 2107, 2074, 2083, 2083, 2108,
     2109, 2110, 2111, 2112, 2113, 2114, 2103, 2115, 2116, 2117,
     2118, 2098, 2098, 2119, 2120, 2120, 2122, 2122, 2102, 2102,

     2124, 2124, 2125, 2104, 2126, 2126, 2128, 2129, 2130, 2121,
     2131, 2123, 2132, 2103, 2133, 2134, 2135, 2136, 2137, 2127,
     2138, 2139, 2139, 2120, 2120, 2141, 2141, 2122, 2122, 2142,
     2142, 2124, 2124, 2143, 2126, 2126, 2140, 2145, 2121, 2144,
     2144, 2148, 2123, 2146, 2146, 2149, 2150, 2151, 2152, 2127,
     2153, 2154, 2155, 2156, 2139, 2139, 2157, 2157, 2147, 2141,
     2141, 2142, 2142, 2158, 2144, 2144, 2159, 2146, 2146, 2140,
     2160, 2160, 2161, 2162, 2162, 2164, 2164, 2166, 2167, 2168,
     2169, 2170, 2147, 2171, 2157, 2157, 2172, 2173, 2163, 2174,
     2165, 2160, 2160, 2162, 2162, 2175, 2175, 2164, 2164, 2176,

     2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2163, 2184,
     2185, 2186, 2165, 2175, 2175, 2176, 2176, 2187, 2188, 2189,
     2189, 2191, 2191, 2193, 2194, 2194, 2196, 2197, 2198, 2198,
     2189, 2189, 2202, 2190, 2200, 2200, 2192, 2191, 2191, 2195,
     2201, 2201, 2199, 2204, 2190, 2194, 2194, 2203, 2203, 2205,
     2205, 2208, 2192, 2198, 2198, 2207, 2207, 2200, 2200, 2209,
     2195, 2201, 2201, 2206, 2203, 2203, 2211, 2199, 2205, 2205,
     2210, 2210, 2207, 2207, 2210, 2210, 2212, 2212, 2212, 2212,
     2214, 2214, 2206, 2214, 2214,  878,  870,  869,  868,  865,
      864, 2213,  863, 2213,   23,   23,   23,   23,   23,   34,

       34,   34,   34,   34,   36,   36,   36,   36,   36,   37,
       37,   37,   37,   37,   35,   35,   35,   35,   35,   38,
       38,   38,   38,   38,   39,   39,   39,   39,   39,   42,
       42,   42,   42,   42,  101,  101,  101,  101,  102,  862,
      102,  102,  102,  103,  103,  859,  103,  103,  104,  104,
      104,  858,  104,  857,  856,  855,  851,  848,  847,  846,
      845,  844,  843,  840,  839,  838,  837,  836,  834,  833,
      830,  829,  828,  827,  825,  824,  823,  822,  821,  820,
      819,  818,  817,  816,  815,  814,  813,  812,  811,  810,
      809,  808,  807,  806,  805,  804,  802,  801,  800,  799,

      798,  797,  796,  795,  794,  793,  791,  790,  785,  784,
      783,  781,  780,  779,  778,  777,  771,  770,  769,  766,
      765,  764,  763,  762,  761,  760,  759,  758,  757,  751,
      750,  749,  748,  747,  744,  740,  739,  738,  737,  736,
      735,  734,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  693,  692,  691,  690,  689,  688,
      683,  682,  681,  680,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,

      661,  659,  658,  655,  654,  653,  652,  650,  649,  646,
      642,  641,  640,  635,  631,  630,  629,  628,  627,  626,
      625,  621,  620,  619,  618,  617,  616,  613,  612,  611,
      610,  609,  608,  606,  605,  602,  601,  600,  599,  598,
      592,  591,  587,  586,  585,  584,  583,  582,  577,  576,
      575,  574,  572,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  553,  552,  551,  550,
      549,  544,  540,  539,  538,  537,  536,  535,  534,  530,
      529,  528,  527,  526,  525,  522,  521,  520,  519,  518,
      517,  516,  515,  512,  511,  510,  506,  505,  504,  503,

      502,  501,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  484,  480,  479,  478,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  464,  463,  462,  457,  454,
      453,  452,  451,  450,  449,  446,  445,  442,  441,  440,
      439,  438,  437,  432,  431,  430,  429,  425,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  377,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  362,  361,

      360,  357,  356,  355,  354,  353,  352,  351,  348,  347,
      346,  345,  340,  339,  338,  335,  332,  331,  330,  326,
      325,  324,  323,  322,  321,  320,  319,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  286,  285,  284,  281,  280,  279,  278,  277,  276,
      275,  272,  271,  270,  269,  264,  263,  262,  261,  258,
      257,  256,  252,  249,  244,  236,  233,  232,  228,  227,
      222,  219,  218,  217,  214,  211,  210,  205,  204,  203,
      202,  201,  200,  199,  196,  195,  194,  193,  192,  191,

      190,  189,  188,  187,  187,  186,  183,  178,  170,  167,
      166,  162,  161,  156,  153,  133,  130,  129,  121,  112,
      111,  110,  109,  100,   99,   74,  106,  105,  100,   99,
       74,   70,   70, 2215,   35,   35,   35,   35,   35,   35,
       35,   35,   19, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215
    } ;

static yyconst flex_int16_t yy_chk[3509] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   55,   60,   80,   61,   47,   26,
       26,   26,   51,   71,   71,   60,   65,   80,   55,   26,
       61,  737,   65,   62,    1,    2,    2,    2,    2,    2,
       63,    2,   67,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   62,   67,   28,   28,   75,   75,    2,
       63,   48,   48,   28,    2,   28,   28,   28,   83,  742,

       83,   48,   48,   48,   66,   28,   82,   66,   92,  375,
       82,   48,   73,   73,   66,   86,   73,   73,   73,   89,
       86,   86,  135,   96,  375,   92,   28,   89,   96,    2,
       21,   21,   48,  135,   21,  743,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  747,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   91,   98,   98,  748,  115,

       23,   23,   23,   23,   23,   23,   23,  127,   23,   91,
       94,  144,   91,   91,   91,  115,   23,   50,   50,  144,
       94,   23,  147,  127,  123,   50,   94,   50,   50,   50,
       94,  123,   23,   23,   23,   23,   23,   50,   23,  147,
      749,   23,   23,   23,   23,   72,   72,  750,   23,   23,
       23,   23,   23,   29,  151,   72,   72,   72,   50,  151,
       29,  124,  124,  129,  137,   72,  751,   29,  137,  129,
      131,  131,  131,  132,  132,  124,  138,  157,  138,  223,
      157,  153,  223,  132,  132,  132,   72,  153,   29,   29,
       29,   29,   29,   29,   29,  153,   29,   29,  757,   29,

       29,   29,   29,   29,  535,   29,   29,   29,   29,   29,
       77,   77,   77,   77,   77,   77,   77,  758,   77,   77,
      535,   77,   77,   77,   77,   77,  146,   77,   77,   77,
       77,   77,  141,  176,  176,  168,  149,  141,  141,  168,
      146,  180,  759,  146,  146,  146,  149,  163,  180,  234,
      180,  256,  149,  234,  163,  256,  149,  163,  163,  187,
      187,  195,  195,  208,  208,  209,  209,  219,  209,  229,
      209,  225,  225,  219,  760,  195,  229,  208,  246,  229,
      229,  219,  242,  242,  761,  246,  225,  246,  258,  258,
      275,  275,  300,  300,  302,  302,  303,  303,  762,  275,

      304,  304,  309,  309,  310,  310,  300,  384,  302,  763,
      316,  316,  764,  316,  304,  316,  309,  765,  310,  320,
      320,  323,  323,  330,  332,  332,  766,  330,  336,  336,
      337,  337,  401,  320,  401,  323,  347,  347,  408,  332,
      351,  351,  408,  336,  384,  353,  353,  364,  364,  351,
      767,  347,  371,  371,  391,  391,  399,  399,  768,  347,
      353,  769,  364,  391,  495,  399,  455,  371,  495,  391,
      467,  399,  402,  402,  423,  423,  426,  426,  770,  332,
      332,  455,  364,  775,  427,  427,  353,  402,  423,  424,
      424,  488,  424,  488,  424,  428,  428,  371,  427,  433,

      433,  434,  434,  435,  435,  436,  436,  467,  436,  776,
      436,  443,  443,  433,  778,  444,  444,  435,  444,  780,
      444,  447,  447,  448,  448,  443,  448,  781,  448,  449,
      449,  458,  458,  459,  459,  447,  465,  465,  474,  474,
      475,  475,  783,  449,  476,  476,  458,  484,  484,  485,
      485,  486,  486,  474,  784,  475,  489,  489,  493,  493,
      498,  498,  484,  785,  485,  499,  499,  504,  504,  507,
      507,  489,  527,  493,  527,  498,  508,  508,  531,  531,
      541,  541,  504,  789,  507,  533,  533,  531,  493,  541,
      543,  543,  618,  531,  618,  541,  547,  547,  533,  569,

      569,  791,  569,  543,  569,  573,  573,  578,  578,  579,
      579,  547,  579,  793,  579,  584,  584,  585,  585,  586,
      586,  588,  588,  700,  588,  700,  588,  593,  593,  584,
      593,  585,  593,  586,  596,  596,  597,  597,  790,  597,
      790,  597,  599,  599,  605,  605,  606,  606,  596,  607,
      607,  622,  622,  623,  623,  626,  599,  624,  624,  605,
      794,  606,  625,  625,  632,  632,  622,  633,  633,  634,
      634,  626,  638,  638,  639,  639,  795,  625,  796,  632,
      640,  640,  643,  643,  644,  644,  797,  638,  651,  651,
      656,  656,  657,  657,  799,  640,  690,  643,  660,  660,

      690,  606,  683,  683,  707,  656,  684,  684,  707,  640,
      693,  693,  694,  694,  709,  709,  716,  716,  779,  684,
      721,  721,  779,  709,  798,  694,  727,  727,  798,  709,
      716,  728,  728,  801,  721,  729,  729,  730,  730,  804,
      727,  731,  731,  805,  731,  728,  731,  732,  732,  733,
      733,  730,  738,  738,  741,  741,  806,  741,  807,  741,
      810,  732,  744,  744,  745,  745,  738,  746,  746,  811,
      746,  812,  746,  752,  752,  814,  744,  815,  745,  753,
      753,  754,  754,  755,  755,  756,  756,  816,  752,  771,
      771,  772,  772,  773,  773,  817,  754,  774,  774,  818,

      756,  777,  777,  822,  771,  782,  782,  819,  773,  786,
      786,  787,  787,  788,  788,  819,  777,  792,  792,  800,
      800,  802,  802,  803,  803,  823,  787,  821,  821,  821,
      824,  825,  826,  826,  800,  827,  802,  828,  828,  821,
      831,  832,  833,  834,  836,  821,  828,  835,  835,  837,
      838,  839,  828,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  852,  852,  848,  853,  854,
      854,  855,  857,  858,  852,  859,  859,  860,  860,  862,
      852,  864,  854,  861,  861,  865,  861,  868,  861,  859,
      875,  860,  863,  863,  866,  866,  867,  867,  876,  867,

      878,  867,  869,  869,  873,  873,  863,  870,  866,  870,
      877,  877,  870,  870,  871,  871,  869,  879,  870,  870,
      887,  870,  872,  872,  870,  872,  888,  872,  871,  874,
      874,  889,  874,  892,  874,  880,  880,  881,  881,  893,
      881,  898,  881,  884,  884,  885,  885,  900,  885,  880,
      885,  886,  886,  901,  886,  902,  886,  884,  890,  890,
      891,  891,  894,  894,  895,  895,  896,  896,  897,  897,
      899,  899,  903,  890,  904,  891,  905,  906,  906,  908,
      909,  896,  910,  911,  905,  899,  907,  907,  907,  920,
      912,  912,  906,  913,  913,  914,  914,  921,  907,  915,

      915,  916,  916,  922,  907,  912,  917,  917,  918,  918,
      919,  919,  923,  924,  915,  925,  916,  926,  927,  927,
      928,  917,  929,  930,  931,  919,  932,  933,  933,  934,
      935,  936,  936,  937,  938,  939,  940,  940,  941,  941,
      942,  946,  933,  943,  943,  947,  936,  944,  944,  945,
      945,  940,  948,  949,  950,  951,  952,  953,  943,  936,
      954,  955,  956,  957,  945,  936,  958,  959,  933,  960,
      961,  962,  963,  964,  965,  966,  967,  966,  968,  969,
      969,  970,  971,  971,  972,  973,  974,  975,  969,  976,
      977,  978,  979,  980,  969,  971,  981,  982,  985,  986,

      987,  988,  987,  989,  990,  991,  992,  993,  993,  994,
      994,  995,  996,  998,  999,  999, 1000, 1000, 1002, 1000,
     1003, 1000,  994, 1004, 1001, 1001, 1007, 1001,  999, 1001,
     1005, 1005, 1006, 1006, 1008, 1006, 1010, 1006, 1009, 1009,
     1011, 1009, 1012, 1009, 1005, 1013, 1013, 1014, 1014, 1015,
     1014, 1016, 1014, 1016, 1017, 1018, 1019, 1021, 1020, 1013,
     1022, 1023, 1023, 1024, 1023, 1025, 1023, 1028, 1029, 1031,
     1032, 1034, 1035, 1038, 1019, 1020, 1043, 1030, 1030, 1021,
     1030, 1044, 1030, 1033, 1033, 1046, 1033, 1049, 1033, 1039,
     1039, 1040, 1040, 1041, 1041, 1042, 1042, 1045, 1045, 1047,

     1047, 1048, 1048, 1050, 1039, 1051, 1052, 1053, 1041, 1054,
     1055, 1056, 1056, 1058, 1047, 1057, 1057, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1065, 1056, 1067, 1067, 1068,
     1068, 1069, 1069, 1070, 1070, 1071, 1071, 1072, 1072, 1073,
     1073, 1074, 1074, 1075, 1068, 1076, 1077, 1078, 1070, 1079,
     1080, 1081, 1082, 1083, 1073, 1084, 1085, 1085, 1086, 1086,
     1087, 1087, 1088, 1088, 1089, 1090, 1091, 1094, 1091, 1092,
     1092, 1085, 1095, 1086, 1096, 1087, 1093, 1093, 1097, 1098,
     1099, 1099, 1100, 1105, 1092, 1101, 1101, 1102, 1102, 1103,
     1103, 1104, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112,

     1113, 1114, 1102, 1115, 1116, 1117, 1104, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1128, 1129,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
     1139, 1140, 1129, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1151, 1152, 1153, 1155, 1155, 1156,
     1155, 1157, 1155, 1160, 1161, 1161, 1162, 1161, 1163, 1161,
     1164, 1165, 1168, 1169, 1169, 1172, 1169, 1174, 1169, 1173,
     1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1186, 1187, 1192, 1173, 1193, 1193, 1194, 1194, 1195, 1196,
     1197, 1198, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,

     1206, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1217, 1218, 1218, 1219, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1230,
     1231, 1231, 1232, 1232, 1233, 1233, 1234, 1234, 1235, 1236,
     1237, 1238, 1240, 1230, 1239, 1239, 1241, 1232, 1242, 1243,
     1244, 1245, 1246, 1246, 1247, 1247, 1248, 1248, 1249, 1249,
     1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1247,
     1261, 1262, 1263, 1249, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,

     1291, 1292, 1293, 1294, 1298, 1298, 1301, 1301, 1302, 1302,
     1303, 1304, 1304, 1305, 1305, 1306, 1306, 1307, 1298, 1308,
     1301, 1309, 1302, 1310, 1310, 1304, 1311, 1305, 1312, 1313,
     1314, 1314, 1315, 1316, 1316, 1317, 1320, 1310, 1318, 1318,
     1319, 1319, 1321, 1321, 1314, 1322, 1323, 1316, 1324, 1325,
     1326, 1327, 1318, 1328, 1329, 1319, 1330, 1321, 1331, 1332,
     1333, 1334, 1335, 1336, 1310, 1337, 1304, 1338, 1339, 1340,
     1341, 1342, 1343, 1344, 1344, 1345, 1346, 1347, 1316, 1348,
     1349, 1350, 1350, 1351, 1351, 1352, 1353, 1354, 1344, 1355,
     1356, 1357, 1357, 1358, 1359, 1360, 1361, 1361, 1362, 1362,

     1363, 1363, 1364, 1364, 1365, 1367, 1357, 1368, 1368, 1369,
     1372, 1361, 1371, 1371, 1374, 1363, 1368, 1375, 1376, 1377,
     1378, 1371, 1368, 1379, 1380, 1381, 1382, 1371, 1383, 1384,
     1384, 1385, 1386, 1388, 1389, 1390, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1384, 1398, 1399, 1401, 1402, 1403,
     1390, 1404, 1405, 1405, 1406, 1406, 1414, 1406, 1416, 1406,
     1407, 1407, 1408, 1408, 1409, 1409, 1405, 1410, 1410, 1411,
     1411, 1412, 1412, 1417, 1407, 1413, 1413, 1418, 1409, 1415,
     1415, 1419, 1419, 1411, 1421, 1412, 1420, 1420, 1422, 1423,
     1424, 1425, 1425, 1426, 1426, 1419, 1427, 1428, 1428, 1429,

     1429, 1430, 1431, 1432, 1432, 1425, 1433, 1433, 1434, 1434,
     1436, 1428, 1435, 1435, 1423, 1437, 1437, 1432, 1438, 1438,
     1439, 1439, 1440, 1434, 1441, 1441, 1442, 1443, 1443, 1445,
     1437, 1444, 1444, 1446, 1446, 1439, 1447, 1448, 1449, 1441,
     1450, 1451, 1443, 1452, 1453, 1454, 1444, 1455, 1446, 1456,
     1457, 1458, 1458, 1459, 1460, 1461, 1461, 1462, 1462, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1458, 1470, 1471, 1475,
     1461, 1472, 1472, 1473, 1473, 1474, 1474, 1476, 1477, 1478,
     1478, 1479, 1479, 1480, 1480, 1481, 1472, 1484, 1473, 1483,
     1483, 1486, 1485, 1485, 1478, 1488, 1489, 1489, 1483, 1487,

     1487, 1490, 1491, 1492, 1483, 1485, 1493, 1494, 1487, 1489,
     1495, 1496, 1497, 1498, 1487, 1500, 1501, 1501, 1502, 1502,
     1503, 1506, 1507, 1507, 1508, 1508, 1512, 1513, 1514, 1515,
     1516, 1501, 1517, 1518, 1519, 1520, 1521, 1507, 1522, 1522,
     1523, 1522, 1524, 1522, 1525, 1525, 1526, 1526, 1527, 1527,
     1528, 1528, 1530, 1528, 1531, 1528, 1529, 1529, 1532, 1532,
     1533, 1535, 1527, 1534, 1534, 1536, 1537, 1538, 1538, 1539,
     1540, 1540, 1532, 1541, 1542, 1542, 1536, 1543, 1544, 1544,
     1547, 1538, 1536, 1545, 1545, 1546, 1546, 1548, 1548, 1549,
     1549, 1554, 1544, 1550, 1550, 1551, 1551, 1552, 1552, 1553,

     1553, 1555, 1555, 1559, 1549, 1556, 1556, 1557, 1557, 1562,
     1551, 1563, 1552, 1558, 1558, 1564, 1555, 1560, 1560, 1561,
     1561, 1565, 1557, 1566, 1567, 1568, 1569, 1570, 1570, 1571,
     1572, 1572, 1560, 1573, 1573, 1574, 1574, 1575, 1575, 1576,
     1577, 1577, 1570, 1578, 1578, 1572, 1579, 1579, 1573, 1580,
     1580, 1581, 1575, 1582, 1583, 1584, 1585, 1586, 1578, 1587,
     1587, 1579, 1588, 1588, 1580, 1589, 1589, 1590, 1590, 1591,
     1592, 1593, 1593, 1594, 1587, 1595, 1595, 1596, 1596, 1597,
     1598, 1601, 1590, 1599, 1599, 1600, 1600, 1603, 1598, 1604,
     1596, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1600, 1612,

     1612, 1613, 1615, 1615, 1616, 1617, 1618, 1619, 1620, 1623,
     1624, 1625, 1628, 1628, 1631, 1628, 1632, 1628, 1633, 1633,
     1634, 1634, 1590, 1635, 1635, 1636, 1637, 1638, 1639, 1640,
     1641, 1641, 1633, 1642, 1642, 1643, 1644, 1635, 1645, 1646,
     1646, 1638, 1647, 1647, 1641, 1647, 1648, 1647, 1649, 1649,
     1650, 1650, 1653, 1646, 1651, 1651, 1652, 1652, 1654, 1654,
     1653, 1655, 1655, 1656, 1656, 1650, 1657, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1666, 1656, 1667,
     1667, 1668, 1669, 1669, 1670, 1670, 1671, 1671, 1672, 1672,
     1681, 1666, 1673, 1673, 1674, 1674, 1682, 1669, 1675, 1675,

     1676, 1676, 1683, 1672, 1677, 1677, 1678, 1678, 1684, 1674,
     1679, 1679, 1685, 1675, 1680, 1680, 1686, 1686, 1691, 1677,
     1687, 1687, 1688, 1688, 1692, 1679, 1689, 1689, 1690, 1690,
     1693, 1686, 1694, 1694, 1695, 1696, 1697, 1688, 1698, 1698,
     1699, 1700, 1701, 1690, 1702, 1703, 1704, 1705, 1706, 1707,
     1708, 1709, 1710, 1711, 1712, 1713, 1714, 1716, 1717, 1718,
     1719, 1720, 1720, 1721, 1721, 1722, 1722, 1723, 1724, 1725,
     1726, 1727, 1728, 1729, 1729, 1730, 1731, 1721, 1732, 1733,
     1733, 1736, 1733, 1738, 1733, 1737, 1737, 1739, 1740, 1740,
     1741, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,

     1750, 1750, 1751, 1740, 1752, 1752, 1753, 1753, 1754, 1754,
     1755, 1755, 1756, 1756, 1757, 1757, 1758, 1758, 1759, 1760,
     1761, 1762, 1763, 1754, 1764, 1764, 1765, 1765, 1766, 1766,
     1767, 1767, 1768, 1768, 1769, 1769, 1770, 1771, 1772, 1764,
     1773, 1774, 1775, 1776, 1777, 1767, 1778, 1779, 1780, 1769,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1789, 1790, 1791,
     1792, 1792, 1793, 1794, 1795, 1795, 1796, 1797, 1798, 1799,
     1800, 1801, 1802, 1803, 1804, 1792, 1805, 1806, 1807, 1808,
     1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
     1818, 1818, 1819, 1820, 1821, 1821, 1822, 1823, 1824, 1824,

     1825, 1825, 1826, 1826, 1827, 1827, 1828, 1830, 1831, 1821,
     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1826, 1839, 1842,
     1843, 1844, 1845, 1846, 1847, 1848, 1849, 1849, 1850, 1850,
     1851, 1852, 1853, 1837, 1854, 1855, 1856, 1857, 1858, 1858,
     1860, 1849, 1859, 1859, 1861, 1861, 1862, 1862, 1863, 1864,
     1865, 1866, 1858, 1867, 1868, 1869, 1859, 1870, 1861, 1871,
     1871, 1862, 1872, 1872, 1873, 1874, 1875, 1876, 1876, 1877,
     1877, 1878, 1868, 1879, 1871, 1880, 1880, 1872, 1881, 1882,
     1883, 1885, 1876, 1886, 1887, 1889, 1890, 1891, 1892, 1893,
     1894, 1894, 1895, 1897, 1898, 1899, 1900, 1900, 1901, 1902,

     1903, 1903, 1904, 1905, 1906, 1894, 1907, 1908, 1908, 1909,
     1909, 1910, 1910, 1912, 1903, 1911, 1911, 1913, 1913, 1914,
     1914, 1908, 1915, 1915, 1917, 1910, 1916, 1916, 1918, 1918,
     1919, 1913, 1920, 1921, 1921, 1922, 1923, 1915, 1924, 1925,
     1926, 1926, 1930, 1918, 1927, 1927, 1928, 1928, 1921, 1929,
     1929, 1931, 1932, 1932, 1934, 1926, 1933, 1933, 1935, 1936,
     1937, 1928, 1938, 1939, 1941, 1942, 1943, 1932, 1944, 1945,
     1946, 1947, 1947, 1948, 1948, 1949, 1951, 1952, 1953, 1953,
     1954, 1955, 1955, 1956, 1956, 1957, 1947, 1958, 1959, 1960,
     1961, 1961, 1953, 1962, 1962, 1955, 1963, 1964, 1964, 1965,

     1965, 1966, 1967, 1967, 1968, 1968, 1969, 1969, 1970, 1971,
     1971, 1972, 1972, 1973, 1974, 1975, 1976, 1967, 1977, 1977,
     1979, 1969, 1978, 1978, 1971, 1980, 1981, 1981, 1982, 1982,
     1983, 1983, 1984, 1985, 1986, 1988, 1989, 1990, 1991, 1992,
     1993, 1981, 1994, 1995, 1995, 1983, 1996, 1998, 1999, 1999,
     2000, 2000, 2001, 2001, 2002, 2002, 2003, 2004, 2005, 2005,
     2006, 2007, 1999, 2008, 2008, 2012, 2001, 2009, 2009, 2010,
     2010, 2014, 2005, 2011, 2011, 2013, 2013, 2015, 2008, 2016,
     2017, 2018, 2019, 2024, 2010, 2020, 2020, 2021, 2021, 2022,
     2022, 2023, 2023, 2025, 2026, 2027, 2028, 2029, 2030, 2031,

     2032, 2033, 2021, 2034, 2035, 2035, 2023, 2036, 2036, 2037,
     2037, 2038, 2039, 2040, 2040, 2041, 2041, 2042, 2043, 2043,
     2047, 2036, 2044, 2044, 2045, 2045, 2048, 2040, 2046, 2046,
     2049, 2050, 2043, 2051, 2052, 2053, 2057, 2044, 2054, 2054,
     2055, 2055, 2056, 2056, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 2065, 2066, 2067, 2069, 2055, 2068, 2068, 2070, 2071,
     2071, 2072, 2073, 2073, 2074, 2074, 2075, 2075, 2076, 2077,
     2078, 2079, 2079, 2080, 2081, 2082, 2073, 2083, 2083, 2084,
     2085, 2086, 2087, 2090, 2092, 2093, 2079, 2094, 2095, 2096,
     2097, 2098, 2098, 2099, 2100, 2100, 2101, 2101, 2102, 2102,

     2103, 2103, 2104, 2079, 2105, 2105, 2106, 2107, 2108, 2100,
     2109, 2101, 2110, 2102, 2112, 2113, 2115, 2116, 2117, 2105,
     2118, 2119, 2119, 2120, 2120, 2121, 2121, 2122, 2122, 2123,
     2123, 2124, 2124, 2125, 2126, 2126, 2119, 2128, 2120, 2127,
     2127, 2130, 2122, 2129, 2129, 2131, 2132, 2133, 2134, 2126,
     2135, 2136, 2137, 2138, 2139, 2139, 2140, 2140, 2129, 2141,
     2141, 2142, 2142, 2143, 2144, 2144, 2145, 2146, 2146, 2139,
     2147, 2147, 2148, 2149, 2149, 2150, 2150, 2151, 2152, 2153,
     2154, 2155, 2146, 2156, 2157, 2157, 2158, 2159, 2149, 2161,
     2150, 2160, 2160, 2162, 2162, 2163, 2163, 2164, 2164, 2165,

     2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2162, 2173,
     2174, 2178, 2164, 2175, 2175, 2176, 2176, 2180, 2181, 2182,
     2182, 2183, 2183, 2184, 2185, 2185, 2186, 2187, 2188, 2188,
     2189, 2189, 2193, 2182, 2190, 2190, 2183, 2191, 2191, 2185,
     2192, 2192, 2188, 2196, 2189, 2194, 2194, 2195, 2195, 2197,
     2197, 2202, 2191, 2198, 2198, 2199, 2199, 2200, 2200, 2204,
     2194, 2201, 2201, 2197, 2203, 2203, 2208, 2198, 2205, 2205,
     2206, 2206, 2207, 2207, 2210, 2210, 2211, 2211, 2212, 2212,
     2213, 2213, 2205, 2214, 2214,  734,  726,  723,  722,  720,
      719, 2211,  718, 2212, 2216, 2216, 2216, 2216, 2216, 2217,

     2217, 2217, 2217, 2217, 2218, 2218, 2218, 2218, 2218, 2219,
     2219, 2219, 2219, 2219, 2220, 2220, 2220, 2220, 2220, 2221,
     2221, 2221, 2221, 2221, 2222, 2222, 2222, 2222, 2222, 2223,
     2223, 2223, 2223, 2223, 2224, 2224, 2224, 2224, 2225,  717,
     2225, 2225, 2225, 2226, 2226,  715, 2226, 2226, 2227, 2227,
     2227,  714, 2227,  713,  712,  710,  708,  706,  705,  704,
      703,  702,  701,  699,  698,  697,  696,  695,  692,  691,
      689,  687,  686,  685,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  666,  665,
      664,  663,  662,  661,  659,  658,  655,  654,  653,  652,

      650,  649,  648,  647,  646,  645,  642,  641,  637,  636,
      635,  631,  630,  629,  628,  627,  621,  620,  619,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  604,
      603,  602,  601,  600,  598,  595,  594,  592,  591,  590,
      589,  587,  583,  582,  581,  580,  577,  576,  575,  574,
      572,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  546,  545,  544,  542,  540,  539,  538,  537,  536,
      532,  530,  529,  528,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  514,  513,  512,  511,  510,

      509,  506,  505,  503,  502,  501,  500,  497,  496,  494,
      492,  491,  490,  487,  483,  482,  481,  480,  479,  478,
      477,  473,  472,  471,  470,  469,  468,  466,  464,  463,
      462,  461,  460,  457,  456,  454,  453,  452,  451,  450,
      446,  445,  442,  441,  440,  439,  438,  437,  432,  431,
      430,  429,  425,  422,  421,  420,  419,  418,  417,  416,
      414,  413,  412,  411,  410,  409,  407,  406,  405,  404,
      403,  400,  398,  397,  396,  395,  394,  393,  392,  390,
      389,  388,  387,  386,  385,  383,  382,  381,  380,  379,
      378,  377,  376,  374,  373,  372,  370,  369,  368,  367,

      366,  365,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  352,  350,  349,  348,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  335,  334,  333,  331,  329,
      328,  327,  326,  325,  324,  322,  321,  319,  315,  314,
      313,  312,  311,  308,  307,  306,  305,  301,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  257,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  245,  244,

      243,  241,  240,  239,  238,  237,  236,  235,  233,  232,
      231,  230,  228,  227,  226,  224,  222,  221,  220,  217,
      216,  215,  214,  213,  212,  211,  210,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  194,
      193,  192,  191,  190,  189,  186,  185,  184,  183,  182,
      181,  179,  178,  177,  175,  174,  173,  172,  171,  170,
      169,  167,  166,  165,  164,  162,  161,  160,  158,  156,
      155,  154,  152,  150,  148,  145,  143,  142,  140,  139,
      136,  134,  133,  130,  128,  126,  125,  122,  121,  120,
      119,  118,  117,  116,  114,  113,  112,  111,  110,  109,

      108,  107,  105,  100,   99,   97,   95,   93,   90,   88,
       87,   85,   84,   81,   79,   76,   69,   68,   64,   59,
       58,   57,   56,   54,   53,   49,   44,   41,   32,   31,
       27,   24,   22,   19,   14,   13,    8,    7,    6,    5,
        4,    3, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,

     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[291] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 104 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2071 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 114 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2327 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2216 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3443 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 117 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 121 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 142 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 279:
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 283:
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4181 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2216 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2216 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2215);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"





