#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 394
#define YY_END_OF_BUFFER 395
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2944] =
    {   0,
        1,    1,  392,  392,  390,  390,  391,  391,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  395,  393,
        1,    2,  380,    2,  380,    6,  380,    5,  393,    4,
      380,  380,    2,  392,  394,  390,  391,  381,  383,  384,
      383,  387,  388,  387,    1,  380,  380,    6,  380,    5,
        0,    4,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
        3,    6,    6,  380,    7,    5,    0,    0,  386,  370,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      380,  380,  392,  390,  391,  381,    0,  389,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      372,    0,    0,    0,    0,    0,    0,    0,    0,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  326,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  385,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  382,
        0,  371,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  230,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  356,    0,    0,    0,
        0,    0,    0,    0,  112,    0,    0,    0,  340,    0,
        0,    0,    0,    0,    0,    0,  222,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  214,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  216,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,   29,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,   99,  100,  380,  380,  380,  380,  380,  380,  380,
      380,  371,    0,  373,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
        0,    0,    0,    0,    0,    0,    0,  357,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  341,
        0,    0,    0,    0,    0,    0,  327,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  352,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      348,    0,    0,    0,    0,    0,    0,    0,  354,    0,
      350,    0,    0,  356,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  340,    0,    0,  358,    0,    0,
      360,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,    0,    0,    0,  346,    0,    0,    0,    0,
        0,    0,  362,    0,    0,    0,    0,  152,    0,    0,
        0,    0,    0,  380,  380,  380,  323,  380,  380,  380,
      380,  380,  380,  380,  380,   29,  380,   30,  380,  380,
      380,  380,  380,   31,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  373,    0,  353,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  231,    0,    0,    0,  349,
        0,    0,    0,    0,  151,    0,    0,    0,  355,    0,
      351,    0,    0,  357,    0,    0,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,  341,    0,    0,  359,
        0,    0,  361,    0,    0,    0,    0,    0,    0,  327,
        0,    0,    0,    0,  223,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      347,    0,    0,  215,    0,    0,    0,    0,    0,  363,

        0,    0,    0,    0,    0,    0,    0,    0,  217,    0,
        0,    0,  352,    0,    0,    0,    0,    0,    0,  196,
      288,    0,    0,    0,  348,    0,    0,    0,    0,    0,
        0,  354,  350,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  241,  124,    0,    0,    0,  358,
        0,  360,    0,    0,    0,    0,    0,    0,  247,    0,
        0,    0,    0,    0,    0,    0,  104,  103,  138,    0,
        0,    0,    0,  332,    0,    0,    0,    0,    0,    0,
        0,  346,    0,    0,    0,    0,  306,  362,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  380,  380,  323,

      380,  380,  380,  380,  380,  380,   97,   98,  380,   30,
      380,  380,  380,  380,   31,  380,   61,   62,  380,  380,
      380,  380,  380,  380,  380,  380,  380,   73,   74,  380,
      380,  380,   83,   84,  380,  380,  380,  380,  353,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  231,    0,
        0,  349,    0,    0,    0,    0,    0,    0,  355,  351,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      242,  113,    0,    0,    0,    0,  359,    0,  361,    0,
        0,    0,    0,    0,  248,    0,    0,    0,    0,  223,
        0,    0,    0,    0,  105,    0,    0,    0,    0,  163,

        0,    0,  333,    0,    0,    0,    0,    0,    0,    0,
      347,    0,  215,    0,    0,    0,    0,  363,    0,    0,
        0,    0,    0,  153,    0,    0,  217,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  286,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  204,  243,  241,    0,
        0,    0,    0,  282,    0,    0,    0,    0,    0,  334,
      249,  247,    0,    0,    0,    0,  368,    0,    0,    0,
        0,    0,    0,    0,  332,    0,  338,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  108,    0,

      328,    0,    0,    0,  318,    0,    0,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,   59,
       60,  380,  380,  380,  380,   32,  380,  380,  380,   33,
      380,  380,   71,   72,  380,  380,   81,   82,  380,   87,
       88,  380,  380,  380,    0,    0,    0,    0,    0,    0,
        0,  197,    0,  289,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  242,    0,  125,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  335,  248,    0,
        0,    0,    0,    0,    0,    0,  105,    0,  139,    0,

        0,    0,  163,    0,  333,    0,  339,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  307,    0,
        0,    0,  329,    0,  153,    0,    0,    0,    0,    0,
        0,    0,  198,  200,    0,    0,    0,    0,    0,  134,
        0,    0,    0,    0,  330,    0,    0,    0,    0,  106,
      310,    0,    0,    0,    0,    0,  243,    0,    0,  128,
        0,    0,  154,    0,    0,    0,    0,  334,  249,    0,
        0,  336,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  338,  186,    0,    0,    0,    0,  110,    0,
        0,    0,    0,    0,  251,    0,  344,    0,    0,  328,

        0,  208,    0,    0,    0,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,   32,  380,   69,   70,   33,  380,  380,
      380,  380,  380,   85,   86,  380,  380,  380,   95,   96,
        0,    0,    0,    0,    0,    0,  197,  289,    0,  287,
        0,    0,    0,    0,    0,    0,    0,    0,  331,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  205,  125,    0,    0,    0,    0,  283,    0,    0,
        0,    0,    0,    0,  335,    0,  337,    0,    0,    0,
      369,    0,    0,    0,  139,    0,    0,    0,    0,    0,

      339,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  252,    0,  345,    0,  307,    0,    0,  109,  329,
        0,    0,    0,    0,  319,    0,    0,    0,  364,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  330,  290,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  263,    0,    0,
        0,    0,    0,    0,    0,    0,  336,    0,  308,    0,
        0,    0,    0,    0,    0,  132,  174,    0,    0,  366,
        0,    0,    0,    0,    0,    0,    0,    0,  253,  251,
        0,  344,    0,    0,    0,  130,    0,  374,  380,  380,

      380,  380,   43,   44,  380,  277,  380,  380,  380,  380,
      380,  380,  380,   55,   56,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,   65,   66,
      380,   67,   68,  380,  380,  380,  380,   79,   80,  380,
       91,   92,   93,   94,    0,  365,    0,    0,  199,    0,
      201,    0,    0,  287,    0,    0,    0,    0,  135,    0,
        0,    0,  331,    0,    0,    0,    0,    0,    0,  107,
        0,    0,  311,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  205,    0,  264,    0,  129,    0,  283,    0,
        0,    0,  155,    0,    0,    0,    0,  337,    0,    0,

      369,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      187,    0,    0,  367,    0,    0,    0,    0,  111,    0,
        0,    0,    0,    0,  252,  345,    0,    0,  109,    0,
        0,  209,    0,  319,    0,    0,  364,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  265,  263,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  366,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  253,    0,    0,    0,    0,    0,  188,  380,  380,

       39,   40,   41,   42,  277,  380,  380,   51,   52,  380,
      380,  380,   53,   54,  380,  380,  101,  102,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,   63,   64,  380,  380,  380,  380,   77,   78,   89,
       90,  365,    0,  199,  201,    0,    0,    0,    0,    0,
      135,    0,    0,    0,    0,  291,    0,    0,    0,    0,
      107,    0,  311,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  264,  129,    0,    0,    0,  155,    0,
        0,    0,    0,    0,    0,  309,    0,    0,    0,    0,
        0,    0,    0,  133,    0,  175,  187,    0,  367,    0,

        0,    0,    0,  111,    0,    0,    0,    0,    0,    0,
        0,    0,  209,    0,  131,    0,    0,  375,    0,  202,
        0,  284,  314,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  265,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  218,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  316,    0,  116,    0,    0,
        0,    0,    0,  206,    0,    0,  380,  380,  380,   37,
       38,  380,   49,   50,  380,  380,  380,  380,  380,  380,
       10,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  291,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  309,
        0,    0,    0,    0,    0,    0,  133,  175,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  131,    0,  375,    0,  189,    0,    0,  226,    0,
        0,    0,  238,    0,    0,  168,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  376,    0,  144,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
        0,    0,    0,  342,    0,    0,  380,  380,  380,  380,
      380,  380,  380,   34,  380,   35,  380,  380,   25,  380,
       10,  380,  380,  380,  380,  380,   23,  380,  380,  380,
      380,  380,   21,  380,  380,   20,  380,  380,  380,  380,
      380,  380,   36,    0,  203,    0,    0,  285,    0,  315,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  219,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      317,    0,    0,  117,    0,    0,    0,    0,  343,    0,
      207,    0,    0,  189,    0,    0,  158,    0,    0,  255,
        0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  120,    0,    0,  240,    0,    0,
        0,  146,  140,    0,    0,  246,    0,  114,  244,  136,
        0,    0,    0,    0,    0,    0,  236,    0,    0,    0,
      342,    0,    0,  380,  380,  380,  380,   47,   48,  380,
       34,   35,  380,  380,   25,  380,  380,  380,  380,  380,
       23,  380,  380,  380,  380,  380,   21,  380,   20,  380,
      380,  380,  380,  380,   36,  203,    0,  285,  315,    0,

        0,  227,    0,    0,  256,    0,    0,  239,    0,  260,
        0,    0,  169,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  377,    0,    0,
      145,    0,    0,    0,  219,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  317,    0,  119,  117,    0,    0,
        0,  343,  207,    0,    0,    0,    0,  257,  255,    0,
        0,  261,  259,    0,  182,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  240,    0,    0,    0,  142,
      246,    0,    0,    0,    0,    0,    0,  164,  234,    0,
        0,    0,    0,    0,  380,  380,  380,  266,  380,   45,

       46,  380,  380,   58,   57,  380,  380,  380,   13,  380,
      380,  380,  380,  380,  380,  380,  380,   12,  380,  380,
      380,  380,  380,  380,  380,  380,    0,    0,  227,    0,
      159,  256,    0,  239,  260,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  121,    0,    0,
        0,  377,    0,  147,  145,    0,  141,    0,    0,    0,
      115,    0,  245,    0,  137,    0,    0,    0,    0,    0,
        0,  119,    0,  237,    0,    0,    0,    0,    0,    0,
        0,  257,    0,    0,    0,  261,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  300,  378,

        0,    0,    0,    0,    0,    0,  126,    0,    0,  320,
        0,  380,  380,  266,  380,  380,  380,  380,   13,  380,
        9,  380,  380,  380,  380,  380,  380,  380,   12,  380,
      380,  380,  276,  380,  380,  380,  380,   76,   75,    0,
        0,  159,    0,    0,    0,  183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  121,    0,    0,    0,  147,
      141,    0,  143,    0,  115,  245,  137,    0,    0,    0,
        0,    0,    0,  165,  237,    0,  235,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  302,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  184,    0,    0,    0,    0,    0,  380,  380,  380,
      380,  380,  380,  380,    9,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  276,  380,  380,  380,    0,    0,
        0,    0,  183,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  301,    0,  379,  143,    0,    0,
        0,    0,    0,    0,  165,  235,    0,  127,    0,    0,
      321,    0,  148,  292,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  172,  122,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  250,    0,  380,  272,  380,
      271,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  273,  380,    0,
        0,    0,    0,    0,  303,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  301,  379,    0,    0,    0,    0,
      185,    0,    0,  127,    0,  321,    0,    0,    0,  166,
        0,    0,    0,  232,    0,    0,    0,    0,    0,    0,
        0,    0,  178,    0,    0,    0,  250,    0,  272,  271,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,   14,  380,   15,  380,  380,   16,  273,  380,
      380,    0,  149,    0,  293,    0,    0,  303,    0,    0,
        0,    0,    0,    0,    0,    0,  173,    0,  123,    0,

        0,    0,    0,  185,    0,    0,    0,    0,    0,    0,
        0,  194,    0,    0,    0,    0,    0,    0,    0,  262,
        0,    0,  156,    0,    0,    0,  380,  270,  380,  269,
      380,  380,  380,  380,  380,   17,  380,  380,  380,  380,
       14,   15,  380,   16,  380,  380,  149,  293,    0,    0,
      167,    0,    0,    0,  233,    0,    0,    0,    0,  173,
      123,    0,    0,    0,    0,  179,    0,    0,    0,    0,
        0,  180,    0,    0,    0,    0,    0,    0,    0,  262,
        0,    0,  160,    0,    0,  270,  269,  380,  380,  380,
       18,  380,  380,   17,  380,  380,  380,  380,  380,  380,

      380,    0,  167,    0,  195,    0,  233,    0,    0,    0,
        0,    0,    0,    0,  179,    0,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  324,    0,
        0,  294,  380,  280,  281,   18,  380,   11,  380,  380,
      380,  380,    8,  380,  380,  380,  268,  380,  267,    0,
      181,  195,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,  161,    0,    0,    0,    0,    0,    0,    0,
      190,    0,    0,    0,    0,  278,  279,   11,  380,  380,
      380,    8,  380,  380,   26,  268,  267,  181,    0,    0,
        0,    0,    0,    0,    0,  325,    0,  161,    0,    0,

      295,    0,    0,    0,  224,  220,    0,  170,    0,    0,
        0,  380,  380,  380,  380,   26,    0,    0,    0,    0,
      191,    0,    0,    0,  325,    0,    0,  295,    0,    0,
      228,    0,    0,  176,    0,  380,  380,  380,  380,    0,
        0,  225,    0,  221,  191,    0,    0,  171,    0,    0,
        0,    0,    0,    0,    0,    0,  380,  380,  380,  380,
        0,  229,  225,  221,    0,  171,    0,    0,  177,    0,
        0,    0,    0,    0,    0,  380,  380,  380,  380,  229,
        0,    0,  177,    0,    0,  254,    0,  258,    0,    0,
        0,  380,  380,  380,  380,    0,    0,    0,  254,  258,

      192,    0,  212,  380,  380,  380,  380,    0,    0,    0,
        0,  380,  322,  380,  380,  380,   19,    0,  193,    0,
        0,  213,    0,  322,  380,  380,   22,   19,  193,    0,
      213,    0,  380,   24,   22,    0,  210,   24,    0,    0,
      211,  211,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,   39,    6,    6,
        1,    6,    1,    1,    6,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2956] =
    {   0,
        0,   66, 4662, 4661, 4672, 4671, 4668, 4667,    0,    0,
        0,    0, 4658, 4657,   13,   17,    3,    5, 4671, 4680,
      131, 4665,  195, 4662,   19,   38, 4651,   43,  254, 4680,
     4637, 4626, 4680,    0, 4680,    0,    0,    0, 4680, 4680,
     4656, 4680, 4680, 4647,    0,    0,   24,   86, 4646,   91,
       24, 4680, 4632, 4621, 4620,    7, 4615,    1, 4601, 4600,
        5,   18,    3,   46, 4615,   67,   62,   21, 4615, 4610,
     4680,  108,  220,  115, 4680,  115, 4644,  294, 4680, 4680,
     4627,  160,   74, 4597,  155,  164, 4602, 4605,  171, 4594,
       37,   72,  219,  225,  220,   53,  312,   74,  160, 4607,

     4623, 4615,    0,    0,    0,    0, 4627, 4680, 4585, 4583,
      182, 4583, 4580, 4597, 4584, 4583, 4573, 4593,  207, 4592,
     4583, 4581, 4579, 4578, 4580, 4588, 4562,  194, 4569,  259,
     4585, 4569,  230, 4575,  230, 4574,  276,  315, 4612,  356,
     4595,  282,  242, 4565,  276,  268, 4570, 4573,  316, 4562,
      309,  282,  337,  324,  338,  224,  342,  346,  327, 4575,
     4680, 4556, 4562,  371, 4554, 4557,  358,   37,  306, 4566,
     4549, 4563, 4552, 4555, 4552,  402,  365, 4581, 4559, 4561,
      372,  415,  363, 4548, 4548, 4553, 4680, 4545, 4545, 4547,
     4536, 4540, 4546, 4533,  233, 4531, 4528, 4535, 4532, 4525,

     4529, 4532,  370, 4524, 4543,  249, 4524, 4529, 4540, 4524,
     4528, 4533, 4519,  431, 4680, 4531, 4530, 4528,  329, 4530,
     4519, 4519, 4517, 4508,  433, 4510, 4506, 4525, 4524, 4519,
     4503, 4517, 4519, 4524, 4507, 4513, 4495, 4530, 4508,  435,
      437, 4500, 4508, 4491, 4510, 4490, 4488, 4512, 4500, 4680,
      443,  445,  450, 4487, 4493,  428, 4485, 4488,  404,  357,
      370,  456, 4481, 4495, 4484, 4487, 4484,  463,  420, 4513,
     4491, 4493,  401,  467,  413, 4480, 4480, 4485,  479, 4477,
     4477, 4479, 4468, 4472, 4478, 4465,  427, 4463, 4460, 4467,
     4464, 4457, 4461, 4464,  432, 4456, 4475,  419, 4456, 4461,

     4472, 4456, 4460, 4465, 4451,  485, 4486, 4450, 4451, 4449,
      445, 4461, 4471,  436,  495, 4457, 4458, 4455, 4450, 4445,
     4444,  501,  503, 4451, 4450,  505,  507, 4449, 4433, 4431,
     4431, 4445, 4431, 4435, 4461, 4441, 4440,  511,  513, 4426,
      521,  523, 4438, 4441,  149, 4439, 4435, 4430, 4426, 4432,
     4420, 4416, 4426, 4414, 4427,  487, 4410, 4438, 4407,  529,
     4406, 4429, 4408, 4424, 4406,  531, 4418, 4402, 4416, 4406,
     4414, 4404, 4399,  494, 4426, 4408,  533, 4389, 4393, 4394,
     4415, 4389,  548, 4393,  551,  555,  557, 4407, 4395, 4386,
     4424,  559,  563, 4399, 4378, 4401, 4409, 4395, 4395, 4393,

      567, 4680, 4680, 4378,  574, 4395, 4383,  578, 4389, 4368,
     4384,  582,  584,  586,  589, 4409, 4373, 4374, 4372,  473,
     4384, 4394,  593,  595, 4380, 4381, 4378, 4373,  597,  600,
     4368, 4367,  602,  605, 4374, 4373,  613,  615, 4372, 4356,
     4354, 4354, 4368, 4354, 4358,  618, 4365, 4364,  621,  623,
     4350,  625,  629, 4362, 4365,  631,  634,  426, 4363,  637,
     4355, 4351, 4357, 4345, 4341, 4351, 4339, 4352,  602, 4335,
     4363, 4332,  653, 4331,  659, 4334, 4350, 4332,  661, 4344,
     4328, 4342, 4332, 4340, 4330, 4325,  665,  663,  669, 4333,
     4320, 4317, 4323,   10, 4335, 4326, 4330, 4315, 4333,  671,

      681, 4319, 4314, 4328, 4326, 4324, 4323,  683,  689,  691,
      699,  211, 4309,  701, 4302, 4316, 4304, 4322, 4315, 4316,
      703, 4338, 4305, 4317,  707, 4308,  709,  713, 4307,  715,
      719, 4322, 4305, 4308, 4293,  722, 4291, 4301, 4304, 4303,
     4304,  447,  725, 4288, 4284, 4281, 4310,  727, 4284, 4296,
     4279,  493, 4293, 4289,  732,  734, 4292, 4295, 4292, 4276,
     4273,  738,  743, 4274, 4286, 4271, 4270, 4680, 4273, 4296,
     4282, 4280, 4283, 4282, 4267,  745,  748, 4265, 4279, 4270,
     4253, 4273,  750,  755, 4277,  761,  765,  767, 4263, 4253,
     4264, 4257,  769,  771,  773,  775, 4253, 4254, 4251, 4262,

     4249, 4242, 4245, 4248,  781,  785, 4251, 4241,  791,  793,
      799, 4245, 4240,  801,  803,  806, 4250, 4237, 4234, 4240,
      549, 4252, 4243, 4247,  808,  810, 4232, 4250,  814,  816,
     4236, 4231, 4245, 4243,  819, 4241, 4240,  821,  824,  826,
      830,  312, 4226,  832, 4219, 4233, 4221, 4239, 4232, 4233,
      834,  837,  839, 4255, 4222, 4234,  842, 4225,  844,  846,
     4224,  850,  853, 4239, 4222, 4225, 4210,  855, 4208,  857,
     4218, 4221, 4220,  860,  862, 4221,  493,  866, 4205, 4201,
     4198,  868,  871, 4202, 4214, 4197,  565, 4211, 4207,  873,
      876, 4210,  878,  884, 4213, 4210, 4194, 4191,  889,  891,

     4192, 4204, 4189, 4188,  894, 4191, 4214,  896,  899, 4222,
     4198, 4201,  901, 4195, 4199, 4194, 4193, 4223, 4195, 4680,
     4176, 4188,  865, 4190,  905, 4188, 4182, 4170, 4184, 4174,
     4169,  907,  912, 4168, 4189, 4183, 4178, 4181,  636, 4167,
     4175, 4174,  914, 4200,  917, 4680,  497, 4159, 4152,  921,
     4162,  924, 4177, 4154, 4159,  926,  931, 4193,  934, 4165,
     4155, 4150, 4149, 4146, 4156, 4150,  936, 4680, 4171, 4142,
     4146, 4159,  938,  942,  944, 4140, 4155, 4138, 4138, 4149,
     4151,  948, 4135, 4134, 4145, 4139, 4680,  954, 4136, 4078,
      956, 4083, 4065, 4086, 4062, 4079, 4077,   77,   92,  960,

      158,  197,  255,  289,  306,  962, 4680, 4680,  356,  968,
      392,  397,  407,  456,  972,  974,  563,  564,  551,  549,
      582,  980,  982,  984,  600,  587,  986,  642,  646,  632,
      631,  992,  672,  672,  999, 1001,  643, 1007, 1009,  650,
      657,  655,  663,  706,  683, 1011, 1014,  686, 1016,  878,
      696, 1018,  700,  706,  697,  715,  712,  722, 1022, 1024,
      729,  756,  759,  770,  790,  861,  797,  822,  845, 1027,
     1030, 1032, 1034,  910,  855,  858, 1036,  878, 1038,  918,
      902,  914, 1040, 1043, 1045,  928,  925,  923,  933, 1047,
      933,  957,  954, 1050, 1052, 1056,  963, 1002, 1059, 1061,

     1025, 1066, 1068, 1072, 1008, 1035, 1020, 1022, 1035, 1039,
     1082, 1025, 1088, 1029, 1044, 1048, 1091, 1093, 1056, 1046,
     1097, 1056, 1100, 1102, 1044, 1067, 1107, 1072, 1067, 1072,
     1070, 1065, 1061, 1062, 1101, 1062, 4680, 1064, 1070, 1084,
     1066, 1082, 1072, 1074, 1127, 1072, 1092, 1089, 1080, 1084,
     1078, 1086, 1090, 1091, 1098, 1084, 4680, 1140, 1143, 1136,
     1104, 1105, 1128, 1116, 1108, 1123, 1104, 1101, 1157, 1159,
     1161, 1163, 1145, 1165, 1125, 1116, 4680, 1123, 1107, 1149,
     1120, 1156, 1119, 1132, 1181, 1183, 1185, 1123, 1130, 1131,
     1147, 1134, 1149, 1163, 1147, 1194, 1199, 1159, 4680, 1201,

     1204, 1154, 1156, 1158, 4680, 1168, 1162, 1157, 1151, 1217,
     1158, 1162, 1178, 1201, 1176, 1185, 1224, 1175, 1165, 4680,
     4680, 1185, 1232, 1171, 1234, 1236, 1239, 1242, 1249, 1251,
     1203, 1189, 4680, 4680, 1216, 1255, 4680, 4680, 1257, 1256,
     1256, 1264, 1266, 1270, 1225, 1223, 1219, 1221, 1260, 1222,
     1281, 1283, 1285, 1287, 1289, 1235, 1241, 1255, 1237, 1253,
     1244, 1246, 1301, 1242, 1265, 1263, 1254, 1258, 1252, 1260,
     1264, 1265, 1272, 1258, 1314, 1317, 1319, 1321, 1281, 1282,
     1305, 1326, 1286, 1303, 1282, 1280, 1336, 1338, 1342, 1345,
     1291, 1288, 1347, 1298, 1286, 1328, 1352, 1354, 1356, 1305,

     1342, 1309, 1365, 1321, 1370, 1372, 1374, 1312, 1319, 1320,
     1336, 1323, 1338, 1352, 1336, 1383, 1388, 1390, 1392, 1348,
     1394, 1396, 1399, 1349, 1406, 1351, 1354, 1412, 1366, 1361,
     1414, 1370, 4680, 4680, 1371, 1363, 1378, 1364, 1376, 4680,
     1372, 1367, 1370, 1430, 1432, 1370, 1371, 1396, 1416, 1416,
     4680, 1420, 1385, 1392, 1400, 1409, 1446, 1402, 1450, 4680,
     1403, 1401, 4680, 1396, 1404, 1426, 1405, 1461, 1463, 1415,
     1467, 1469, 1433, 1416, 1414, 1436, 1433, 1419, 1431, 1432,
     1438, 1425, 1483, 1439, 1485, 1445, 1447, 1447, 1462, 1438,
     1440, 1455, 1494, 1482, 1498, 1501, 1504, 1454, 1451, 1512,

     1453, 4680, 1468, 1459, 1473, 1471, 1518, 1520, 1522, 1528,
     1478, 1530, 1477, 1489, 1486, 1536, 1538, 1507, 1545, 1533,
     1566, 1569, 1498, 1548, 1576, 1549, 1549, 1582, 1498, 1501,
     1511, 1584, 1586, 4680, 4680, 1592, 1594, 1600, 1561, 1566,
     1607, 1527, 1609, 1611, 1529, 1523, 1613, 1615, 1617, 1619,
     1546, 1533, 1550, 1627, 1551, 1547, 1566, 1629, 1633, 1567,
     1568, 1593, 1616, 1636, 1638, 1628, 1585, 1592, 1606, 1614,
     1654, 1658, 1660, 1664, 1666, 1601, 1670, 1672, 1622, 1675,
     1594, 1609, 1636, 1623, 1682, 1686, 1688, 1642, 1628, 1691,
     1693, 1636, 1658, 1655, 1698, 1643, 1656, 1657, 1663, 1650,

     1707, 1709, 1711, 1671, 1673, 1673, 1716, 1665, 1667, 1682,
     1721, 1727, 1732, 1729, 1671, 1734, 1669, 1737, 1739, 1741,
     1688, 1745, 1706, 1753, 1755, 1694, 1715, 1758, 1761, 1706,
     1713, 1719, 1709, 1747, 1718, 1730, 1725, 1726, 1774, 4680,
     1730, 1720, 1736, 1741, 1731, 1743, 1730, 1725, 1745, 1747,
     1744, 1745, 1762, 1751, 1734, 1792, 1779, 1795, 1755, 1766,
     1761, 1750, 1760, 1750, 1742, 1767, 1809, 1751, 4680, 1769,
     1755, 1775, 1768, 1760, 1767, 4680, 4680, 1761, 1818, 1820,
     1781, 1804, 1767, 1788, 1796, 1771, 1806, 1791, 1831, 1834,
     1827, 1837, 1787, 1794, 1791, 4680, 1800, 1787, 1783, 1845,

     1848, 1855, 1847, 1847, 1861, 1863, 1802, 1865, 1867, 1815,
     1824, 1813, 1873, 1874, 1875, 1819, 1882, 1884, 1834, 1839,
     1834, 1840, 1841, 1855, 1859, 1866, 1860, 1899, 1898, 1898,
     1848, 4680, 4680, 1851, 1874, 1850, 1910, 1906, 1911, 1919,
     1914, 1916, 4680, 4680, 1925, 1927, 1866, 1929, 1931, 1933,
     1935, 1886, 1892, 1941, 1882, 1923, 1894, 1946, 1949, 1911,
     1906, 1907, 1954, 1956, 1912, 1902, 1918, 1924, 1963, 1965,
     1918, 1968, 1972, 1932, 1922, 1917, 1937, 1939, 1937, 1938,
     1956, 1943, 1985, 1987, 1989, 1991, 1993, 1953, 1996, 1966,
     1961, 2000, 2003, 1955, 1965, 1955, 1947, 2010, 1957, 2013,

     2016, 1976, 1962, 1982, 1975, 1967, 1974, 2024, 2026, 2029,
     2031, 1977, 2034, 2036, 1997, 2021, 1986, 2045, 2047, 2012,
     2020, 1995, 2030, 2015, 2055, 2057, 2007, 2015, 2062, 2014,
     2065, 2067, 2069, 2071, 2031, 2074, 2076, 2016, 2041, 2020,
     2026, 2034, 2028, 2040, 2035, 2046, 2038, 2039, 2043, 2045,
     2052, 2039, 2045, 2059, 2051, 2044, 2060, 2045, 2050, 2065,
     2049, 2063, 2106, 2108, 2101, 2061, 2072, 2073, 2075, 2073,
     2078, 2085, 2068, 2099, 2064, 2076, 2082, 2072, 2083, 2084,
     2094, 2128, 2099, 2086, 2087, 2078, 2085, 2113, 2091, 2087,
     2090, 2140, 2086, 2086, 2104, 2107, 2095, 4680, 2127, 2148,

     2149, 2149, 4680, 4680, 2155, 2106, 2160, 2155, 2157, 2114,
     2109, 2125, 4680, 4680, 2115, 2169, 4680, 4680, 2120, 2175,
     2115, 2135, 2139, 2128, 2133, 2136, 2125, 2131, 2152, 2136,
     2131, 4680, 4680, 2141, 2142, 2128, 2149, 4680, 4680, 4680,
     4680, 2192, 2132, 2195, 2197, 2161, 2139, 2145, 2153, 2146,
     2204, 2160, 2155, 2166, 2209, 2211, 2161, 2162, 2166, 2168,
     2217, 2177, 2220, 2166, 2172, 2187, 2179, 2172, 2188, 2173,
     2178, 2193, 2177, 2233, 2235, 2187, 2198, 2199, 2240, 2203,
     2201, 2206, 2213, 2226, 2247, 2249, 2195, 2206, 2212, 2202,
     2213, 2214, 2257, 2259, 2263, 2265, 2267, 2228, 2269, 2239,

     2227, 2228, 2219, 2276, 2229, 2257, 2235, 2231, 2234, 2227,
     2245, 2248, 2287, 2289, 2291, 2242, 2294, 2296, 2298, 4680,
     2245, 4680, 4680, 2259, 2246, 2261, 2254, 2250, 2256, 2253,
     2268, 2269, 2262, 2268, 2259, 2267, 2275, 2272, 2262, 2287,
     2281, 2272, 2277, 2274, 2325, 2278, 2286, 2291, 2288, 2289,
     2291, 2293, 2288, 2293, 2275, 4680, 2285, 2296, 2288, 2300,
     2285, 2290, 2286, 2289, 2296, 4680, 2304, 4680, 2295, 2289,
     2307, 2298, 2351, 4680, 2296, 2314, 2304, 2315, 2300, 4680,
     4680, 2358, 4680, 4680, 2318, 2361, 2363, 2323, 2367, 2369,
     2373, 2321, 2326, 2355, 2330, 2384, 2338, 2337, 2346, 2387,

     2330, 2390, 2339, 2332, 2341, 2395, 2399, 2342, 2402, 2405,
     2365, 2352, 2368, 2360, 2356, 2415, 2367, 2364, 2379, 2380,
     2374, 2379, 2371, 2379, 2387, 2384, 2374, 2399, 2393, 2384,
     2389, 2395, 2400, 2397, 2398, 2400, 2402, 2397, 2383, 2445,
     2447, 2397, 2408, 2400, 2412, 2397, 2454, 2456, 2406, 2402,
     2405, 2412, 2463, 2423, 2466, 2416, 2410, 2428, 2471, 2473,
     2418, 2476, 2439, 2482, 2484, 2489, 2418, 2437, 4680, 2435,
     2492, 2461, 4680, 2495, 2440, 4680, 2456, 2444, 2445, 2468,
     2465, 2468, 2456, 2457, 2473, 2470, 2475, 2514, 2470, 2466,
     2469, 4680, 2464, 4680, 2478, 2458, 2522, 2471, 2474, 2471,

     2471, 2471, 2497, 2506, 2494, 2491, 2492, 4680, 2484, 2484,
     2521, 2481, 2540, 2542, 2498, 2503, 2505, 2486, 2510, 2549,
     2551, 2502, 2557, 2559, 2561, 2564, 2566, 2568, 2572, 2513,
     2576, 2532, 2522, 2560, 2535, 2583, 2585, 2547, 2533, 2559,
     2548, 2591, 2593, 2553, 2598, 2600, 2555, 2564, 2554, 2583,
     2564, 2607, 2609, 2613, 2616, 2549, 2618, 2622, 2624, 2626,
     2570, 2629, 2575, 2634, 2599, 2636, 2640, 2581, 2642, 2603,
     2590, 2590, 2613, 2610, 2614, 2601, 2602, 2618, 2616, 2621,
     2609, 2612, 2662, 2609, 2665, 2625, 2605, 2616, 2670, 2672,
     2623, 2620, 2620, 2621, 2646, 2656, 2644, 2641, 2642, 2686,

     2688, 2690, 2692, 2694, 2645, 2645, 2681, 2699, 2702, 2708,
     2710, 2658, 2664, 2712, 2696, 2674, 4680, 2717, 2704, 2720,
     2670, 2727, 2709, 2730, 2683, 2678, 2702, 2680, 2699, 2681,
     2700, 2685, 2714, 2687, 4680, 2706, 2746, 2748, 2710, 2694,
     2714, 4680, 4680, 2711, 2754, 2756, 2703, 4680, 4680, 4680,
     2707, 2708, 2716, 2708, 2724, 2709, 2710, 2719, 2713, 2715,
     2771, 2721, 2754, 2757, 2776, 2723, 2779, 2778, 2778, 2728,
     2786, 2791, 2793, 2795, 2801, 2734, 2742, 2803, 2743, 2754,
     2808, 2749, 2792, 2773, 2812, 2758, 2815, 2763, 2819, 2761,
     2784, 2778, 2779, 2828, 2830, 2832, 2815, 2835, 2837, 2797,

     2840, 2843, 2845, 2847, 2849, 2799, 2852, 2856, 2858, 2863,
     2812, 2865, 2868, 2810, 2838, 2816, 2834, 2817, 2836, 2821,
     2850, 2821, 2881, 2840, 2826, 2846, 2885, 2887, 2889, 2891,
     2893, 2897, 2853, 2844, 2901, 2907, 2909, 2913, 2851, 2853,
     2865, 2860, 2876, 2861, 2918, 2920, 2925, 2929, 2931, 2875,
     2872, 2933, 2936, 2886, 2919, 2902, 2890, 2942, 2944, 2938,
     2929, 2949, 2951, 2944, 4680, 2897, 2898, 2920, 2910, 2914,
     2912, 2916, 2911, 2919, 2917, 2967, 2927, 2914, 2916, 4680,
     2972, 2932, 2920, 2949, 2928, 2921, 2922, 4680, 4680, 2938,
     2943, 2942, 2932, 2935, 2933, 2934, 2988, 2990, 2935, 4680,

     4680, 2970, 2994, 4680, 4680, 2958, 2960, 3000, 3003, 3005,
     2965, 2962, 2957, 2971, 2973, 2966, 3015, 3017, 2957, 2991,
     3021, 2974, 2983, 2971, 3027, 3031, 2992, 2982, 3037, 3039,
     3042, 3044, 3028, 3048, 3050, 3052, 3056, 2989, 3001, 3021,
     3011, 3015, 3013, 3017, 3012, 3019, 3068, 3070, 3017, 3016,
     3018, 3074, 3076, 3078, 3080, 3084, 3086, 3088, 3040, 3092,
     3094, 3096, 3100, 3104, 3108, 3035, 3071, 3053, 3049, 3053,
     3112, 3114, 3116, 3120, 3122, 3076, 3086, 3074, 3077, 3071,
     3072, 3132, 3089, 3092, 3097, 3138, 3093, 3084, 3103, 3096,
     3085, 3085, 3103, 3104, 3088, 3096, 3107, 3099, 4680, 4680,

     3095, 3106, 3101, 3105, 3122, 3104, 4680, 3106, 3116, 4680,
     3117, 3111, 3101, 3162, 3146, 3122, 3120, 3110, 3168, 3170,
     3172, 3136, 3116, 3125, 3131, 3122, 3125, 3126, 3182, 3143,
     3133, 3187, 3189, 3149, 3137, 3137, 3194, 4680, 4680, 3139,
     3141, 3202, 3158, 3166, 3205, 3207, 3153, 3172, 3165, 3154,
     3154, 3172, 3173, 3157, 3165, 3218, 3179, 3222, 3224, 3226,
     3228, 3230, 3232, 3178, 3235, 3240, 3242, 3192, 3192, 3197,
     3214, 3196, 3249, 3251, 3253, 3255, 3257, 3259, 3210, 3262,
     3223, 3228, 3211, 3226, 3220, 3223, 3226, 4680, 3216, 3224,
     3234, 3236, 3244, 3224, 3239, 3231, 3266, 3244, 3229, 3244,

     3228, 4680, 3242, 3234, 3250, 3291, 3243, 3294, 3296, 3246,
     3247, 3268, 3250, 3256, 3303, 3250, 3265, 3253, 3269, 3266,
     3267, 3258, 3259, 3259, 3317, 3263, 3320, 3265, 3285, 3268,
     3276, 3278, 3327, 3329, 3274, 3281, 3291, 3293, 3301, 3281,
     3296, 3288, 3323, 3341, 3345, 3347, 3349, 3351, 3287, 3311,
     3295, 3357, 3309, 3304, 3360, 3363, 3365, 3367, 3329, 3370,
     3373, 3325, 4680, 4680, 3320, 3335, 3336, 3330, 3323, 3325,
     3327, 3367, 3348, 3354, 4680, 4680, 3333, 3347, 3344, 3335,
     3350, 3343, 3348, 3350, 3396, 3398, 3358, 3403, 3405, 3407,
     3409, 3352, 3352, 3371, 3357, 3363, 3396, 3362, 3362, 3380,

     3370, 3385, 3424, 3426, 3382, 3429, 3431, 3433, 3417, 3436,
     3441, 3397, 3402, 3446, 3449, 3394, 3396, 3398, 3438, 3419,
     3425, 3459, 3462, 3409, 3465, 3467, 3423, 3414, 3429, 3475,
     3478, 3422, 3434, 3481, 3438, 3484, 3444, 3447, 3431, 4680,
     3447, 3435, 3457, 4680, 3441, 3456, 3446, 3444, 3459, 3498,
     3448, 3468, 4680, 3460, 3461, 3458, 3505, 3456, 3508, 3510,
     3514, 3516, 3455, 3462, 3468, 3459, 3521, 3468, 3467, 3474,
     3487, 3531, 3533, 3536, 3538, 3475, 3540, 3542, 3546, 3477,
     3492, 3548, 3551, 3555, 3557, 3496, 3559, 3561, 3508, 3530,
     3566, 3516, 3531, 3522, 3520, 3575, 3577, 3579, 3582, 3535,

     3532, 3552, 3586, 3588, 3549, 3550, 3547, 3544, 3541, 3555,
     3580, 4680, 3561, 3542, 3553, 3545, 3577, 3554, 3606, 3608,
     3559, 3559, 4680, 3556, 3562, 3557, 3615, 3617, 3619, 3622,
     3624, 3626, 3572, 3577, 3631, 3634, 3598, 3591, 3583, 3592,
     3642, 3646, 3593, 3648, 3601, 3591, 3652, 3654, 3614, 3657,
     3659, 3661, 3625, 3664, 3666, 3610, 3620, 3612, 3644, 3673,
     3677, 3624, 3629, 3629, 3682, 3684, 3686, 3632, 3638, 3633,
     3645, 4680, 3637, 3644, 3643, 3637, 3654, 3646, 3659, 3702,
     3644, 3677, 4680, 3661, 3650, 3707, 3709, 3711, 3713, 3719,
     3721, 3723, 3660, 3726, 3671, 3669, 3729, 3689, 3676, 3734,

     3738, 3740, 3744, 3746, 3749, 3687, 3753, 3691, 3693, 3714,
     3705, 3718, 3703, 3733, 3762, 3764, 3766, 3768, 3726, 3715,
     3719, 3731, 3716, 3734, 3734, 3721, 3719, 3735, 4680, 3729,
     3746, 4680, 3784, 3783, 3783, 3790, 3792, 3794, 3754, 3746,
     3756, 3799, 3801, 3774, 3804, 3807, 3809, 3811, 3814, 3816,
     3819, 3822, 3766, 3785, 3785, 3772, 3770, 3785, 3832, 3782,
     3835, 3837, 3839, 3805, 3842, 3787, 3807, 3804, 3792, 3793,
     3818, 3809, 3807, 3795, 3813, 4680, 4680, 3858, 3800, 3803,
     3832, 3862, 3811, 3865, 3867, 3869, 3871, 3873, 3833, 3820,
     3821, 3880, 3836, 3836, 3883, 3885, 3828, 3888, 3848, 3891,

     3893, 3850, 3840, 3843, 4680, 4680, 3843, 4680, 3850, 3860,
     3857, 3848, 3876, 3854, 3851, 3909, 3855, 3913, 3915, 3917,
     3919, 3864, 3922, 3873, 3925, 3885, 3883, 3933, 3879, 3883,
     4680, 3881, 3894, 4680, 3895, 3894, 3888, 3885, 3897, 3944,
     3946, 3948, 3950, 3952, 3954, 3901, 3957, 3962, 3916, 3966,
     3920, 3917, 3914, 3924, 3935, 3928, 3922, 3918, 3930, 3925,
     3978, 3982, 3984, 3986, 3934, 3988, 3954, 3991, 3994, 3951,
     3997, 3999, 3950, 3960, 3946, 3953, 3959, 3955, 3957, 4009,
     3960, 3971, 4015, 3960, 4018, 4020, 4022, 4024, 3982, 3981,
     3972, 3973, 3978, 3980, 3976, 3990, 3989, 3980, 4038, 4040,

     4680, 3998, 4680, 4043, 3994, 3990, 4047, 4049, 4007, 4052,
     4009, 4055, 4058, 4004, 4062, 4065, 4070, 4072, 4074, 4023,
     4077, 4080, 4025, 4083, 4085, 4088, 4090, 4093, 4095, 4040,
     4100, 4042, 4103, 4105, 4107, 4053, 4680, 4110, 4112, 4114,
     4118, 4120, 4680, 4131, 4136, 4141, 4146, 4151, 4156, 4161,
     4166, 4171, 4175, 4180, 4185
    } ;

static yyconst flex_int16_t yy_def[2956] =
    {   0,
     2944, 2944, 2945, 2945, 2946, 2946, 2947, 2947, 2948, 2948,
     2948, 2948, 2949, 2949, 2950, 2950, 2951, 2951, 2943, 2943,
     2943, 2943,   21, 2943,   23,   23,   23,   23, 2943, 2943,
       23,   23, 2943, 2952, 2943, 2953, 2954, 2955, 2943, 2943,
     2943, 2943, 2943, 2943,   21,   23,   23,   23,   23,   23,
       29, 2943,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2943,   23,   23,   23, 2943,   23, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

       23,   23, 2952, 2953, 2954, 2955, 2943, 2943,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943,   23, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23, 2943, 2943,   23,   23,   23,   23,   23,   23,   23,
       23, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,

       23,   23,   23,   23,   23,   23, 2943, 2943,   23,   23,
       23,   23,   23,   23,   23,   23, 2943, 2943,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2943, 2943,   23,
       23,   23, 2943, 2943,   23,   23,   23,   23, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2943,
     2943,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2943, 2943,   23,   23, 2943, 2943,   23, 2943,
     2943,   23,   23,   23, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2943, 2943,   23,   23,   23,
       23,   23,   23, 2943, 2943,   23,   23,   23, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,

       23,   23, 2943, 2943,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2943, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2943, 2943,
       23, 2943, 2943,   23,   23,   23,   23, 2943, 2943,   23,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,

     2943, 2943, 2943, 2943,   23,   23,   23, 2943, 2943,   23,
       23,   23, 2943, 2943,   23,   23, 2943, 2943,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2943, 2943,   23,   23,   23,   23, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23, 2943,
     2943,   23, 2943, 2943,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943,   23,   23,   23,   23, 2943, 2943,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943,   23,   23,   23,   23,   23, 2943,

     2943,   23,   23, 2943, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943,   23, 2943, 2943,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943,   23,   23,   23,   23,   23, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943,   23,   23,   23,   23, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943,   23,   23,   23,   23, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943,   23,   23,   23,   23, 2943, 2943, 2943,
     2943,   23,   23,   23,   23,   23,   23, 2943, 2943, 2943,
     2943, 2943, 2943,   23,   23,   23,   23,   23, 2943, 2943,
     2943, 2943,   23,   23,   23, 2943, 2943,   23, 2943, 2943,
     2943, 2943,    0, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943
    } ;

static yyconst flex_int16_t yy_nxt[4747] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2943,   40,
       44,   41,   44,  718,   31,   41, 2943, 2943,   48,   32,
       50,   50,   50,   48, 2943,   50,   50,   50,  719,   72,
       72, 2943,  121,   53,   76,   76,  110,  117,   53,   73,
       73,   73,   48,  113,   50,   50,   50,  118,  119,   74,
      111,  133,  122,  114,   74,   33,   20,   21,   21,   20,
       22,  120,   24,  134,   25,   26,   27,   28,   28,   28,
       29,   74,   30,   20,  181,  123,   74,   72,   72,  182,
       31,  316,   76,   76,  317,   32,  199,   73,   73,   73,

       48,  129,   50,   50,   50,  124,  200,   74,  126,   72,
       72,  183,   74,  165,  127,  130,   76,   76,  131,  184,
      128,  208,  137,  137,  166,  132,  138,  138,  138,   74,
      209,   33,   45,   45,   74, 1008,   46,  210,   46,   47,
       48,   49,   50,   50,   50,   51,   46,   52, 1009,   46,
       46,   46,   46,   46,   46,   53,   46,   46,   46,   46,
       54,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   55,   56,   57,   58,   59,   60,   46,   61,   46,
       46,   62,   63,   64,   65,   46,   46,   46,   66,   67,
       68,   69,   70,   46,   46,   46,   46,   46,  168,  538,

      162, 1010,  169,   46,   46,   46,   46,   46,   46, 2943,
      163, 2943,  211,  539,  170,  176,  171,  212,  164,   46,
      172,   72,   72,  177,   46,  218,  173,  227,  178,  179,
      734,   73,   73,   73,  219,   46,   46,   46,   46,   46,
       46,   74,   46,  228,  237,   46,   46,   46,   46, 1011,
      244,  238,   46,   46,   46,   46,   46,   77,  185,  195,
      240,  240,  186,   74,   78,  190,  245,  291,  735,  187,
      196,   79,  188,  197,  241,   80,  198,  292,  189,  191,
      247,  257,  192,  193,  194,   81,  248,  138,  138,  138,
      352,  353,  258,   82,   83,   84,   85,   86,   87,   88,

      366,   89,   90,  367,   91,   92,   93,   94,   95, 1012,
       96,   97,   98,   99,  100,  140,   72,   72,  262,  260,
      263,  275,  254,  261,  264,  141,  138,  138,  138,  276,
      265,  861,  255,  142,  143,  144,  145,  146,  147,  148,
      256,  149,  150, 1013,  151,  152,  153,  154,  155, 1014,
      156,  157,  158,  159,  160,  201,  273,  251,  251,  202,
      268,  274,  318,  378,  282,  203,  319,  204,  269,  862,
      205,  206,  252,  270,  271,  207,  277,  287,  283,  303,
      278,  284,  285,  286,  304,  293,  379,  279,  288,  294,
      280,  289,  308,  300,  290,  295,  281,  296,  309, 1015,

      297,  298,  301,  326,  326,  299,  310,  328,  313,  302,
      314,  425,  329,  336,  426,  315,  338,  338,  327,  330,
      361,  340,  331,  332,  337,  341,  427,  362, 1016,  363,
      428,  339,   72,   72,  385,  385,  240,  240,  401,  401,
     1017,  402,  447,  403,  251,  251,  412,  412,  386,  417,
      241,  413,  413,  448,  422,  418,  423,  429,  429,  252,
     1018,  424,  439,  419,  437,  437,  414,  440,  449,  449,
      479,  451,  430,  480,  441,  452,  671,  442,  443,  438,
      456,  456,  474,  450,  465,  466,  488,  488,  494,  475,
      672,  476,  495,  498,  499,  457,  500,  500,  765,  431,

      766,  489,  508,  508,  510,  510,  326,  326,  514,  514,
     1019,  501,  338,  338,  525,  525,  621,  509,  571,  511,
      622,  327,  527,  527,  530,  530,  572,  339,  550,  551,
      555,  555,  562,  562,  576,  576,  778,  528,  961,  531,
      779,  573,  532,  533,  892,  556,  893,  563,  577,  583,
      583,  534,  385,  385,  962,  529,  586,  586,  587,  587,
      593,  593,  844,  584,  595,  595,  386, 1020,  401,  401,
     1021,  402,  588,  403,  594,  605,  605,  845,  596,  609,
      609, 1022,  535,  412,  412,  413,  413,  614,  614,  606,
      615,  615, 1023,  610,  625,  625,  629,  629,  429,  429,

      414,  635,  635,  638,  638,  616,  640,  640,  907,  626,
     1024,  630,  908,  430,  437,  437,  644,  644,  639,  652,
      652,  641,  449,  449,  657,  657,  659,  659, 1031,  438,
      662,  662,  456,  456,  653,  670,  670,  450,  674,  674,
     1032,  660,  654,  685,  686,  663, 1033,  457,  664,  665,
      627,  628, 1034,  675,  690,  690,  953,  666,  954,  661,
      693,  693,  699,  699,  488,  488,  708,  708, 1035,  691,
      713,  713,  500,  500, 1036,  694, 1037,  700, 1038,  489,
      676,  709,  725,  725,  508,  508, 1042,  501,  667,  710,
      732,  732,  510,  510, 1045,  695, 1046,  711, 1047,  509,

      733,  733,  514,  514,  743,  743, 1048,  511,  525,  525,
      527,  527,  712,  744,  750,  750,  530,  530, 1049,  745,
      752,  752, 1050,  757,  757,  528,  767,  767,  773,  773,
     1056,  531,  758,  555,  555,  782,  782, 1059,  759,  562,
      562,  768, 1060,  774,  788,  788,  576,  576,  556,  800,
      800,  583,  583, 1061,  563, 1062,  806,  806, 1063,  807,
      577,  808,  586,  586, 1064,  584,  587,  587,  810,  810,
      593,  593,  815,  815,  595,  595,  816,  816, 1065,  817,
      588,  818,  605,  605,  594, 1066,  827,  827,  596,  828,
     1067,  829,  609,  609,  832,  832,  606,  833, 1068,  834,

      835,  835,  614,  614,  615,  615,  610,  839,  839,  625,
      625,  849,  849, 1069,  836,  629,  629,  852,  852,  616,
      635,  635,  638,  638,  626,  859,  859,  640,  640, 1070,
      630,  860,  860,  644,  644,  870,  870,  639,  652,  652,
      872,  872,  641,  657,  657,  659,  659,  877,  877, 1073,
      871,  662,  662,  653,  879,  879,  884,  884,  670,  670,
      660,  674,  674,  890,  890, 1074,  663,  894,  894,  899,
      899,  885,  902,  902,  690,  690,  675,  911,  911,  693,
      693, 1071,  895, 1072,  900,  913,  913,  903, 1075,  691,
      699,  699,  918,  918,  694,  923,  923,  708,  708,  901,

      927,  927,  713,  713,  939,  700,  725,  725,  732,  732,
      924, 1081,  709,  733,  733,  743,  743, 1057,  959,  959,
     1082,  940,  750,  750,  744,  752,  752,  969,  969, 1083,
      745,  960,  757,  757, 1058,  972,  972,  767,  767,  773,
      773,  758,  970,  985,  985,  986,  986,  759,  973,  782,
      782, 1079,  768, 1084,  774,  788,  788, 1000, 1000, 1085,
      987,  800,  800,  806,  806, 1086,  807, 1080,  808,  810,
      810, 1090, 1001,  815,  815,  816,  816, 1091,  817, 1092,
      818, 1025, 1025, 1027, 1027, 1029, 1029,  827,  827, 1093,
      828, 1094,  829,  832,  832, 1026,  833, 1028,  834, 1030,

      835,  835, 1039, 1039, 1095, 1040, 1096, 1041, 1043, 1043,
      839,  839, 1051, 1051,  836, 1053, 1053,  849,  849,  852,
      852, 1101, 1044,  859,  859,  860,  860, 1052,  870,  870,
     1054, 1076, 1076,  872,  872, 1077, 1077,  877,  877,  879,
      879, 1087, 1087,  871,  884,  884, 1089, 1089,  890,  890,
     1078,  894,  894, 1097, 1097, 1102, 1088, 1098, 1098,  885,
      899,  899, 1103, 1103, 1104, 1108,  895,  902,  902, 1105,
     1105, 1055, 1099, 1106, 1106,  900, 1109, 1110, 1111, 1112,
     1113, 1114,  903,  911,  911, 1115, 1100, 1116, 1107,  913,
      913, 1117, 1118, 1118,  918,  918, 1120, 1121, 1122, 1122,

     1124,  923,  923, 1125, 1125, 1126, 1127, 1119,  927,  927,
     1128, 1129, 1130, 1123, 1131, 1132,  924, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1144,
     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
     1156, 1157, 1157, 1145,  959,  959, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1166, 1167, 1170, 1165,  960,  969,  969,
     1168, 1168, 1169, 1169,  972,  972, 1171, 1171, 1173, 1174,
     1175, 1176, 1177,  970, 1178, 1181, 1179,  973, 1180, 1182,
     1184, 1172,  985,  985,  986,  986, 1183, 1183, 1185, 1186,
     1187, 1188, 1189, 1190, 1192, 1193, 1193, 1191, 1199,  987,

     1196, 1196, 1000, 1000, 1194, 1200, 1200, 1201, 1202, 1203,
     1195, 1204, 1205, 1206, 1207, 1197, 1210, 1001, 1208, 1208,
     1211, 1212, 1213, 1214, 1215, 1216, 1216, 1218, 1219, 1220,
     1223, 1198, 1209, 1221, 1221, 1025, 1025, 1224, 1224, 1217,
     1027, 1027, 1229, 1225, 1225, 1230, 1226, 1222, 1227, 1026,
     1029, 1029, 1228, 1228, 1028, 1231, 1232, 1232, 1039, 1039,
     1234, 1040, 1235, 1041, 1030, 1236, 1236, 1043, 1043, 1241,
     1233, 1238, 1238, 1242, 1239, 1243, 1240, 1244, 1245, 1237,
     1246, 1044, 1051, 1051, 1247, 1247, 1053, 1053, 1248, 1248,
     1249, 1249, 1251, 1252, 1253, 1254, 1255, 1052, 1256, 1257,

     1260, 1054, 1258, 1258, 1261, 1250, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1271, 1259, 1076, 1076,
     1077, 1077, 1273, 1273, 1274, 1275, 1276, 1277, 1277, 1280,
     1272, 1283, 1281, 1284, 1288, 1078, 1282, 1087, 1087, 1285,
     1285, 1289, 1278, 1089, 1089, 1292, 1286, 1286, 1290, 1290,
     1293, 1294, 1088, 1097, 1097, 1098, 1098, 1295, 1295, 1296,
     1279, 1287, 1297, 1291, 1298, 1299, 1103, 1103, 1300, 1302,
     1099, 1105, 1105, 1106, 1106, 1301, 1301, 1303, 1304, 1305,
     1306, 1307, 1308, 1310, 1311, 1311, 1309, 1317, 1107, 1313,
     1313, 1118, 1118, 1316, 1316, 1318, 1318, 1122, 1122, 1312,

     1320, 1320, 1321, 1322, 1314, 1323, 1119, 1125, 1125, 1326,
     1319, 1327, 1123, 1324, 1324, 1328, 1328, 1330, 1331, 1332,
     1315, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1325, 1341,
     1329, 1144, 1144, 1339, 1339, 1342, 1343, 1345, 1346, 1347,
     1348, 1351, 1352, 1353, 1344, 1354, 1145, 1157, 1157, 1355,
     1349, 1356, 1356, 1359, 1360, 1362, 1350, 1361, 1363, 1364,
     1357, 1365, 1168, 1168, 1169, 1169, 1358, 1366, 1171, 1171,
     1367, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1172, 1183, 1183, 1379, 1379, 1381, 1382,
     1383, 1384, 1386, 1387, 1388, 1193, 1193, 1385, 1389, 1390,

     1390, 1380, 1196, 1196, 1194, 1392, 1392, 1393, 1394, 1395,
     1195, 1396, 1391, 1200, 1200, 1397, 1398, 1197, 1399, 1400,
     1400, 1208, 1208, 1402, 1402, 1407, 1403, 1410, 1404, 1405,
     1405, 1408, 1408, 1401, 1411, 1209, 1412, 1216, 1216, 1413,
     1413, 1416, 1414, 1406, 1415, 1409, 1417, 1417, 1431, 1224,
     1224, 1217, 1419, 1432, 1420, 1433, 1434, 1421, 1422, 1435,
     1418, 1436, 1423, 1424, 1425, 1443, 1426, 1221, 1221, 1427,
     1428, 1428, 1444, 1429, 1447, 1430, 1452, 1225, 1225, 1453,
     1226, 1222, 1227, 1228, 1228, 1232, 1232, 1437, 1437, 1455,
     1438, 1456, 1439, 1236, 1236, 1440, 1440, 1457, 1441, 1233,

     1442, 1238, 1238, 1460, 1239, 1461, 1240, 1237, 1445, 1445,
     1448, 1448, 1450, 1450, 1247, 1247, 1248, 1248, 1249, 1249,
     1454, 1454, 1462, 1446, 1464, 1449, 1465, 1451, 1458, 1458,
     1258, 1258, 1466, 1250, 1463, 1463, 1467, 1469, 1469, 1472,
     1472, 1479, 1480, 1459, 1468, 1259, 1474, 1475, 1476, 1481,
     1482, 1488, 1470, 1494, 1473, 1271, 1271, 1471, 1477, 1483,
     1483, 1273, 1273, 1495, 1478, 1484, 1484, 1486, 1486, 1496,
     1272, 1277, 1277, 1489, 1489, 1490, 1492, 1492, 1491, 1497,
     1485, 1499, 1487, 1285, 1285, 1500, 1278, 1286, 1286, 1498,
     1498, 1493, 1290, 1290, 1501, 1501, 1502, 1503, 1504, 1295,

     1295, 1505, 1287, 1506, 1507, 1508, 1509, 1291, 1301, 1301,
     1510, 1510, 1513, 1513, 1515, 1516, 1517, 1518, 1518, 1522,
     1523, 1524, 1311, 1311, 1527, 1511, 1528, 1514, 1525, 1525,
     1526, 1526, 1519, 1313, 1313, 1316, 1316, 1312, 1318, 1318,
     1529, 1529, 1320, 1320, 1530, 1520, 1531, 1531, 1314, 1533,
     1535, 1521, 1512, 1319, 1324, 1324, 1534, 1534, 1536, 1328,
     1328, 1532, 1537, 1537, 1538, 1539, 1540, 1541, 1542, 1325,
     1543, 1544, 1545, 1546, 1329, 1339, 1339, 1547, 1548, 1549,
     1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
     1561, 1560, 1562, 1356, 1356, 1563, 1564, 1564, 1566, 1567,

     1568, 1569, 1357, 1570, 1571, 1572, 1573, 1574, 1358, 1565,
     1367, 1367, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1379,
     1379, 1582, 1582, 1583, 1584, 1586, 1585, 1587, 1588, 1589,
     1590, 1591, 1592, 1592, 1380, 1390, 1390, 1593, 1392, 1392,
     1594, 1595, 1596, 1597, 1598, 1599, 1400, 1400, 1391, 1600,
     1600, 1603, 1601, 1604, 1602, 1606, 1402, 1402, 1610, 1403,
     1401, 1404, 1405, 1405, 1605, 1605, 1408, 1408, 1607, 1607,
     1611, 1608, 1612, 1609, 1413, 1413, 1406, 1414, 1613, 1415,
     1409, 1614, 1615, 1417, 1417, 1616, 1616, 1619, 1617, 1620,
     1618, 1621, 1622, 1623, 1624, 1625, 1629, 1418, 1627, 1631,

     1428, 1428, 1632, 1429, 1633, 1430, 1634, 1635, 1636, 1637,
     1638, 1437, 1437, 1626, 1438, 1628, 1439, 1639, 1640, 1630,
     1440, 1440, 1641, 1441, 1643, 1442, 1445, 1445, 1642, 1642,
     1448, 1448, 1644, 1644, 1450, 1450, 1645, 1645, 1646, 1647,
     1648, 1446, 1454, 1454, 1649, 1449, 1650, 1458, 1458, 1451,
     1651, 1651, 1652, 1653, 1654, 1463, 1463, 1655, 1655, 1657,
     1658, 1659, 1459, 1660, 1469, 1469, 1661, 1661, 1662, 1472,
     1472, 1664, 1656, 1663, 1663, 1665, 1666, 1667, 1668, 1470,
     1669, 1670, 1673, 1671, 1473, 1672, 1483, 1483, 1484, 1484,
     1674, 1674, 1486, 1486, 1675, 1675, 1676, 1489, 1489, 1677,

     1678, 1492, 1492, 1485, 1679, 1679, 1680, 1487, 1681, 1682,
     1683, 1498, 1498, 1684, 1685, 1685, 1493, 1501, 1501, 1687,
     1688, 1689, 1690, 1691, 1692, 1693, 1693, 1695, 1695, 1686,
     1510, 1510, 1697, 1697, 1698, 1513, 1513, 1699, 1699, 1700,
     1694, 1701, 1696, 1702, 1703, 1511, 1518, 1518, 1704, 1704,
     1514, 1705, 1706, 1707, 1708, 1709, 1525, 1525, 1526, 1526,
     1710, 1519, 1711, 1529, 1529, 1712, 1531, 1531, 1713, 1713,
     1714, 1714, 1534, 1534, 1716, 1717, 1717, 1537, 1537, 1720,
     1721, 1532, 1722, 1723, 1724, 1715, 1725, 1726, 1727, 1728,
     1718, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,

     1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1745, 1564,
     1564, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
     1755, 1756, 1565, 1757, 1758, 1759, 1760, 1761, 1762, 1582,
     1582, 1719, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
     1771, 1592, 1592, 1772, 1773, 1774, 1775, 1776, 1777, 1600,
     1600, 1778, 1601, 1780, 1602, 1781, 1605, 1605, 1782, 1783,
     1779, 1607, 1607, 1784, 1608, 1785, 1609, 1786, 1787, 1788,
     1616, 1616, 1789, 1617, 1792, 1618, 1790, 1790, 1793, 1794,
     1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
     1791, 1805, 1806, 1642, 1642, 1807, 1644, 1644, 1645, 1645,

     1808, 1809, 1810, 1811, 1812, 1651, 1651, 1813, 1814, 1815,
     1655, 1655, 1816, 1816, 1817, 1818, 1819, 1820, 1661, 1661,
     1821, 1663, 1663, 1822, 1823, 1656, 1824, 1825, 1826, 1827,
     1828, 1829, 1830, 1831, 1674, 1674, 1675, 1675, 1832, 1833,
     1834, 1679, 1679, 1835, 1836, 1837, 1838, 1839, 1685, 1685,
     1840, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1693, 1693,
     1847, 1847, 1849, 1686, 1695, 1695, 1848, 1848, 1697, 1697,
     1699, 1699, 1850, 1694, 1851, 1852, 1853, 1704, 1704, 1696,
     1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1713, 1713,
     1714, 1714, 1862, 1862, 1863, 1717, 1717, 1864, 1864, 1865,

     1865, 1867, 1868, 1869, 1870, 1715, 1871, 1872, 1873, 1874,
     1718, 1875, 1876, 1877, 1866, 1878, 1879, 1880, 1881, 1882,
     1883, 1884, 1885, 1886, 1887, 1888, 1745, 1745, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
     1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1911, 1912, 1913, 1913, 1915, 1916, 1917, 1918, 1919, 1920,
     1920, 1922, 1923, 1923, 1925, 1925, 1927, 1914, 1928, 1928,
     1790, 1790, 1932, 1921, 1931, 1931, 1924, 1933, 1926, 1934,
     1935, 1939, 1929, 1940, 1791, 1936, 1936, 1941, 1942, 1942,
     1944, 1945, 1945, 1949, 1950, 1951, 1952, 1952, 1956, 1937,

     1954, 1954, 1943, 1957, 1957, 1946, 1959, 1959, 1961, 1962,
     1953, 1963, 1964, 1965, 1947, 1955, 1816, 1816, 1958, 1966,
     1967, 1960, 1968, 1969, 1930, 1970, 1971, 1938, 1972, 1973,
     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1948, 1981, 1982,
     1983, 1984, 1985, 1986, 1987, 1988, 1840, 1840, 1989, 1989,
     1991, 1992, 1993, 1994, 1995, 1847, 1847, 1848, 1848, 1996,
     1997, 1998, 1999, 1990, 2000, 2000, 2002, 2003, 2003, 2005,
     2006, 2007, 2008, 2008, 2010, 2010, 2012, 1862, 1862, 2001,
     2013, 2015, 2004, 1864, 1864, 1865, 1865, 2009, 2016, 2011,
     2014, 2014, 2017, 2018, 2018, 2021, 2022, 2022, 2025, 2026,

     1866, 2027, 2019, 2028, 2029, 2023, 2030, 2031, 2020, 2032,
     2033, 2024, 2034, 2035, 2036, 2037, 2037, 2039, 2040, 2041,
     2042, 2043, 2044, 2045, 2045, 2047, 2048, 2049, 2050, 2051,
     2038, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2046, 2059,
     2060, 1913, 1913, 2061, 2061, 2062, 2063, 2064, 2065, 2066,
     1920, 1920, 2067, 2067, 2070, 2068, 1914, 2069, 1923, 1923,
     2071, 2071, 1925, 1925, 1921, 2072, 2072, 2073, 2073, 1928,
     1928, 2076, 1924, 2075, 2075, 2077, 1926, 1931, 1931, 2078,
     2079, 2074, 2080, 1929, 1936, 1936, 2081, 2081, 2082, 2083,
     2084, 2086, 1942, 1942, 2087, 2087, 2088, 2090, 1937, 1945,

     1945, 2089, 2089, 2091, 2092, 2093, 1943, 2094, 1952, 1952,
     2095, 2095, 2097, 1946, 1954, 1954, 2085, 2096, 2096, 1957,
     1957, 2100, 1953, 2098, 2098, 1959, 1959, 2099, 2099, 1955,
     2101, 2101, 2103, 2106, 1958, 2104, 2104, 2107, 2107, 2111,
     1960, 2109, 2109, 2112, 2112, 2102, 2114, 2115, 2116, 2117,
     2105, 2118, 2108, 2119, 2120, 2121, 2110, 2122, 2113, 2123,
     2124, 2125, 2126, 2127, 2127, 2129, 2130, 2130, 2132, 2133,
     2134, 1989, 1989, 2135, 2135, 2136, 2137, 2138, 2128, 2139,
     2140, 2131, 2141, 2142, 2143, 2144, 1990, 2000, 2000, 2145,
     2145, 2146, 2146, 2003, 2003, 2148, 2148, 2149, 2150, 2151,

     2008, 2008, 2001, 2152, 2152, 2154, 2147, 2155, 2004, 2010,
     2010, 2153, 2153, 2014, 2014, 2009, 2156, 2157, 2018, 2018,
     2158, 2159, 2159, 2161, 2011, 2162, 2165, 2019, 2022, 2022,
     2166, 2163, 2163, 2020, 2160, 2167, 2168, 2023, 2169, 2170,
     2171, 2172, 2173, 2024, 2164, 2174, 2175, 2037, 2037, 2176,
     2176, 2177, 2178, 2179, 2180, 2045, 2045, 2181, 2181, 2182,
     2183, 2184, 2038, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2046, 2192, 2061, 2061, 2193, 2194, 2195, 2197, 2197, 2199,
     2067, 2067, 2200, 2068, 2201, 2069, 2202, 2071, 2071, 2196,
     2206, 2198, 2072, 2072, 2073, 2073, 2203, 2203, 2207, 2204,

     2210, 2205, 2075, 2075, 2208, 2208, 2211, 2212, 2074, 2081,
     2081, 2213, 2216, 2217, 2217, 2219, 2087, 2087, 2209, 2220,
     2089, 2089, 2214, 2221, 2222, 2223, 2224, 2218, 2215, 2225,
     2225, 2095, 2095, 2096, 2096, 2227, 2098, 2098, 2099, 2099,
     2228, 2101, 2101, 2226, 2229, 2229, 2230, 2230, 2104, 2104,
     2232, 2232, 2233, 2107, 2107, 2236, 2102, 2234, 2234, 2109,
     2109, 2231, 2238, 2105, 2235, 2235, 2112, 2112, 2108, 2237,
     2237, 2239, 2240, 2241, 2110, 2242, 2243, 2244, 2245, 2246,
     2249, 2113, 2247, 2247, 2250, 2251, 2127, 2127, 2252, 2252,
     2253, 2253, 2130, 2130, 2255, 2255, 2258, 2248, 2256, 2256,

     2259, 2128, 2135, 2135, 2266, 2254, 2267, 2131, 2260, 2260,
     2262, 2262, 2268, 2257, 2264, 2264, 2269, 2270, 2271, 2145,
     2145, 2146, 2146, 2261, 2276, 2263, 2272, 2272, 2277, 2265,
     2148, 2148, 2273, 2273, 2152, 2152, 2147, 2153, 2153, 2278,
     2279, 2280, 2281, 2282, 2282, 2159, 2159, 2274, 2283, 2284,
     2286, 2286, 2163, 2163, 2287, 2288, 2289, 2285, 2160, 2290,
     2291, 2292, 2293, 2294, 2295, 2164, 2296, 2297, 2176, 2176,
     2298, 2299, 2300, 2181, 2181, 2301, 2302, 2303, 2304, 2305,
     2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2275, 2197,
     2197, 2314, 2314, 2315, 2316, 2203, 2203, 2317, 2204, 2318,

     2205, 2208, 2208, 2198, 2319, 2319, 2320, 2320, 2322, 2323,
     2324, 2325, 2327, 2328, 2330, 2209, 2217, 2217, 2329, 2329,
     2321, 2331, 2332, 2332, 2334, 2326, 2335, 2336, 2225, 2225,
     2218, 2340, 2337, 2337, 2341, 2338, 2333, 2339, 2229, 2229,
     2230, 2230, 2226, 2342, 2342, 2232, 2232, 2347, 2343, 2234,
     2234, 2235, 2235, 2345, 2345, 2231, 2344, 2237, 2237, 2348,
     2349, 2350, 2351, 2352, 2353, 2354, 2355, 2357, 2346, 2247,
     2247, 2356, 2356, 2358, 2359, 2252, 2252, 2253, 2253, 2360,
     2360, 2255, 2255, 2364, 2248, 2256, 2256, 2361, 2361, 2362,
     2362, 2368, 2254, 2260, 2260, 2365, 2365, 2262, 2262, 2369,

     2257, 2366, 2366, 2370, 2363, 2264, 2264, 2371, 2261, 2367,
     2367, 2372, 2263, 2373, 2373, 2272, 2272, 2273, 2273, 2378,
     2265, 2375, 2375, 2376, 2376, 2379, 2380, 2381, 2374, 2382,
     2383, 2384, 2274, 2282, 2282, 2385, 2386, 2387, 2377, 2286,
     2286, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396,
     2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,
     2407, 2408, 2409, 2314, 2314, 2410, 2412, 2413, 2414, 2319,
     2319, 2320, 2320, 2415, 2415, 2416, 2417, 2418, 2411, 2419,
     2420, 2421, 2422, 2329, 2329, 2321, 2423, 2424, 2332, 2332,
     2425, 2425, 2426, 2427, 2428, 2337, 2337, 2429, 2338, 2430,

     2339, 2431, 2333, 2342, 2342, 2432, 2345, 2345, 2433, 2433,
     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2356,
     2356, 2346, 2443, 2444, 2444, 2446, 2446, 2360, 2360, 2361,
     2361, 2362, 2362, 2448, 2448, 2449, 2365, 2365, 2445, 2450,
     2447, 2366, 2366, 2367, 2367, 2451, 2363, 2452, 2453, 2454,
     2373, 2373, 2455, 2455, 2375, 2375, 2376, 2376, 2456, 2456,
     2457, 2457, 2459, 2460, 2460, 2374, 2462, 2463, 2464, 2465,
     2466, 2377, 2467, 2468, 2469, 2458, 2470, 2471, 2461, 2472,
     2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482,
     2483, 2484, 2485, 2485, 2487, 2488, 2488, 2490, 2490, 2492,

     2493, 2494, 2495, 2496, 2415, 2415, 2497, 2486, 2498, 2489,
     2499, 2491, 2500, 2501, 2502, 2503, 2504, 2505, 2425, 2425,
     2506, 2507, 2507, 2509, 2510, 2511, 2512, 2513, 2433, 2433,
     2514, 2514, 2516, 2517, 2518, 2508, 2519, 2520, 2521, 2522,
     2523, 2524, 2444, 2444, 2527, 2515, 2525, 2525, 2446, 2446,
     2526, 2526, 2448, 2448, 2528, 2529, 2532, 2445, 2530, 2530,
     2533, 2455, 2455, 2447, 2456, 2456, 2457, 2457, 2534, 2534,
     2535, 2460, 2460, 2531, 2536, 2536, 2537, 2538, 2539, 2540,
     2541, 2458, 2542, 2543, 2544, 2545, 2461, 2547, 2548, 2549,
     2550, 2551, 2552, 2553, 2554, 2555, 2556, 2485, 2485, 2557,

     2557, 2558, 2561, 2546, 2488, 2488, 2559, 2559, 2490, 2490,
     2560, 2560, 2486, 2562, 2563, 2564, 2565, 2566, 2489, 2567,
     2568, 2569, 2491, 2570, 2571, 2572, 2572, 2574, 2574, 2576,
     2577, 2577, 2507, 2507, 2579, 2579, 2580, 2582, 2582, 2573,
     2586, 2575, 2584, 2584, 2578, 2587, 2508, 2514, 2514, 2581,
     2588, 2588, 2583, 2589, 2590, 2591, 2592, 2585, 2594, 2595,
     2596, 2596, 2515, 2598, 2598, 2600, 2525, 2525, 2526, 2526,
     2601, 2602, 2603, 2605, 2593, 2597, 2530, 2530, 2599, 2604,
     2604, 2606, 2534, 2534, 2607, 2536, 2536, 2608, 2609, 2610,
     2611, 2531, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,

     2619, 2621, 2622, 2623, 2624, 2625, 2557, 2557, 2626, 2559,
     2559, 2560, 2560, 2631, 2620, 2627, 2627, 2629, 2629, 2632,
     2633, 2634, 2635, 2635, 2637, 2638, 2639, 2640, 2643, 2628,
     2645, 2630, 2572, 2572, 2641, 2641, 2636, 2574, 2574, 2642,
     2642, 2577, 2577, 2644, 2644, 2646, 2573, 2579, 2579, 2582,
     2582, 2575, 2647, 2647, 2649, 2578, 2584, 2584, 2648, 2648,
     2650, 2650, 2588, 2588, 2583, 2652, 2653, 2654, 2654, 2656,
     2657, 2585, 2658, 2659, 2662, 2651, 2596, 2596, 2660, 2660,
     2598, 2598, 2655, 2661, 2661, 2663, 2664, 2665, 2665, 2604,
     2604, 2597, 2667, 2668, 2669, 2599, 2670, 2671, 2672, 2673,

     2674, 2675, 2666, 2676, 2677, 2678, 2679, 2619, 2619, 2680,
     2680, 2681, 2682, 2683, 2684, 2685, 2627, 2627, 2686, 2686,
     2629, 2629, 2620, 2687, 2687, 2688, 2688, 2690, 2690, 2692,
     2628, 2693, 2635, 2635, 2630, 2694, 2694, 2695, 2696, 2689,
     2697, 2691, 2698, 2641, 2641, 2699, 2636, 2642, 2642, 2644,
     2644, 2700, 2701, 2647, 2647, 2648, 2648, 2702, 2650, 2650,
     2703, 2703, 2704, 2704, 2706, 2654, 2654, 2707, 2707, 2708,
     2709, 2710, 2711, 2651, 2660, 2660, 2712, 2705, 2661, 2661,
     2655, 2713, 2714, 2665, 2665, 2715, 2715, 2716, 2716, 2718,
     2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2666, 2727,

     2728, 2729, 2717, 2680, 2680, 2730, 2731, 2732, 2686, 2686,
     2687, 2687, 2688, 2688, 2733, 2733, 2739, 2734, 2740, 2735,
     2690, 2690, 2736, 2736, 2737, 2737, 2689, 2694, 2694, 2741,
     2742, 2742, 2744, 2745, 2691, 2746, 2746, 2753, 2738, 2748,
     2748, 2750, 2750, 2754, 2743, 2703, 2703, 2704, 2704, 2747,
     2752, 2752, 2755, 2749, 2707, 2707, 2751, 2756, 2757, 2758,
     2759, 2760, 2705, 2715, 2715, 2716, 2716, 2761, 2761, 2762,
     2762, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772,
     2717, 2773, 2774, 2775, 2763, 2733, 2733, 2776, 2734, 2777,
     2735, 2736, 2736, 2737, 2737, 2778, 2778, 2779, 2780, 2781,

     2742, 2742, 2782, 2782, 2783, 2784, 2784, 2738, 2746, 2746,
     2786, 2786, 2748, 2748, 2743, 2787, 2787, 2750, 2750, 2785,
     2788, 2788, 2747, 2752, 2752, 2789, 2749, 2790, 2791, 2792,
     2793, 2794, 2751, 2795, 2795, 2797, 2761, 2761, 2762, 2762,
     2798, 2798, 2799, 2800, 2800, 2802, 2803, 2804, 2796, 2805,
     2806, 2807, 2808, 2763, 2809, 2810, 2811, 2812, 2801, 2778,
     2778, 2813, 2814, 2782, 2782, 2815, 2784, 2784, 2816, 2816,
     2786, 2786, 2787, 2787, 2788, 2788, 2817, 2818, 2819, 2823,
     2785, 2820, 2820, 2824, 2795, 2795, 2825, 2825, 2826, 2798,
     2798, 2827, 2800, 2800, 2828, 2828, 2821, 2829, 2830, 2796,

     2831, 2832, 2833, 2834, 2835, 2836, 2837, 2801, 2838, 2839,
     2816, 2816, 2840, 2822, 2841, 2841, 2843, 2843, 2820, 2820,
     2845, 2845, 2846, 2847, 2847, 2849, 2825, 2825, 2850, 2842,
     2851, 2844, 2852, 2821, 2828, 2828, 2853, 2854, 2848, 2855,
     2856, 2857, 2858, 2859, 2860, 2861, 2861, 2841, 2841, 2863,
     2863, 2843, 2843, 2864, 2864, 2845, 2845, 2865, 2847, 2847,
     2862, 2867, 2842, 2866, 2866, 2870, 2844, 2868, 2868, 2871,
     2872, 2873, 2874, 2848, 2875, 2876, 2877, 2878, 2879, 2861,
     2861, 2881, 2869, 2880, 2880, 2863, 2863, 2864, 2864, 2866,
     2866, 2882, 2868, 2868, 2862, 2883, 2883, 2884, 2885, 2885,

     2887, 2887, 2889, 2890, 2891, 2892, 2893, 2869, 2894, 2895,
     2880, 2880, 2896, 2886, 2897, 2888, 2883, 2883, 2898, 2885,
     2885, 2899, 2899, 2887, 2887, 2900, 2900, 2901, 2902, 2903,
     2904, 2905, 2906, 2907, 2886, 2908, 2909, 2910, 2888, 2899,
     2899, 2900, 2900, 2911, 2912, 2912, 2914, 2915, 2916, 2916,
     2918, 2918, 2920, 2921, 2921, 2923, 2912, 2912, 2913, 2924,
     2924, 2925, 2917, 2926, 2926, 2919, 2916, 2916, 2922, 2930,
     2913, 2928, 2928, 2918, 2918, 2929, 2929, 2927, 2921, 2921,
     2917, 2931, 2931, 2932, 2924, 2924, 2933, 2933, 2919, 2926,
     2926, 2935, 2935, 2922, 2928, 2928, 2929, 2929, 2936, 2937,

     2934, 2931, 2931, 2927, 2933, 2933, 2938, 2938, 2935, 2935,
     2939, 2938, 2938, 2940, 2940, 2940, 2940, 1007, 2934, 2942,
     2942, 2942, 2942, 1006, 1005, 1004, 1003, 1002, 2941,  999,
     2941,   23,   23,   23,   23,   23,   34,   34,   34,   34,
       34,   36,   36,   36,   36,   36,   37,   37,   37,   37,
       37,   35,   35,   35,   35,   35,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   42,   42,   42,   42,
       42,  103,  103,  103,  103,  104,  998,  104,  104,  104,
      105,  105,  997,  105,  105,  106,  106,  106,  996,  106,
      995,  994,  993,  992,  991,  990,  989,  988,  984,  983,

      982,  981,  980,  979,  978,  977,  976,  975,  974,  971,
      968,  967,  966,  965,  964,  963,  958,  957,  956,  955,
      952,  951,  950,  949,  948,  947,  946,  945,  944,  943,
      942,  941,  938,  937,  936,  935,  934,  933,  932,  931,
      930,  929,  928,  926,  925,  922,  921,  920,  919,  917,
      916,  915,  914,  912,  910,  909,  906,  905,  904,  898,
      897,  896,  891,  889,  888,  887,  886,  883,  882,  881,
      880,  878,  876,  875,  874,  873,  869,  868,  867,  866,
      865,  864,  863,  858,  857,  856,  855,  854,  853,  851,
      850,  848,  847,  846,  843,  842,  841,  840,  838,  837,

      831,  830,  826,  825,  824,  823,  822,  821,  820,  819,
      814,  813,  812,  811,  809,  805,  804,  803,  802,  801,
      799,  798,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  787,  786,  785,  784,  783,  781,  780,  777,  776,
      775,  772,  771,  770,  769,  764,  763,  762,  761,  760,
      756,  755,  754,  753,  751,  749,  748,  747,  746,  742,
      741,  740,  739,  738,  737,  736,  731,  730,  729,  728,
      727,  726,  724,  723,  722,  721,  720,  717,  716,  715,
      714,  707,  706,  705,  704,  703,  702,  701,  698,  697,
      696,  692,  689,  688,  687,  684,  683,  682,  681,  680,

      679,  678,  677,  673,  669,  668,  658,  656,  655,  651,
      650,  649,  648,  647,  646,  645,  643,  642,  637,  636,
      634,  633,  632,  631,  624,  623,  620,  619,  618,  617,
      613,  612,  611,  608,  607,  604,  603,  602,  601,  600,
      599,  598,  597,  592,  591,  590,  589,  585,  582,  581,
      580,  579,  578,  575,  574,  570,  569,  568,  567,  566,
      565,  564,  561,  560,  559,  558,  557,  554,  553,  552,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      537,  536,  526,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  513,  512,  507,  506,  505,  504,  503,

      502,  497,  496,  493,  492,  491,  490,  487,  486,  485,
      484,  483,  482,  481,  478,  477,  473,  472,  471,  470,
      469,  468,  467,  464,  463,  462,  461,  460,  459,  458,
      455,  454,  453,  446,  445,  444,  436,  435,  434,  433,
      432,  421,  420,  416,  415,  411,  410,  409,  408,  407,
      406,  405,  404,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  384,  383,  382,
      381,  380,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  365,  364,  360,  359,  358,  357,  356,  355,
      354,  351,  350,  349,  348,  347,  346,  345,  344,  343,

      342,  335,  334,  333,  325,  324,  323,  322,  321,  320,
      312,  311,  307,  306,  305,  272,  267,  266,  259,  253,
      250,  249,  246,  243,  242,  239,  236,  235,  234,  233,
      232,  231,  230,  229,  226,  225,  224,  223,  222,  221,
      220,  217,  216,  215,  214,  214,  213,  180,  175,  174,
      167,  161,  139,  136,  135,  125,  116,  115,  112,  109,
      102,  101,   75,  108,  107,  102,  101,   75,   71,   71,
     2943,   35,   35,   35,   35,   35,   35,   35,   35,   19,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943
    } ;

static yyconst flex_int16_t yy_chk[4747] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,  494,    1,   16,    0,   51,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,  494,   26,
       26,   51,   63,   25,   28,   28,   56,   61,   47,   26,
       26,   26,   28,   58,   28,   28,   28,   61,   62,   26,
       56,   68,   63,   58,   28,    1,    2,    2,    2,    2,
        2,   62,    2,   68,    2,    2,    2,    2,    2,    2,
        2,   26,    2,    2,   91,   64,   28,   48,   48,   91,
        2,  168,   50,   50,  168,    2,   96,   48,   48,   48,

       50,   67,   50,   50,   50,   64,   96,   48,   66,   72,
       72,   92,   50,   83,   66,   67,   76,   76,   67,   92,
       66,   98,   74,   74,   83,   67,   74,   74,   74,   48,
       98,    2,   21,   21,   50,  798,   21,   98,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,  799,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   85,  345,

       82,  801,   85,   23,   23,   23,   23,   23,   23,   23,
       82,   23,   99,  345,   86,   89,   86,   99,   82,   23,
       86,   73,   73,   89,   23,  111,   86,  119,   89,   89,
      512,   73,   73,   73,  111,   23,   23,   23,   23,   23,
       23,   73,   23,  119,  128,   23,   23,   23,   23,  802,
      133,  128,   23,   23,   23,   23,   23,   29,   93,   95,
      130,  130,   93,   73,   29,   94,  133,  156,  512,   93,
       95,   29,   93,   95,  130,   29,   95,  156,   93,   94,
      135,  143,   94,   94,   94,   29,  135,  137,  137,  137,
      195,  195,  143,   29,   29,   29,   29,   29,   29,   29,

      206,   29,   29,  206,   29,   29,   29,   29,   29,  803,
       29,   29,   29,   29,   29,   78,  138,  138,  146,  145,
      146,  152,  142,  145,  146,   78,  138,  138,  138,  152,
      146,  642,  142,   78,   78,   78,   78,   78,   78,   78,
      142,   78,   78,  804,   78,   78,   78,   78,   78,  805,
       78,   78,   78,   78,   78,   97,  151,  140,  140,   97,
      149,  151,  169,  219,  154,   97,  169,   97,  149,  642,
       97,   97,  140,  149,  149,   97,  153,  155,  154,  159,
      153,  154,  154,  154,  159,  157,  219,  153,  155,  157,
      153,  155,  164,  158,  155,  157,  153,  157,  164,  809,

      157,  157,  158,  176,  176,  157,  164,  177,  167,  158,
      167,  260,  177,  181,  260,  167,  182,  182,  176,  177,
      203,  183,  177,  177,  181,  183,  261,  203,  811,  203,
      261,  182,  214,  214,  225,  225,  240,  240,  241,  241,
      812,  241,  273,  241,  251,  251,  252,  252,  225,  256,
      240,  253,  253,  273,  259,  256,  259,  262,  262,  251,
      813,  259,  269,  256,  268,  268,  253,  269,  274,  274,
      298,  275,  262,  298,  269,  275,  458,  269,  269,  268,
      279,  279,  295,  274,  287,  287,  306,  306,  311,  295,
      458,  295,  311,  314,  314,  279,  315,  315,  542,  262,

      542,  306,  322,  322,  323,  323,  326,  326,  327,  327,
      814,  315,  338,  338,  339,  339,  420,  322,  374,  323,
      420,  326,  341,  341,  342,  342,  374,  338,  356,  356,
      360,  360,  366,  366,  377,  377,  552,  341,  747,  342,
      552,  374,  342,  342,  677,  360,  677,  366,  377,  383,
      383,  342,  385,  385,  747,  341,  386,  386,  387,  387,
      392,  392,  621,  383,  393,  393,  385,  817,  401,  401,
      818,  401,  387,  401,  392,  405,  405,  621,  393,  408,
      408,  819,  342,  412,  412,  413,  413,  414,  414,  405,
      415,  415,  820,  408,  423,  423,  424,  424,  429,  429,

      413,  430,  430,  433,  433,  415,  434,  434,  687,  423,
      821,  424,  687,  429,  437,  437,  438,  438,  433,  446,
      446,  434,  449,  449,  450,  450,  452,  452,  825,  437,
      453,  453,  456,  456,  446,  457,  457,  449,  460,  460,
      826,  452,  446,  469,  469,  453,  828,  456,  453,  453,
      423,  423,  829,  460,  473,  473,  739,  453,  739,  452,
      475,  475,  479,  479,  488,  488,  487,  487,  830,  473,
      489,  489,  500,  500,  831,  475,  833,  479,  834,  488,
      460,  487,  501,  501,  508,  508,  837,  500,  453,  487,
      509,  509,  510,  510,  840,  475,  841,  487,  842,  508,

      511,  511,  514,  514,  521,  521,  843,  510,  525,  525,
      527,  527,  487,  521,  528,  528,  530,  530,  844,  521,
      531,  531,  845,  536,  536,  527,  543,  543,  548,  548,
      848,  530,  536,  555,  555,  556,  556,  851,  536,  562,
      562,  543,  853,  548,  563,  563,  576,  576,  555,  577,
      577,  583,  583,  854,  562,  855,  584,  584,  856,  584,
      576,  584,  586,  586,  857,  583,  587,  587,  588,  588,
      593,  593,  594,  594,  595,  595,  596,  596,  858,  596,
      587,  596,  605,  605,  593,  861,  606,  606,  595,  606,
      862,  606,  609,  609,  610,  610,  605,  610,  863,  610,

      611,  611,  614,  614,  615,  615,  609,  616,  616,  625,
      625,  626,  626,  864,  611,  629,  629,  630,  630,  615,
      635,  635,  638,  638,  625,  639,  639,  640,  640,  865,
      629,  641,  641,  644,  644,  651,  651,  638,  652,  652,
      653,  653,  640,  657,  657,  659,  659,  660,  660,  867,
      651,  662,  662,  652,  663,  663,  668,  668,  670,  670,
      659,  674,  674,  675,  675,  868,  662,  678,  678,  682,
      682,  668,  683,  683,  690,  690,  674,  691,  691,  693,
      693,  866,  678,  866,  682,  694,  694,  683,  869,  690,
      699,  699,  700,  700,  693,  705,  705,  708,  708,  682,

      709,  709,  713,  713,  723,  699,  725,  725,  732,  732,
      705,  875,  708,  733,  733,  743,  743,  850,  745,  745,
      876,  723,  750,  750,  743,  752,  752,  756,  756,  878,
      743,  745,  757,  757,  850,  759,  759,  767,  767,  773,
      773,  757,  756,  774,  774,  775,  775,  757,  759,  782,
      782,  874,  767,  880,  773,  788,  788,  791,  791,  881,
      775,  800,  800,  806,  806,  882,  806,  874,  806,  810,
      810,  886,  791,  815,  815,  816,  816,  887,  816,  888,
      816,  822,  822,  823,  823,  824,  824,  827,  827,  889,
      827,  891,  827,  832,  832,  822,  832,  823,  832,  824,

      835,  835,  836,  836,  892,  836,  893,  836,  838,  838,
      839,  839,  846,  846,  835,  847,  847,  849,  849,  852,
      852,  897,  838,  859,  859,  860,  860,  846,  870,  870,
      847,  871,  871,  872,  872,  873,  873,  877,  877,  879,
      879,  883,  883,  870,  884,  884,  885,  885,  890,  890,
      873,  894,  894,  895,  895,  898,  883,  896,  896,  884,
      899,  899,  900,  900,  901,  905,  894,  902,  902,  903,
      903,  847,  896,  904,  904,  899,  906,  907,  908,  909,
      910,  912,  902,  911,  911,  914,  896,  915,  904,  913,
      913,  916,  917,  917,  918,  918,  919,  920,  921,  921,

      922,  923,  923,  924,  924,  925,  926,  917,  927,  927,
      928,  929,  930,  921,  931,  932,  923,  933,  934,  935,
      936,  938,  939,  940,  941,  942,  943,  944,  945,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  958,  958,  945,  959,  959,  960,  961,  962,  963,
      964,  965,  966,  967,  968,  973,  966,  959,  969,  969,
      970,  970,  971,  971,  972,  972,  974,  974,  975,  976,
      978,  979,  980,  969,  981,  983,  982,  972,  982,  984,
      988,  974,  985,  985,  986,  986,  987,  987,  989,  990,
      991,  992,  993,  994,  995,  996,  996,  994,  998,  986,

      997,  997, 1000, 1000,  996, 1001, 1001, 1002, 1003, 1004,
      996, 1006, 1007, 1008, 1009,  997, 1011, 1000, 1010, 1010,
     1012, 1013, 1014, 1015, 1016, 1017, 1017, 1018, 1019, 1022,
     1024,  997, 1010, 1023, 1023, 1025, 1025, 1026, 1026, 1017,
     1027, 1027, 1031, 1028, 1028, 1032, 1028, 1023, 1028, 1025,
     1029, 1029, 1030, 1030, 1027, 1035, 1036, 1036, 1039, 1039,
     1040, 1039, 1041, 1039, 1029, 1042, 1042, 1043, 1043, 1045,
     1036, 1044, 1044, 1046, 1044, 1047, 1044, 1048, 1049, 1042,
     1050, 1043, 1051, 1051, 1052, 1052, 1053, 1053, 1054, 1054,
     1055, 1055, 1056, 1057, 1058, 1059, 1060, 1051, 1061, 1062,

     1064, 1053, 1063, 1063, 1065, 1055, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1075, 1063, 1076, 1076,
     1077, 1077, 1078, 1078, 1079, 1080, 1081, 1082, 1082, 1083,
     1075, 1085, 1084, 1086, 1091, 1077, 1084, 1087, 1087, 1088,
     1088, 1092, 1082, 1089, 1089, 1094, 1090, 1090, 1093, 1093,
     1095, 1096, 1087, 1097, 1097, 1098, 1098, 1099, 1099, 1100,
     1082, 1090, 1101, 1093, 1101, 1102, 1103, 1103, 1104, 1108,
     1098, 1105, 1105, 1106, 1106, 1107, 1107, 1109, 1110, 1111,
     1112, 1113, 1114, 1115, 1116, 1116, 1114, 1120, 1106, 1117,
     1117, 1118, 1118, 1119, 1119, 1121, 1121, 1122, 1122, 1116,

     1123, 1123, 1124, 1126, 1117, 1127, 1118, 1125, 1125, 1129,
     1121, 1130, 1122, 1128, 1128, 1131, 1131, 1132, 1135, 1136,
     1117, 1137, 1138, 1139, 1141, 1142, 1143, 1146, 1128, 1147,
     1131, 1144, 1144, 1145, 1145, 1148, 1149, 1150, 1152, 1152,
     1152, 1153, 1154, 1155, 1149, 1156, 1144, 1157, 1157, 1158,
     1152, 1159, 1159, 1161, 1162, 1164, 1152, 1162, 1165, 1166,
     1159, 1167, 1168, 1168, 1169, 1169, 1159, 1170, 1171, 1171,
     1172, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1184, 1171, 1183, 1183, 1185, 1185, 1186, 1187,
     1188, 1189, 1190, 1191, 1192, 1193, 1193, 1189, 1194, 1195,

     1195, 1185, 1196, 1196, 1193, 1197, 1197, 1198, 1199, 1201,
     1193, 1203, 1195, 1200, 1200, 1204, 1205, 1196, 1206, 1207,
     1207, 1208, 1208, 1209, 1209, 1211, 1209, 1213, 1209, 1210,
     1210, 1212, 1212, 1207, 1214, 1208, 1215, 1216, 1216, 1217,
     1217, 1218, 1217, 1210, 1217, 1212, 1219, 1219, 1223, 1224,
     1224, 1216, 1220, 1226, 1220, 1227, 1229, 1220, 1220, 1230,
     1219, 1231, 1220, 1220, 1220, 1239, 1220, 1221, 1221, 1220,
     1222, 1222, 1240, 1222, 1242, 1222, 1245, 1225, 1225, 1246,
     1225, 1221, 1225, 1228, 1228, 1232, 1232, 1233, 1233, 1251,
     1233, 1252, 1233, 1236, 1236, 1237, 1237, 1253, 1237, 1232,

     1237, 1238, 1238, 1255, 1238, 1256, 1238, 1236, 1241, 1241,
     1243, 1243, 1244, 1244, 1247, 1247, 1248, 1248, 1249, 1249,
     1250, 1250, 1257, 1241, 1260, 1243, 1261, 1244, 1254, 1254,
     1258, 1258, 1262, 1249, 1259, 1259, 1263, 1264, 1264, 1265,
     1265, 1267, 1268, 1254, 1263, 1258, 1266, 1266, 1266, 1269,
     1270, 1276, 1264, 1281, 1265, 1271, 1271, 1264, 1266, 1272,
     1272, 1273, 1273, 1282, 1266, 1274, 1274, 1275, 1275, 1283,
     1271, 1277, 1277, 1278, 1278, 1279, 1280, 1280, 1279, 1284,
     1274, 1288, 1275, 1285, 1285, 1289, 1277, 1286, 1286, 1287,
     1287, 1280, 1290, 1290, 1291, 1291, 1292, 1293, 1294, 1295,

     1295, 1296, 1286, 1297, 1298, 1299, 1300, 1290, 1301, 1301,
     1302, 1302, 1303, 1303, 1304, 1305, 1306, 1307, 1307, 1308,
     1309, 1310, 1311, 1311, 1315, 1302, 1317, 1303, 1312, 1312,
     1314, 1314, 1307, 1313, 1313, 1316, 1316, 1311, 1318, 1318,
     1319, 1319, 1320, 1320, 1321, 1307, 1322, 1322, 1313, 1323,
     1326, 1307, 1302, 1318, 1324, 1324, 1325, 1325, 1327, 1328,
     1328, 1322, 1329, 1329, 1330, 1331, 1332, 1333, 1334, 1324,
     1335, 1336, 1337, 1338, 1328, 1339, 1339, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1353, 1355, 1356, 1356, 1357, 1358, 1358, 1359, 1360,

     1361, 1362, 1356, 1363, 1364, 1365, 1366, 1368, 1356, 1358,
     1367, 1367, 1370, 1371, 1372, 1373, 1374, 1375, 1378, 1379,
     1379, 1380, 1380, 1381, 1382, 1383, 1382, 1384, 1385, 1386,
     1387, 1388, 1389, 1389, 1379, 1390, 1390, 1391, 1392, 1392,
     1393, 1394, 1395, 1397, 1398, 1399, 1400, 1400, 1390, 1401,
     1401, 1403, 1401, 1404, 1401, 1407, 1402, 1402, 1410, 1402,
     1400, 1402, 1405, 1405, 1406, 1406, 1408, 1408, 1409, 1409,
     1411, 1409, 1412, 1409, 1413, 1413, 1405, 1413, 1414, 1413,
     1408, 1415, 1416, 1417, 1417, 1418, 1418, 1419, 1418, 1420,
     1418, 1420, 1421, 1422, 1423, 1424, 1426, 1417, 1425, 1427,

     1428, 1428, 1429, 1428, 1430, 1428, 1431, 1434, 1435, 1436,
     1438, 1437, 1437, 1424, 1437, 1425, 1437, 1439, 1441, 1426,
     1440, 1440, 1442, 1440, 1447, 1440, 1445, 1445, 1446, 1446,
     1448, 1448, 1449, 1449, 1450, 1450, 1451, 1451, 1452, 1453,
     1455, 1445, 1454, 1454, 1456, 1448, 1457, 1458, 1458, 1450,
     1459, 1459, 1460, 1461, 1462, 1463, 1463, 1464, 1464, 1465,
     1466, 1467, 1458, 1468, 1469, 1469, 1470, 1470, 1471, 1472,
     1472, 1474, 1464, 1473, 1473, 1475, 1476, 1477, 1478, 1469,
     1479, 1480, 1482, 1481, 1472, 1481, 1483, 1483, 1484, 1484,
     1485, 1485, 1486, 1486, 1487, 1487, 1488, 1489, 1489, 1490,

     1491, 1492, 1492, 1484, 1493, 1493, 1494, 1486, 1495, 1496,
     1497, 1498, 1498, 1499, 1500, 1500, 1492, 1501, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1508, 1509, 1509, 1500,
     1510, 1510, 1511, 1511, 1512, 1513, 1513, 1514, 1514, 1515,
     1508, 1516, 1509, 1516, 1517, 1510, 1518, 1518, 1519, 1519,
     1513, 1520, 1521, 1522, 1523, 1524, 1525, 1525, 1526, 1526,
     1527, 1518, 1528, 1529, 1529, 1530, 1531, 1531, 1532, 1532,
     1533, 1533, 1534, 1534, 1535, 1536, 1536, 1537, 1537, 1538,
     1539, 1531, 1540, 1541, 1542, 1533, 1543, 1544, 1545, 1546,
     1536, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,

     1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1563, 1564,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1564, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1582, 1536, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
     1591, 1592, 1592, 1593, 1594, 1595, 1596, 1597, 1599, 1600,
     1600, 1599, 1600, 1601, 1600, 1602, 1605, 1605, 1606, 1608,
     1599, 1607, 1607, 1609, 1607, 1610, 1607, 1611, 1612, 1615,
     1616, 1616, 1619, 1616, 1621, 1616, 1620, 1620, 1622, 1623,
     1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1634, 1635,
     1620, 1636, 1637, 1642, 1642, 1643, 1644, 1644, 1645, 1645,

     1646, 1647, 1648, 1649, 1650, 1651, 1651, 1652, 1653, 1654,
     1655, 1655, 1656, 1656, 1657, 1658, 1659, 1660, 1661, 1661,
     1662, 1663, 1663, 1664, 1665, 1655, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1673, 1674, 1674, 1675, 1675, 1676, 1677,
     1678, 1679, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1685,
     1686, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1693,
     1694, 1694, 1698, 1685, 1695, 1695, 1696, 1696, 1697, 1697,
     1699, 1699, 1700, 1693, 1701, 1702, 1703, 1704, 1704, 1695,
     1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1713,
     1714, 1714, 1715, 1715, 1716, 1717, 1717, 1718, 1718, 1719,

     1719, 1721, 1724, 1725, 1726, 1714, 1727, 1728, 1729, 1730,
     1717, 1731, 1732, 1733, 1719, 1734, 1735, 1736, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1744, 1745, 1745, 1746, 1747,
     1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1757, 1758,
     1759, 1760, 1761, 1762, 1763, 1764, 1765, 1767, 1769, 1770,
     1771, 1772, 1773, 1773, 1775, 1776, 1777, 1778, 1779, 1782,
     1782, 1785, 1786, 1786, 1787, 1787, 1788, 1773, 1789, 1789,
     1790, 1790, 1792, 1782, 1791, 1791, 1786, 1793, 1787, 1794,
     1795, 1797, 1789, 1798, 1790, 1796, 1796, 1799, 1800, 1800,
     1801, 1802, 1802, 1803, 1804, 1805, 1806, 1806, 1808, 1796,

     1807, 1807, 1800, 1809, 1809, 1802, 1810, 1810, 1811, 1812,
     1806, 1813, 1814, 1815, 1802, 1807, 1816, 1816, 1809, 1817,
     1818, 1810, 1819, 1820, 1789, 1821, 1822, 1796, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1830, 1831, 1802, 1832, 1833,
     1834, 1835, 1836, 1837, 1838, 1839, 1840, 1840, 1841, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1847, 1848, 1848, 1849,
     1850, 1851, 1852, 1841, 1853, 1853, 1854, 1855, 1855, 1856,
     1857, 1858, 1859, 1859, 1860, 1860, 1861, 1862, 1862, 1853,
     1863, 1867, 1855, 1864, 1864, 1865, 1865, 1859, 1868, 1860,
     1866, 1866, 1870, 1871, 1871, 1872, 1874, 1874, 1875, 1877,

     1865, 1878, 1871, 1879, 1880, 1874, 1881, 1882, 1871, 1883,
     1884, 1874, 1885, 1886, 1887, 1888, 1888, 1889, 1890, 1891,
     1893, 1895, 1896, 1897, 1897, 1898, 1899, 1900, 1901, 1902,
     1888, 1903, 1904, 1905, 1906, 1907, 1909, 1910, 1897, 1911,
     1912, 1913, 1913, 1914, 1914, 1915, 1916, 1917, 1918, 1919,
     1920, 1920, 1921, 1921, 1922, 1921, 1913, 1921, 1923, 1923,
     1924, 1924, 1925, 1925, 1920, 1926, 1926, 1927, 1927, 1928,
     1928, 1930, 1923, 1929, 1929, 1932, 1925, 1931, 1931, 1933,
     1934, 1927, 1935, 1928, 1936, 1936, 1937, 1937, 1938, 1939,
     1940, 1941, 1942, 1942, 1943, 1943, 1944, 1947, 1936, 1945,

     1945, 1946, 1946, 1948, 1949, 1950, 1942, 1951, 1952, 1952,
     1953, 1953, 1956, 1945, 1954, 1954, 1940, 1955, 1955, 1957,
     1957, 1961, 1952, 1958, 1958, 1959, 1959, 1960, 1960, 1954,
     1962, 1962, 1963, 1965, 1957, 1964, 1964, 1966, 1966, 1968,
     1959, 1967, 1967, 1969, 1969, 1962, 1970, 1971, 1972, 1973,
     1964, 1974, 1966, 1975, 1976, 1977, 1967, 1978, 1969, 1979,
     1980, 1981, 1982, 1983, 1983, 1984, 1985, 1985, 1986, 1987,
     1988, 1989, 1989, 1990, 1990, 1991, 1992, 1993, 1983, 1994,
     1995, 1985, 1996, 1997, 1998, 1999, 1989, 2000, 2000, 2001,
     2001, 2002, 2002, 2003, 2003, 2004, 2004, 2005, 2006, 2007,

     2008, 2008, 2000, 2009, 2009, 2012, 2002, 2013, 2003, 2010,
     2010, 2011, 2011, 2014, 2014, 2008, 2015, 2016, 2018, 2018,
     2019, 2020, 2020, 2021, 2010, 2023, 2025, 2018, 2022, 2022,
     2026, 2024, 2024, 2018, 2020, 2027, 2028, 2022, 2029, 2030,
     2031, 2032, 2033, 2022, 2024, 2034, 2036, 2037, 2037, 2038,
     2038, 2039, 2040, 2041, 2044, 2045, 2045, 2046, 2046, 2047,
     2051, 2052, 2037, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
     2045, 2060, 2061, 2061, 2062, 2063, 2064, 2065, 2065, 2066,
     2067, 2067, 2068, 2067, 2069, 2067, 2070, 2071, 2071, 2064,
     2076, 2065, 2072, 2072, 2073, 2073, 2074, 2074, 2077, 2074,

     2079, 2074, 2075, 2075, 2078, 2078, 2080, 2082, 2073, 2081,
     2081, 2083, 2084, 2085, 2085, 2086, 2087, 2087, 2078, 2088,
     2089, 2089, 2083, 2090, 2091, 2092, 2093, 2085, 2083, 2094,
     2094, 2095, 2095, 2096, 2096, 2097, 2098, 2098, 2099, 2099,
     2100, 2101, 2101, 2094, 2102, 2102, 2103, 2103, 2104, 2104,
     2105, 2105, 2106, 2107, 2107, 2111, 2101, 2108, 2108, 2109,
     2109, 2103, 2114, 2104, 2110, 2110, 2112, 2112, 2107, 2113,
     2113, 2115, 2116, 2117, 2109, 2118, 2119, 2120, 2121, 2122,
     2124, 2112, 2123, 2123, 2125, 2126, 2127, 2127, 2128, 2128,
     2129, 2129, 2130, 2130, 2131, 2131, 2133, 2123, 2132, 2132,

     2134, 2127, 2135, 2135, 2139, 2129, 2140, 2130, 2136, 2136,
     2137, 2137, 2141, 2132, 2138, 2138, 2142, 2143, 2144, 2145,
     2145, 2146, 2146, 2136, 2150, 2137, 2147, 2147, 2151, 2138,
     2148, 2148, 2149, 2149, 2152, 2152, 2146, 2153, 2153, 2154,
     2155, 2156, 2157, 2158, 2158, 2159, 2159, 2149, 2160, 2161,
     2162, 2162, 2163, 2163, 2164, 2166, 2167, 2161, 2159, 2168,
     2169, 2170, 2171, 2172, 2173, 2163, 2174, 2175, 2176, 2176,
     2177, 2178, 2179, 2181, 2181, 2182, 2183, 2184, 2185, 2186,
     2187, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2149, 2197,
     2197, 2198, 2198, 2199, 2202, 2203, 2203, 2206, 2203, 2207,

     2203, 2208, 2208, 2197, 2209, 2209, 2210, 2210, 2211, 2212,
     2213, 2214, 2215, 2216, 2219, 2208, 2217, 2217, 2218, 2218,
     2210, 2220, 2221, 2221, 2222, 2214, 2223, 2224, 2225, 2225,
     2217, 2227, 2226, 2226, 2228, 2226, 2221, 2226, 2229, 2229,
     2230, 2230, 2225, 2231, 2231, 2232, 2232, 2238, 2233, 2234,
     2234, 2235, 2235, 2236, 2236, 2230, 2233, 2237, 2237, 2239,
     2240, 2241, 2242, 2243, 2244, 2245, 2246, 2249, 2236, 2247,
     2247, 2248, 2248, 2250, 2251, 2252, 2252, 2253, 2253, 2254,
     2254, 2255, 2255, 2259, 2247, 2256, 2256, 2257, 2257, 2258,
     2258, 2266, 2253, 2260, 2260, 2261, 2261, 2262, 2262, 2267,

     2256, 2263, 2263, 2268, 2258, 2264, 2264, 2269, 2260, 2265,
     2265, 2270, 2262, 2271, 2271, 2272, 2272, 2273, 2273, 2276,
     2264, 2274, 2274, 2275, 2275, 2277, 2278, 2279, 2271, 2280,
     2281, 2283, 2273, 2282, 2282, 2284, 2285, 2287, 2275, 2286,
     2286, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
     2297, 2298, 2301, 2302, 2303, 2304, 2305, 2306, 2308, 2309,
     2311, 2312, 2313, 2314, 2314, 2315, 2316, 2317, 2318, 2319,
     2319, 2320, 2320, 2321, 2321, 2322, 2323, 2324, 2315, 2325,
     2326, 2327, 2328, 2329, 2329, 2320, 2330, 2331, 2332, 2332,
     2333, 2333, 2334, 2335, 2336, 2337, 2337, 2340, 2337, 2341,

     2337, 2343, 2332, 2342, 2342, 2344, 2345, 2345, 2346, 2346,
     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2356, 2345, 2357, 2358, 2358, 2359, 2359, 2360, 2360, 2361,
     2361, 2362, 2362, 2363, 2363, 2364, 2365, 2365, 2358, 2368,
     2359, 2366, 2366, 2367, 2367, 2369, 2362, 2370, 2371, 2372,
     2373, 2373, 2374, 2374, 2375, 2375, 2376, 2376, 2377, 2377,
     2378, 2378, 2379, 2380, 2380, 2373, 2381, 2382, 2383, 2384,
     2385, 2376, 2386, 2387, 2389, 2378, 2390, 2391, 2380, 2392,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2403,
     2404, 2405, 2406, 2406, 2407, 2408, 2408, 2409, 2409, 2410,

     2411, 2412, 2413, 2414, 2415, 2415, 2416, 2406, 2417, 2408,
     2418, 2409, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2425,
     2426, 2427, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2433,
     2434, 2434, 2435, 2436, 2437, 2427, 2438, 2439, 2440, 2441,
     2442, 2443, 2444, 2444, 2449, 2434, 2445, 2445, 2446, 2446,
     2447, 2447, 2448, 2448, 2450, 2451, 2453, 2444, 2452, 2452,
     2454, 2455, 2455, 2446, 2456, 2456, 2457, 2457, 2458, 2458,
     2459, 2460, 2460, 2452, 2461, 2461, 2462, 2465, 2466, 2467,
     2468, 2457, 2469, 2470, 2471, 2472, 2460, 2473, 2474, 2477,
     2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2485, 2486,

     2486, 2487, 2492, 2472, 2488, 2488, 2489, 2489, 2490, 2490,
     2491, 2491, 2485, 2493, 2494, 2495, 2496, 2497, 2488, 2498,
     2499, 2500, 2490, 2501, 2502, 2503, 2503, 2504, 2504, 2505,
     2506, 2506, 2507, 2507, 2508, 2508, 2509, 2510, 2510, 2503,
     2512, 2504, 2511, 2511, 2506, 2513, 2507, 2514, 2514, 2509,
     2515, 2515, 2510, 2516, 2517, 2518, 2519, 2511, 2520, 2521,
     2522, 2522, 2514, 2523, 2523, 2524, 2525, 2525, 2526, 2526,
     2527, 2528, 2529, 2532, 2519, 2522, 2530, 2530, 2523, 2531,
     2531, 2533, 2534, 2534, 2535, 2536, 2536, 2537, 2538, 2539,
     2541, 2530, 2542, 2543, 2545, 2546, 2547, 2548, 2549, 2550,

     2550, 2551, 2552, 2554, 2555, 2556, 2557, 2557, 2558, 2559,
     2559, 2560, 2560, 2563, 2550, 2561, 2561, 2562, 2562, 2564,
     2565, 2566, 2567, 2567, 2568, 2569, 2570, 2571, 2576, 2561,
     2580, 2562, 2572, 2572, 2573, 2573, 2567, 2574, 2574, 2575,
     2575, 2577, 2577, 2578, 2578, 2581, 2572, 2579, 2579, 2582,
     2582, 2574, 2583, 2583, 2586, 2577, 2584, 2584, 2585, 2585,
     2587, 2587, 2588, 2588, 2582, 2589, 2590, 2591, 2591, 2592,
     2593, 2584, 2594, 2595, 2600, 2587, 2596, 2596, 2597, 2597,
     2598, 2598, 2591, 2599, 2599, 2601, 2602, 2603, 2603, 2604,
     2604, 2596, 2605, 2606, 2607, 2598, 2608, 2609, 2610, 2611,

     2613, 2614, 2603, 2615, 2616, 2617, 2618, 2619, 2619, 2620,
     2620, 2621, 2622, 2624, 2625, 2626, 2627, 2627, 2628, 2628,
     2629, 2629, 2619, 2630, 2630, 2631, 2631, 2632, 2632, 2633,
     2627, 2634, 2635, 2635, 2629, 2636, 2636, 2637, 2638, 2631,
     2639, 2632, 2640, 2641, 2641, 2643, 2635, 2642, 2642, 2644,
     2644, 2645, 2646, 2647, 2647, 2648, 2648, 2649, 2650, 2650,
     2651, 2651, 2652, 2652, 2653, 2654, 2654, 2655, 2655, 2656,
     2657, 2658, 2659, 2650, 2660, 2660, 2662, 2652, 2661, 2661,
     2654, 2663, 2664, 2665, 2665, 2666, 2666, 2667, 2667, 2668,
     2669, 2670, 2671, 2673, 2674, 2675, 2676, 2677, 2665, 2678,

     2679, 2681, 2667, 2680, 2680, 2682, 2684, 2685, 2686, 2686,
     2687, 2687, 2688, 2688, 2689, 2689, 2693, 2689, 2695, 2689,
     2690, 2690, 2691, 2691, 2692, 2692, 2688, 2694, 2694, 2696,
     2697, 2697, 2698, 2699, 2690, 2700, 2700, 2706, 2692, 2701,
     2701, 2702, 2702, 2708, 2697, 2703, 2703, 2704, 2704, 2700,
     2705, 2705, 2709, 2701, 2707, 2707, 2702, 2710, 2711, 2712,
     2713, 2714, 2704, 2715, 2715, 2716, 2716, 2717, 2717, 2718,
     2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,
     2716, 2728, 2730, 2731, 2718, 2733, 2733, 2734, 2733, 2735,
     2733, 2736, 2736, 2737, 2737, 2738, 2738, 2739, 2740, 2741,

     2742, 2742, 2743, 2743, 2744, 2745, 2745, 2737, 2746, 2746,
     2747, 2747, 2748, 2748, 2742, 2749, 2749, 2750, 2750, 2745,
     2751, 2751, 2746, 2752, 2752, 2753, 2748, 2754, 2755, 2756,
     2757, 2758, 2750, 2759, 2759, 2760, 2761, 2761, 2762, 2762,
     2763, 2763, 2764, 2765, 2765, 2766, 2767, 2768, 2759, 2769,
     2770, 2771, 2772, 2762, 2773, 2774, 2775, 2779, 2765, 2778,
     2778, 2780, 2781, 2782, 2782, 2783, 2784, 2784, 2785, 2785,
     2786, 2786, 2787, 2787, 2788, 2788, 2789, 2790, 2791, 2793,
     2784, 2792, 2792, 2794, 2795, 2795, 2796, 2796, 2797, 2798,
     2798, 2799, 2800, 2800, 2801, 2801, 2792, 2802, 2803, 2795,

     2804, 2807, 2809, 2810, 2811, 2812, 2813, 2800, 2814, 2815,
     2816, 2816, 2817, 2792, 2818, 2818, 2819, 2819, 2820, 2820,
     2821, 2821, 2822, 2823, 2823, 2824, 2825, 2825, 2826, 2818,
     2827, 2819, 2829, 2820, 2828, 2828, 2830, 2832, 2823, 2833,
     2835, 2836, 2837, 2838, 2839, 2840, 2840, 2841, 2841, 2842,
     2842, 2843, 2843, 2844, 2844, 2845, 2845, 2846, 2847, 2847,
     2840, 2849, 2841, 2848, 2848, 2851, 2843, 2850, 2850, 2852,
     2853, 2854, 2855, 2847, 2856, 2857, 2858, 2859, 2860, 2861,
     2861, 2865, 2850, 2862, 2862, 2863, 2863, 2864, 2864, 2866,
     2866, 2867, 2868, 2868, 2861, 2869, 2869, 2870, 2871, 2871,

     2872, 2872, 2873, 2874, 2875, 2876, 2877, 2868, 2878, 2879,
     2880, 2880, 2881, 2871, 2882, 2872, 2883, 2883, 2884, 2885,
     2885, 2886, 2886, 2887, 2887, 2888, 2888, 2889, 2890, 2891,
     2892, 2893, 2894, 2895, 2885, 2896, 2897, 2898, 2887, 2899,
     2899, 2900, 2900, 2902, 2904, 2904, 2905, 2906, 2907, 2907,
     2908, 2908, 2909, 2910, 2910, 2911, 2912, 2912, 2904, 2913,
     2913, 2914, 2907, 2915, 2915, 2908, 2916, 2916, 2910, 2920,
     2912, 2917, 2917, 2918, 2918, 2919, 2919, 2915, 2921, 2921,
     2916, 2922, 2922, 2923, 2924, 2924, 2925, 2925, 2918, 2926,
     2926, 2927, 2927, 2921, 2928, 2928, 2929, 2929, 2930, 2932,

     2925, 2931, 2931, 2926, 2933, 2933, 2934, 2934, 2935, 2935,
     2936, 2938, 2938, 2939, 2939, 2940, 2940,  797, 2933, 2941,
     2941, 2942, 2942,  796,  795,  794,  793,  792, 2939,  790,
     2940, 2944, 2944, 2944, 2944, 2944, 2945, 2945, 2945, 2945,
     2945, 2946, 2946, 2946, 2946, 2946, 2947, 2947, 2947, 2947,
     2947, 2948, 2948, 2948, 2948, 2948, 2949, 2949, 2949, 2949,
     2949, 2950, 2950, 2950, 2950, 2950, 2951, 2951, 2951, 2951,
     2951, 2952, 2952, 2952, 2952, 2953,  789, 2953, 2953, 2953,
     2954, 2954,  786, 2954, 2954, 2955, 2955, 2955,  785, 2955,
      784,  783,  781,  780,  779,  778,  777,  776,  772,  771,

      770,  769,  766,  765,  764,  763,  762,  761,  760,  758,
      755,  754,  753,  751,  749,  748,  744,  742,  741,  740,
      738,  737,  736,  735,  734,  731,  730,  729,  728,  727,
      726,  724,  722,  721,  719,  718,  717,  716,  715,  714,
      712,  711,  710,  707,  706,  704,  703,  702,  701,  698,
      697,  696,  695,  692,  689,  688,  686,  685,  684,  681,
      680,  679,  676,  673,  672,  671,  669,  667,  666,  665,
      664,  661,  658,  656,  655,  654,  650,  649,  648,  647,
      646,  645,  643,  637,  636,  634,  633,  632,  631,  628,
      627,  624,  623,  622,  620,  619,  618,  617,  613,  612,

      608,  607,  604,  603,  602,  601,  600,  599,  598,  597,
      592,  591,  590,  589,  585,  582,  581,  580,  579,  578,
      575,  574,  573,  572,  571,  570,  569,  567,  566,  565,
      564,  561,  560,  559,  558,  557,  554,  553,  551,  550,
      549,  547,  546,  545,  544,  541,  540,  539,  538,  537,
      535,  534,  533,  532,  529,  526,  524,  523,  522,  520,
      519,  518,  517,  516,  515,  513,  507,  506,  505,  504,
      503,  502,  499,  498,  497,  496,  495,  493,  492,  491,
      490,  486,  485,  484,  483,  482,  481,  480,  478,  477,
      476,  474,  472,  471,  470,  468,  467,  466,  465,  464,

      463,  462,  461,  459,  455,  454,  451,  448,  447,  445,
      444,  443,  442,  441,  440,  439,  436,  435,  432,  431,
      428,  427,  426,  425,  422,  421,  419,  418,  417,  416,
      411,  410,  409,  407,  406,  404,  400,  399,  398,  397,
      396,  395,  394,  391,  390,  389,  388,  384,  382,  381,
      380,  379,  378,  376,  375,  373,  372,  371,  370,  369,
      368,  367,  365,  364,  363,  362,  361,  359,  358,  357,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      344,  343,  340,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  325,  324,  321,  320,  319,  318,  317,

      316,  313,  312,  310,  309,  308,  307,  305,  304,  303,
      302,  301,  300,  299,  297,  296,  294,  293,  292,  291,
      290,  289,  288,  286,  285,  284,  283,  282,  281,  280,
      278,  277,  276,  272,  271,  270,  267,  266,  265,  264,
      263,  258,  257,  255,  254,  249,  248,  247,  246,  245,
      244,  243,  242,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  224,  223,  222,
      221,  220,  218,  217,  216,  213,  212,  211,  210,  209,
      208,  207,  205,  204,  202,  201,  200,  199,  198,  197,
      196,  194,  193,  192,  191,  190,  189,  188,  186,  185,

      184,  180,  179,  178,  175,  174,  173,  172,  171,  170,
      166,  165,  163,  162,  160,  150,  148,  147,  144,  141,
      139,  136,  134,  132,  131,  129,  127,  126,  125,  124,
      123,  122,  121,  120,  118,  117,  116,  115,  114,  113,
      112,  110,  109,  107,  102,  101,  100,   90,   88,   87,
       84,   81,   77,   70,   69,   65,   60,   59,   57,   55,
       54,   53,   49,   44,   41,   32,   31,   27,   24,   22,
       19,   14,   13,    8,    7,    6,    5,    4,    3, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,

     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[395] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file OSparseosol.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosol.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosol.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSoLParserData.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2599 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"

 
#line 2854 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2944 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4680 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 578 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 383:
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 586 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 387:
#line 588 "../../../../OS/src/OSParsers/OSParseosol.l"
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 588 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 592 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 593 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 594 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 598 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 5337 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2944 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2944 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2943);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"





