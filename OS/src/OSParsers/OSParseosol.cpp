#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 320
#define YY_END_OF_BUFFER 321
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2422] =
    {   0,
        1,    1,  318,  318,  316,  316,  317,  317,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  321,  319,
        1,    2,  306,    2,  306,    6,  306,    5,  319,    4,
      306,  306,    2,  318,  320,  316,  317,  307,  309,  310,
      309,  313,  314,  313,    1,  306,  306,    6,  306,    5,
        0,    4,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,    3,    6,    6,  306,    7,    5,    0,    0,  312,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,

      306,  306,  318,  316,  317,  307,    0,  315,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  160,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  311,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  308,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  240,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
        0,    0,    0,  232,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  224,    0,    0,    0,    0,    0,
        0,    0,  226,  306,  306,  306,  306,  306,  306,  306,
      306,   29,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  104,  105,
      306,  306,  306,  306,  306,  306,  306,  306,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  172,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  162,    0,    0,    0,  306,  306,
      306,  306,  306,  306,  306,  306,  306,   29,  306,  108,
      306,  306,  306,  306,  306,  109,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,    0,    0,    0,    0,
        0,    0,    0,  241,    0,    0,    0,    0,    0,  161,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  233,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  225,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  227,    0,    0,    0,
        0,    0,    0,  206,  268,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  283,  134,    0,    0,    0,    0,    0,
        0,    0,    0,  287,    0,    0,    0,    0,  112,  111,
      148,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  274,    0,    0,    0,    0,    0,  306,  306,  306,
      306,  306,  306,  306,  102,  103,  306,  108,  306,  306,
      306,  306,  109,  306,   66,   67,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,   78,   79,  306,  306,
      306,   88,   89,  306,  306,  306,  306,    0,    0,    0,
        0,    0,    0,    0,  241,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  284,  123,    0,    0,    0,    0,    0,    0,
        0,    0,  288,    0,  233,    0,    0,    0,    0,  113,
        0,    0,    0,    0,  173,    0,    0,    0,    0,    0,

        0,  225,    0,    0,    0,    0,    0,    0,  163,    0,
        0,  227,    0,    0,    0,    0,    0,    0,  266,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  285,  283,    0,
        0,    0,  262,    0,    0,    0,    0,  289,  287,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,    0,    0,    0,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,   64,   65,  306,  306,  306,  306,  306,  110,  306,
      306,  306,   30,  306,  306,   76,   77,  306,  306,   86,

       87,  306,   92,   93,  306,  306,  306,    0,    0,    0,
        0,    0,    0,  207,    0,  269,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  284,    0,  135,    0,    0,
        0,    0,    0,    0,    0,  288,    0,    0,    0,    0,
      113,    0,  149,    0,    0,    0,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  275,    0,    0,  163,
        0,    0,    0,    0,  208,  210,    0,    0,    0,    0,
      144,    0,    0,    0,    0,    0,    0,    0,  116,  278,
        0,    0,    0,    0,    0,  285,    0,    0,  138,  164,

        0,    0,    0,    0,  289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  196,    0,    0,  120,    0,
        0,    0,    0,    0,  291,    0,  218,    0,    0,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  110,  306,   74,
       75,   30,  306,  306,  306,  306,  306,   90,   91,  306,
      306,  306,  100,  101,    0,    0,    0,    0,    0,  207,
      269,    0,  267,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  215,  135,    0,    0,    0,  263,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      292,  275,    0,    0,  119,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  270,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  303,    0,    0,    0,    0,    0,  276,
        0,    0,    0,    0,    0,    0,  142,  184,    0,    0,
        0,    0,    0,    0,    0,    0,  293,  291,    0,    0,
      140,    0,  306,  306,  306,  306,  306,   48,   49,  306,
      306,  306,  306,  306,  306,   60,   61,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,   70,
       71,  306,  306,  306,   72,   73,  306,  306,  306,  306,
       84,   85,  306,   96,   97,   98,   99,    0,    0,  209,
        0,  211,    0,    0,  267,    0,    0,    0,  145,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  117,    0,
      279,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      215,    0,  304,    0,  139,  263,    0,  165,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  197,    0,    0,    0,    0,  121,    0,    0,
        0,    0,    0,  292,    0,  119,    0,  219,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  305,  303,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  293,    0,    0,  198,
      306,  306,  306,   44,   45,   46,   47,  306,  306,   56,
       57,  306,  306,   58,   59,  306,  306,  106,  107,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,   68,   69,  306,  252,  253,  306,  306,  306,  306,
       82,   83,   94,   95,    0,  209,  211,    0,    0,    0,

        0,  145,    0,    0,    0,    0,  271,    0,    0,    0,
        0,  117,  279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  304,  139,  165,    0,    0,    0,    0,
        0,  277,    0,    0,    0,    0,    0,    0,    0,  143,
        0,  185,  197,    0,    0,    0,    0,  121,    0,    0,
        0,    0,    0,    0,  219,    0,  141,    0,  212,    0,
      264,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  305,    0,    0,    0,    0,    0,    0,  228,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  126,

        0,    0,    0,    0,  216,  306,  306,  306,  306,   42,
       43,  306,   54,   55,  306,  306,  306,  306,  306,   10,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      250,  251,  306,  306,  306,  306,    0,    0,    0,    0,
        0,    0,    0,    0,  271,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  277,    0,    0,    0,    0,    0,    0,
      143,  185,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  141,    0,  199,    0,    0,  236,    0,    0,
        0,  248,    0,    0,  178,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  128,    0,    0,    0,    0,  306,  306,  306,  306,
      306,  306,  306,   31,  306,   32,  306,  306,   25,  306,
       10,  306,  306,  306,  306,   23,  306,  306,  306,  306,
      306,   21,  306,  306,   20,  306,  306,  306,  306,  306,
       33,    0,  213,    0,    0,  265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      229,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  127,    0,    0,    0,    0,  217,  199,    0,
        0,  168,    0,    0,  295,    0,    0,    0,  299,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,  282,    0,  156,  150,    0,    0,  286,  124,  114,
      146,    0,    0,    0,    0,    0,    0,  246,    0,    0,
        0,  306,  306,  306,  306,  306,   52,   53,   31,   32,
      306,  306,   25,  306,  306,  306,  306,   23,  306,  306,
      306,  306,  306,   21,  306,   20,  306,  306,  306,  306,
       33,  213,    0,  265,    0,    0,  237,    0,    0,  296,
        0,    0,  249,    0,  300,    0,    0,  179,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,    0,    0,  229,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,  127,    0,    0,    0,  217,
        0,    0,  297,  295,    0,    0,  301,  299,    0,  192,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  282,
        0,  152,  286,    0,    0,    0,    0,    0,  174,  244,
        0,    0,    0,  306,  306,  306,   34,  306,  306,  306,
       50,   51,  306,   63,   62,  306,  306,  306,   13,  306,
      306,  306,  306,  306,  306,  306,   12,  306,  306,  306,
      306,  306,  306,  306,    0,    0,  237,    0,  169,  296,

        0,  249,  300,    0,  179,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  131,    0,    0,  157,  155,    0,
      151,    0,    0,  125,    0,  115,    0,  147,    0,    0,
        0,    0,    0,    0,  129,    0,  247,    0,    0,    0,
        0,    0,  297,    0,    0,    0,  301,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  136,    0,    0,  306,  306,   34,  306,
      306,  256,  257,  306,  306,   13,  306,    9,  306,  306,
      306,  306,  306,  306,   12,  306,  306,  306,  306,  306,
      306,   81,   80,    0,    0,  169,    0,    0,    0,  193,

        0,    0,    0,    0,    0,    0,    0,    0,  131,    0,
      157,  151,    0,  153,  125,  115,  147,    0,    0,    0,
        0,    0,    0,  175,  247,    0,  245,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  194,    0,    0,
        0,    0,  306,  306,  306,  306,  254,  255,  306,  306,
        9,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,    0,    0,    0,    0,  193,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,  175,  245,    0,  137,    0,  158,  272,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  182,
      132,    0,    0,    0,    0,    0,    0,    0,    0,  290,
      306,   40,  306,   39,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,   41,  306,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  195,    0,    0,  137,
        0,    0,    0,  176,    0,    0,    0,  242,    0,    0,
        0,    0,    0,    0,    0,  188,    0,    0,    0,  290,
       40,   39,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,   14,  306,   15,  306,  306,   16,   41,  306,

      306,    0,  159,    0,  273,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  183,    0,  133,    0,    0,
        0,  195,    0,    0,    0,    0,    0,    0,  204,    0,
        0,    0,    0,    0,    0,    0,  302,    0,  166,    0,
        0,  306,   38,  306,   37,  306,  306,  306,   17,  306,
      306,  306,  306,   14,   15,  306,   16,  306,  306,  159,
      273,    0,    0,  177,    0,    0,    0,  243,    0,    0,
        0,    0,  183,  133,    0,    0,    0,  189,    0,    0,
        0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
      302,    0,  170,    0,   38,   37,  306,   18,  306,   17,

      306,  306,  306,  306,  306,  306,  306,    0,  177,    0,
      205,    0,  243,    0,    0,    0,    0,    0,    0,  189,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,  306,   11,  306,  306,  306,
        8,  306,  306,  306,   36,  306,   35,    0,  191,  205,
        0,    0,    0,    0,    0,    0,    0,  167,    0,  171,
        0,    0,    0,    0,    0,    0,  200,    0,    0,    0,
        0,   11,  306,  306,    8,  306,  306,   26,   36,   35,
      191,    0,    0,    0,    0,    0,    0,    0,  171,    0,
        0,    0,    0,  234,  230,    0,  180,    0,    0,    0,

      306,  306,  306,   26,    0,    0,    0,    0,  201,    0,
        0,    0,    0,    0,    0,    0,  238,    0,    0,  186,
        0,  306,  306,  306,    0,    0,  235,    0,  231,  201,
        0,    0,  181,    0,    0,    0,    0,    0,    0,    0,
        0,  306,  306,  306,    0,  239,  235,  231,    0,  181,
        0,    0,  187,    0,    0,    0,    0,    0,    0,  306,
      306,  306,  239,    0,    0,  187,    0,    0,  294,    0,
      298,    0,    0,    0,  306,  306,  306,    0,    0,    0,
      294,  298,  202,    0,  222,  306,  306,  306,    0,    0,
        0,    0,  306,  306,  306,   19,    0,  203,    0,    0,

      223,    0,  306,  306,   22,   19,  203,    0,  223,    0,
      306,   24,   22,    0,  220,   24,    0,    0,  221,  221,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[2435] =
    {   0,
        0,   65, 3725, 3724, 3735, 3734, 3731, 3730,    0,    0,
        0,    0, 3721, 3720,   13,   17,    3,    5, 3734, 3743,
      129, 3728,    0, 3725,   19,   38, 3714,   84,  190,   25,
     3700, 3690, 3743,    0, 3743,    0,    0,    0, 3743, 3743,
     3719, 3743, 3743, 3710,    0,    0,   24,   90, 3709,  193,
       35,   40, 3695, 3685, 3684,    6, 3679, 3669, 3664, 3663,
        4,    8,   25,   32, 3678, 3664,   58,   61,   33, 3677,
     3672, 3743,   52,  249,  107, 3743,   55, 3705,  254, 3743,
     3655,   68, 3659,   66,   58, 3664, 3667,   71, 3656, 3661,
       87,   83,  159,  158, 3664,  211, 3643,  152, 3666,   60,

     3681, 3673,    0,    0,    0,    0, 3685, 3743, 3644, 3642,
     3647, 3641, 3638, 3643, 3642, 3632, 3652,  189, 3651, 3642,
     3640, 3638, 3637, 3639, 3625, 3646, 3620,  162, 3627,  256,
     3643, 3627,  190, 3633,  172, 3632,  211,  253, 3669, 3619,
      218, 3623,  155,  223, 3628, 3631,  224, 3620, 3625,  206,
      238,  263,  244, 3628,  266, 3607,  227, 3630,  304, 3611,
     3614, 3614,  231, 3609, 3621, 3604, 3612, 3609,  276, 3637,
     3616, 3618, 3616,  228, 3604, 3604, 3602, 3605, 3594, 3598,
     3604, 3591,   31, 3595, 3592, 3590,  230, 3606, 3590, 3586,
     3588, 3592, 3597, 3583,  218, 3743, 3595, 3594, 3601, 3594,

     3583, 3582, 3573,  325, 3575, 3571, 3590, 3589, 3584, 3568,
     3582, 3584, 3588, 3593, 3571, 3577, 3559, 3593, 3572,  333,
      340, 3564, 3572, 3555, 3574, 3554, 3552, 3575, 3564, 3743,
      316, 3551, 3554, 3554,  294, 3549,  351, 3545, 3553, 3550,
      308, 3578, 3557, 3559, 3557,  298, 3545, 3545, 3543, 3546,
     3535, 3539, 3545, 3532,  258, 3536, 3533, 3531,  313, 3547,
     3531, 3527, 3529, 3533, 3538, 3524, 3524, 3525, 3523,  314,
     3535,  301, 3532, 3533, 3530, 3521, 3520, 3527, 3526, 3525,
     3509, 3507, 3507, 3521, 3507, 3511, 3536, 3517, 3503, 3523,
      353, 3514, 3492, 3512, 3507, 3503, 3509, 3497, 3493, 3503,

     3507, 3488, 3486, 3485, 3507, 3487, 3486, 3498, 3482, 3496,
     3486, 3481, 3489,  302, 3490, 3471, 3477, 3497,  373, 3477,
      375,  377,  381, 3491, 3479, 3470, 3507,  383,  385, 3483,
     3462, 3485, 3484, 3491, 3478, 3478, 3476,  393, 3743, 3743,
     3461,  390, 3478, 3466,  400, 3472, 3451, 3467, 3457, 3458,
     3456,  324, 3468,  402, 3465, 3466, 3463,  405,  407, 3454,
     3453, 3460, 3459, 3458, 3442, 3440, 3440, 3454, 3440, 3444,
      409, 3451, 3437, 3457,  394, 3448, 3426,  415, 3442, 3438,
     3444, 3432, 3428, 3438, 3442, 3423, 3421, 3420,  418, 3423,
     3422, 3434, 3418, 3432, 3422, 3417,  422, 3413, 3410, 3416,

      399, 3428, 3419, 3409, 3427, 3413, 3408, 3422, 3419, 3418,
      370, 3404, 3397, 3411, 3399, 3417, 3410, 3411,  427, 3432,
     3400, 3404, 3403, 3417, 3401, 3404,  434, 3403, 3404,  380,
      439, 3388, 3384, 3381, 3409, 3397,  400, 3392, 3395, 3398,
     3395, 3377, 3378, 3390, 3743, 3379, 3401, 3391, 3390, 3372,
     3374, 3372, 3378, 3361,  446,  461, 3385,  450,  468,  470,
     3372, 3362, 3373, 3366,  472,  474,  476,  478, 3362, 3363,
     3368, 3359, 3370, 3357, 3350, 3353, 3356,  484,  488, 3359,
     3349,  494,  496,  502, 3353, 3348, 3346, 3343, 3349,  432,
     3361, 3352,  504,  506, 3342, 3360, 3346, 3341, 3355,  509,

     3352, 3351,  437, 3337, 3330, 3344, 3332, 3350, 3343, 3344,
      511,  513,  517, 3365, 3333, 3337, 3336, 3350, 3334, 3337,
      520, 3336,  522,  524, 3337,  414,  529, 3321, 3317, 3314,
      531, 3331,  407, 3326, 3329,  533,  538, 3332, 3329, 3311,
     3312, 3324,  540, 3313, 3335,  542,  549, 3325, 3324, 3319,
     3318, 3347, 3320, 3743, 3301,  325, 3316, 3314, 3308, 3296,
     3301, 3296, 3295, 3315, 3310, 3305, 3308,  526, 3294, 3302,
     3301,  551, 3326,  558, 3743,  514, 3280, 3290, 3304, 3282,
     3287,  563, 3320,  567, 3280, 3277, 3287, 3281,  573, 3743,
     3301, 3273, 3277, 3290, 3271, 3270, 3270, 3284, 3268, 3267,

     3279, 3743, 3281, 3269, 3258, 3279, 3277, 3258, 3276, 3258,
     3270, 3258, 3257,  576, 3743, 3743, 3267,  582, 3272, 3265,
     3254, 3252,  584,  586, 3300, 3297, 3272, 3259, 3248, 3271,
      592,  594,  596, 3270, 3245,  598, 3292, 3289, 3258, 3251,
      604, 3288, 3285,  611,  613, 3248,  619, 3251, 3246, 3245,
     3274, 3247,  621,  623,  626,  563, 3244, 3242, 3236, 3224,
     3229, 3224, 3223, 3243, 3238, 3233, 3236,  535, 3222, 3230,
     3229,  628,  630,  634,  639,  593, 3209, 3219, 3233, 3211,
     3216,  641,  644, 3210,  646, 3207, 3217, 3211,  649,  651,
      657, 3204, 3208,  659,  661, 3221, 3202, 3201, 3201, 3215,

     3199,  665, 3198, 3210,  667, 3211, 3193,  669,  675, 3176,
     3141,  679, 3138, 3127, 3120, 3119, 3155,   43, 3743,   73,
      108,  142,  196,  206,  225,  281,  307,  326,  387,  432,
      432,  452,  470,  482,  497,  508, 3743,  687,  689,  556,
      529,  534, 3743,  549,  645,  555,  564,  691,  693,  628,
      602,  610,  601,  649,  629,  664,  641,  651,  642,  642,
      658,  659,  672,  658,  707,  667, 3743,  659,  661,  663,
      658,  663,  653,  717,  659,  678,  675,  684,  723,  675,
      665, 3743, 3743,  685,  728,  676,  675,  733,  735,  738,
      740,  748,  750,  707,  692, 3743, 3743,  716,  754, 3743,

     3743,  756,  755,  755,  763,  765,  769,  719,  717,  719,
      758,  720,  780,  782,  784,  786,  788,  728,  753,  735,
      751,  741,  743,  740,  760,  757,  749,  753,  747,  756,
      760,  761,  768,  754,  809,  811,  813,  815,  776,  777,
      819,  780,  794,  776,  774,  829,  776,  786,  770,  811,
      835,  837,  839,  789,  823,  789,  845,  802,  793,  793,
      809,  810,  824,  809,  855,  858,  860,  825,  863,  865,
      817,  819,  821,  826, 3743, 3743,  827,  820,  819,  831,
     3743,  827,  823,  826,  826,  826,  846,  865, 3743, 3743,
      868,  834,  841,  849,  856,  893,  850,  898, 3743, 3743,

      839,  848,  869,  848,  904,  856,  853,  851,  873,  870,
      856,  869,  870,  876,  863,  877,  878,  880,  893,  870,
      872,  887,  925,  913,  929,  876, 3743,  891,  892,  890,
      881,  937,  943,  945,  894,  952,  898,  899,  954,  958,
      916,  964,  951,  976,  984,  991,  908,  972,  993,  957,
      957,  999,  911,  914,  931, 1001, 1003, 3743, 3743, 1009,
     1011, 1017,  979,  983,  950, 1024, 1026,  952,  953, 1028,
     1030, 1032, 1034,  957,  974, 1036,  971,  982,  986,  987,
      987, 1007, 1026, 1048, 1054, 1039,  992, 1002, 1011, 1024,
     1060, 1064, 1066, 1070, 1072, 1076, 1078, 1080, 1005, 1030,

     1051, 1030, 1031, 1030, 1052, 1049, 1092, 1038, 1051, 1052,
     1058, 1045, 1100, 1061, 1063, 1104, 1054, 1056, 1071, 1109,
     1111, 1113, 1061, 1120, 1117, 1122, 1084, 1085, 1071, 1078,
     1084, 1110, 1081, 1094, 1089, 1091, 3743, 1094, 1084, 1101,
     1106, 1107, 1094, 1089, 1109, 1111, 1108, 1109, 1125, 1115,
     1098, 1155, 1142, 1158, 1111, 1120, 1110, 1102, 1128, 3743,
     1125, 1111, 1131, 1124, 1118, 1125, 3743, 3743, 1119, 1135,
     1157, 1140, 1148, 1124, 1158, 1144, 1183, 1185, 1178, 1143,
     3743, 1134, 1130, 1139, 1192, 1194, 1200, 1193, 1197, 1153,
     1207, 1209, 1167, 1156, 1215, 1214, 1214, 1161, 1223, 1225,

     1176, 1181, 1176, 1182, 1196, 1199, 1206, 1201, 1239, 1238,
     1238, 1245, 1255, 1191, 3743, 3743, 1194, 1216, 1193, 1261,
     1248, 1249, 1267, 1260, 1260, 3743, 3743, 1213, 1273, 1275,
     1277, 1279, 1221, 1236, 1282, 1264, 1235, 1286, 1289, 1252,
     1248, 1249, 1295, 1252, 1242, 1258, 1263, 1302, 1304, 1306,
     1308, 1274, 1261, 1256, 1276, 1278, 1275, 1277, 1294, 1282,
     1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1290, 1300,
     1290, 1282, 1345, 1306, 1292, 1312, 1306, 1298, 1305, 1354,
     1356, 1358, 1361, 1308, 1324, 1346, 1374, 1376, 1329, 1337,
     1314, 1349, 1340, 1379, 1336, 1382, 1384, 1386, 1390, 1333,

     1331, 1356, 1334, 1347, 1340, 1352, 1347, 1359, 1350, 1351,
     1355, 1357, 1351, 1357, 1371, 1363, 1356, 1372, 1357, 1362,
     1377, 1361, 1375, 1417, 1419, 1412, 1384, 1382, 1387, 1393,
     1377, 1372, 1383, 1389, 1379, 1390, 1392, 1401, 1403, 1391,
     1392, 1389, 1416, 1395, 1391, 1394, 1443, 1390, 1407, 3743,
     1427, 1397, 1451, 1446, 1448, 3743, 3743, 1405, 1457, 1458,
     1458, 1408, 1424, 3743, 3743, 1414, 1467, 3743, 3743, 1419,
     1473, 1414, 1434, 1438, 1431, 1434, 1423, 1429, 1449, 1434,
     1429, 3743, 3743, 1485, 1481, 1484, 1446, 1447, 1432, 1453,
     3743, 3743, 3743, 3743, 1434, 1496, 1498, 1463, 1441, 1454,

     1447, 1504, 1461, 1456, 1467, 1509, 1511, 1462, 1463, 1467,
     1469, 1517, 1519, 1466, 1472, 1486, 1479, 1472, 1488, 1473,
     1478, 1493, 1477, 1532, 1534, 1536, 1500, 1498, 1503, 1509,
     1542, 1544, 1491, 1502, 1508, 1498, 1509, 1510, 1552, 1554,
     1558, 1560, 1562, 1523, 1532, 1520, 1521, 1568, 1521, 1548,
     1527, 1524, 1527, 1537, 1577, 1579, 1581, 1583, 3743, 1531,
     3743, 1545, 1532, 1547, 1539, 1535, 1541, 1538, 1552, 1554,
     1551, 1542, 1551, 1559, 1556, 1546, 1570, 1565, 1556, 1561,
     1558, 1608, 1562, 1570, 1572, 1574, 1569, 1574, 3743, 1565,
     1576, 1568, 1580, 1565, 1570, 1566, 1569, 1576, 1584, 3743,

     1575, 1569, 1587, 1578, 3743, 1580, 1591, 1576, 1578, 3743,
     3743, 1634, 3743, 3743, 1636, 1638, 1599, 1641, 1643, 1645,
     1598, 1600, 1628, 1653, 1615, 1614, 1620, 1660, 1604, 1663,
     3743, 3743, 1613, 1606, 1616, 1669, 1671, 1619, 1675, 1637,
     1624, 1639, 1631, 1627, 1684, 1637, 1634, 1648, 1650, 1647,
     1638, 1647, 1656, 1653, 1643, 1667, 1662, 1653, 1658, 1663,
     1665, 1667, 1662, 1709, 1711, 1662, 1673, 1665, 1677, 1662,
     1718, 1720, 1671, 1667, 1670, 1677, 1686, 1728, 1679, 1673,
     1691, 1733, 1735, 1737, 1739, 1680, 1693, 3743, 1689, 1745,
     1714, 3743, 1749, 1695, 3743, 1698, 1699, 1721, 1718, 1722,

     1710, 1711, 1726, 1724, 1729, 1767, 1724, 1716, 3743, 1730,
     1710, 1773, 1725, 1722, 1722, 1722, 1746, 1755, 1744, 1742,
     1743, 3743, 1735, 1735, 1770, 1732, 1750, 1731, 1755, 1752,
     1794, 1796, 1802, 1804, 1806, 1809, 1811, 1813, 1817, 1742,
     1821, 1759, 1760, 1800, 1823, 1828, 1787, 1776, 1801, 1791,
     1833, 1835, 1797, 1839, 1841, 1806, 1796, 1824, 1805, 1848,
     1850, 1854, 1857, 1791, 1859, 1863, 1812, 1865, 1812, 1870,
     1835, 1872, 1875, 1821, 1878, 1826, 1826, 1848, 1845, 1849,
     1837, 1838, 1854, 1851, 1857, 1841, 1896, 1857, 1837, 1900,
     1902, 1854, 1851, 1851, 1851, 1875, 1884, 1873, 1871, 1872,

     1916, 1918, 1920, 1864, 1871, 1906, 1924, 1926, 1928, 1911,
     1891, 3743, 1934, 1921, 1937, 1889, 1944, 1926, 1947, 1901,
     1914, 1897, 1915, 1898, 1917, 1902, 1930, 1902, 3743, 1923,
     1962, 1964, 1927, 3743, 3743, 1926, 1968, 1970, 3743, 3743,
     3743, 1921, 1922, 1929, 1921, 1937, 1923, 1924, 1933, 1927,
     1928, 1966, 1985, 1933, 1988, 1990, 1989, 1989, 2000, 2003,
     2005, 2007, 2013, 1942, 1944, 2015, 1954, 2017, 1955, 2002,
     1984, 2022, 1969, 2025, 1973, 2032, 1990, 1985, 1989, 2038,
     2040, 2042, 2016, 2044, 2005, 2047, 2049, 2053, 2055, 2057,
     2000, 2059, 2063, 2065, 2071, 2020, 2075, 2077, 2035, 2015,

     2036, 2023, 2043, 2028, 2056, 2028, 2085, 2049, 2088, 2091,
     2093, 2095, 2056, 2098, 2101, 2104, 2107, 2058, 2060, 2067,
     2059, 2075, 2060, 2117, 2120, 2123, 2125, 2080, 2074, 2129,
     2094, 2083, 2134, 2136, 2129, 2120, 2141, 2143, 2136, 3743,
     2090, 2111, 2102, 2106, 2104, 2108, 2103, 2110, 2109, 2158,
     2119, 3743, 2161, 2109, 2137, 2117, 2110, 2111, 3743, 3743,
     2127, 2132, 2131, 2120, 2121, 2173, 2175, 2121, 2178, 2181,
     3743, 3743, 2188, 3743, 3743, 2146, 2148, 2194, 2196, 2198,
     2145, 2149, 2163, 2165, 2158, 2204, 2206, 2154, 2181, 2163,
     2172, 2160, 2216, 2219, 2184, 2173, 2225, 2227, 2231, 2233,

     2210, 2235, 2238, 2240, 2243, 2189, 2209, 2199, 2203, 2201,
     2205, 2200, 2207, 2253, 2256, 2210, 2259, 2261, 2263, 2265,
     2269, 2271, 2275, 2277, 2281, 2283, 2287, 2291, 2213, 2246,
     2231, 2229, 2233, 2293, 2297, 2299, 2303, 2305, 2254, 2264,
     2251, 2253, 2310, 2272, 2272, 2278, 2316, 2276, 2282, 2276,
     2265, 2265, 2283, 2284, 2268, 2276, 2287, 2279, 2285, 2280,
     2284, 2300, 2283, 3743, 2285, 2295, 2289, 2279, 2339, 2323,
     2342, 2341, 2341, 2303, 2293, 2350, 2352, 2355, 2299, 2308,
     2313, 2304, 2307, 2308, 2363, 2324, 2315, 2327, 2315, 2315,
     2371, 3743, 3743, 2317, 2319, 2377, 2338, 2343, 2381, 2383,

     2348, 2341, 2330, 2330, 2348, 2349, 2333, 2341, 2393, 2354,
     2397, 2399, 2401, 2403, 2405, 2407, 2409, 2366, 2361, 2365,
     2381, 2364, 2417, 2419, 2421, 2423, 2425, 2427, 2379, 2393,
     2376, 2392, 2386, 2388, 2391, 2381, 2389, 2399, 2400, 2408,
     2389, 2404, 2396, 2430, 2409, 2408, 2392, 3743, 2406, 2398,
     2414, 2454, 2456, 2458, 2409, 2410, 3743, 3743, 2412, 2418,
     2464, 2425, 2412, 2427, 2426, 2428, 2419, 2420, 2420, 2422,
     2478, 2424, 2444, 2427, 2435, 2437, 2485, 2431, 2438, 2448,
     2449, 2456, 2438, 2453, 2445, 2479, 2497, 2458, 2442, 2501,
     2458, 2450, 2505, 2507, 2509, 2511, 2474, 3743, 3743, 2459,

     2474, 2476, 2470, 2462, 2464, 2466, 2505, 2486, 2492, 3743,
     3743, 2472, 2486, 2473, 2488, 2481, 2486, 2488, 2533, 2535,
     2537, 2541, 2543, 2545, 2491, 2488, 2493, 2499, 2497, 2497,
     2515, 2504, 2519, 2558, 2560, 2517, 2563, 2565, 2567, 2551,
     2570, 2575, 2532, 2537, 2523, 2525, 2528, 2567, 2549, 2554,
     2588, 2591, 2539, 2539, 2554, 2596, 2598, 2551, 2556, 2604,
     2563, 2569, 2553, 3743, 2569, 2557, 2578, 3743, 2563, 2578,
     2568, 2566, 2581, 2619, 2588, 3743, 2581, 2582, 2579, 2625,
     2627, 2629, 2631, 2635, 2578, 2587, 2638, 2586, 2585, 2592,
     2605, 2646, 2650, 2653, 2655, 2593, 2657, 2661, 2663, 2597,

     2608, 2665, 2668, 2672, 2674, 2614, 2676, 2623, 2644, 2681,
     2632, 2647, 2637, 2635, 2688, 2692, 2694, 2697, 2653, 2666,
     2700, 2704, 2661, 2665, 2662, 2654, 2669, 2693, 3743, 2675,
     2656, 2666, 2659, 2690, 2668, 2719, 2721, 2672, 3743, 2669,
     2675, 2726, 2728, 2730, 2732, 2735, 2682, 2738, 2741, 2706,
     2700, 2691, 2699, 2750, 2753, 2698, 2755, 2709, 2699, 2759,
     2761, 2722, 2764, 2766, 2768, 2733, 2771, 2773, 2718, 2728,
     2720, 2751, 2780, 2784, 2732, 2736, 2788, 2790, 2792, 2739,
     2745, 2751, 3743, 2743, 2750, 2749, 2743, 2760, 2751, 2765,
     2805, 2781, 3743, 2766, 2810, 2812, 2814, 2816, 2818, 2820,

     2777, 2765, 2824, 2785, 2772, 2829, 2833, 2835, 2839, 2841,
     2844, 2783, 2848, 2787, 2789, 2810, 2801, 2814, 2827, 2857,
     2859, 2861, 2863, 2812, 2813, 2825, 2810, 2828, 2828, 2815,
     2813, 2828, 2822, 2839, 2876, 2879, 2881, 2833, 2843, 2885,
     2887, 2860, 2890, 2894, 2896, 2900, 2902, 2905, 2909, 2911,
     2835, 2858, 2866, 2858, 2857, 2872, 2866, 2918, 2921, 2923,
     2889, 2870, 2890, 2887, 2874, 2875, 2899, 2891, 2888, 2876,
     2894, 2937, 2883, 2911, 2941, 2891, 2944, 2946, 2948, 2950,
     2952, 2913, 2900, 2901, 2959, 2916, 2916, 2904, 2963, 2924,
     2921, 2911, 2913, 3743, 3743, 2913, 3743, 2920, 2930, 2927,

     2944, 2923, 2920, 2977, 2924, 2980, 2982, 2984, 2986, 2932,
     2989, 2942, 2952, 2949, 2945, 2947, 3743, 2946, 2958, 3743,
     2959, 2951, 2949, 2961, 3007, 3009, 3011, 3013, 3015, 3017,
     2965, 3020, 3025, 2980, 3029, 2984, 2981, 2978, 2988, 2998,
     2992, 2981, 2993, 2988, 3040, 3042, 3045, 3047, 3004, 3050,
     3016, 3053, 3056, 3014, 3059, 3061, 3013, 3023, 3009, 3021,
     3016, 3019, 3070, 3022, 3032, 3077, 3019, 3079, 3081, 3083,
     3085, 3044, 3043, 3034, 3039, 3041, 3037, 3050, 3050, 3041,
     3099, 3101, 3743, 3054, 3743, 3053, 3049, 3105, 3107, 3066,
     3110, 3068, 3058, 3114, 3116, 3120, 3123, 3126, 3074, 3131,

     3133, 3073, 3135, 3139, 3141, 3143, 3147, 3081, 3150, 3090,
     3154, 3156, 3158, 3097, 3743, 3160, 3162, 3164, 3166, 3169,
     3743, 3181, 3187, 3193, 3199, 3205, 3211, 3217, 3223, 3171,
     3229, 3234, 3240, 3246
    } ;

static yyconst flex_int16_t yy_def[2435] =
    {   0,
     2422, 2422, 2423, 2423, 2424, 2424, 2425, 2425, 2426, 2426,
     2426, 2426, 2427, 2427, 2428, 2428, 2429, 2429, 2421, 2421,
     2421, 2421, 2430, 2421, 2430, 2430, 2430, 2430, 2421, 2421,
     2430, 2430, 2421, 2431, 2421, 2432, 2433, 2434, 2421, 2421,
     2421, 2421, 2421, 2421,   21, 2430, 2430, 2430, 2430, 2430,
       29, 2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2430, 2430, 2430, 2421, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2430, 2430, 2431, 2432, 2433, 2434, 2421, 2421, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2430, 2421, 2430, 2430, 2430, 2430,

     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430,
     2430, 2421, 2421, 2430, 2430, 2430, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430, 2421,

     2421, 2430, 2421, 2421, 2430, 2430, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421,
     2421, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430,
     2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430,
     2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430, 2430,

     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421,
     2421, 2430, 2430, 2430, 2421, 2421, 2430, 2430, 2430, 2430,
     2421, 2421, 2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2430, 2430, 2430, 2421, 2421, 2421, 2421, 2430, 2430, 2421,
     2421, 2430, 2430, 2421, 2421, 2430, 2430, 2421, 2421, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2430, 2421, 2421, 2430, 2430, 2430, 2430,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2430, 2430, 2430, 2430, 2421,
     2421, 2430, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2421, 2421, 2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2421, 2421, 2430, 2421, 2421, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2430, 2430, 2430, 2430, 2421, 2421, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,

     2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430,

     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2430, 2430, 2430, 2430, 2430, 2430,
     2430, 2430, 2430, 2430, 2430, 2430, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2430, 2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2430, 2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2430,
     2430, 2430, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2430, 2430, 2430, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2430, 2430, 2430, 2421, 2421,
     2421, 2421, 2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421,

     2421, 2421, 2430, 2430, 2430, 2430, 2421, 2421, 2421, 2421,
     2430, 2430, 2430, 2421, 2421, 2430, 2421, 2421, 2421, 2421,
        0, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421
    } ;

static yyconst flex_int16_t yy_nxt[3809] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2421,   40,
       44,   41,   44, 2421,   31,   41,  100,  100,   48,   32,
       50,   50,   50,   48, 2421,   50,   50,   50, 2421,   73,
       73,  100,  100,   53,  110,  116, 2421,  118,   53,   74,
       74,   74, 2421,   73,   73,  117,   77,   77,  111,   75,
      119,  100,  100,  120,   33,   20,   21,   21,   20,   22,
      122,   24,  133,   25,   26,   27,   28,   28,   28,   29,
       75,   30,   20,  121,  134,   77,   77,  299,  300,   31,
      123,   73,   73,   48,   32,   50,   50,   50,  126,  129,

      878,   74,   74,   74,  127,   75,  160,  165,  163,  166,
      128,   75,  164,  130,  137,  137,  131,  161,  138,  138,
      138,  176,  169,  132,  879,  174,   75,  170,  171,   33,
       45,   45,   75,  175,   46,  177,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  880,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   55,   56,
       57,   58,   59,   60,   46,   61,   46,   46,   62,   63,
       64,   65,   46,   46,   66,   67,   68,   69,   70,   71,
       46,   46,   46,   78,   77,   77,  183,  235,  178,  881,

       79,  236,   48,  192,   50,   50,   50,   80,  193,  206,
      224,  217,  179,  184,   75,  180,  181,  182,  218,   73,
       73,  227,  138,  138,  138,  207,  225,  228,   81,   82,
       83,   84,   85,   86,   87,   75,   88,   89,  882,   90,
       91,   92,   93,   94,  246,   95,   96,   97,   98,   99,
       73,   73,  247,  186,   73,   73,  232,  220,  220,  883,
       74,   74,   74,  187,  138,  138,  138,  233,  188,  189,
       75,  221,  237,  190,  238,  241,  248,  884,  264,  304,
      242,  243,  255,  265,  273,  289,  305,  274,  306,  290,
      249,   75,  140,  141,  142,  143,  144,  145,  146,  256,

      147,  148,  250,  149,  150,  151,  152,  153,  258,  154,
      155,  156,  157,  158,  383,  384,  251,  280,  259,  252,
      253,  254,  281,  260,  261,  267,  321,  321,  262,  282,
      449,  268,  283,  284,  220,  220,  450,  349,  885,  269,
      322,  338,  338,  350,  339,  886,  340,  355,  221,  364,
      356,  351,  358,  358,  365,  373,  401,  404,  405,  374,
      402,  366,  388,  720,  367,  368,  490,  359,  887,  389,
      491,  390,  424,  425,  455,  455,  321,  321,  458,  458,
      721,  426,  459,  459,  465,  465,  467,  467,  456,  563,
      322,  478,  478,  360,  338,  338,  460,  339,  466,  340,

      468,  482,  482,  493,  493,  479,  358,  358,  500,  500,
      512,  512,  552,  518,  519,  483,  523,  523,  494,  536,
      536,  359,  520,  546,  546,  513,  564,  553,  572,  572,
      587,  524,  588,  514,  537,  582,  582,  573,  547,  888,
      589,  589,  596,  574,  583,  651,  597,  455,  455,  698,
      584,  458,  458,  699,  538,  590,  663,  525,  495,  496,
      652,  456,  614,  614,  687,  615,  688,  616,  548,  459,
      459,  618,  618,  465,  465,  623,  623,  467,  467,  624,
      624,  889,  625,  460,  626,  478,  478,  466,  890,  636,
      636,  468,  637,  664,  638,  482,  482,  641,  641,  479,

      642,  891,  643,  644,  644,  493,  493,  655,  655,  483,
      500,  500,  672,  672,  512,  512,  892,  645,  674,  674,
      494,  682,  682,  523,  523,  685,  685,  673,  893,  513,
      689,  689,  694,  694,  536,  536,  683,  894,  524,  702,
      702,  708,  708,  546,  546,  690,  733,  695,  734,  537,
      712,  712,  572,  572,  741,  831,  709,  832,  547,  739,
      739,  573,  696,  895,  582,  582,  897,  574,  749,  749,
      742,  898,  740,  583,  589,  589,  899,  614,  614,  584,
      615,  750,  616,  618,  618,  623,  623,  624,  624,  590,
      625,  900,  626,  788,  788,  790,  790,  792,  792,  636,

      636,  818,  637,  903,  638,  641,  641,  789,  642,  791,
      643,  793,  644,  644,  802,  802,  904,  803,  819,  804,
      806,  806,  813,  813,  815,  815,  645,  655,  655,  672,
      672,  836,  836,  839,  807,  674,  674,  814,  906,  816,
      837,  837,  682,  682,  673,  846,  846,  685,  685,  840,
      689,  689,  851,  851,  907,  838,  908,  683,  852,  852,
      694,  694,  857,  857,  909,  690,  702,  702,  866,  866,
      708,  708,  910,  853,  901,  695,  870,  870,  902,  817,
      712,  712,  911,  867,  912,  709,  913,  854,  896,  896,
      739,  739,  905,  905,  749,  749,  914,  915,  916,  917,

      918,  919,  920,  740,  922,  926,  921,  750,  923,  923,
      927,  928,  929,  930,  931,  932,  935,  924,  933,  933,
      936,  937,  938,  925,  939,  939,  941,  942,  943,  944,
      944,  946,  934,  947,  788,  788,  948,  948,  940,  790,
      790,  949,  949,  945,  950,  953,  951,  954,  789,  792,
      792,  952,  952,  791,  955,  956,  956,  802,  802,  958,
      803,  959,  804,  793,  960,  960,  806,  806,  965,  957,
      962,  962,  966,  963,  967,  964,  968,  969,  961,  974,
      807,  813,  813,  970,  970,  815,  815,  971,  971,  972,
      972,  975,  976,  977,  978,  979,  814,  980,  981,  982,

      816,  983,  984,  985,  973,  986,  987,  988,  989,  990,
      991,  991,  836,  836,  837,  837,  993,  993,  994,  995,
      996,  996,  998,  999, 1001,  992, 1002, 1000, 1003,  838,
      846,  846, 1004, 1005, 1006,  997,  851,  851,  852,  852,
     1007, 1007, 1008, 1009, 1011, 1010,  857,  857, 1012, 1013,
     1014, 1015, 1016,  853, 1017, 1019, 1020, 1020, 1018,  866,
      866, 1022, 1022, 1023, 1024, 1024,  870,  870, 1026, 1027,
     1028, 1021, 1029, 1030,  867, 1031, 1032, 1033, 1034, 1025,
     1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047,
     1048, 1049, 1050, 1041,  896,  896, 1051, 1055, 1045, 1052,

     1052, 1056, 1057, 1058, 1046,  905,  905, 1059, 1053, 1060,
     1061, 1062, 1063, 1064, 1054, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1074, 1075, 1076,  923,  923, 1073, 1077,
     1078, 1078, 1080, 1081, 1082,  924, 1083, 1084, 1085, 1085,
     1090,  925, 1093, 1079,  933,  933, 1087, 1087, 1094, 1088,
     1098, 1089, 1086, 1091, 1091,  939,  939, 1114,  934, 1095,
     1095, 1115, 1096, 1116, 1097, 1099, 1099, 1092, 1117,  940,
     1101, 1118, 1102,  948,  948, 1103, 1104,  944,  944, 1100,
     1119, 1105, 1106, 1126, 1107, 1109, 1109, 1108, 1110, 1127,
     1111,  945, 1112, 1112,  949,  949, 1128,  950, 1133,  951,

      952,  952,  956,  956, 1120, 1120, 1113, 1121, 1134, 1122,
      960,  960, 1123, 1123, 1136, 1124,  957, 1125,  962,  962,
     1137,  963, 1140,  964,  961, 1129, 1129, 1131, 1131,  970,
      970,  971,  971,  972,  972, 1135, 1135, 1138, 1138, 1141,
     1130, 1142, 1132, 1143, 1144, 1145, 1146, 1157,  973, 1148,
     1148, 1158, 1139, 1159, 1147, 1150, 1150, 1152, 1153, 1154,
     1160,  991,  991, 1169, 1149, 1161, 1161,  993,  993, 1155,
     1151, 1162, 1162, 1164, 1164, 1156,  992,  996,  996, 1166,
     1166, 1167, 1167, 1170, 1171, 1172, 1163, 1173, 1165, 1174,
     1175, 1176,  997, 1007, 1007, 1177, 1168, 1178, 1179, 1180,

     1181, 1182, 1182, 1185, 1186, 1187, 1187, 1191, 1192, 1193,
     1020, 1020, 1194, 1194, 1022, 1022, 1183, 1195, 1196, 1196,
     1188, 1024, 1024, 1197, 1197, 1021, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1189, 1206, 1207, 1025, 1208, 1198, 1190,
     1209, 1210, 1184, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1222, 1221, 1223, 1052, 1052, 1224, 1225,
     1225, 1227, 1228, 1229, 1230, 1053, 1231, 1232, 1233, 1234,
     1235, 1054, 1226, 1236, 1237, 1238, 1239, 1240, 1242, 1241,
     1243, 1244, 1245, 1246, 1247, 1247, 1078, 1078, 1248, 1249,
     1250, 1251, 1252, 1085, 1085, 1253, 1253, 1256, 1254, 1079,

     1255, 1087, 1087, 1257, 1088, 1258, 1089, 1086, 1091, 1091,
     1259, 1259, 1262, 1260, 1263, 1261, 1095, 1095, 1264, 1096,
     1265, 1097, 1092, 1266, 1099, 1099, 1267, 1267, 1270, 1268,
     1271, 1269, 1272, 1273, 1274, 1275, 1279, 1277, 1100, 1281,
     1109, 1109, 1282, 1110, 1283, 1111, 1112, 1112, 1287, 1288,
     1289, 1290, 1291, 1276, 1278, 1292, 1284, 1284, 1280, 1285,
     1113, 1286, 1120, 1120, 1293, 1121, 1294, 1122, 1123, 1123,
     1295, 1124, 1298, 1125, 1129, 1129, 1296, 1296, 1131, 1131,
     1297, 1297, 1299, 1135, 1135, 1300, 1301, 1138, 1138, 1130,
     1302, 1302, 1303, 1132, 1304, 1305, 1306, 1306, 1308, 1309,

     1310, 1311, 1139, 1148, 1148, 1312, 1312, 1150, 1150, 1313,
     1313, 1307, 1314, 1315, 1316, 1317, 1318, 1319, 1149, 1320,
     1323, 1321, 1151, 1322, 1161, 1161, 1162, 1162, 1324, 1324,
     1164, 1164, 1325, 1325, 1166, 1166, 1167, 1167, 1326, 1326,
     1327, 1163, 1328, 1329, 1330, 1165, 1331, 1331, 1333, 1334,
     1335, 1168, 1336, 1337, 1338, 1339, 1339, 1341, 1341, 1182,
     1182, 1332, 1343, 1343, 1344, 1345, 1346, 1349, 1347, 1350,
     1340, 1351, 1342, 1352, 1183, 1187, 1187, 1348, 1348, 1353,
     1194, 1194, 1354, 1196, 1196, 1197, 1197, 1355, 1355, 1358,
     1188, 1356, 1356, 1359, 1360, 1361, 1362, 1363, 1364, 1365,

     1198, 1366, 1367, 1368, 1369, 1370, 1357, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1382,
     1225, 1225, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1226, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1247, 1247, 1404, 1405, 1406, 1409,
     1410, 1407, 1253, 1253, 1411, 1254, 1412, 1255, 1259, 1259,
     1408, 1260, 1413, 1261, 1414, 1415, 1416, 1417, 1267, 1267,
     1418, 1268, 1421, 1269, 1419, 1419, 1422, 1423, 1424, 1425,
     1426, 1427, 1428, 1429, 1430, 1431, 1284, 1284, 1420, 1285,
     1432, 1286, 1433, 1434, 1435, 1436, 1437, 1296, 1296, 1297,

     1297, 1438, 1439, 1440, 1441, 1302, 1302, 1442, 1443, 1444,
     1306, 1306, 1445, 1445, 1446, 1447, 1448, 1449, 1312, 1312,
     1313, 1313, 1450, 1451, 1452, 1307, 1453, 1454, 1455, 1456,
     1457, 1458, 1459, 1324, 1324, 1325, 1325, 1326, 1326, 1460,
     1461, 1462, 1463, 1331, 1331, 1464, 1464, 1465, 1466, 1467,
     1468, 1469, 1470, 1339, 1339, 1471, 1471, 1473, 1332, 1341,
     1341, 1472, 1472, 1343, 1343, 1474, 1475, 1476, 1340, 1348,
     1348, 1477, 1478, 1479, 1342, 1480, 1481, 1482, 1355, 1355,
     1356, 1356, 1483, 1483, 1484, 1484, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1357, 1495, 1496, 1497, 1485,

     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1382,
     1382, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1531, 1533, 1533, 1535,
     1535, 1537, 1538, 1538, 1419, 1419, 1541, 1541, 1542, 1532,
     1543, 1534, 1544, 1536, 1545, 1545, 1539, 1548, 1420, 1549,
     1550, 1551, 1551, 1553, 1554, 1554, 1557, 1558, 1546, 1559,
     1560, 1560, 1562, 1562, 1564, 1552, 1565, 1565, 1555, 1567,
     1568, 1569, 1570, 1571, 1561, 1445, 1445, 1563, 1572, 1573,
     1574, 1566, 1575, 1576, 1577, 1547, 1578, 1540, 1579, 1580,

     1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1556,
     1464, 1464, 1590, 1590, 1592, 1593, 1594, 1595, 1596, 1471,
     1471, 1472, 1472, 1597, 1598, 1599, 1600, 1591, 1601, 1602,
     1602, 1604, 1605, 1606, 1607, 1607, 1483, 1483, 1484, 1484,
     1609, 1609, 1610, 1611, 1603, 1612, 1613, 1613, 1616, 1608,
     1617, 1617, 1620, 1485, 1621, 1614, 1622, 1623, 1624, 1618,
     1625, 1615, 1626, 1627, 1628, 1619, 1629, 1630, 1631, 1631,
     1633, 1634, 1635, 1636, 1637, 1637, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1632, 1646, 1647, 1648, 1649, 1650, 1638,
     1651, 1652, 1653, 1654, 1655, 1531, 1531, 1656, 1656, 1664,

     1657, 1665, 1658, 1533, 1533, 1659, 1659, 1535, 1535, 1532,
     1660, 1660, 1661, 1661, 1538, 1538, 1666, 1534, 1663, 1663,
     1667, 1536, 1541, 1541, 1545, 1545, 1662, 1669, 1539, 1668,
     1668, 1670, 1671, 1673, 1551, 1551, 1674, 1674, 1546, 1675,
     1554, 1554, 1676, 1676, 1677, 1678, 1679, 1680, 1552, 1560,
     1560, 1681, 1681, 1683, 1555, 1562, 1562, 1672, 1682, 1682,
     1565, 1565, 1685, 1561, 1684, 1684, 1686, 1686, 1688, 1691,
     1563, 1689, 1689, 1692, 1692, 1566, 1694, 1694, 1696, 1697,
     1697, 1687, 1699, 1700, 1701, 1702, 1690, 1703, 1693, 1704,
     1705, 1695, 1706, 1707, 1698, 1708, 1709, 1710, 1710, 1712,

     1713, 1590, 1590, 1714, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1721, 1711, 1722, 1723, 1727, 1591, 1724, 1724, 1602,
     1602, 1726, 1726, 1728, 1729, 1607, 1607, 1730, 1730, 1609,
     1609, 1731, 1725, 1732, 1603, 1613, 1613, 1733, 1734, 1734,
     1608, 1736, 1737, 1740, 1614, 1617, 1617, 1741, 1738, 1738,
     1615, 1735, 1742, 1743, 1618, 1744, 1745, 1746, 1747, 1748,
     1619, 1739, 1749, 1631, 1631, 1750, 1750, 1751, 1752, 1637,
     1637, 1753, 1753, 1754, 1755, 1756, 1757, 1758, 1632, 1759,
     1760, 1761, 1762, 1763, 1638, 1764, 1766, 1766, 1768, 1769,
     1769, 1656, 1656, 1771, 1657, 1772, 1658, 1776, 1765, 1777,

     1767, 1659, 1659, 1770, 1660, 1660, 1661, 1661, 1773, 1773,
     1780, 1774, 1781, 1775, 1663, 1663, 1778, 1778, 1668, 1668,
     1662, 1782, 1785, 1786, 1786, 1788, 1674, 1674, 1789, 1790,
     1779, 1791, 1783, 1676, 1676, 1792, 1795, 1787, 1784, 1793,
     1793, 1681, 1681, 1682, 1682, 1684, 1684, 1796, 1686, 1686,
     1797, 1797, 1801, 1794, 1798, 1798, 1689, 1689, 1800, 1800,
     1692, 1692, 1804, 1687, 1802, 1802, 1694, 1694, 1806, 1799,
     1807, 1690, 1803, 1803, 1808, 1693, 1697, 1697, 1805, 1805,
     1809, 1695, 1810, 1811, 1812, 1813, 1814, 1814, 1816, 1817,
     1817, 1698, 1710, 1710, 1819, 1819, 1820, 1820, 1822, 1714,

     1714, 1815, 1823, 1823, 1818, 1825, 1825, 1711, 1827, 1827,
     1829, 1821, 1830, 1831, 1832, 1833, 1834, 1824, 1724, 1724,
     1826, 1835, 1835, 1828, 1726, 1726, 1836, 1836, 1839, 1840,
     1730, 1730, 1841, 1725, 1842, 1843, 1843, 1734, 1734, 1844,
     1845, 1837, 1847, 1847, 1738, 1738, 1848, 1849, 1846, 1850,
     1735, 1851, 1852, 1853, 1854, 1855, 1856, 1739, 1857, 1750,
     1750, 1858, 1753, 1753, 1859, 1860, 1861, 1862, 1863, 1864,
     1865, 1866, 1867, 1868, 1766, 1766, 1869, 1869, 1870, 1769,
     1769, 1838, 1871, 1871, 1874, 1872, 1875, 1873, 1767, 1773,
     1773, 1879, 1774, 1770, 1775, 1778, 1778, 1876, 1876, 1877,

     1877, 1880, 1881, 1883, 1884, 1786, 1786, 1885, 1885, 1779,
     1886, 1887, 1888, 1878, 1889, 1890, 1882, 1793, 1793, 1787,
     1891, 1891, 1894, 1892, 1895, 1893, 1797, 1797, 1798, 1798,
     1897, 1794, 1896, 1896, 1800, 1800, 1802, 1802, 1898, 1803,
     1803, 1899, 1899, 1799, 1805, 1805, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1814, 1814, 1900, 1909, 1909, 1910,
     1817, 1817, 1911, 1911, 1819, 1819, 1820, 1820, 1918, 1815,
     1912, 1912, 1913, 1913, 1919, 1818, 1823, 1823, 1915, 1915,
     1920, 1821, 1825, 1825, 1916, 1916, 1921, 1914, 1827, 1827,
     1922, 1824, 1917, 1917, 1923, 1923, 1928, 1826, 1835, 1835,

     1836, 1836, 1929, 1828, 1925, 1925, 1926, 1926, 1930, 1924,
     1931, 1843, 1843, 1932, 1933, 1837, 1934, 1847, 1847, 1935,
     1936, 1927, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1869, 1869, 1955, 1871, 1871, 1957, 1872, 1958, 1873, 1959,
     1960, 1876, 1876, 1877, 1877, 1956, 1961, 1961, 1962, 1963,
     1964, 1965, 1966, 1967, 1885, 1885, 1968, 1878, 1969, 1970,
     1971, 1972, 1891, 1891, 1973, 1892, 1974, 1893, 1896, 1896,
     1975, 1976, 1899, 1899, 1977, 1977, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1985, 1909, 1909, 1986, 1900, 1911, 1911,

     1912, 1912, 1913, 1913, 1987, 1987, 1915, 1915, 1916, 1916,
     1917, 1917, 1988, 1989, 1990, 1991, 1992, 1914, 1923, 1923,
     1993, 1993, 1925, 1925, 1926, 1926, 1994, 1994, 1995, 1995,
     1997, 1998, 1999, 1924, 2000, 2001, 2002, 2003, 2004, 1927,
     2005, 2006, 2007, 1996, 2008, 2009, 2010, 2011, 2012, 2013,
     2014, 2015, 2016, 2017, 2018, 2019, 2019, 2021, 2021, 2023,
     2023, 2025, 2026, 2027, 2028, 1961, 1961, 2029, 2030, 2031,
     2020, 2022, 2032, 2024, 2033, 2034, 2035, 2036, 2037, 2038,
     2038, 2040, 2041, 2042, 2043, 2044, 1977, 1977, 2045, 2046,
     2047, 2048, 2049, 2039, 2050, 2051, 2052, 2053, 1987, 1987,

     2054, 2055, 2056, 2056, 2058, 2059, 1993, 1993, 1994, 1994,
     1995, 1995, 2060, 2060, 2061, 2062, 2063, 2057, 2064, 2065,
     2066, 2067, 2068, 2069, 2071, 1996, 2072, 2073, 2074, 2075,
     2076, 2077, 2078, 2079, 2019, 2019, 2080, 2080, 2021, 2021,
     2083, 2070, 2081, 2081, 2023, 2023, 2082, 2082, 2084, 2020,
     2085, 2086, 2022, 2087, 2088, 2089, 2090, 2091, 2024, 2092,
     2092, 2094, 2094, 2096, 2097, 2097, 2038, 2038, 2099, 2099,
     2100, 2102, 2102, 2093, 2106, 2095, 2104, 2104, 2098, 2107,
     2039, 2108, 2109, 2101, 2110, 2111, 2103, 2113, 2114, 2115,
     2115, 2105, 2117, 2117, 2119, 2120, 2121, 2056, 2056, 2122,

     2122, 2123, 2124, 2112, 2116, 2060, 2060, 2118, 2125, 2126,
     2127, 2128, 2057, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
     2136, 2136, 2138, 2139, 2140, 2141, 2080, 2080, 2081, 2081,
     2082, 2082, 2142, 2142, 2146, 2137, 2144, 2144, 2147, 2148,
     2148, 2150, 2151, 2152, 2153, 2156, 2143, 2092, 2092, 2158,
     2145, 2154, 2154, 2149, 2094, 2094, 2155, 2155, 2097, 2097,
     2159, 2093, 2157, 2157, 2099, 2099, 2102, 2102, 2095, 2160,
     2160, 2162, 2098, 2104, 2104, 2161, 2161, 2163, 2163, 2165,
     2166, 2103, 2167, 2167, 2169, 2170, 2171, 2172, 2105, 2115,
     2115, 2175, 2164, 2173, 2173, 2117, 2117, 2168, 2174, 2174,

     2176, 2177, 2177, 2179, 2116, 2122, 2122, 2180, 2181, 2182,
     2118, 2183, 2184, 2185, 2186, 2187, 2178, 2188, 2189, 2190,
     2136, 2136, 2191, 2191, 2192, 2193, 2194, 2142, 2142, 2195,
     2195, 2144, 2144, 2196, 2196, 2137, 2197, 2197, 2199, 2148,
     2148, 2143, 2200, 2200, 2201, 2145, 2202, 2203, 2204, 2205,
     2198, 2154, 2154, 2149, 2155, 2155, 2157, 2157, 2206, 2207,
     2160, 2160, 2161, 2161, 2208, 2163, 2163, 2209, 2209, 2210,
     2210, 2212, 2167, 2167, 2213, 2213, 2214, 2215, 2216, 2217,
     2164, 2173, 2173, 2218, 2211, 2174, 2174, 2168, 2219, 2177,
     2177, 2220, 2220, 2221, 2221, 2223, 2224, 2225, 2226, 2227,

     2228, 2229, 2230, 2231, 2178, 2232, 2191, 2191, 2222, 2233,
     2234, 2195, 2195, 2196, 2196, 2197, 2197, 2235, 2235, 2236,
     2236, 2200, 2200, 2238, 2239, 2240, 2240, 2242, 2243, 2198,
     2244, 2244, 2251, 2237, 2246, 2246, 2248, 2248, 2252, 2241,
     2209, 2209, 2210, 2210, 2245, 2250, 2250, 2253, 2247, 2213,
     2213, 2249, 2254, 2255, 2256, 2257, 2261, 2211, 2220, 2220,
     2221, 2221, 2258, 2258, 2259, 2259, 2262, 2263, 2264, 2265,
     2266, 2267, 2268, 2269, 2270, 2222, 2271, 2235, 2235, 2260,
     2236, 2236, 2272, 2272, 2273, 2274, 2240, 2240, 2275, 2275,
     2276, 2277, 2277, 2282, 2237, 2244, 2244, 2279, 2279, 2283,

     2241, 2246, 2246, 2280, 2280, 2278, 2248, 2248, 2284, 2245,
     2281, 2281, 2250, 2250, 2285, 2247, 2286, 2287, 2288, 2258,
     2258, 2249, 2259, 2259, 2289, 2289, 2290, 2291, 2292, 2293,
     2294, 2295, 2296, 2297, 2298, 2299, 2300, 2260, 2272, 2272,
     2301, 2302, 2275, 2275, 2303, 2277, 2277, 2304, 2304, 2279,
     2279, 2280, 2280, 2281, 2281, 2305, 2306, 2307, 2311, 2278,
     2308, 2308, 2312, 2313, 2289, 2289, 2314, 2315, 2316, 2317,
     2318, 2319, 2320, 2321, 2322, 2309, 2323, 2324, 2304, 2304,
     2325, 2326, 2326, 2328, 2328, 2308, 2308, 2330, 2330, 2331,
     2332, 2332, 2310, 2334, 2335, 2336, 2327, 2337, 2329, 2338,

     2309, 2339, 2340, 2341, 2342, 2333, 2343, 2344, 2345, 2345,
     2326, 2326, 2347, 2347, 2328, 2328, 2348, 2348, 2330, 2330,
     2349, 2332, 2332, 2346, 2351, 2327, 2350, 2350, 2354, 2329,
     2352, 2352, 2355, 2356, 2357, 2358, 2333, 2359, 2360, 2361,
     2362, 2345, 2345, 2363, 2363, 2353, 2347, 2347, 2348, 2348,
     2364, 2350, 2350, 2365, 2352, 2352, 2346, 2366, 2366, 2367,
     2368, 2368, 2370, 2370, 2372, 2373, 2374, 2375, 2376, 2353,
     2377, 2363, 2363, 2378, 2379, 2369, 2380, 2371, 2366, 2366,
     2368, 2368, 2381, 2381, 2370, 2370, 2382, 2382, 2383, 2384,
     2385, 2386, 2387, 2388, 2389, 2369, 2390, 2391, 2392, 2371,

     2381, 2381, 2382, 2382, 2393, 2394, 2395, 2395, 2397, 2397,
     2399, 2400, 2400, 2402, 2403, 2404, 2404, 2395, 2395, 2408,
     2396, 2406, 2406, 2398, 2397, 2397, 2401, 2407, 2407, 2405,
     2410, 2396, 2400, 2400, 2409, 2409, 2411, 2411, 2414, 2398,
     2404, 2404, 2413, 2413, 2406, 2406, 2415, 2401, 2407, 2407,
     2412, 2409, 2409, 2417, 2405, 2411, 2411, 2416, 2416, 2413,
     2413, 2416, 2416, 2418, 2418, 2418, 2418, 2420, 2420, 2412,
     2420, 2420,   46,  877,  876,  875,  874,  873, 2419,  872,
     2419,   23,   23,   23,   23,   23,   23,   34,   34,   34,
       34,   34,   34,   36,   36,   36,   36,   36,   36,   37,

       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       35,   38,   38,   38,   38,   38,   38,   39,   39,   39,
       39,   39,   39,   42,   42,   42,   42,   42,   42,  103,
      103,  103,  103,  103,  104,  104,  871,  104,  104,  104,
      105,  105,  105,  869,  105,  105,  106,  106,  106,  106,
      868,  106,  865,  864,  863,  862,  861,  860,  859,  858,
      856,  855,  850,  849,  848,  847,  845,  844,  843,  842,
      841,  835,  834,  833,  830,  829,  828,  827,  826,  825,
      824,  823,  822,  821,  820,  812,  811,  810,  809,  808,
      805,  801,  800,  799,  798,  797,  796,  795,  794,  787,

      786,  785,  784,  783,  782,  781,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  770,  769,  768,  767,
      766,  765,  764,  763,  762,  761,  760,  759,  758,  757,
      756,  755,  754,  753,  752,  751,  748,  747,  746,  745,
      744,  743,  738,  737,  736,  735,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  719,  718,  717,
      716,  715,  714,  713,  711,  710,  707,  706,  705,  704,
      703,  701,  700,  697,  693,  692,  691,  686,  684,  681,
      680,  679,  678,  677,  676,  675,  671,  670,  669,  668,
      667,  666,  665,  662,  661,  660,  659,  658,  657,  656,

      654,  653,  650,  649,  648,  647,  646,  640,  639,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  622,  621,
      620,  619,  617,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  595,
      594,  593,  592,  591,  586,  585,  581,  580,  579,  578,
      577,  576,  575,  571,  570,  569,  568,  567,  566,  565,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  551,
      550,  549,  545,  544,  543,  542,  541,  540,  539,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  522,
      521,  517,  516,  515,  511,  510,  509,  508,  507,  506,

      505,  504,  503,  502,  501,  499,  498,  497,  492,  489,
      488,  487,  486,  485,  484,  481,  480,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  464,  463,  462,  461,
      457,  454,  453,  452,  451,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  403,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  387,  386,  385,  382,
      381,  380,  379,  378,  377,  376,  375,  372,  371,  370,

      369,  363,  362,  361,  357,  354,  353,  352,  348,  347,
      346,  345,  344,  343,  342,  341,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  303,  302,  301,  298,  297,
      296,  295,  294,  293,  292,  291,  288,  287,  286,  285,
      279,  278,  277,  276,  275,  272,  271,  270,  266,  263,
      257,  245,  244,  240,  239,  234,  231,  230,  229,  226,
      223,  222,  219,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  205,  204,  203,  202,  201,  200,  199,  198,

      197,  196,  195,  195,  194,  191,  185,  173,  172,  168,
      167,  162,  159,  139,  136,  135,  125,  124,  115,  114,
      113,  112,  109,  102,  101,   76,  108,  107,  102,  101,
       76,   72,   72, 2421,   35,   35,   35,   35,   35,   35,
       35,   35,   19, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421
    } ;

static yyconst flex_int16_t yy_chk[3809] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   56,   61,    0,   62,   47,   26,
       26,   26,   51,   73,   73,   61,   77,   77,   56,   26,
       62,  100,  100,   63,    1,    2,    2,    2,    2,    2,
       64,    2,   69,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   63,   69,   28,   28,  183,  183,    2,
       64,   48,   48,   28,    2,   28,   28,   28,   67,   68,

      718,   48,   48,   48,   67,   28,   82,   85,   84,   85,
       67,   48,   84,   68,   75,   75,   68,   82,   75,   75,
       75,   92,   88,   68,  720,   91,   28,   88,   88,    2,
       21,   21,   48,   91,   21,   92,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  721,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   29,   50,   50,   94,  143,   93,  722,

       29,  143,   50,   98,   50,   50,   50,   29,   98,  118,
      133,  128,   93,   94,   50,   93,   93,   93,  128,  195,
      195,  135,  137,  137,  137,  118,  133,  135,   29,   29,
       29,   29,   29,   29,   29,   50,   29,   29,  723,   29,
       29,   29,   29,   29,  150,   29,   29,   29,   29,   29,
       74,   74,  150,   96,  138,  138,  141,  130,  130,  724,
       74,   74,   74,   96,  138,  138,  138,  141,   96,   96,
       74,  130,  144,   96,  144,  147,  151,  725,  157,  187,
      147,  147,  153,  157,  163,  174,  187,  163,  187,  174,
      151,   74,   79,   79,   79,   79,   79,   79,   79,  153,

       79,   79,  152,   79,   79,   79,   79,   79,  155,   79,
       79,   79,   79,   79,  255,  255,  152,  169,  155,  152,
      152,  152,  169,  155,  155,  159,  204,  204,  155,  169,
      314,  159,  169,  169,  220,  220,  314,  231,  726,  159,
      204,  221,  221,  231,  221,  727,  221,  235,  220,  241,
      235,  231,  237,  237,  241,  246,  270,  272,  272,  246,
      270,  241,  259,  556,  241,  241,  352,  237,  728,  259,
      352,  259,  291,  291,  319,  319,  321,  321,  322,  322,
      556,  291,  323,  323,  328,  328,  329,  329,  319,  411,
      321,  342,  342,  237,  338,  338,  323,  338,  328,  338,

      329,  345,  345,  354,  354,  342,  358,  358,  359,  359,
      371,  371,  401,  375,  375,  345,  378,  378,  354,  389,
      389,  358,  375,  397,  397,  371,  411,  401,  419,  419,
      430,  378,  430,  371,  389,  427,  427,  419,  397,  729,
      431,  431,  437,  419,  427,  490,  437,  455,  455,  533,
      427,  458,  458,  533,  389,  431,  503,  378,  354,  354,
      490,  455,  456,  456,  526,  456,  526,  456,  397,  459,
      459,  460,  460,  465,  465,  466,  466,  467,  467,  468,
      468,  730,  468,  459,  468,  478,  478,  465,  731,  479,
      479,  467,  479,  503,  479,  482,  482,  483,  483,  478,

      483,  732,  483,  484,  484,  493,  493,  494,  494,  482,
      500,  500,  511,  511,  512,  512,  733,  484,  513,  513,
      493,  521,  521,  523,  523,  524,  524,  511,  734,  512,
      527,  527,  531,  531,  536,  536,  521,  735,  523,  537,
      537,  543,  543,  546,  546,  527,  568,  531,  568,  536,
      547,  547,  572,  572,  576,  668,  543,  668,  546,  574,
      574,  572,  531,  736,  582,  582,  740,  572,  584,  584,
      576,  741,  574,  582,  589,  589,  742,  614,  614,  582,
      614,  584,  614,  618,  618,  623,  623,  624,  624,  589,
      624,  744,  624,  631,  631,  632,  632,  633,  633,  636,

      636,  656,  636,  746,  636,  641,  641,  631,  641,  632,
      641,  633,  644,  644,  645,  645,  747,  645,  656,  645,
      647,  647,  653,  653,  654,  654,  644,  655,  655,  672,
      672,  673,  673,  676,  647,  674,  674,  653,  750,  654,
      675,  675,  682,  682,  672,  683,  683,  685,  685,  676,
      689,  689,  690,  690,  751,  675,  752,  682,  691,  691,
      694,  694,  695,  695,  753,  689,  702,  702,  705,  705,
      708,  708,  754,  691,  745,  694,  709,  709,  745,  654,
      712,  712,  755,  705,  756,  708,  756,  691,  738,  738,
      739,  739,  748,  748,  749,  749,  757,  758,  759,  760,

      761,  762,  763,  739,  764,  766,  763,  749,  765,  765,
      768,  769,  770,  771,  772,  773,  775,  765,  774,  774,
      776,  777,  778,  765,  779,  779,  780,  781,  784,  785,
      785,  786,  774,  787,  788,  788,  789,  789,  779,  790,
      790,  791,  791,  785,  791,  794,  791,  795,  788,  792,
      792,  793,  793,  790,  798,  799,  799,  802,  802,  803,
      802,  804,  802,  792,  805,  805,  806,  806,  808,  799,
      807,  807,  809,  807,  810,  807,  811,  812,  805,  818,
      806,  813,  813,  814,  814,  815,  815,  816,  816,  817,
      817,  819,  820,  821,  822,  823,  813,  824,  825,  826,

      815,  827,  828,  829,  817,  830,  831,  832,  833,  834,
      835,  835,  836,  836,  837,  837,  838,  838,  839,  840,
      841,  841,  842,  843,  844,  835,  845,  843,  847,  837,
      846,  846,  848,  849,  850,  841,  851,  851,  852,  852,
      853,  853,  854,  855,  856,  855,  857,  857,  858,  859,
      860,  861,  862,  852,  863,  864,  865,  865,  863,  866,
      866,  867,  867,  868,  869,  869,  870,  870,  871,  872,
      873,  865,  874,  877,  866,  878,  879,  880,  882,  869,
      883,  884,  885,  886,  887,  888,  891,  891,  891,  892,
      893,  894,  895,  888,  896,  896,  897,  901,  891,  898,

      898,  902,  903,  904,  891,  905,  905,  906,  898,  907,
      908,  909,  910,  911,  898,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  923,  919,  924,
      925,  925,  926,  928,  929,  923,  930,  931,  932,  932,
      935,  923,  937,  925,  933,  933,  934,  934,  938,  934,
      941,  934,  932,  936,  936,  939,  939,  947,  933,  940,
      940,  950,  940,  951,  940,  942,  942,  936,  953,  939,
      943,  954,  943,  948,  948,  943,  943,  944,  944,  942,
      955,  943,  943,  963,  943,  945,  945,  943,  945,  964,
      945,  944,  946,  946,  949,  949,  965,  949,  968,  949,

      952,  952,  956,  956,  957,  957,  946,  957,  969,  957,
      960,  960,  961,  961,  974,  961,  956,  961,  962,  962,
      975,  962,  977,  962,  960,  966,  966,  967,  967,  970,
      970,  971,  971,  972,  972,  973,  973,  976,  976,  978,
      966,  979,  967,  980,  981,  982,  983,  987,  972,  984,
      984,  988,  976,  989,  983,  985,  985,  986,  986,  986,
      990,  991,  991,  999,  984,  992,  992,  993,  993,  986,
      985,  994,  994,  995,  995,  986,  991,  996,  996,  997,
      997,  998,  998, 1000, 1001, 1002,  994, 1003,  995, 1004,
     1005, 1006,  996, 1007, 1007, 1008,  998, 1009, 1010, 1011,

     1012, 1013, 1013, 1014, 1015, 1016, 1016, 1017, 1018, 1019,
     1020, 1020, 1021, 1021, 1022, 1022, 1013, 1023, 1025, 1025,
     1016, 1024, 1024, 1026, 1026, 1020, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1016, 1034, 1035, 1024, 1036, 1026, 1016,
     1038, 1039, 1013, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1049, 1051, 1052, 1052, 1053, 1054,
     1054, 1055, 1056, 1057, 1058, 1052, 1059, 1061, 1062, 1063,
     1064, 1052, 1054, 1065, 1066, 1069, 1070, 1071, 1072, 1071,
     1073, 1074, 1075, 1076, 1077, 1077, 1078, 1078, 1079, 1080,
     1082, 1083, 1084, 1085, 1085, 1086, 1086, 1088, 1086, 1078,

     1086, 1087, 1087, 1089, 1087, 1090, 1087, 1085, 1091, 1091,
     1092, 1092, 1093, 1092, 1094, 1092, 1095, 1095, 1096, 1095,
     1097, 1095, 1091, 1098, 1099, 1099, 1100, 1100, 1101, 1100,
     1102, 1100, 1102, 1103, 1104, 1105, 1107, 1106, 1099, 1108,
     1109, 1109, 1110, 1109, 1111, 1109, 1112, 1112, 1114, 1117,
     1118, 1119, 1121, 1105, 1106, 1122, 1113, 1113, 1107, 1113,
     1112, 1113, 1120, 1120, 1124, 1120, 1125, 1120, 1123, 1123,
     1128, 1123, 1133, 1123, 1129, 1129, 1130, 1130, 1131, 1131,
     1132, 1132, 1134, 1135, 1135, 1136, 1137, 1138, 1138, 1129,
     1139, 1139, 1140, 1131, 1141, 1142, 1143, 1143, 1144, 1145,

     1146, 1147, 1138, 1148, 1148, 1149, 1149, 1150, 1150, 1151,
     1151, 1143, 1152, 1153, 1154, 1155, 1156, 1157, 1148, 1158,
     1160, 1159, 1150, 1159, 1161, 1161, 1162, 1162, 1163, 1163,
     1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167, 1168, 1168,
     1169, 1162, 1170, 1171, 1172, 1164, 1173, 1173, 1174, 1175,
     1176, 1167, 1177, 1178, 1179, 1180, 1180, 1181, 1181, 1182,
     1182, 1173, 1183, 1183, 1184, 1185, 1186, 1189, 1186, 1190,
     1180, 1191, 1181, 1192, 1182, 1187, 1187, 1188, 1188, 1193,
     1194, 1194, 1195, 1196, 1196, 1197, 1197, 1198, 1198, 1200,
     1187, 1199, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207,

     1197, 1208, 1209, 1210, 1211, 1212, 1199, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1224,
     1225, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1225, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1247, 1248, 1249, 1251, 1252,
     1254, 1251, 1253, 1253, 1255, 1253, 1258, 1253, 1259, 1259,
     1251, 1259, 1260, 1259, 1261, 1262, 1263, 1266, 1267, 1267,
     1270, 1267, 1272, 1267, 1271, 1271, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1280, 1281, 1285, 1284, 1284, 1271, 1284,
     1286, 1284, 1287, 1288, 1289, 1290, 1295, 1296, 1296, 1297,

     1297, 1298, 1299, 1300, 1301, 1302, 1302, 1303, 1304, 1305,
     1306, 1306, 1307, 1307, 1308, 1309, 1310, 1311, 1312, 1312,
     1313, 1313, 1314, 1315, 1316, 1306, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1324, 1325, 1325, 1326, 1326, 1327,
     1328, 1329, 1330, 1331, 1331, 1332, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1339, 1340, 1340, 1344, 1331, 1341,
     1341, 1342, 1342, 1343, 1343, 1345, 1346, 1347, 1339, 1348,
     1348, 1349, 1350, 1351, 1341, 1352, 1353, 1354, 1355, 1355,
     1356, 1356, 1357, 1357, 1358, 1358, 1360, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1356, 1370, 1371, 1372, 1358,

     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403,
     1404, 1406, 1407, 1408, 1409, 1412, 1412, 1415, 1415, 1416,
     1416, 1417, 1418, 1418, 1419, 1419, 1420, 1420, 1421, 1412,
     1422, 1415, 1423, 1416, 1424, 1424, 1418, 1425, 1419, 1426,
     1427, 1428, 1428, 1429, 1430, 1430, 1433, 1434, 1424, 1435,
     1436, 1436, 1437, 1437, 1438, 1428, 1439, 1439, 1430, 1440,
     1441, 1442, 1443, 1444, 1436, 1445, 1445, 1437, 1446, 1447,
     1448, 1439, 1449, 1450, 1451, 1424, 1452, 1418, 1453, 1454,

     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1430,
     1464, 1464, 1465, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1471, 1472, 1472, 1473, 1474, 1475, 1476, 1465, 1477, 1478,
     1478, 1479, 1480, 1481, 1482, 1482, 1483, 1483, 1484, 1484,
     1485, 1485, 1486, 1487, 1478, 1489, 1490, 1490, 1491, 1482,
     1493, 1493, 1494, 1484, 1496, 1490, 1497, 1498, 1499, 1493,
     1500, 1490, 1501, 1502, 1503, 1493, 1504, 1505, 1506, 1506,
     1507, 1508, 1510, 1511, 1512, 1512, 1513, 1514, 1515, 1516,
     1517, 1518, 1519, 1506, 1520, 1521, 1523, 1524, 1525, 1512,
     1526, 1527, 1528, 1529, 1530, 1531, 1531, 1532, 1532, 1540,

     1532, 1542, 1532, 1533, 1533, 1534, 1534, 1535, 1535, 1531,
     1536, 1536, 1537, 1537, 1538, 1538, 1543, 1533, 1539, 1539,
     1544, 1535, 1541, 1541, 1545, 1545, 1537, 1547, 1538, 1546,
     1546, 1548, 1549, 1550, 1551, 1551, 1552, 1552, 1545, 1553,
     1554, 1554, 1555, 1555, 1556, 1557, 1558, 1559, 1551, 1560,
     1560, 1561, 1561, 1564, 1554, 1562, 1562, 1549, 1563, 1563,
     1565, 1565, 1567, 1560, 1566, 1566, 1568, 1568, 1569, 1571,
     1562, 1570, 1570, 1572, 1572, 1565, 1573, 1573, 1574, 1575,
     1575, 1568, 1576, 1577, 1578, 1579, 1570, 1580, 1572, 1581,
     1582, 1573, 1583, 1584, 1575, 1585, 1586, 1587, 1587, 1588,

     1589, 1590, 1590, 1591, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1587, 1599, 1600, 1604, 1590, 1601, 1601, 1602,
     1602, 1603, 1603, 1605, 1606, 1607, 1607, 1608, 1608, 1609,
     1609, 1610, 1601, 1611, 1602, 1613, 1613, 1614, 1615, 1615,
     1607, 1616, 1618, 1620, 1613, 1617, 1617, 1621, 1619, 1619,
     1613, 1615, 1622, 1623, 1617, 1624, 1625, 1626, 1627, 1628,
     1617, 1619, 1630, 1631, 1631, 1632, 1632, 1633, 1636, 1637,
     1637, 1638, 1638, 1642, 1643, 1644, 1645, 1646, 1631, 1647,
     1648, 1649, 1650, 1651, 1637, 1652, 1653, 1653, 1654, 1655,
     1655, 1656, 1656, 1657, 1656, 1658, 1656, 1664, 1652, 1665,

     1653, 1659, 1659, 1655, 1660, 1660, 1661, 1661, 1662, 1662,
     1667, 1662, 1669, 1662, 1663, 1663, 1666, 1666, 1668, 1668,
     1661, 1670, 1671, 1672, 1672, 1673, 1674, 1674, 1675, 1677,
     1666, 1678, 1670, 1676, 1676, 1679, 1683, 1672, 1670, 1680,
     1680, 1681, 1681, 1682, 1682, 1684, 1684, 1685, 1686, 1686,
     1687, 1687, 1691, 1680, 1688, 1688, 1689, 1689, 1690, 1690,
     1692, 1692, 1696, 1686, 1693, 1693, 1694, 1694, 1699, 1688,
     1700, 1689, 1695, 1695, 1701, 1692, 1697, 1697, 1698, 1698,
     1702, 1694, 1703, 1704, 1705, 1706, 1707, 1707, 1708, 1709,
     1709, 1697, 1710, 1710, 1711, 1711, 1712, 1712, 1713, 1714,

     1714, 1707, 1715, 1715, 1709, 1716, 1716, 1710, 1717, 1717,
     1718, 1712, 1719, 1720, 1721, 1722, 1723, 1715, 1724, 1724,
     1716, 1725, 1725, 1717, 1726, 1726, 1727, 1727, 1728, 1729,
     1730, 1730, 1731, 1724, 1732, 1733, 1733, 1734, 1734, 1735,
     1736, 1727, 1737, 1737, 1738, 1738, 1739, 1741, 1736, 1742,
     1734, 1743, 1744, 1745, 1746, 1747, 1748, 1738, 1749, 1750,
     1750, 1751, 1753, 1753, 1754, 1755, 1756, 1757, 1758, 1761,
     1762, 1763, 1764, 1765, 1766, 1766, 1767, 1767, 1768, 1769,
     1769, 1727, 1770, 1770, 1776, 1770, 1777, 1770, 1766, 1773,
     1773, 1781, 1773, 1769, 1773, 1778, 1778, 1779, 1779, 1780,

     1780, 1782, 1783, 1784, 1785, 1786, 1786, 1787, 1787, 1778,
     1788, 1789, 1790, 1780, 1791, 1792, 1783, 1793, 1793, 1786,
     1794, 1794, 1795, 1794, 1796, 1794, 1797, 1797, 1798, 1798,
     1801, 1793, 1799, 1799, 1800, 1800, 1802, 1802, 1801, 1803,
     1803, 1804, 1804, 1798, 1805, 1805, 1806, 1807, 1808, 1809,
     1810, 1811, 1812, 1813, 1814, 1814, 1804, 1815, 1815, 1816,
     1817, 1817, 1818, 1818, 1819, 1819, 1820, 1820, 1829, 1814,
     1821, 1821, 1822, 1822, 1830, 1817, 1823, 1823, 1824, 1824,
     1831, 1820, 1825, 1825, 1826, 1826, 1832, 1822, 1827, 1827,
     1833, 1823, 1828, 1828, 1834, 1834, 1839, 1825, 1835, 1835,

     1836, 1836, 1840, 1827, 1837, 1837, 1838, 1838, 1841, 1834,
     1842, 1843, 1843, 1844, 1845, 1836, 1846, 1847, 1847, 1848,
     1849, 1838, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
     1858, 1859, 1860, 1861, 1862, 1863, 1865, 1866, 1867, 1868,
     1869, 1869, 1870, 1871, 1871, 1872, 1871, 1873, 1871, 1874,
     1875, 1876, 1876, 1877, 1877, 1870, 1878, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1885, 1886, 1877, 1887, 1888,
     1889, 1890, 1891, 1891, 1894, 1891, 1895, 1891, 1896, 1896,
     1897, 1898, 1899, 1899, 1900, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1909, 1909, 1910, 1899, 1911, 1911,

     1912, 1912, 1913, 1913, 1914, 1914, 1915, 1915, 1916, 1916,
     1917, 1917, 1918, 1919, 1920, 1921, 1922, 1913, 1923, 1923,
     1924, 1924, 1925, 1925, 1926, 1926, 1927, 1927, 1928, 1928,
     1929, 1930, 1931, 1923, 1932, 1933, 1934, 1935, 1936, 1926,
     1937, 1938, 1939, 1928, 1940, 1941, 1942, 1943, 1944, 1945,
     1946, 1947, 1949, 1950, 1951, 1952, 1952, 1953, 1953, 1954,
     1954, 1955, 1956, 1959, 1960, 1961, 1961, 1962, 1963, 1964,
     1952, 1953, 1965, 1954, 1966, 1967, 1968, 1969, 1970, 1971,
     1971, 1972, 1973, 1974, 1975, 1976, 1977, 1977, 1978, 1979,
     1980, 1981, 1982, 1971, 1983, 1984, 1985, 1986, 1987, 1987,

     1988, 1989, 1990, 1990, 1991, 1992, 1993, 1993, 1994, 1994,
     1995, 1995, 1996, 1996, 1997, 2000, 2001, 1990, 2002, 2003,
     2004, 2005, 2006, 2007, 2008, 1995, 2009, 2012, 2013, 2014,
     2015, 2016, 2017, 2018, 2019, 2019, 2020, 2020, 2021, 2021,
     2025, 2007, 2022, 2022, 2023, 2023, 2024, 2024, 2026, 2019,
     2027, 2028, 2021, 2029, 2030, 2031, 2032, 2033, 2023, 2034,
     2034, 2035, 2035, 2036, 2037, 2037, 2038, 2038, 2039, 2039,
     2040, 2041, 2041, 2034, 2043, 2035, 2042, 2042, 2037, 2044,
     2038, 2045, 2046, 2040, 2047, 2048, 2041, 2049, 2050, 2051,
     2051, 2042, 2052, 2052, 2053, 2054, 2055, 2056, 2056, 2057,

     2057, 2058, 2059, 2048, 2051, 2060, 2060, 2052, 2061, 2062,
     2063, 2065, 2056, 2066, 2067, 2069, 2070, 2071, 2072, 2073,
     2074, 2074, 2075, 2077, 2078, 2079, 2080, 2080, 2081, 2081,
     2082, 2082, 2083, 2083, 2085, 2074, 2084, 2084, 2086, 2087,
     2087, 2088, 2089, 2090, 2091, 2096, 2083, 2092, 2092, 2100,
     2084, 2093, 2093, 2087, 2094, 2094, 2095, 2095, 2097, 2097,
     2101, 2092, 2098, 2098, 2099, 2099, 2102, 2102, 2094, 2103,
     2103, 2106, 2097, 2104, 2104, 2105, 2105, 2107, 2107, 2108,
     2109, 2102, 2110, 2110, 2111, 2112, 2113, 2114, 2104, 2115,
     2115, 2119, 2107, 2116, 2116, 2117, 2117, 2110, 2118, 2118,

     2120, 2121, 2121, 2123, 2115, 2122, 2122, 2124, 2125, 2126,
     2117, 2127, 2128, 2130, 2131, 2132, 2121, 2133, 2134, 2135,
     2136, 2136, 2137, 2137, 2138, 2140, 2141, 2142, 2142, 2143,
     2143, 2144, 2144, 2145, 2145, 2136, 2146, 2146, 2147, 2148,
     2148, 2142, 2149, 2149, 2150, 2144, 2151, 2152, 2153, 2156,
     2146, 2154, 2154, 2148, 2155, 2155, 2157, 2157, 2158, 2159,
     2160, 2160, 2161, 2161, 2162, 2163, 2163, 2164, 2164, 2165,
     2165, 2166, 2167, 2167, 2168, 2168, 2169, 2170, 2171, 2172,
     2163, 2173, 2173, 2175, 2165, 2174, 2174, 2167, 2176, 2177,
     2177, 2178, 2178, 2179, 2179, 2180, 2181, 2182, 2184, 2185,

     2186, 2187, 2188, 2189, 2177, 2190, 2191, 2191, 2179, 2192,
     2194, 2195, 2195, 2196, 2196, 2197, 2197, 2198, 2198, 2199,
     2199, 2200, 2200, 2201, 2202, 2203, 2203, 2204, 2205, 2197,
     2206, 2206, 2212, 2199, 2207, 2207, 2208, 2208, 2214, 2203,
     2209, 2209, 2210, 2210, 2206, 2211, 2211, 2215, 2207, 2213,
     2213, 2208, 2216, 2217, 2218, 2219, 2224, 2210, 2220, 2220,
     2221, 2221, 2222, 2222, 2223, 2223, 2225, 2226, 2227, 2228,
     2229, 2230, 2231, 2232, 2233, 2221, 2234, 2235, 2235, 2223,
     2236, 2236, 2237, 2237, 2238, 2239, 2240, 2240, 2241, 2241,
     2242, 2243, 2243, 2251, 2236, 2244, 2244, 2245, 2245, 2252,

     2240, 2246, 2246, 2247, 2247, 2243, 2248, 2248, 2253, 2244,
     2249, 2249, 2250, 2250, 2254, 2246, 2255, 2256, 2257, 2258,
     2258, 2248, 2259, 2259, 2260, 2260, 2261, 2262, 2263, 2264,
     2265, 2266, 2267, 2268, 2269, 2270, 2271, 2259, 2272, 2272,
     2273, 2274, 2275, 2275, 2276, 2277, 2277, 2278, 2278, 2279,
     2279, 2280, 2280, 2281, 2281, 2282, 2283, 2284, 2286, 2277,
     2285, 2285, 2287, 2288, 2289, 2289, 2290, 2291, 2292, 2293,
     2296, 2298, 2299, 2300, 2301, 2285, 2302, 2303, 2304, 2304,
     2305, 2306, 2306, 2307, 2307, 2308, 2308, 2309, 2309, 2310,
     2311, 2311, 2285, 2312, 2313, 2314, 2306, 2315, 2307, 2316,

     2308, 2318, 2319, 2321, 2322, 2311, 2323, 2324, 2325, 2325,
     2326, 2326, 2327, 2327, 2328, 2328, 2329, 2329, 2330, 2330,
     2331, 2332, 2332, 2325, 2334, 2326, 2333, 2333, 2336, 2328,
     2335, 2335, 2337, 2338, 2339, 2340, 2332, 2341, 2342, 2343,
     2344, 2345, 2345, 2346, 2346, 2335, 2347, 2347, 2348, 2348,
     2349, 2350, 2350, 2351, 2352, 2352, 2345, 2353, 2353, 2354,
     2355, 2355, 2356, 2356, 2357, 2358, 2359, 2360, 2361, 2352,
     2362, 2363, 2363, 2364, 2365, 2355, 2367, 2356, 2366, 2366,
     2368, 2368, 2369, 2369, 2370, 2370, 2371, 2371, 2372, 2373,
     2374, 2375, 2376, 2377, 2378, 2368, 2379, 2380, 2384, 2370,

     2381, 2381, 2382, 2382, 2386, 2387, 2388, 2388, 2389, 2389,
     2390, 2391, 2391, 2392, 2393, 2394, 2394, 2395, 2395, 2399,
     2388, 2396, 2396, 2389, 2397, 2397, 2391, 2398, 2398, 2394,
     2402, 2395, 2400, 2400, 2401, 2401, 2403, 2403, 2408, 2397,
     2404, 2404, 2405, 2405, 2406, 2406, 2410, 2400, 2407, 2407,
     2403, 2409, 2409, 2414, 2404, 2411, 2411, 2412, 2412, 2413,
     2413, 2416, 2416, 2417, 2417, 2418, 2418, 2419, 2419, 2411,
     2420, 2420, 2430,  717,  716,  715,  714,  713, 2417,  711,
     2418, 2422, 2422, 2422, 2422, 2422, 2422, 2423, 2423, 2423,
     2423, 2423, 2423, 2424, 2424, 2424, 2424, 2424, 2424, 2425,

     2425, 2425, 2425, 2425, 2425, 2426, 2426, 2426, 2426, 2426,
     2426, 2427, 2427, 2427, 2427, 2427, 2427, 2428, 2428, 2428,
     2428, 2428, 2428, 2429, 2429, 2429, 2429, 2429, 2429, 2431,
     2431, 2431, 2431, 2431, 2432, 2432,  710, 2432, 2432, 2432,
     2433, 2433, 2433,  707, 2433, 2433, 2434, 2434, 2434, 2434,
      706, 2434,  704,  703,  701,  700,  699,  698,  697,  696,
      693,  692,  688,  687,  686,  684,  681,  680,  679,  678,
      677,  671,  670,  669,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  652,  651,  650,  649,  648,
      646,  643,  642,  640,  639,  638,  637,  635,  634,  630,

      629,  628,  627,  626,  625,  622,  621,  620,  619,  617,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  588,  587,  586,  585,  583,  581,  580,  579,
      578,  577,  573,  571,  570,  569,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  555,  553,  552,
      551,  550,  549,  548,  545,  544,  542,  541,  540,  539,
      538,  535,  534,  532,  530,  529,  528,  525,  522,  520,
      519,  518,  517,  516,  515,  514,  510,  509,  508,  507,
      506,  505,  504,  502,  501,  499,  498,  497,  496,  495,

      492,  491,  489,  488,  487,  486,  485,  481,  480,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  464,  463,
      462,  461,  457,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  444,  443,  442,  441,  440,  439,  438,  436,
      435,  434,  433,  432,  429,  428,  426,  425,  424,  423,
      422,  421,  420,  418,  417,  416,  415,  414,  413,  412,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  400,
      399,  398,  396,  395,  394,  393,  392,  391,  390,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  377,
      376,  374,  373,  372,  370,  369,  368,  367,  366,  365,

      364,  363,  362,  361,  360,  357,  356,  355,  353,  351,
      350,  349,  348,  347,  346,  344,  343,  341,  337,  336,
      335,  334,  333,  332,  331,  330,  327,  326,  325,  324,
      320,  318,  317,  316,  315,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  271,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  258,  257,  256,  254,
      253,  252,  251,  250,  249,  248,  247,  245,  244,  243,

      242,  240,  239,  238,  236,  234,  233,  232,  229,  228,
      227,  226,  225,  224,  223,  222,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,
      205,  203,  202,  201,  200,  199,  198,  197,  194,  193,
      192,  191,  190,  189,  188,  186,  185,  184,  182,  181,
      180,  179,  178,  177,  176,  175,  173,  172,  171,  170,
      168,  167,  166,  165,  164,  162,  161,  160,  158,  156,
      154,  149,  148,  146,  145,  142,  140,  139,  136,  134,
      132,  131,  129,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  117,  116,  115,  114,  113,  112,  111,  110,

      109,  107,  102,  101,   99,   97,   95,   90,   89,   87,
       86,   83,   81,   78,   71,   70,   66,   65,   60,   59,
       58,   57,   55,   54,   53,   49,   44,   41,   32,   31,
       27,   24,   22,   19,   14,   13,    8,    7,    6,    5,
        4,    3, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421,

     2421, 2421, 2421, 2421, 2421, 2421, 2421, 2421
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[321] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 104 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2208 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 114 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2464 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2422 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3743 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 117 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 121 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 142 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 309:
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 313:
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4498 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2422 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2422 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2421);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 514 "../../../../OS/src/OSParsers/OSParseosol.l"





