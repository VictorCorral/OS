#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 310
#define YY_END_OF_BUFFER 311
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2356] =
    {   0,
        1,    1,  308,  308,  306,  306,  307,  307,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  311,  309,
        1,    2,  296,    2,  296,    6,  296,    5,  309,    4,
      296,  296,    2,  308,  310,  306,  307,  297,  299,  300,
      299,  303,  304,  303,    1,  296,  296,    6,  296,    5,
        0,    4,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,    3,    6,    6,  296,    7,    5,    0,    0,  302,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,

      296,  296,  308,  306,  307,  297,    0,  305,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  172,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    6,  301,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  298,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  252,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  134,    0,    0,    0,    0,    0,  244,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  236,    0,

        0,    0,    0,    0,    0,  238,  296,  296,  296,  296,
      296,  296,  296,  296,   29,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  116,  117,  296,  296,  296,  296,  296,  296,  296,
      296,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  184,    0,    0,    0,    0,    0,    0,    0,
        0,  174,    0,    0,    0,  296,  296,  296,  296,  296,
      296,  296,  296,  296,   29,  296,  120,  296,  296,  296,
      296,  296,  121,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,    0,    0,    0,    0,    0,    0,    0,
      253,    0,    0,    0,    0,    0,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  245,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  237,    0,    0,    0,    0,    0,    0,    0,    0,
      239,    0,    0,    0,    0,    0,    0,  218,  268,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  273,  146,    0,    0,
        0,    0,    0,    0,    0,    0,  277,    0,    0,    0,
      124,  123,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  296,  296,
      296,  296,  296,  296,  296,  114,  115,  296,  120,  296,

      296,  296,  296,  121,  296,   74,   75,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   90,   91,  296,
      296,  296,  100,  101,  296,  296,  296,  296,    0,    0,
        0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  274,  135,    0,    0,    0,    0,    0,    0,
        0,    0,  278,  245,    0,    0,    0,    0,  125,    0,
        0,    0,    0,  185,    0,    0,    0,    0,    0,    0,
      237,    0,    0,    0,    0,    0,  175,    0,    0,  239,
        0,    0,    0,    0,    0,    0,  266,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  226,  275,  273,    0,    0,    0,  262,    0,
        0,    0,    0,  279,  277,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,   72,   73,  296,  296,
      296,  296,  296,  122,  296,  296,  296,   30,  296,  296,
       84,   85,  296,  296,   98,   99,  296,  104,  105,  296,
      296,  296,    0,    0,    0,    0,    0,    0,  219,    0,
      269,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  274,    0,
      147,    0,    0,    0,    0,    0,    0,    0,  278,    0,
        0,    0,  125,    0,  161,    0,    0,    0,  185,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  175,
        0,    0,    0,    0,  220,  222,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,  275,    0,    0,  150,  176,    0,    0,
        0,    0,  279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  208,    0,    0,  132,    0,    0,    0,    0,
        0,  281,    0,  230,    0,    0,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  122,  296,   82,   83,   30,  296,
      296,  296,  296,  296,  102,  103,  296,  296,  296,  112,
      113,    0,    0,    0,    0,    0,  219,  269,    0,  267,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  227,  147,    0,    0,
        0,  263,    0,    0,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  282,    0,    0,  131,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  270,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  293,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  154,  196,    0,
        0,    0,    0,    0,    0,    0,    0,  283,  281,    0,
        0,  152,    0,  296,  296,  296,  296,  296,   56,   57,
      296,  296,  296,  296,  296,  296,   68,   69,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
       78,   79,  296,  296,  296,   80,   81,  296,  296,  296,
      296,   96,   97,  296,  108,  109,  110,  111,    0,    0,
      221,    0,  223,    0,    0,  267,    0,    0,  157,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  227,    0,
      294,    0,  151,  263,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  209,
        0,    0,    0,    0,  133,    0,    0,    0,    0,    0,
      282,    0,  131,    0,  231,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  295,
      293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  283,    0,    0,  210,  296,  296,  296,   52,
       53,   54,   55,  296,  296,   64,   65,  296,  296,   66,
       67,  296,  296,  118,  119,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   76,   77,  296,
       44,   45,  296,  296,  296,  296,   94,   95,  106,  107,
        0,  221,  223,    0,    0,    0,  157,    0,    0,    0,
        0,  271,    0,    0,    0,    0,  129,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  294,  151,  177,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,    0,  197,  209,    0,    0,    0,    0,  133,

        0,    0,    0,    0,    0,    0,  231,    0,  153,    0,
      224,    0,  264,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  295,    0,    0,    0,    0,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      138,    0,    0,    0,    0,  228,  296,  296,  296,  296,
       50,   51,  296,   62,   63,  296,  296,  296,  296,  296,
       10,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   42,   43,  296,  296,  296,  296,    0,    0,    0,
        0,    0,    0,    0,  271,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,  211,    0,  248,    0,    0,    0,  260,
        0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  140,
        0,    0,    0,    0,  296,  296,  296,  296,  296,  296,
      296,   31,  296,   32,  296,  296,   25,  296,   10,  296,
      296,  296,  296,   23,  296,  296,  296,  296,  296,   21,

      296,  296,   20,  296,  296,  296,  296,  296,   33,    0,
      225,    0,    0,  265,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  241,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  139,
        0,    0,    0,    0,  229,  211,    0,  180,    0,    0,
      285,    0,    0,    0,  289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  142,    0,    0,  272,    0,  168,
      162,    0,    0,  276,  136,  126,  158,    0,    0,    0,
        0,    0,    0,  258,    0,    0,    0,  296,  296,  296,

      296,  296,   60,   61,   31,   32,  296,  296,   25,  296,
      296,  296,  296,   23,  296,  296,  296,  296,  296,   21,
      296,   20,  296,  296,  296,  296,   33,  225,    0,  265,
        0,  249,    0,    0,  286,    0,    0,  261,    0,  290,
        0,    0,  191,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  167,    0,    0,  241,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  141,
      139,    0,    0,    0,  229,    0,  287,  285,    0,    0,
      291,  289,    0,  204,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  272,    0,  164,  276,    0,    0,    0,

        0,    0,  186,  256,    0,    0,    0,  296,  296,  296,
       34,  296,  296,  296,   58,   59,  296,   71,   70,  296,
      296,  296,   13,  296,  296,  296,  296,  296,  296,  296,
       12,  296,  296,  296,  296,  296,  296,  296,    0,  249,
        0,  181,  286,    0,  261,  290,    0,  191,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
      169,  167,    0,  163,    0,    0,  137,    0,  127,    0,
      159,    0,    0,    0,    0,    0,    0,  141,    0,  259,
        0,    0,    0,    0,  287,    0,    0,    0,  291,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  148,    0,    0,  296,  296,
       34,  296,  296,   48,   49,  296,  296,   13,  296,    9,
      296,  296,  296,  296,  296,  296,   12,  296,  296,  296,
      296,  296,  296,   93,   92,    0,  181,    0,    0,    0,
      205,    0,    0,    0,    0,    0,    0,    0,    0,  143,
        0,  169,  163,    0,  165,  137,  127,  159,    0,    0,
        0,    0,    0,    0,  187,  259,    0,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  206,    0,    0,
        0,    0,  296,  296,  296,  296,   46,   47,  296,  296,

        9,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,    0,    0,    0,  205,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  165,    0,    0,    0,    0,
        0,  187,  257,    0,  149,    0,  170,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  194,  144,    0,
        0,    0,    0,    0,    0,    0,    0,  280,  296,   40,
      296,   39,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,   41,  296,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  207,    0,    0,  149,    0,    0,    0,

      188,    0,    0,    0,  254,    0,    0,    0,    0,    0,
        0,    0,  200,    0,    0,    0,  280,   40,   39,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,   14,
      296,   15,  296,  296,   16,   41,  296,  296,    0,  171,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      195,    0,  145,    0,    0,    0,  207,    0,    0,    0,
        0,    0,    0,  216,    0,    0,    0,    0,    0,    0,
        0,  292,    0,  178,    0,    0,  296,   38,  296,   37,
      296,  296,  296,   17,  296,  296,  296,  296,   14,   15,
      296,   16,  296,  296,  171,    0,    0,  189,    0,    0,

        0,  255,    0,    0,    0,    0,  195,  145,    0,    0,
        0,  201,    0,    0,    0,    0,  202,    0,    0,    0,
        0,    0,    0,    0,  292,    0,  182,    0,   38,   37,
      296,   18,  296,   17,  296,  296,  296,  296,  296,  296,
      296,    0,  189,    0,  217,    0,  255,    0,    0,    0,
        0,    0,    0,  201,    0,  179,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,  296,
       11,  296,  296,  296,    8,  296,  296,  296,   36,  296,
       35,    0,  203,  217,    0,    0,    0,    0,    0,    0,
        0,  179,    0,  183,    0,    0,    0,    0,    0,    0,

      212,    0,    0,    0,    0,   11,  296,  296,    8,  296,
      296,   26,   36,   35,  203,    0,    0,    0,    0,    0,
        0,    0,  183,    0,    0,    0,    0,  246,  242,    0,
      192,    0,    0,    0,  296,  296,  296,   26,    0,    0,
        0,    0,  213,    0,    0,    0,    0,    0,    0,    0,
      250,    0,    0,  198,    0,  296,  296,  296,    0,    0,
      247,    0,  243,  213,    0,    0,  193,    0,    0,    0,
        0,    0,    0,    0,    0,  296,  296,  296,    0,  251,
      247,  243,    0,  193,    0,    0,  199,    0,    0,    0,
        0,    0,    0,  296,  296,  296,  251,    0,    0,  199,

        0,    0,  284,    0,  288,    0,    0,    0,  296,  296,
      296,    0,    0,    0,  284,  288,  214,    0,  234,  296,
      296,  296,    0,    0,    0,    0,  296,  296,  296,   19,
        0,  215,    0,    0,  235,    0,  296,  296,   22,   19,
      215,    0,  235,    0,  296,   24,   22,    0,  232,   24,
        0,    0,  233,  233,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[2369] =
    {   0,
        0,   65, 3629, 3628, 3639, 3638, 3635, 3634,    0,    0,
        0,    0, 3625, 3624,   13,   17,    3,    5, 3638, 3647,
      129, 3632,    0, 3629,   19,   38, 3618,   84,  190,   25,
     3604, 3594, 3647,    0, 3647,    0,    0,    0, 3647, 3647,
     3623, 3647, 3647, 3614,    0,    0,   24,   90, 3613,  193,
       35,   40, 3599, 3589, 3588,    6, 3583, 3573, 3568, 3567,
        4,    8,   25,   32, 3582, 3568,   58,   61,   33, 3581,
     3576, 3647,   52,  249,  107, 3647,   55, 3609,  254, 3647,
     3559,   68, 3563,   66,   58, 3568, 3571,   71, 3560, 3565,
       87, 3572,  159,  158, 3567,  211, 3546,  152, 3569,   60,

     3584, 3576,    0,    0,    0,    0, 3588, 3647, 3547, 3545,
     3550, 3544, 3541, 3546, 3545, 3535, 3555,  189, 3554, 3545,
     3543, 3541, 3540, 3542, 3528, 3549, 3523,  162, 3530,  253,
     3546, 3530,  190, 3536,  172, 3535,  211,  263, 3572, 3522,
       86, 3526,  155,  207, 3531, 3534,  215, 3523, 3528,  206,
     3535,  228,  244, 3530,  266, 3509,  227, 3532,  294, 3513,
     3516, 3516,  224, 3511, 3523, 3506, 3514, 3511,  270, 3539,
     3518, 3520, 3518,  273, 3506, 3506, 3508, 3497, 3501, 3507,
     3494,   31, 3498, 3495, 3493,  282, 3494, 3490, 3492, 3496,
     3501, 3487,  218, 3647, 3499, 3498, 3505, 3498, 3487, 3486,

     3477,  287, 3479, 3475, 3494, 3493, 3488, 3472, 3486, 3488,
     3492, 3497, 3475, 3481, 3463, 3497, 3476,  318,  335, 3468,
     3476, 3459, 3478, 3458, 3456, 3479, 3468, 3647,  321, 3455,
     3458, 3458,  234, 3453,  342, 3449, 3457, 3454,  304, 3482,
     3461, 3463, 3461,  288, 3449, 3449, 3451, 3440, 3444, 3450,
     3437,  290, 3441, 3438, 3436,  306, 3437, 3433, 3435, 3439,
     3444, 3430, 3430, 3431, 3429,  317, 3441,  295, 3438, 3439,
     3436, 3427, 3426, 3433, 3432, 3416, 3414, 3414, 3428, 3414,
     3418, 3443, 3424, 3410, 3430,  346, 3421, 3420, 3415, 3411,
     3417, 3405, 3401, 3411, 3415, 3396, 3394, 3393, 3415, 3395,

     3407, 3391, 3405, 3395, 3390, 3398,  339, 3399, 3380, 3386,
     3406,  367, 3386,  370,  352,  374, 3400, 3388, 3379, 3416,
      376,  378, 3392, 3371, 3394, 3393, 3400, 3387, 3387, 3385,
      386, 3647, 3647, 3370,  393, 3387, 3375,  395, 3381, 3360,
     3376, 3366, 3367, 3365,  356, 3377,  398, 3374, 3375, 3372,
      402,  404, 3363, 3362, 3369, 3368, 3352, 3350, 3350, 3364,
     3350, 3354,  410, 3361, 3347, 3367,  396, 3358,  419, 3353,
     3349, 3355, 3343, 3339, 3349, 3353, 3334, 3332, 3331,  421,
     3334, 3346, 3330, 3344, 3334, 3329,  426, 3325, 3322, 3328,
      304, 3340, 3331, 3321, 3339, 3325, 3320, 3334, 3331, 3330,

      351, 3316, 3324, 3312, 3330, 3323, 3324,  428, 3345, 3313,
     3317, 3316, 3330, 3314, 3317,  430, 3318,  207,  446, 3302,
     3298, 3295, 3323, 3311,  367, 3306, 3309, 3312, 3309, 3293,
     3305, 3647, 3294, 3316, 3306, 3305, 3287, 3289, 3287, 3293,
     3276,  448,  463, 3300,  450,  458,  469, 3287, 3277, 3288,
     3281,  473,  475,  477,  479, 3277, 3278, 3283, 3274, 3285,
     3272, 3265, 3268, 3271,  485,  489, 3274, 3264,  495,  497,
      503, 3268, 3263, 3261, 3258, 3264,  373, 3276, 3267,  505,
      507, 3257, 3275, 3261, 3256, 3270,  510, 3267, 3266,  400,
     3252, 3260, 3248, 3266, 3259, 3260,  512,  514,  518, 3281,

     3249, 3253, 3252, 3266, 3250, 3253,  521,  523,  525, 3254,
      331,  530, 3238, 3234, 3231,  532, 3248,  397, 3243, 3246,
      534,  539, 3249, 3246, 3230, 3242,  541, 3231, 3253,  543,
      550, 3243, 3242, 3237, 3236, 3265, 3238, 3647, 3219, 3219,
     3233, 3231, 3225, 3213, 3218, 3213, 3212, 3232, 3227, 3226,
      446, 3212, 3220, 3219,  552, 3244,  559, 3647,  377, 3198,
     3208, 3222, 3200, 3205,  554, 3238,  564, 3196, 3206, 3200,
      570, 3647, 3220, 3192, 3196, 3209, 3190, 3189, 3189, 3203,
     3187, 3186, 3198, 3200, 3188, 3177, 3198, 3196, 3177, 3195,
     3177, 3189, 3177, 3176,  573, 3647, 3647, 3186,  579, 3191,

     3184, 3173, 3171,  581,  583, 3219, 3216, 3191, 3178, 3167,
     3190,  589,  591,  593, 3189, 3164,  595, 3211, 3208, 3177,
     3170,  601, 3207, 3204,  608,  610, 3167,  616, 3170, 3165,
     3164, 3193, 3166,  618,  620,  623, 3148, 3162, 3160, 3154,
     3142, 3147, 3142, 3141, 3161, 3156, 3155,  462, 3141, 3149,
     3148,  625,  627,  631,  636,  385, 3128, 3138, 3152, 3130,
     3135,  638,  641,  643, 3127, 3137, 3131,  645,  647,  649,
     3124, 3128,  654,  656, 3141, 3122, 3121, 3121, 3135, 3119,
      658, 3118, 3130, 3132, 3120,  661,  665, 3109, 3130,  667,
     3128, 3117, 3110, 3109, 3145, 3105, 3647, 3123, 3103, 3117,

     3105, 3105, 3099, 3116, 3105, 3088, 3034, 3032, 3034, 3033,
     3038, 3022, 3647,  670,  672,    8,    4,   58, 3647,   79,
      649,   98,  147,  679,  682,  228,  233,  251,  299,  272,
      527,  280,  390,  389,  396,  416,  447,  655,  448,  689,
      464, 3647,  466,  479,  489,  503,  516,  507,  686,  519,
      546,  552,  562,  691,  562,  553, 3647, 3647,  587,  693,
      580,  595,  696,  701,  708,  711,  717,  719,  626,  620,
     3647, 3647,  662,  723, 3647, 3647,  725,  700,  701,  732,
      734,  738,  665,  661,  667,  710,  673,  744,  749,  751,
      753,  755,  699,  684,  701,  695,  706,  702,  723,  720,

      711,  715,  716,  720,  722,  729,  715,  771,  773,  775,
      777,  738,  739,  781,  742,  756,  738,  736,  791,  744,
      731,  772,  797,  799,  801,  743,  784,  750,  806,  763,
      754,  754,  770,  771,  784,  770,  818,  779,  820,  822,
      774,  776,  778,  782, 3647, 3647,  783,  775,  785, 3647,
      781,  776,  780,  781,  781,  801,  820, 3647,  823,  789,
      796,  804,  811,  848,  805,  853, 3647, 3647,  794,  803,
      824,  803,  859,  811,  805,  827,  824,  810,  822,  824,
      830,  817,  831,  832,  834,  847,  824,  826,  841,  879,
      867,  883,  830, 3647,  845,  846,  844,  835,  891,  897,

      899,  848,  906,  852,  853,  908,  912,  870,  918,  905,
      930,  938,  945,  862,  926,  947,  911,  911,  953,  865,
      868,  885,  955,  957, 3647, 3647,  963,  965,  971,  933,
      937,  904,  978,  980,  906,  907,  982,  984,  986,  988,
      922,  990,  923,  919,  938,  939,  940,  960,  979,  999,
      990,  948,  955,  963,  975, 1011, 1015, 1017, 1020, 1022,
     1027, 1029, 1031,  956,  972, 1001,  980,  978, 1001,  998,
     1040,  987,  999, 1000, 1007,  994, 1049, 1010, 1012, 1053,
     1003, 1005, 1020, 1058, 1060, 1007, 1065, 1069, 1071, 1022,
     1026, 1018, 1025, 1031, 1027, 1039, 1034, 1037, 3647, 1038,

     1028, 1044, 1051, 1052, 1040, 1035, 1055, 1057, 1054, 1055,
     1071, 1061, 1044, 1101, 1088, 1104, 1057, 1066, 1056, 1048,
     1074, 1071, 1057, 1077, 1070, 1064, 1071, 3647, 3647, 1065,
     1081, 1103, 1086, 1094, 1070, 1104, 1090, 1129, 1131, 1124,
     1089, 3647, 1080, 1076, 1085, 1138, 1140, 1146, 1139, 1143,
     1099, 1153, 1155, 1113, 1102, 1161, 1160, 1160, 1107, 1169,
     1171, 1122, 1127, 1122, 1128, 1142, 1145, 1152, 1147, 1185,
     1184, 1184, 1191, 1201, 1137, 3647, 3647, 1140, 1162, 1139,
     1207, 1194, 1195, 1213, 1206, 1206, 3647, 3647, 1159, 1219,
     1221, 1223, 1225, 1167, 1182, 1228, 1180, 1231, 1235, 1194,

     1192, 1194, 1240, 1197, 1187, 1203, 1208, 1247, 1249, 1214,
     1201, 1196, 1216, 1219, 1216, 1217, 1233, 1223, 1263, 1265,
     1267, 1269, 1271, 1273, 1275, 1277, 1230, 1240, 1230, 1222,
     1244, 1230, 1250, 1243, 1235, 1243, 1292, 1294, 1296, 1298,
     1245, 1261, 1283, 1305, 1312, 1266, 1277, 1254, 1291, 1277,
     1316, 1273, 1321, 1323, 1325, 1327, 1264, 1268, 1293, 1271,
     1276, 1288, 1283, 1294, 1285, 1286, 1291, 1293, 1286, 1293,
     1307, 1299, 1292, 1308, 1293, 1298, 1313, 1297, 1311, 1353,
     1355, 1348, 1320, 1318, 1323, 1329, 1313, 1308, 1319, 1325,
     1315, 1326, 1328, 1337, 1339, 1327, 1328, 1325, 1352, 1331,

     1327, 1330, 1379, 1326, 1343, 3647, 1363, 1333, 1387, 1382,
     1384, 3647, 3647, 1341, 1393, 1394, 1394, 1344, 1360, 3647,
     3647, 1350, 1403, 3647, 3647, 1355, 1409, 1350, 1370, 1374,
     1367, 1370, 1359, 1365, 1385, 1370, 1365, 3647, 3647, 1421,
     1417, 1420, 1382, 1383, 1368, 1389, 3647, 3647, 3647, 3647,
     1370, 1432, 1434, 1399, 1377, 1382, 1439, 1396, 1391, 1402,
     1444, 1446, 1397, 1398, 1402, 1404, 1452, 1399, 1405, 1419,
     1411, 1404, 1421, 1406, 1411, 1426, 1410, 1465, 1467, 1469,
     1433, 1431, 1436, 1442, 1420, 1431, 1437, 1427, 1438, 1439,
     1481, 1483, 1485, 1487, 1489, 1458, 1460, 1448, 1449, 1497,

     1446, 1476, 1456, 1452, 1455, 1465, 1505, 1507, 1509, 1511,
     3647, 1459, 3647, 1459, 1474, 1466, 1462, 1468, 1465, 1479,
     1480, 1478, 1469, 1477, 1486, 1483, 1473, 1497, 1492, 1483,
     1488, 1485, 1535, 1489, 1497, 1499, 1501, 1496, 1501, 3647,
     1492, 1503, 1495, 1507, 1492, 1497, 1493, 1496, 1503, 1511,
     3647, 1502, 1496, 1514, 1505, 3647, 1507, 1518, 1503, 1505,
     3647, 3647, 1561, 3647, 3647, 1563, 1565, 1526, 1568, 1570,
     1572, 1525, 1527, 1555, 1580, 1542, 1541, 1547, 1587, 1531,
     1590, 3647, 3647, 1540, 1533, 1543, 1596, 1598, 1546, 1602,
     1550, 1565, 1557, 1553, 1611, 1559, 1560, 1574, 1575, 1573,

     1564, 1572, 1581, 1579, 1569, 1593, 1588, 1579, 1584, 1589,
     1591, 1593, 1588, 1636, 1583, 1597, 1589, 1601, 1586, 1642,
     1644, 1595, 1591, 1594, 1601, 1609, 1652, 1603, 1597, 1615,
     1657, 1659, 1661, 1663, 1604, 3647, 1611, 1668, 1637, 3647,
     1673, 1615, 3647, 1620, 1622, 1644, 1641, 1644, 1633, 1634,
     1649, 1646, 1652, 1690, 1647, 1639, 3647, 1653, 1633, 1696,
     1648, 1645, 1645, 1645, 1669, 1678, 1667, 1665, 1666, 3647,
     1658, 1658, 1693, 1655, 1673, 1654, 1678, 1675, 1717, 1719,
     1725, 1727, 1729, 1732, 1734, 1736, 1740, 1665, 1744, 1682,
     1683, 1723, 1746, 1751, 1710, 1699, 1724, 1714, 1756, 1758,

     1720, 1762, 1764, 1729, 1719, 1747, 1728, 1771, 1773, 1777,
     1780, 1714, 1782, 1786, 1788, 1729, 1790, 1760, 1794, 1798,
     1740, 1800, 1747, 1748, 1771, 1768, 1771, 1759, 1760, 1775,
     1773, 1779, 1763, 1818, 1779, 1759, 1822, 1824, 1776, 1773,
     1773, 1773, 1797, 1806, 1795, 1793, 1794, 1838, 1840, 1842,
     1786, 1793, 1828, 1846, 1848, 1850, 1833, 3647, 1856, 1839,
     1859, 1807, 1866, 1847, 1863, 1827, 1837, 1816, 1836, 1818,
     1839, 1824, 1852, 1824, 3647, 1844, 1883, 1885, 1848, 3647,
     3647, 1847, 1889, 1891, 3647, 3647, 3647, 1842, 1843, 1850,
     1842, 1858, 1844, 1845, 1854, 1848, 1849, 1887, 1906, 1854,

     1909, 1911, 1910, 1910, 1921, 1924, 1926, 1928, 1934, 1863,
     1865, 1936, 1875, 1938, 1876, 1923, 1905, 1943, 1890, 1946,
     1894, 1953, 1911, 1906, 1910, 1959, 1961, 1963, 1937, 1965,
     1967, 1969, 1971, 1974, 1976, 1927, 1979, 1983, 1987, 1990,
     1940, 1992, 1995, 1953, 1943, 1961, 1943, 1962, 1947, 1976,
     1948, 2005, 1970, 2009, 2011, 2013, 2015, 1976, 2018, 2021,
     2027, 2031, 1972, 1974, 1984, 1979, 1995, 1980, 2037, 2039,
     2043, 2047, 1994, 1991, 2049, 2014, 2053, 2055, 2048, 2039,
     2059, 2063, 2052, 3647, 2009, 2030, 2021, 2025, 2023, 2027,
     2022, 2029, 2027, 2077, 2038, 3647, 2080, 2028, 2056, 2036,

     2029, 2030, 3647, 3647, 2046, 2051, 2050, 2039, 2040, 2092,
     2094, 2040, 2097, 2100, 3647, 3647, 2107, 3647, 3647, 2062,
     2067, 2113, 2115, 2117, 2064, 2068, 2082, 2084, 2077, 2123,
     2125, 2073, 2100, 2082, 2091, 2079, 2135, 2138, 2103, 2144,
     2146, 2150, 2152, 2129, 2154, 2157, 2159, 2162, 2086, 2127,
     2117, 2121, 2119, 2123, 2118, 2125, 2171, 2175, 2125, 2177,
     2179, 2181, 2183, 2187, 2189, 2193, 2195, 2199, 2201, 2205,
     2209, 2131, 2164, 2149, 2147, 2151, 2211, 2215, 2217, 2221,
     2223, 2172, 2182, 2169, 2227, 2189, 2189, 2194, 2233, 2193,
     2199, 2192, 2182, 2182, 2200, 2201, 2185, 2193, 2204, 2196,

     2202, 2197, 2201, 2217, 2200, 3647, 2202, 2212, 2206, 2196,
     2256, 2240, 2259, 2258, 2258, 2220, 2210, 2267, 2269, 2272,
     2216, 2225, 2230, 2221, 2224, 2225, 2280, 2241, 2232, 2244,
     2232, 2232, 2288, 3647, 3647, 2234, 2294, 2251, 2259, 2297,
     2299, 2264, 2257, 2246, 2246, 2264, 2265, 2249, 2257, 2309,
     2270, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2282, 2277,
     2281, 2297, 2280, 2333, 2335, 2337, 2339, 2341, 2343, 2295,
     2309, 2306, 2301, 2303, 2306, 2296, 2303, 2314, 2315, 2322,
     2304, 2319, 2311, 2345, 2324, 2323, 2307, 3647, 2321, 2313,
     2329, 2369, 2371, 2373, 2324, 2325, 3647, 3647, 2327, 2333,

     2379, 2340, 2327, 2342, 2341, 2343, 2334, 2335, 2335, 2337,
     2393, 2339, 2359, 2349, 2351, 2399, 2345, 2352, 2362, 2363,
     2370, 2351, 2367, 2359, 2393, 2411, 2372, 2356, 2415, 2372,
     2364, 2419, 2421, 2423, 2425, 2388, 3647, 2373, 2388, 2390,
     2384, 2376, 2378, 2380, 2419, 2400, 2406, 3647, 3647, 2386,
     2400, 2387, 2402, 2395, 2400, 2402, 2447, 2449, 2451, 2455,
     2457, 2459, 2405, 2402, 2407, 2413, 2411, 2411, 2429, 2418,
     2433, 2472, 2474, 2431, 2477, 2479, 2481, 2465, 2484, 2446,
     2448, 2433, 2436, 2439, 2478, 2460, 2465, 2500, 2502, 2450,
     2450, 2465, 2507, 2509, 2462, 2467, 2518, 2470, 2477, 2464,

     3647, 2480, 2468, 2489, 3647, 2474, 2489, 2479, 2477, 2492,
     2530, 2499, 3647, 2492, 2493, 2490, 2536, 2538, 2540, 2542,
     2546, 2489, 2498, 2549, 2497, 2496, 2503, 2516, 2557, 2561,
     2564, 2566, 2504, 2568, 2572, 2574, 2508, 2519, 2576, 2579,
     2525, 2583, 2530, 2551, 2587, 2538, 2553, 2544, 2542, 2594,
     2596, 2599, 2603, 2564, 2572, 2606, 2610, 2567, 2571, 2568,
     2561, 2575, 2599, 3647, 2581, 2562, 2572, 2565, 2596, 2574,
     2625, 2627, 2578, 3647, 2575, 2581, 2632, 2634, 2636, 2638,
     2641, 2588, 2644, 2647, 2612, 2606, 2597, 2605, 2656, 2659,
     2604, 2661, 2615, 2605, 2665, 2626, 2668, 2670, 2672, 2637,

     2675, 2677, 2622, 2632, 2624, 2655, 2684, 2688, 2636, 2640,
     2692, 2694, 2696, 2643, 2649, 2655, 3647, 2647, 2654, 2653,
     2647, 2664, 2655, 2669, 2709, 2685, 3647, 2670, 2714, 2716,
     2718, 2720, 2722, 2724, 2681, 2669, 2728, 2689, 2676, 2733,
     2737, 2739, 2743, 2745, 2748, 2687, 2752, 2691, 2693, 2714,
     2705, 2718, 2731, 2761, 2763, 2765, 2767, 2716, 2717, 2729,
     2714, 2732, 2732, 2719, 2717, 2732, 2726, 2743, 2780, 2783,
     2785, 2737, 2747, 2789, 2791, 2764, 2794, 2798, 2800, 2804,
     2806, 2809, 2813, 2815, 2739, 2762, 2770, 2762, 2761, 2776,
     2770, 2822, 2825, 2827, 2793, 2774, 2794, 2791, 2778, 2779,

     2803, 2795, 2792, 2780, 2798, 2841, 2787, 2815, 2845, 2795,
     2848, 2850, 2852, 2854, 2856, 2817, 2804, 2805, 2863, 2820,
     2820, 2808, 2867, 2828, 2825, 2815, 2817, 3647, 3647, 2817,
     3647, 2824, 2834, 2831, 2848, 2827, 2824, 2881, 2828, 2884,
     2886, 2888, 2890, 2836, 2893, 2846, 2856, 2853, 2849, 2851,
     3647, 2850, 2862, 3647, 2863, 2855, 2853, 2865, 2911, 2913,
     2915, 2917, 2919, 2921, 2869, 2924, 2929, 2884, 2933, 2888,
     2885, 2882, 2892, 2902, 2896, 2885, 2897, 2892, 2944, 2946,
     2949, 2951, 2908, 2954, 2920, 2957, 2960, 2918, 2963, 2965,
     2917, 2927, 2913, 2925, 2920, 2923, 2974, 2926, 2936, 2981,

     2923, 2983, 2985, 2987, 2989, 2948, 2947, 2938, 2943, 2945,
     2941, 2954, 2954, 2945, 3003, 3005, 3647, 2958, 3647, 2957,
     2953, 3009, 3011, 2970, 3014, 2972, 2962, 3018, 3020, 3024,
     3027, 3030, 2978, 3035, 3037, 2977, 3039, 3043, 3045, 3047,
     3051, 2985, 3054, 2994, 3058, 3060, 3062, 3001, 3647, 3064,
     3066, 3068, 3070, 3073, 3647, 3085, 3091, 3097, 3103, 3109,
     3115, 3121, 3127, 3075, 3133, 3138, 3144, 3150
    } ;

static yyconst flex_int16_t yy_def[2369] =
    {   0,
     2356, 2356, 2357, 2357, 2358, 2358, 2359, 2359, 2360, 2360,
     2360, 2360, 2361, 2361, 2362, 2362, 2363, 2363, 2355, 2355,
     2355, 2355, 2364, 2355, 2364, 2364, 2364, 2364, 2355, 2355,
     2364, 2364, 2355, 2365, 2355, 2366, 2367, 2368, 2355, 2355,
     2355, 2355, 2355, 2355,   21, 2364, 2364, 2364, 2364, 2364,
       29, 2355, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2364, 2364, 2364, 2355, 2364, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2364, 2364, 2365, 2366, 2367, 2368, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2364, 2355, 2364, 2364, 2364, 2364, 2364, 2364,

     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2355, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364, 2364,

     2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364,
     2364, 2364, 2355, 2355, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2355, 2355, 2364, 2364, 2355, 2355, 2364, 2355, 2355, 2364,
     2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,

     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364, 2364, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2364, 2364, 2364, 2364, 2364, 2355, 2355,
     2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2355, 2355, 2364, 2364, 2364, 2355, 2355, 2364, 2364, 2364,
     2364, 2355, 2355, 2364, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2355,
     2355, 2355, 2355, 2364, 2364, 2355, 2355, 2364, 2364, 2355,
     2355, 2364, 2364, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2364,
     2355, 2355, 2364, 2364, 2364, 2364, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,
     2355, 2355, 2364, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2355, 2364, 2364, 2364, 2364, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,

     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364,

     2364, 2364, 2355, 2355, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2355, 2355, 2364, 2355, 2355, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2364, 2364, 2364, 2364, 2355, 2355, 2364, 2364,

     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2364, 2364, 2364, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364,
     2364, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2364,
     2364, 2364, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,
     2355, 2355, 2355, 2355, 2355, 2355, 2364, 2364, 2364, 2364,
     2355, 2355, 2355, 2355, 2364, 2364, 2364, 2355, 2355, 2364,
     2355, 2355, 2355, 2355,    0, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355
    } ;

static yyconst flex_int16_t yy_nxt[3713] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20,  865,   40,
       44,   41,   44, 2355,   31,   41,  100,  100,   48,   32,
       50,   50,   50,   48, 2355,   50,   50,   50, 2355,   73,
       73,  100,  100,   53,  110,  116,  866,  118,   53,   74,
       74,   74, 2355,   73,   73,  117,   77,   77,  111,   75,
      119,  100,  100,  120,   33,   20,   21,   21,   20,   22,
      122,   24,  133,   25,   26,   27,   28,   28,   28,   29,
       75,   30,   20,  121,  134,   77,   77,  293,  294,   31,
      123,   73,   73,   48,   32,   50,   50,   50,  126,  129,

      867,   74,   74,   74,  127,   75,  160,  165,  163,  166,
      128,   75,  164,  130,  137,  137,  131,  161,  138,  138,
      138,  868,  169,  132,  230,  174,   75,  170,  171,   33,
       45,   45,   75,  175,   46,  231,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  871,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   55,   56,
       57,   58,   59,   60,   46,   61,   46,   46,   62,   63,
       64,   65,   46,   46,   66,   67,   68,   69,   70,   71,
       46,   46,   46,   78,   77,   77,  182,  233,  177,  872,

       79,  234,   48,  190,   50,   50,   50,   80,  191,  204,
      222,  215,  178,  183,   75,  179,  180,  181,  216,   73,
       73,  225,  138,  138,  138,  205,  223,  226,   81,   82,
       83,   84,   85,   86,   87,   75,   88,   89,  874,   90,
       91,   92,   93,   94,  244,   95,   96,   97,   98,   99,
       73,   73,  245,  185,  218,  218,  235,  569,  236,  570,
       74,   74,   74,  186,   73,   73,  239,  247,  219,  187,
       75,  240,  241,  188,  138,  138,  138,  269,  260,  875,
      270,  248,  252,  261,  249,  250,  251,  348,  314,  314,
      349,   75,  140,  141,  142,  143,  144,  145,  146,  253,

      147,  148,  315,  149,  150,  151,  152,  153,  255,  154,
      155,  156,  157,  158,  876,  263,  276,  536,  256,  218,
      218,  264,  877,  277,  257,  878,  278,  279,  258,  265,
      284,  298,  537,  219,  285,  881,  331,  331,  299,  332,
      300,  333,  342,  351,  351,  365,  374,  375,  343,  366,
      357,  394,  395,  445,  445,  379,  344,  358,  352,  391,
      359,  360,  380,  392,  381,  413,  414,  436,  442,  442,
      547,  314,  314,  437,  415,  446,  446,  452,  452,  454,
      454,  666,  443,  667,  353,  315,  632,  331,  331,  447,
      332,  453,  333,  455,  465,  465,  469,  469,  477,  480,

      480,  633,  478,  351,  351,  487,  487,  548,  466,  578,
      470,  498,  498,  579,  481,  504,  505,  717,  352,  644,
      508,  508,  521,  521,  506,  812,  499,  530,  530,  555,
      555,  565,  565,  718,  500,  509,  882,  522,  556,  677,
      566,  813,  531,  678,  557,  883,  567,  571,  571,  442,
      442,  445,  445,  884,  482,  483,  645,  523,  885,  446,
      446,  510,  572,  443,  595,  595,  709,  596,  710,  597,
      599,  599,  532,  447,  452,  452,  604,  604,  454,  454,
      605,  605,  804,  606,  805,  607,  465,  465,  453,  886,
      617,  617,  455,  618,  889,  619,  469,  469,  622,  622,

      466,  623,  893,  624,  625,  625,  480,  480,  636,  636,
      470,  487,  487,  652,  652,  498,  498,  894,  626,  654,
      654,  481,  662,  662,  508,  508,  664,  664,  653,  895,
      499,  668,  668,  673,  673,  521,  521,  663,  896,  509,
      681,  681,  686,  686,  530,  530,  669,  879,  674,  880,
      522,  690,  690,  555,  555,  565,  565,  687,  897,  531,
      715,  715,  556,  675,  566,  725,  725,  898,  557,  899,
      567,  571,  571,  716,  595,  595,  902,  596,  726,  597,
      599,  599,  604,  604,  605,  605,  572,  606,  903,  607,
      763,  763,  765,  765,  767,  767,  617,  617,  904,  618,

      905,  619,  622,  622,  764,  623,  766,  624,  768,  625,
      625,  777,  777,  908,  778,  909,  779,  781,  781,  788,
      788,  790,  790,  626,  636,  636,  652,  652,  809,  809,
      910,  782,  654,  654,  789,  913,  791,  810,  810,  662,
      662,  653,  819,  819,  664,  664,  668,  668,  823,  823,
      824,  824,  811,  914,  663,  673,  673,  829,  829,  681,
      681,  669,  686,  686,  920,  825,  840,  840,  690,  690,
      674,  864,  864,  715,  715,  921,  792,  687,  869,  826,
      873,  873,  870,  725,  725,  887,  716,  900,  900,  888,
      890,  890,  906,  906,  911,  911,  726,  763,  763,  891,

      922,  901,  915,  915,  925,  892,  907,  926,  912,  765,
      765,  764,  916,  916,  932,  917,  933,  918,  767,  767,
      919,  919,  934,  766,  923,  923,  777,  777,  935,  778,
      936,  779,  768,  927,  927,  781,  781,  941,  924,  929,
      929,  942,  930,  943,  931,  788,  788,  928,  944,  782,
      937,  937,  790,  790,  938,  938,  939,  939,  945,  946,
      789,  947,  948,  949,  950,  951,  952,  791,  953,  954,
      955,  940,  956,  956,  809,  809,  810,  810,  958,  958,
      959,  960,  961,  961,  963,  964,  966,  957,  967,  965,
      968,  811,  819,  819,  969,  970,  972,  962,  823,  823,

      824,  824,  971,  971,  973,  975,  974,  829,  829,  976,
      977,  978,  979,  980,  981,  825,  983,  986,  982,  984,
      984,  987,  987,  840,  840,  989,  990,  991,  992,  993,
      994,  995,  996,  997,  985,  998,  988,  999, 1000, 1001,
     1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1003,  864,
      864, 1013, 1017, 1007, 1014, 1014, 1018, 1019, 1020, 1008,
      873,  873, 1021, 1015, 1022, 1023, 1024, 1025, 1026, 1016,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037,
      890,  890, 1034, 1038, 1039, 1039, 1041, 1042, 1043,  891,
     1044, 1045, 1046, 1046, 1051,  892, 1054, 1040,  900,  900,

     1048, 1048, 1055, 1049, 1059, 1050, 1047, 1052, 1052,  906,
      906, 1075,  901, 1056, 1056, 1076, 1057, 1077, 1058, 1060,
     1060, 1053, 1078,  907, 1062, 1079, 1063,  915,  915, 1064,
     1065,  911,  911, 1061, 1080, 1066, 1067, 1087, 1068, 1070,
     1070, 1069, 1071, 1088, 1072,  912, 1073, 1073,  916,  916,
     1089,  917, 1094,  918,  919,  919,  923,  923, 1081, 1081,
     1074, 1082, 1095, 1083,  927,  927, 1084, 1084, 1097, 1085,
      924, 1086,  929,  929, 1100,  930, 1101,  931,  928, 1090,
     1090, 1092, 1092,  937,  937,  938,  938,  939,  939, 1096,
     1096, 1098, 1098, 1102, 1091, 1103, 1093, 1104, 1105, 1106,

     1108, 1108,  940, 1115, 1116, 1117, 1099, 1107, 1110, 1111,
     1112, 1118,  956,  956, 1127, 1109, 1119, 1119,  958,  958,
     1113, 1120, 1120, 1122, 1122, 1128, 1114,  957,  961,  961,
     1124, 1124, 1125, 1125, 1129, 1130, 1121, 1131, 1123, 1132,
     1133,  971,  971,  962, 1134, 1135, 1136, 1126, 1137, 1138,
     1139, 1139, 1142, 1143, 1144, 1144, 1148, 1149, 1150,  984,
      984, 1151, 1151, 1152, 1156, 1140,  987,  987, 1157, 1145,
     1153, 1153, 1154, 1154,  985, 1158, 1159, 1160, 1161, 1162,
     1163,  988, 1146, 1164, 1165, 1166, 1167, 1155, 1147, 1168,
     1169, 1141, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178,

     1177, 1179, 1014, 1014, 1180, 1181, 1181, 1183, 1184, 1185,
     1186, 1015, 1187, 1188, 1189, 1190, 1191, 1016, 1182, 1192,
     1193, 1194, 1195, 1196, 1198, 1197, 1199, 1200, 1201, 1202,
     1203, 1203, 1039, 1039, 1204, 1205, 1206, 1207, 1208, 1046,
     1046, 1209, 1209, 1212, 1210, 1040, 1211, 1048, 1048, 1213,
     1049, 1214, 1050, 1047, 1052, 1052, 1215, 1215, 1218, 1216,
     1219, 1217, 1056, 1056, 1220, 1057, 1221, 1058, 1053, 1222,
     1060, 1060, 1223, 1223, 1226, 1224, 1227, 1225, 1228, 1229,
     1230, 1231, 1235, 1233, 1061, 1237, 1070, 1070, 1238, 1071,
     1239, 1072, 1073, 1073, 1243, 1244, 1245, 1246, 1247, 1232,

     1234, 1248, 1240, 1240, 1236, 1241, 1074, 1242, 1081, 1081,
     1249, 1082, 1250, 1083, 1084, 1084, 1251, 1085, 1254, 1086,
     1090, 1090, 1252, 1252, 1092, 1092, 1253, 1253, 1255, 1096,
     1096, 1256, 1098, 1098, 1258, 1091, 1257, 1257, 1259, 1093,
     1260, 1261, 1261, 1263, 1264, 1265, 1266, 1099, 1108, 1108,
     1267, 1267, 1268, 1269, 1270, 1271, 1262, 1272, 1273, 1274,
     1275, 1277, 1276, 1109, 1119, 1119, 1120, 1120, 1278, 1278,
     1122, 1122, 1279, 1279, 1124, 1124, 1125, 1125, 1280, 1280,
     1281, 1121, 1282, 1283, 1284, 1123, 1285, 1286, 1287, 1288,
     1289, 1126, 1290, 1291, 1291, 1293, 1293, 1139, 1139, 1295,

     1295, 1296, 1297, 1298, 1301, 1299, 1144, 1144, 1292, 1302,
     1294, 1303, 1140, 1300, 1300, 1304, 1305, 1151, 1151, 1306,
     1310, 1145, 1153, 1153, 1154, 1154, 1307, 1307, 1308, 1308,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1155,
     1320, 1321, 1322, 1309, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1333, 1181, 1181, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1182,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1203, 1203, 1355, 1356, 1357, 1360, 1361, 1358, 1209, 1209,
     1362, 1210, 1363, 1211, 1215, 1215, 1359, 1216, 1364, 1217,

     1365, 1366, 1367, 1368, 1223, 1223, 1369, 1224, 1372, 1225,
     1370, 1370, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1240, 1240, 1371, 1241, 1383, 1242, 1384, 1385,
     1386, 1387, 1388, 1252, 1252, 1253, 1253, 1389, 1390, 1391,
     1257, 1257, 1392, 1393, 1394, 1261, 1261, 1395, 1395, 1396,
     1397, 1398, 1399, 1267, 1267, 1400, 1401, 1402, 1403, 1404,
     1262, 1405, 1406, 1407, 1408, 1409, 1278, 1278, 1279, 1279,
     1280, 1280, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1291, 1291, 1420, 1420, 1293, 1293, 1421, 1421,
     1295, 1295, 1422, 1423, 1424, 1425, 1426, 1292, 1300, 1300,

     1427, 1294, 1428, 1429, 1430, 1431, 1307, 1307, 1308, 1308,
     1432, 1432, 1433, 1433, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1309, 1444, 1445, 1446, 1434, 1447, 1448,
     1449, 1450, 1451, 1452, 1453, 1454, 1333, 1333, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1479, 1481, 1481, 1483, 1483, 1485, 1486,
     1486, 1370, 1370, 1489, 1489, 1490, 1480, 1491, 1482, 1492,
     1484, 1493, 1493, 1487, 1496, 1371, 1497, 1498, 1499, 1499,
     1501, 1502, 1502, 1505, 1506, 1494, 1507, 1508, 1508, 1510,

     1510, 1512, 1500, 1513, 1513, 1503, 1515, 1516, 1517, 1518,
     1519, 1509, 1395, 1395, 1511, 1520, 1521, 1522, 1514, 1523,
     1524, 1525, 1495, 1526, 1488, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1535, 1536, 1539, 1504, 1537, 1537, 1540,
     1541, 1542, 1543, 1420, 1420, 1421, 1421, 1544, 1545, 1546,
     1547, 1548, 1538, 1549, 1549, 1551, 1552, 1553, 1554, 1554,
     1432, 1432, 1433, 1433, 1556, 1556, 1557, 1558, 1550, 1559,
     1559, 1562, 1566, 1555, 1563, 1563, 1567, 1434, 1560, 1568,
     1569, 1570, 1571, 1564, 1561, 1572, 1573, 1574, 1575, 1565,
     1576, 1577, 1577, 1579, 1580, 1581, 1582, 1583, 1583, 1585,

     1586, 1587, 1588, 1589, 1590, 1591, 1578, 1592, 1593, 1594,
     1595, 1596, 1584, 1597, 1598, 1599, 1600, 1601, 1479, 1479,
     1602, 1602, 1610, 1603, 1611, 1604, 1481, 1481, 1605, 1605,
     1483, 1483, 1480, 1606, 1606, 1607, 1607, 1486, 1486, 1612,
     1482, 1609, 1609, 1613, 1484, 1489, 1489, 1493, 1493, 1608,
     1615, 1487, 1614, 1614, 1616, 1617, 1619, 1499, 1499, 1620,
     1620, 1494, 1621, 1502, 1502, 1622, 1622, 1623, 1624, 1625,
     1626, 1500, 1508, 1508, 1627, 1627, 1629, 1503, 1510, 1510,
     1618, 1628, 1628, 1513, 1513, 1633, 1509, 1630, 1630, 1631,
     1631, 1634, 1634, 1511, 1636, 1637, 1637, 1641, 1514, 1639,

     1639, 1642, 1642, 1644, 1632, 1645, 1635, 1646, 1647, 1648,
     1638, 1649, 1650, 1651, 1640, 1652, 1643, 1653, 1654, 1655,
     1655, 1657, 1658, 1537, 1537, 1659, 1659, 1660, 1661, 1662,
     1663, 1664, 1665, 1666, 1656, 1667, 1668, 1672, 1538, 1669,
     1669, 1549, 1549, 1671, 1671, 1673, 1674, 1554, 1554, 1675,
     1675, 1556, 1556, 1676, 1670, 1677, 1550, 1559, 1559, 1680,
     1678, 1678, 1555, 1681, 1682, 1682, 1560, 1563, 1563, 1684,
     1685, 1686, 1561, 1679, 1687, 1688, 1564, 1683, 1689, 1690,
     1691, 1692, 1565, 1693, 1577, 1577, 1694, 1694, 1695, 1696,
     1583, 1583, 1697, 1697, 1698, 1699, 1700, 1701, 1702, 1578,

     1703, 1704, 1705, 1706, 1707, 1584, 1708, 1710, 1710, 1712,
     1713, 1713, 1602, 1602, 1715, 1603, 1716, 1604, 1720, 1709,
     1721, 1711, 1605, 1605, 1714, 1606, 1606, 1607, 1607, 1717,
     1717, 1724, 1718, 1725, 1719, 1609, 1609, 1722, 1722, 1614,
     1614, 1608, 1726, 1729, 1730, 1730, 1732, 1620, 1620, 1733,
     1734, 1723, 1735, 1727, 1622, 1622, 1736, 1739, 1731, 1728,
     1737, 1737, 1627, 1627, 1628, 1628, 1630, 1630, 1631, 1631,
     1740, 1740, 1741, 1741, 1738, 1634, 1634, 1743, 1743, 1744,
     1637, 1637, 1747, 1632, 1745, 1745, 1749, 1742, 1639, 1639,
     1635, 1746, 1746, 1642, 1642, 1638, 1748, 1748, 1750, 1751,

     1752, 1753, 1754, 1640, 1755, 1756, 1757, 1757, 1643, 1759,
     1760, 1760, 1655, 1655, 1762, 1762, 1763, 1763, 1765, 1659,
     1659, 1758, 1766, 1766, 1772, 1761, 1773, 1656, 1768, 1768,
     1774, 1764, 1770, 1770, 1775, 1776, 1777, 1767, 1669, 1669,
     1778, 1778, 1782, 1769, 1671, 1671, 1783, 1771, 1779, 1779,
     1675, 1675, 1784, 1670, 1785, 1785, 1678, 1678, 1786, 1787,
     1789, 1789, 1790, 1780, 1682, 1682, 1791, 1788, 1792, 1679,
     1793, 1794, 1795, 1796, 1797, 1798, 1799, 1683, 1694, 1694,
     1800, 1697, 1697, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
     1808, 1809, 1810, 1710, 1710, 1811, 1811, 1812, 1713, 1713,

     1816, 1813, 1813, 1781, 1814, 1817, 1815, 1711, 1717, 1717,
     1821, 1718, 1714, 1719, 1722, 1722, 1818, 1818, 1819, 1819,
     1822, 1823, 1825, 1826, 1730, 1730, 1827, 1827, 1723, 1828,
     1829, 1830, 1820, 1831, 1832, 1824, 1737, 1737, 1731, 1833,
     1833, 1836, 1834, 1842, 1835, 1740, 1740, 1741, 1741, 1838,
     1738, 1837, 1837, 1743, 1743, 1745, 1745, 1839, 1746, 1746,
     1840, 1840, 1742, 1748, 1748, 1843, 1844, 1845, 1846, 1847,
     1848, 1849, 1757, 1757, 1851, 1841, 1850, 1850, 1760, 1760,
     1852, 1852, 1762, 1762, 1763, 1763, 1859, 1758, 1853, 1853,
     1854, 1854, 1860, 1761, 1766, 1766, 1856, 1856, 1861, 1764,

     1768, 1768, 1857, 1857, 1862, 1855, 1770, 1770, 1863, 1767,
     1858, 1858, 1864, 1864, 1869, 1769, 1778, 1778, 1779, 1779,
     1870, 1771, 1866, 1866, 1867, 1867, 1871, 1865, 1785, 1785,
     1872, 1873, 1874, 1780, 1789, 1789, 1875, 1876, 1877, 1868,
     1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
     1888, 1889, 1890, 1891, 1892, 1893, 1894, 1811, 1811, 1895,
     1813, 1813, 1897, 1814, 1898, 1815, 1899, 1900, 1818, 1818,
     1819, 1819, 1896, 1901, 1901, 1902, 1903, 1904, 1905, 1906,
     1907, 1827, 1827, 1908, 1820, 1909, 1910, 1911, 1912, 1833,
     1833, 1913, 1834, 1914, 1835, 1837, 1837, 1915, 1840, 1840,

     1916, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
     1850, 1850, 1925, 1841, 1852, 1852, 1853, 1853, 1854, 1854,
     1926, 1926, 1856, 1856, 1857, 1857, 1858, 1858, 1927, 1928,
     1929, 1930, 1931, 1855, 1864, 1864, 1932, 1932, 1866, 1866,
     1867, 1867, 1933, 1933, 1934, 1934, 1936, 1937, 1938, 1865,
     1939, 1940, 1941, 1942, 1943, 1868, 1944, 1945, 1946, 1935,
     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
     1957, 1957, 1959, 1959, 1961, 1961, 1963, 1964, 1965, 1966,
     1901, 1901, 1967, 1968, 1969, 1958, 1960, 1970, 1962, 1971,
     1972, 1973, 1974, 1975, 1976, 1976, 1978, 1979, 1980, 1981,

     1916, 1916, 1982, 1983, 1984, 1985, 1986, 1987, 1977, 1988,
     1989, 1990, 1926, 1926, 1991, 1992, 1993, 1993, 1995, 1996,
     1932, 1932, 1933, 1933, 1934, 1934, 1997, 1997, 1998, 1999,
     2000, 1994, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 1935,
     2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 1957, 1957,
     2017, 2017, 1959, 1959, 2020, 2007, 2018, 2018, 1961, 1961,
     2019, 2019, 2021, 1958, 2022, 2023, 1960, 2024, 2025, 2026,
     2027, 2028, 1962, 2029, 2029, 2031, 2031, 2033, 2034, 2034,
     1976, 1976, 2036, 2036, 2037, 2039, 2039, 2030, 2041, 2032,
     2042, 2043, 2035, 2044, 1977, 2045, 2046, 2038, 2048, 2049,

     2040, 2050, 2050, 2052, 2052, 2054, 2055, 2056, 1993, 1993,
     2057, 2057, 2058, 2059, 2047, 2060, 2051, 2061, 2053, 1997,
     1997, 2062, 2063, 1994, 2064, 2065, 2066, 2067, 2068, 2069,
     2070, 2071, 2071, 2073, 2074, 2075, 2076, 2017, 2017, 2018,
     2018, 2019, 2019, 2077, 2077, 2081, 2072, 2079, 2079, 2082,
     2083, 2083, 2085, 2086, 2087, 2088, 2091, 2078, 2029, 2029,
     2093, 2080, 2089, 2089, 2084, 2031, 2031, 2090, 2090, 2034,
     2034, 2094, 2030, 2092, 2092, 2036, 2036, 2039, 2039, 2032,
     2095, 2095, 2096, 2035, 2097, 2097, 2099, 2100, 2101, 2101,
     2103, 2104, 2040, 2105, 2106, 2050, 2050, 2107, 2107, 2098,

     2052, 2052, 2109, 2102, 2108, 2108, 2110, 2111, 2111, 2113,
     2051, 2057, 2057, 2114, 2115, 2053, 2116, 2117, 2118, 2119,
     2120, 2121, 2112, 2122, 2123, 2124, 2071, 2071, 2125, 2125,
     2126, 2127, 2128, 2077, 2077, 2129, 2129, 2079, 2079, 2130,
     2130, 2072, 2131, 2131, 2133, 2083, 2083, 2078, 2134, 2134,
     2135, 2080, 2136, 2137, 2138, 2139, 2132, 2089, 2089, 2084,
     2090, 2090, 2092, 2092, 2140, 2141, 2095, 2095, 2142, 2097,
     2097, 2143, 2143, 2144, 2144, 2146, 2101, 2101, 2147, 2147,
     2148, 2149, 2150, 2151, 2098, 2107, 2107, 2152, 2145, 2108,
     2108, 2102, 2153, 2111, 2111, 2154, 2154, 2155, 2155, 2157,

     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2112, 2166,
     2125, 2125, 2156, 2167, 2168, 2129, 2129, 2130, 2130, 2131,
     2131, 2169, 2169, 2170, 2170, 2134, 2134, 2172, 2173, 2174,
     2174, 2176, 2177, 2132, 2178, 2178, 2185, 2171, 2180, 2180,
     2182, 2182, 2186, 2175, 2143, 2143, 2144, 2144, 2179, 2184,
     2184, 2187, 2181, 2147, 2147, 2183, 2188, 2189, 2190, 2191,
     2195, 2145, 2154, 2154, 2155, 2155, 2192, 2192, 2193, 2193,
     2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2156,
     2205, 2169, 2169, 2194, 2170, 2170, 2206, 2206, 2207, 2208,
     2174, 2174, 2209, 2209, 2210, 2211, 2211, 2216, 2171, 2178,

     2178, 2213, 2213, 2217, 2175, 2180, 2180, 2214, 2214, 2212,
     2182, 2182, 2218, 2179, 2215, 2215, 2184, 2184, 2219, 2181,
     2220, 2221, 2222, 2192, 2192, 2183, 2193, 2193, 2223, 2223,
     2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
     2234, 2194, 2206, 2206, 2235, 2236, 2209, 2209, 2237, 2211,
     2211, 2238, 2238, 2213, 2213, 2214, 2214, 2215, 2215, 2239,
     2240, 2241, 2245, 2212, 2242, 2242, 2246, 2247, 2223, 2223,
     2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2243,
     2257, 2258, 2238, 2238, 2259, 2260, 2260, 2262, 2262, 2242,
     2242, 2264, 2264, 2265, 2266, 2266, 2244, 2268, 2269, 2270,

     2261, 2271, 2263, 2272, 2243, 2273, 2274, 2275, 2276, 2267,
     2277, 2278, 2279, 2279, 2260, 2260, 2281, 2281, 2262, 2262,
     2282, 2282, 2264, 2264, 2283, 2266, 2266, 2280, 2285, 2261,
     2284, 2284, 2288, 2263, 2286, 2286, 2289, 2290, 2291, 2292,
     2267, 2293, 2294, 2295, 2296, 2279, 2279, 2297, 2297, 2287,
     2281, 2281, 2282, 2282, 2298, 2284, 2284, 2299, 2286, 2286,
     2280, 2300, 2300, 2301, 2302, 2302, 2304, 2304, 2306, 2307,
     2308, 2309, 2310, 2287, 2311, 2297, 2297, 2312, 2313, 2303,
     2314, 2305, 2300, 2300, 2302, 2302, 2315, 2315, 2304, 2304,
     2316, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2303,

     2324, 2325, 2326, 2305, 2315, 2315, 2316, 2316, 2327, 2328,
     2329, 2329, 2331, 2331, 2333, 2334, 2334, 2336, 2337, 2338,
     2338, 2329, 2329, 2342, 2330, 2340, 2340, 2332, 2331, 2331,
     2335, 2341, 2341, 2339, 2344, 2330, 2334, 2334, 2343, 2343,
     2345, 2345, 2348, 2332, 2338, 2338, 2347, 2347, 2340, 2340,
     2349, 2335, 2341, 2341, 2346, 2343, 2343, 2351, 2339, 2345,
     2345, 2350, 2350, 2347, 2347, 2350, 2350, 2352, 2352, 2352,
     2352, 2354, 2354, 2346, 2354, 2354,   46,  863,  862,  861,
      860,  859, 2353,  858, 2353,   23,   23,   23,   23,   23,
       23,   34,   34,   34,   34,   34,   34,   36,   36,   36,

       36,   36,   36,   37,   37,   37,   37,   37,   37,   35,
       35,   35,   35,   35,   35,   38,   38,   38,   38,   38,
       38,   39,   39,   39,   39,   39,   39,   42,   42,   42,
       42,   42,   42,  103,  103,  103,  103,  103,  104,  104,
      857,  104,  104,  104,  105,  105,  105,  856,  105,  105,
      106,  106,  106,  106,  855,  106,  854,  853,  852,  851,
      850,  849,  848,  847,  846,  845,  844,  843,  842,  841,
      839,  838,  837,  836,  835,  834,  833,  832,  831,  830,
      828,  827,  822,  821,  820,  818,  817,  816,  815,  814,
      808,  807,  806,  803,  802,  801,  800,  799,  798,  797,

      796,  795,  794,  793,  787,  786,  785,  784,  783,  780,
      776,  775,  774,  773,  772,  771,  770,  769,  762,  761,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  724,  723,  722,  721,  720,  719,
      714,  713,  712,  711,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  689,  688,  685,  684,  683,  682,  680,  679,
      676,  672,  671,  670,  665,  661,  660,  659,  658,  657,

      656,  655,  651,  650,  649,  648,  647,  646,  643,  642,
      641,  640,  639,  638,  637,  635,  634,  631,  630,  629,
      628,  627,  621,  620,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  603,  602,  601,  600,  598,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  577,  576,  575,  574,  573,  568,  564,
      563,  562,  561,  560,  559,  558,  554,  553,  552,  551,
      550,  549,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  535,  534,  533,  529,  528,  527,  526,  525,  524,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,

      507,  503,  502,  501,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  486,  485,  484,  479,  476,  475,
      474,  473,  472,  471,  468,  467,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  451,  450,  449,  448,  444,
      441,  440,  439,  438,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  393,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  378,  377,  376,  373,  372,  371,  370,  369,  368,

      367,  364,  363,  362,  361,  356,  355,  354,  350,  347,
      346,  345,  341,  340,  339,  338,  337,  336,  335,  334,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  297,  296,
      295,  292,  291,  290,  289,  288,  287,  286,  283,  282,
      281,  280,  275,  274,  273,  272,  271,  268,  267,  266,
      262,  259,  254,  246,  243,  242,  238,  237,  232,  229,
      228,  227,  224,  221,  220,  217,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  203,  202,  201,  200,  199,

      198,  197,  196,  195,  194,  193,  193,  192,  189,  184,
      176,  173,  172,  168,  167,  162,  159,  139,  136,  135,
      125,  124,  115,  114,  113,  112,  109,  102,  101,   76,
      108,  107,  102,  101,   76,   72,   72, 2355,   35,   35,
       35,   35,   35,   35,   35,   35,   19, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355
    } ;

static yyconst flex_int16_t yy_chk[3713] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,  716,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   56,   61,  717,   62,   47,   26,
       26,   26,   51,   73,   73,   61,   77,   77,   56,   26,
       62,  100,  100,   63,    1,    2,    2,    2,    2,    2,
       64,    2,   69,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   63,   69,   28,   28,  182,  182,    2,
       64,   48,   48,   28,    2,   28,   28,   28,   67,   68,

      718,   48,   48,   48,   67,   28,   82,   85,   84,   85,
       67,   48,   84,   68,   75,   75,   68,   82,   75,   75,
       75,  720,   88,   68,  141,   91,   28,   88,   88,    2,
       21,   21,   48,   91,   21,  141,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  722,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   29,   50,   50,   94,  143,   93,  723,

       29,  143,   50,   98,   50,   50,   50,   29,   98,  118,
      133,  128,   93,   94,   50,   93,   93,   93,  128,  193,
      193,  135,  137,  137,  137,  118,  133,  135,   29,   29,
       29,   29,   29,   29,   29,   50,   29,   29,  726,   29,
       29,   29,   29,   29,  150,   29,   29,   29,   29,   29,
       74,   74,  150,   96,  130,  130,  144,  418,  144,  418,
       74,   74,   74,   96,  138,  138,  147,  152,  130,   96,
       74,  147,  147,   96,  138,  138,  138,  163,  157,  727,
      163,  152,  153,  157,  152,  152,  152,  233,  202,  202,
      233,   74,   79,   79,   79,   79,   79,   79,   79,  153,

       79,   79,  202,   79,   79,   79,   79,   79,  155,   79,
       79,   79,   79,   79,  728,  159,  169,  391,  155,  218,
      218,  159,  729,  169,  155,  730,  169,  169,  155,  159,
      174,  186,  391,  218,  174,  732,  219,  219,  186,  219,
      186,  219,  229,  235,  235,  244,  252,  252,  229,  244,
      239,  268,  268,  315,  315,  256,  229,  239,  235,  266,
      239,  239,  256,  266,  256,  286,  286,  307,  312,  312,
      401,  314,  314,  307,  286,  316,  316,  321,  321,  322,
      322,  511,  312,  511,  235,  314,  477,  331,  331,  316,
      331,  321,  331,  322,  335,  335,  338,  338,  345,  347,

      347,  477,  345,  351,  351,  352,  352,  401,  335,  425,
      338,  363,  363,  425,  347,  367,  367,  559,  351,  490,
      369,  369,  380,  380,  367,  656,  363,  387,  387,  408,
      408,  416,  416,  559,  363,  369,  733,  380,  408,  518,
      416,  656,  387,  518,  408,  734,  416,  419,  419,  442,
      442,  445,  445,  735,  347,  347,  490,  380,  736,  446,
      446,  369,  419,  442,  443,  443,  551,  443,  551,  443,
      447,  447,  387,  446,  452,  452,  453,  453,  454,  454,
      455,  455,  648,  455,  648,  455,  465,  465,  452,  737,
      466,  466,  454,  466,  739,  466,  469,  469,  470,  470,

      465,  470,  741,  470,  471,  471,  480,  480,  481,  481,
      469,  487,  487,  497,  497,  498,  498,  743,  471,  499,
      499,  480,  507,  507,  508,  508,  509,  509,  497,  744,
      498,  512,  512,  516,  516,  521,  521,  507,  745,  508,
      522,  522,  527,  527,  530,  530,  512,  731,  516,  731,
      521,  531,  531,  555,  555,  565,  565,  527,  746,  530,
      557,  557,  555,  516,  565,  567,  567,  747,  555,  748,
      565,  571,  571,  557,  595,  595,  750,  595,  567,  595,
      599,  599,  604,  604,  605,  605,  571,  605,  751,  605,
      612,  612,  613,  613,  614,  614,  617,  617,  752,  617,

      753,  617,  622,  622,  612,  622,  613,  622,  614,  625,
      625,  626,  626,  755,  626,  756,  626,  628,  628,  634,
      634,  635,  635,  625,  636,  636,  652,  652,  653,  653,
      759,  628,  654,  654,  634,  761,  635,  655,  655,  662,
      662,  652,  663,  663,  664,  664,  668,  668,  669,  669,
      670,  670,  655,  762,  662,  673,  673,  674,  674,  681,
      681,  668,  686,  686,  769,  670,  687,  687,  690,  690,
      673,  714,  714,  715,  715,  770,  635,  686,  721,  670,
      724,  724,  721,  725,  725,  738,  715,  749,  749,  738,
      740,  740,  754,  754,  760,  760,  725,  763,  763,  740,

      773,  749,  764,  764,  778,  740,  754,  779,  760,  765,
      765,  763,  766,  766,  783,  766,  784,  766,  767,  767,
      768,  768,  785,  765,  774,  774,  777,  777,  786,  777,
      787,  777,  767,  780,  780,  781,  781,  793,  774,  782,
      782,  794,  782,  795,  782,  788,  788,  780,  796,  781,
      789,  789,  790,  790,  791,  791,  792,  792,  797,  798,
      788,  799,  800,  801,  802,  803,  804,  790,  805,  806,
      807,  792,  808,  808,  809,  809,  810,  810,  811,  811,
      812,  813,  814,  814,  815,  816,  817,  808,  818,  816,
      820,  810,  819,  819,  821,  822,  826,  814,  823,  823,

      824,  824,  825,  825,  827,  828,  827,  829,  829,  830,
      831,  832,  833,  834,  835,  824,  836,  838,  835,  837,
      837,  839,  839,  840,  840,  841,  842,  843,  844,  847,
      848,  849,  851,  852,  837,  853,  839,  854,  855,  856,
      857,  859,  859,  859,  860,  861,  862,  863,  857,  864,
      864,  865,  869,  859,  866,  866,  870,  871,  872,  859,
      873,  873,  874,  866,  875,  876,  877,  878,  879,  866,
      880,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  890,  886,  891,  892,  892,  893,  895,  896,  890,
      897,  898,  899,  899,  902,  890,  904,  892,  900,  900,

      901,  901,  905,  901,  908,  901,  899,  903,  903,  906,
      906,  914,  900,  907,  907,  917,  907,  918,  907,  909,
      909,  903,  920,  906,  910,  921,  910,  915,  915,  910,
      910,  911,  911,  909,  922,  910,  910,  930,  910,  912,
      912,  910,  912,  931,  912,  911,  913,  913,  916,  916,
      932,  916,  935,  916,  919,  919,  923,  923,  924,  924,
      913,  924,  936,  924,  927,  927,  928,  928,  941,  928,
      923,  928,  929,  929,  943,  929,  944,  929,  927,  933,
      933,  934,  934,  937,  937,  938,  938,  939,  939,  940,
      940,  942,  942,  945,  933,  946,  934,  947,  948,  949,

      950,  950,  939,  952,  953,  954,  942,  949,  951,  951,
      951,  955,  956,  956,  964,  950,  957,  957,  958,  958,
      951,  959,  959,  960,  960,  965,  951,  956,  961,  961,
      962,  962,  963,  963,  966,  967,  959,  968,  960,  969,
      970,  971,  971,  961,  972,  973,  974,  963,  975,  976,
      977,  977,  978,  979,  980,  980,  981,  982,  983,  984,
      984,  985,  985,  986,  990,  977,  987,  987,  991,  980,
      988,  988,  989,  989,  984,  992,  993,  994,  995,  996,
      997,  987,  980,  998, 1000, 1001, 1002,  989,  980, 1003,
     1004,  977, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,

     1011, 1013, 1014, 1014, 1015, 1016, 1016, 1017, 1018, 1019,
     1020, 1014, 1021, 1022, 1023, 1024, 1025, 1014, 1016, 1026,
     1027, 1030, 1031, 1032, 1033, 1032, 1034, 1035, 1036, 1037,
     1038, 1038, 1039, 1039, 1040, 1041, 1043, 1044, 1045, 1046,
     1046, 1047, 1047, 1049, 1047, 1039, 1047, 1048, 1048, 1050,
     1048, 1051, 1048, 1046, 1052, 1052, 1053, 1053, 1054, 1053,
     1055, 1053, 1056, 1056, 1057, 1056, 1058, 1056, 1052, 1059,
     1060, 1060, 1061, 1061, 1062, 1061, 1063, 1061, 1063, 1064,
     1065, 1066, 1068, 1067, 1060, 1069, 1070, 1070, 1071, 1070,
     1072, 1070, 1073, 1073, 1075, 1078, 1079, 1080, 1082, 1066,

     1067, 1083, 1074, 1074, 1068, 1074, 1073, 1074, 1081, 1081,
     1085, 1081, 1086, 1081, 1084, 1084, 1089, 1084, 1094, 1084,
     1090, 1090, 1091, 1091, 1092, 1092, 1093, 1093, 1095, 1096,
     1096, 1097, 1098, 1098, 1100, 1090, 1099, 1099, 1101, 1092,
     1102, 1103, 1103, 1104, 1105, 1106, 1107, 1098, 1108, 1108,
     1109, 1109, 1110, 1111, 1112, 1113, 1103, 1114, 1115, 1116,
     1117, 1118, 1117, 1108, 1119, 1119, 1120, 1120, 1121, 1121,
     1122, 1122, 1123, 1123, 1124, 1124, 1125, 1125, 1126, 1126,
     1127, 1120, 1128, 1129, 1130, 1122, 1131, 1132, 1133, 1134,
     1135, 1125, 1136, 1137, 1137, 1138, 1138, 1139, 1139, 1140,

     1140, 1141, 1142, 1143, 1146, 1143, 1144, 1144, 1137, 1147,
     1138, 1148, 1139, 1145, 1145, 1149, 1150, 1151, 1151, 1152,
     1157, 1144, 1153, 1153, 1154, 1154, 1155, 1155, 1156, 1156,
     1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1154,
     1167, 1168, 1169, 1156, 1170, 1171, 1172, 1173, 1174, 1175,
     1176, 1177, 1178, 1179, 1180, 1180, 1181, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1181,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1203, 1204, 1205, 1207, 1208, 1210, 1207, 1209, 1209,
     1211, 1209, 1214, 1209, 1215, 1215, 1207, 1215, 1216, 1215,

     1217, 1218, 1219, 1222, 1223, 1223, 1226, 1223, 1228, 1223,
     1227, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
     1237, 1241, 1240, 1240, 1227, 1240, 1242, 1240, 1243, 1244,
     1245, 1246, 1251, 1252, 1252, 1253, 1253, 1254, 1255, 1256,
     1257, 1257, 1258, 1259, 1260, 1261, 1261, 1262, 1262, 1263,
     1264, 1265, 1266, 1267, 1267, 1268, 1269, 1270, 1271, 1272,
     1261, 1273, 1274, 1275, 1276, 1277, 1278, 1278, 1279, 1279,
     1280, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1291, 1292, 1292, 1293, 1293, 1294, 1294,
     1295, 1295, 1296, 1297, 1298, 1299, 1301, 1291, 1300, 1300,

     1302, 1293, 1303, 1304, 1305, 1306, 1307, 1307, 1308, 1308,
     1309, 1309, 1310, 1310, 1312, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1308, 1322, 1323, 1324, 1310, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1357, 1358,
     1359, 1360, 1363, 1363, 1366, 1366, 1367, 1367, 1368, 1369,
     1369, 1370, 1370, 1371, 1371, 1372, 1363, 1373, 1366, 1374,
     1367, 1375, 1375, 1369, 1376, 1370, 1377, 1378, 1379, 1379,
     1380, 1381, 1381, 1384, 1385, 1375, 1386, 1387, 1387, 1388,

     1388, 1389, 1379, 1390, 1390, 1381, 1391, 1392, 1393, 1394,
     1396, 1387, 1395, 1395, 1388, 1397, 1398, 1399, 1390, 1400,
     1401, 1402, 1375, 1403, 1369, 1404, 1405, 1406, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1415, 1381, 1414, 1414, 1416,
     1417, 1418, 1419, 1420, 1420, 1421, 1421, 1422, 1423, 1424,
     1425, 1426, 1414, 1427, 1427, 1428, 1429, 1430, 1431, 1431,
     1432, 1432, 1433, 1433, 1434, 1434, 1435, 1437, 1427, 1438,
     1438, 1439, 1442, 1431, 1441, 1441, 1444, 1433, 1438, 1445,
     1446, 1447, 1448, 1441, 1438, 1449, 1450, 1451, 1452, 1441,
     1453, 1454, 1454, 1455, 1456, 1458, 1459, 1460, 1460, 1461,

     1462, 1463, 1464, 1465, 1466, 1467, 1454, 1468, 1469, 1471,
     1472, 1473, 1460, 1474, 1475, 1476, 1477, 1478, 1479, 1479,
     1480, 1480, 1488, 1480, 1490, 1480, 1481, 1481, 1482, 1482,
     1483, 1483, 1479, 1484, 1484, 1485, 1485, 1486, 1486, 1491,
     1481, 1487, 1487, 1492, 1483, 1489, 1489, 1493, 1493, 1485,
     1495, 1486, 1494, 1494, 1496, 1497, 1498, 1499, 1499, 1500,
     1500, 1493, 1501, 1502, 1502, 1503, 1503, 1504, 1505, 1506,
     1507, 1499, 1508, 1508, 1509, 1509, 1512, 1502, 1510, 1510,
     1497, 1511, 1511, 1513, 1513, 1516, 1508, 1514, 1514, 1515,
     1515, 1517, 1517, 1510, 1518, 1519, 1519, 1521, 1513, 1520,

     1520, 1522, 1522, 1523, 1515, 1524, 1517, 1525, 1526, 1527,
     1519, 1528, 1529, 1530, 1520, 1531, 1522, 1532, 1533, 1534,
     1534, 1535, 1536, 1537, 1537, 1538, 1538, 1539, 1540, 1541,
     1542, 1543, 1544, 1545, 1534, 1546, 1547, 1551, 1537, 1548,
     1548, 1549, 1549, 1550, 1550, 1552, 1553, 1554, 1554, 1555,
     1555, 1556, 1556, 1557, 1548, 1560, 1549, 1559, 1559, 1562,
     1561, 1561, 1554, 1564, 1565, 1565, 1559, 1563, 1563, 1566,
     1567, 1568, 1559, 1561, 1569, 1570, 1563, 1565, 1571, 1572,
     1573, 1574, 1563, 1576, 1577, 1577, 1578, 1578, 1579, 1582,
     1583, 1583, 1584, 1584, 1588, 1589, 1590, 1591, 1592, 1577,

     1593, 1594, 1595, 1596, 1597, 1583, 1598, 1599, 1599, 1600,
     1601, 1601, 1602, 1602, 1603, 1602, 1604, 1602, 1610, 1598,
     1611, 1599, 1605, 1605, 1601, 1606, 1606, 1607, 1607, 1608,
     1608, 1613, 1608, 1615, 1608, 1609, 1609, 1612, 1612, 1614,
     1614, 1607, 1616, 1617, 1618, 1618, 1619, 1620, 1620, 1621,
     1623, 1612, 1624, 1616, 1622, 1622, 1625, 1629, 1618, 1616,
     1626, 1626, 1627, 1627, 1628, 1628, 1630, 1630, 1631, 1631,
     1632, 1632, 1633, 1633, 1626, 1634, 1634, 1635, 1635, 1636,
     1637, 1637, 1641, 1631, 1638, 1638, 1644, 1633, 1639, 1639,
     1634, 1640, 1640, 1642, 1642, 1637, 1643, 1643, 1645, 1646,

     1647, 1648, 1649, 1639, 1650, 1651, 1652, 1652, 1642, 1653,
     1654, 1654, 1655, 1655, 1656, 1656, 1657, 1657, 1658, 1659,
     1659, 1652, 1660, 1660, 1663, 1654, 1664, 1655, 1661, 1661,
     1665, 1657, 1662, 1662, 1666, 1667, 1668, 1660, 1669, 1669,
     1670, 1670, 1673, 1661, 1671, 1671, 1674, 1662, 1672, 1672,
     1675, 1675, 1676, 1669, 1677, 1677, 1678, 1678, 1679, 1680,
     1681, 1681, 1683, 1672, 1682, 1682, 1685, 1680, 1686, 1678,
     1687, 1688, 1689, 1690, 1691, 1692, 1693, 1682, 1694, 1694,
     1695, 1697, 1697, 1698, 1699, 1700, 1701, 1702, 1705, 1706,
     1707, 1708, 1709, 1710, 1710, 1711, 1711, 1712, 1713, 1713,

     1720, 1714, 1714, 1672, 1714, 1721, 1714, 1710, 1717, 1717,
     1725, 1717, 1713, 1717, 1722, 1722, 1723, 1723, 1724, 1724,
     1726, 1727, 1728, 1729, 1730, 1730, 1731, 1731, 1722, 1732,
     1733, 1734, 1724, 1735, 1736, 1727, 1737, 1737, 1730, 1738,
     1738, 1739, 1738, 1749, 1738, 1740, 1740, 1741, 1741, 1744,
     1737, 1742, 1742, 1743, 1743, 1745, 1745, 1744, 1746, 1746,
     1747, 1747, 1741, 1748, 1748, 1750, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1757, 1759, 1747, 1758, 1758, 1760, 1760,
     1761, 1761, 1762, 1762, 1763, 1763, 1772, 1757, 1764, 1764,
     1765, 1765, 1773, 1760, 1766, 1766, 1767, 1767, 1774, 1763,

     1768, 1768, 1769, 1769, 1775, 1765, 1770, 1770, 1776, 1766,
     1771, 1771, 1777, 1777, 1782, 1768, 1778, 1778, 1779, 1779,
     1783, 1770, 1780, 1780, 1781, 1781, 1784, 1777, 1785, 1785,
     1786, 1787, 1788, 1779, 1789, 1789, 1790, 1791, 1792, 1781,
     1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
     1803, 1804, 1805, 1807, 1808, 1809, 1810, 1811, 1811, 1812,
     1813, 1813, 1814, 1813, 1815, 1813, 1816, 1817, 1818, 1818,
     1819, 1819, 1812, 1820, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1827, 1828, 1819, 1829, 1830, 1831, 1832, 1833,
     1833, 1836, 1833, 1838, 1833, 1837, 1837, 1839, 1840, 1840,

     1841, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
     1850, 1850, 1851, 1840, 1852, 1852, 1853, 1853, 1854, 1854,
     1855, 1855, 1856, 1856, 1857, 1857, 1858, 1858, 1859, 1860,
     1861, 1862, 1863, 1854, 1864, 1864, 1865, 1865, 1866, 1866,
     1867, 1867, 1868, 1868, 1869, 1869, 1870, 1871, 1872, 1864,
     1873, 1874, 1875, 1876, 1877, 1867, 1878, 1879, 1880, 1869,
     1881, 1882, 1883, 1884, 1885, 1886, 1887, 1889, 1890, 1891,
     1892, 1892, 1893, 1893, 1894, 1894, 1895, 1896, 1899, 1900,
     1901, 1901, 1902, 1903, 1904, 1892, 1893, 1905, 1894, 1906,
     1907, 1908, 1909, 1910, 1911, 1911, 1912, 1913, 1914, 1915,

     1916, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1911, 1923,
     1924, 1925, 1926, 1926, 1927, 1928, 1929, 1929, 1930, 1931,
     1932, 1932, 1933, 1933, 1934, 1934, 1935, 1935, 1936, 1938,
     1939, 1929, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1934,
     1947, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1957,
     1958, 1958, 1959, 1959, 1963, 1945, 1960, 1960, 1961, 1961,
     1962, 1962, 1964, 1957, 1965, 1966, 1959, 1967, 1968, 1969,
     1970, 1971, 1961, 1972, 1972, 1973, 1973, 1974, 1975, 1975,
     1976, 1976, 1977, 1977, 1978, 1979, 1979, 1972, 1980, 1973,
     1981, 1982, 1975, 1983, 1976, 1984, 1985, 1978, 1986, 1987,

     1979, 1988, 1988, 1989, 1989, 1990, 1991, 1992, 1993, 1993,
     1994, 1994, 1995, 1996, 1985, 1998, 1988, 1999, 1989, 1997,
     1997, 2000, 2002, 1993, 2003, 2004, 2006, 2007, 2008, 2009,
     2010, 2011, 2011, 2012, 2014, 2015, 2016, 2017, 2017, 2018,
     2018, 2019, 2019, 2020, 2020, 2022, 2011, 2021, 2021, 2023,
     2024, 2024, 2025, 2026, 2027, 2028, 2033, 2020, 2029, 2029,
     2037, 2021, 2030, 2030, 2024, 2031, 2031, 2032, 2032, 2034,
     2034, 2038, 2029, 2035, 2035, 2036, 2036, 2039, 2039, 2031,
     2040, 2040, 2041, 2034, 2042, 2042, 2043, 2044, 2045, 2045,
     2046, 2047, 2039, 2048, 2049, 2050, 2050, 2051, 2051, 2042,

     2052, 2052, 2054, 2045, 2053, 2053, 2055, 2056, 2056, 2058,
     2050, 2057, 2057, 2059, 2060, 2052, 2061, 2062, 2063, 2065,
     2066, 2067, 2056, 2068, 2069, 2070, 2071, 2071, 2072, 2072,
     2073, 2075, 2076, 2077, 2077, 2078, 2078, 2079, 2079, 2080,
     2080, 2071, 2081, 2081, 2082, 2083, 2083, 2077, 2084, 2084,
     2085, 2079, 2086, 2087, 2088, 2091, 2081, 2089, 2089, 2083,
     2090, 2090, 2092, 2092, 2093, 2094, 2095, 2095, 2096, 2097,
     2097, 2098, 2098, 2099, 2099, 2100, 2101, 2101, 2102, 2102,
     2103, 2104, 2105, 2106, 2097, 2107, 2107, 2109, 2099, 2108,
     2108, 2101, 2110, 2111, 2111, 2112, 2112, 2113, 2113, 2114,

     2115, 2116, 2118, 2119, 2120, 2121, 2122, 2123, 2111, 2124,
     2125, 2125, 2113, 2126, 2128, 2129, 2129, 2130, 2130, 2131,
     2131, 2132, 2132, 2133, 2133, 2134, 2134, 2135, 2136, 2137,
     2137, 2138, 2139, 2131, 2140, 2140, 2146, 2133, 2141, 2141,
     2142, 2142, 2148, 2137, 2143, 2143, 2144, 2144, 2140, 2145,
     2145, 2149, 2141, 2147, 2147, 2142, 2150, 2151, 2152, 2153,
     2158, 2144, 2154, 2154, 2155, 2155, 2156, 2156, 2157, 2157,
     2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2155,
     2168, 2169, 2169, 2157, 2170, 2170, 2171, 2171, 2172, 2173,
     2174, 2174, 2175, 2175, 2176, 2177, 2177, 2185, 2170, 2178,

     2178, 2179, 2179, 2186, 2174, 2180, 2180, 2181, 2181, 2177,
     2182, 2182, 2187, 2178, 2183, 2183, 2184, 2184, 2188, 2180,
     2189, 2190, 2191, 2192, 2192, 2182, 2193, 2193, 2194, 2194,
     2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
     2205, 2193, 2206, 2206, 2207, 2208, 2209, 2209, 2210, 2211,
     2211, 2212, 2212, 2213, 2213, 2214, 2214, 2215, 2215, 2216,
     2217, 2218, 2220, 2211, 2219, 2219, 2221, 2222, 2223, 2223,
     2224, 2225, 2226, 2227, 2230, 2232, 2233, 2234, 2235, 2219,
     2236, 2237, 2238, 2238, 2239, 2240, 2240, 2241, 2241, 2242,
     2242, 2243, 2243, 2244, 2245, 2245, 2219, 2246, 2247, 2248,

     2240, 2249, 2241, 2250, 2242, 2252, 2253, 2255, 2256, 2245,
     2257, 2258, 2259, 2259, 2260, 2260, 2261, 2261, 2262, 2262,
     2263, 2263, 2264, 2264, 2265, 2266, 2266, 2259, 2268, 2260,
     2267, 2267, 2270, 2262, 2269, 2269, 2271, 2272, 2273, 2274,
     2266, 2275, 2276, 2277, 2278, 2279, 2279, 2280, 2280, 2269,
     2281, 2281, 2282, 2282, 2283, 2284, 2284, 2285, 2286, 2286,
     2279, 2287, 2287, 2288, 2289, 2289, 2290, 2290, 2291, 2292,
     2293, 2294, 2295, 2286, 2296, 2297, 2297, 2298, 2299, 2289,
     2301, 2290, 2300, 2300, 2302, 2302, 2303, 2303, 2304, 2304,
     2305, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2302,

     2313, 2314, 2318, 2304, 2315, 2315, 2316, 2316, 2320, 2321,
     2322, 2322, 2323, 2323, 2324, 2325, 2325, 2326, 2327, 2328,
     2328, 2329, 2329, 2333, 2322, 2330, 2330, 2323, 2331, 2331,
     2325, 2332, 2332, 2328, 2336, 2329, 2334, 2334, 2335, 2335,
     2337, 2337, 2342, 2331, 2338, 2338, 2339, 2339, 2340, 2340,
     2344, 2334, 2341, 2341, 2337, 2343, 2343, 2348, 2338, 2345,
     2345, 2346, 2346, 2347, 2347, 2350, 2350, 2351, 2351, 2352,
     2352, 2353, 2353, 2345, 2354, 2354, 2364,  712,  711,  710,
      709,  708, 2351,  707, 2352, 2356, 2356, 2356, 2356, 2356,
     2356, 2357, 2357, 2357, 2357, 2357, 2357, 2358, 2358, 2358,

     2358, 2358, 2358, 2359, 2359, 2359, 2359, 2359, 2359, 2360,
     2360, 2360, 2360, 2360, 2360, 2361, 2361, 2361, 2361, 2361,
     2361, 2362, 2362, 2362, 2362, 2362, 2362, 2363, 2363, 2363,
     2363, 2363, 2363, 2365, 2365, 2365, 2365, 2365, 2366, 2366,
      706, 2366, 2366, 2366, 2367, 2367, 2367,  705, 2367, 2367,
     2368, 2368, 2368, 2368,  704, 2368,  703,  702,  701,  700,
      699,  698,  696,  695,  694,  693,  692,  691,  689,  688,
      685,  684,  683,  682,  680,  679,  678,  677,  676,  675,
      672,  671,  667,  666,  665,  661,  660,  659,  658,  657,
      651,  650,  649,  647,  646,  645,  644,  643,  642,  641,

      640,  639,  638,  637,  633,  632,  631,  630,  629,  627,
      624,  623,  621,  620,  619,  618,  616,  615,  611,  610,
      609,  608,  607,  606,  603,  602,  601,  600,  598,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  570,  569,  568,  566,  564,  563,  562,  561,  560,
      556,  554,  553,  552,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  537,  536,  535,  534,
      533,  532,  529,  528,  526,  525,  524,  523,  520,  519,
      517,  515,  514,  513,  510,  506,  505,  504,  503,  502,

      501,  500,  496,  495,  494,  493,  492,  491,  489,  488,
      486,  485,  484,  483,  482,  479,  478,  476,  475,  474,
      473,  472,  468,  467,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  451,  450,  449,  448,  444,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  431,  430,  429,
      428,  427,  426,  424,  423,  422,  421,  420,  417,  415,
      414,  413,  412,  411,  410,  409,  407,  406,  405,  404,
      403,  402,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  390,  389,  388,  386,  385,  384,  383,  382,  381,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,

      368,  366,  365,  364,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  350,  349,  348,  346,  344,  343,
      342,  341,  340,  339,  337,  336,  334,  330,  329,  328,
      327,  326,  325,  324,  323,  320,  319,  318,  317,  313,
      311,  310,  309,  308,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  267,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  255,  254,  253,  251,  250,  249,  248,  247,  246,

      245,  243,  242,  241,  240,  238,  237,  236,  234,  232,
      231,  230,  227,  226,  225,  224,  223,  222,  221,  220,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  201,  200,  199,  198,  197,
      196,  195,  192,  191,  190,  189,  188,  187,  185,  184,
      183,  181,  180,  179,  178,  177,  176,  175,  173,  172,
      171,  170,  168,  167,  166,  165,  164,  162,  161,  160,
      158,  156,  154,  151,  149,  148,  146,  145,  142,  140,
      139,  136,  134,  132,  131,  129,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  117,  116,  115,  114,  113,

      112,  111,  110,  109,  107,  102,  101,   99,   97,   95,
       92,   90,   89,   87,   86,   83,   81,   78,   71,   70,
       66,   65,   60,   59,   58,   57,   55,   54,   53,   49,
       44,   41,   32,   31,   27,   24,   22,   19,   14,   13,
        8,    7,    6,    5,    4,    3, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[311] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 104 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2163 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 114 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2419 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2356 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3647 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 117 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 121 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 142 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 299:
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 303:
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4393 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2356 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2356 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2355);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"





