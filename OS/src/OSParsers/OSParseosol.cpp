#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 388
#define YY_END_OF_BUFFER 389
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2886] =
    {   0,
        1,    1,  386,  386,  384,  384,  385,  385,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  389,  387,
        1,    2,  374,    2,  374,    6,  374,    5,  387,    4,
      374,  374,    2,  386,  388,  384,  385,  375,  377,  378,
      377,  381,  382,  381,    1,  374,  374,    6,  374,    5,
        0,    4,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
        3,    6,    6,  374,    7,    5,    0,    0,  380,  368,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        4,  374,  374,  386,  384,  385,  375,    0,  383,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  370,    0,    0,    0,    0,    0,    0,    0,    0,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  324,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  379,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  376,
        0,  369,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  232,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  354,    0,    0,    0,    0,
        0,    0,    0,  114,    0,    0,    0,  338,    0,    0,
        0,    0,    0,    0,    0,  224,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      216,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  218,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,   29,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,   96,

       97,  374,  374,  374,  374,  374,  374,  374,  374,  369,
        0,  371,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  153,    0,    0,
        0,    0,    0,    0,    0,  355,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  339,    0,    0,
        0,    0,    0,    0,  325,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  350,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  346,    0,    0,

        0,    0,    0,    0,    0,  352,    0,  348,    0,    0,
      354,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  338,    0,    0,  356,    0,    0,  358,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  164,    0,    0,    0,    0,    0,    0,
        0,    0,  344,    0,    0,    0,    0,    0,    0,  360,
        0,    0,    0,  154,    0,    0,    0,    0,    0,  374,
      374,  374,  321,  374,  374,  374,  374,  374,  374,  374,
      374,   29,  374,  100,  374,  374,  374,  374,  374,  101,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  371,
        0,  351,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  233,    0,    0,    0,  347,    0,    0,    0,    0,
      153,    0,    0,    0,  353,    0,  349,    0,    0,  355,
        0,    0,    0,    0,    0,    0,    0,    0,  115,    0,
        0,    0,  339,    0,    0,  357,    0,    0,  359,    0,
        0,    0,    0,    0,    0,  325,    0,    0,    0,    0,
      225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  345,    0,    0,  217,
        0,    0,    0,    0,    0,  361,    0,    0,    0,    0,

        0,    0,    0,  219,    0,    0,    0,  350,    0,    0,
        0,    0,    0,    0,  198,  264,    0,    0,    0,  346,
        0,    0,    0,    0,    0,    0,  352,  348,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
      126,    0,    0,    0,  356,    0,  358,    0,    0,    0,
        0,    0,    0,  301,    0,    0,    0,    0,    0,    0,
        0,  104,  103,  140,    0,    0,    0,    0,  330,    0,
        0,    0,    0,    0,    0,    0,  344,    0,    0,    0,
        0,  282,  360,    0,    0,    0,    0,    0,    0,    0,
        0,  374,  374,  321,  374,  374,  374,  374,  374,  374,

       94,   95,  374,  100,  374,  374,  374,  374,  101,  374,
       58,   59,  374,  374,  374,  374,  374,  374,  374,  374,
      374,   70,   71,  374,  374,  374,   80,   81,  374,  374,
      374,  374,  351,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  233,    0,    0,  347,    0,    0,    0,    0,
        0,    0,  353,  349,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  298,  115,    0,    0,    0,    0,
      357,    0,  359,    0,    0,    0,    0,    0,  302,    0,
        0,    0,    0,  225,    0,    0,    0,    0,  105,    0,
        0,    0,    0,  165,    0,    0,  331,    0,    0,    0,

        0,    0,    0,    0,  345,    0,  217,    0,    0,    0,
        0,  361,    0,    0,    0,    0,  155,    0,    0,  219,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  206,
      299,  297,    0,    0,    0,    0,  258,    0,    0,    0,
        0,    0,  332,  303,  301,    0,    0,    0,    0,  366,
        0,    0,    0,    0,    0,    0,    0,  330,    0,  336,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  110,    0,  326,    0,    0,  294,    0,    0,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,   56,   57,  374,  374,  374,  374,  102,  374,  374,
      374,   30,  374,  374,   68,   69,  374,  374,   78,   79,
      374,   84,   85,  374,  374,  374,    0,    0,    0,    0,
        0,    0,    0,  199,    0,  265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  298,    0,  127,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  333,
      302,    0,    0,    0,    0,    0,    0,    0,  105,    0,
      141,    0,    0,    0,  165,    0,  331,    0,  337,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      283,    0,    0,    0,  327,  155,    0,    0,    0,    0,
        0,    0,    0,  200,  202,    0,    0,    0,    0,    0,
      136,    0,    0,    0,    0,  328,    0,    0,    0,    0,
      108,  286,    0,    0,    0,    0,    0,  299,    0,    0,
      130,    0,  156,    0,    0,    0,    0,  332,  303,    0,
        0,  334,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  336,  188,    0,    0,    0,    0,  112,    0,
        0,    0,    0,    0,  305,    0,  342,    0,    0,  326,
      210,    0,    0,    0,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  102,  374,   66,   67,   30,  374,  374,  374,
      374,  374,   82,   83,  374,  374,  374,   92,   93,    0,
        0,    0,    0,    0,    0,  199,  265,    0,  263,    0,
        0,    0,    0,    0,    0,    0,    0,  329,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      207,  127,    0,    0,    0,    0,  259,    0,    0,    0,
        0,    0,  333,    0,  335,    0,    0,    0,  367,    0,
        0,    0,  141,    0,    0,    0,    0,    0,  337,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  306,

        0,  343,    0,  283,    0,    0,  111,  327,    0,    0,
        0,  295,    0,    0,    0,  362,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  328,  266,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  317,    0,    0,    0,    0,    0,
        0,  334,    0,  284,    0,    0,    0,    0,    0,    0,
      134,  176,    0,    0,  364,    0,    0,    0,    0,    0,
        0,    0,    0,  307,  305,    0,  342,    0,    0,  132,
        0,  372,  374,  374,  374,  374,   40,   41,  374,  253,
      374,  374,  374,  374,  374,  374,  374,   52,   53,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,   62,   63,  374,   64,   65,  374,  374,  374,
      374,   76,   77,  374,   88,   89,   90,   91,    0,  363,
        0,    0,  201,    0,  203,    0,    0,  263,    0,    0,
        0,    0,  137,    0,    0,    0,  329,    0,    0,    0,
        0,    0,    0,  109,    0,    0,  287,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  207,    0,  318,    0,
      131,    0,  259,    0,  157,    0,    0,    0,    0,  335,
        0,    0,  367,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  189,    0,    0,  365,    0,    0,    0,    0,

      113,    0,    0,    0,    0,    0,  306,  343,    0,    0,
      111,    0,  211,    0,  295,    0,    0,  362,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  319,  317,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      307,    0,    0,    0,    0,  190,  374,  374,   36,   37,
       38,   39,  253,  374,  374,   48,   49,  374,  374,  374,
       50,   51,  374,  374,   98,   99,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,   60,
       61,  374,  374,  374,  374,   74,   75,   86,   87,  363,
        0,  201,  203,    0,    0,    0,    0,    0,  137,    0,
        0,    0,    0,  267,    0,    0,    0,    0,  109,    0,
      287,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  318,  131,    0,  157,    0,    0,    0,    0,    0,
        0,  285,    0,    0,    0,    0,    0,    0,    0,  135,
        0,  177,  189,    0,  365,    0,    0,    0,    0,  113,
        0,    0,    0,    0,    0,    0,    0,  211,    0,  133,
        0,    0,  373,    0,  204,    0,  260,  290,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  319,
        0,    0,    0,    0,    0,    0,    0,    0,  220,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  292,    0,
      118,    0,    0,    0,    0,    0,  208,    0,  374,  374,
      374,   34,   35,  374,   46,   47,  374,  374,  374,  374,
      374,  374,   10,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  267,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
        0,    0,    0,    0,    0,    0,  135,  177,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      133,    0,  373,    0,  191,    0,    0,  228,    0,    0,
        0,  240,    0,    0,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
      340,    0,  374,  374,  374,  374,  374,  374,  374,   31,
      374,   32,  374,  374,   25,  374,   10,  374,  374,  374,

      374,  374,   23,  374,  374,  374,  374,  374,   21,  374,
      374,   20,  374,  374,  374,  374,  374,  374,   33,    0,
      205,    0,    0,  261,    0,  291,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  221,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  293,    0,    0,  119,    0,    0,
        0,    0,  341,    0,  209,    0,  191,    0,    0,  160,
        0,    0,  309,    0,    0,    0,  313,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  122,    0,    0,

      296,    0,    0,  148,  142,    0,    0,  300,    0,  116,
      106,  138,    0,    0,    0,    0,    0,    0,  238,    0,
        0,    0,  340,    0,  374,  374,  374,  374,   44,   45,
      374,   31,   32,  374,  374,   25,  374,  374,  374,  374,
      374,   23,  374,  374,  374,  374,  374,   21,  374,   20,
      374,  374,  374,  374,  374,   33,  205,    0,  261,  291,
        0,    0,  229,    0,    0,  310,    0,    0,  241,    0,
      314,    0,    0,  171,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
        0,    0,  221,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  293,    0,  121,  119,    0,    0,    0,  341,
      209,    0,    0,    0,  311,  309,    0,    0,  315,  313,
        0,  184,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  296,    0,    0,  144,  300,    0,    0,    0,
        0,    0,    0,  166,  236,    0,    0,    0,    0,  374,
      374,  374,  242,  374,   42,   43,  374,  374,   55,   54,
      374,  374,  374,   13,  374,  374,  374,  374,  374,  374,
      374,  374,   12,  374,  374,  374,  374,  374,  374,  374,
      374,    0,    0,  229,    0,  161,  310,    0,  241,  314,
        0,  171,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  123,    0,    0,    0,  149,  147,    0,  143,
        0,    0,    0,  117,    0,  107,    0,  139,    0,    0,
        0,    0,    0,    0,  121,    0,  239,    0,    0,    0,
        0,    0,    0,  311,    0,    0,    0,  315,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      276,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,  374,  374,  242,  374,  374,  374,  374,   13,  374,
        9,  374,  374,  374,  374,  374,  374,  374,   12,  374,
      374,  374,  252,  374,  374,  374,  374,   73,   72,    0,
        0,  161,    0,    0,    0,  185,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  123,    0,    0,  149,  143,
        0,  145,    0,  117,  107,  139,    0,    0,    0,    0,
        0,    0,  167,  239,    0,  237,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  278,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  186,
        0,    0,    0,    0,    0,  374,  374,  374,  374,  374,
      374,  374,    9,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  252,  374,  374,  374,    0,    0,    0,    0,
      185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  277,  145,    0,    0,    0,    0,    0,    0,

      167,  237,    0,  129,    0,    0,  150,  268,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  174,  124,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  304,
        0,  374,  248,  374,  247,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  249,  374,    0,    0,    0,    0,    0,  279,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  277,    0,
        0,    0,    0,  187,    0,    0,  129,    0,    0,    0,
        0,  168,    0,    0,    0,  234,    0,    0,    0,    0,
        0,    0,    0,    0,  180,    0,    0,    0,  304,    0,

      248,  247,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,   14,  374,   15,  374,  374,   16,
      249,  374,  374,    0,  151,    0,  269,    0,    0,  279,
        0,    0,    0,    0,    0,    0,    0,    0,  175,    0,
      125,    0,    0,    0,    0,  187,    0,    0,    0,    0,
        0,    0,    0,  196,    0,    0,    0,    0,    0,    0,
        0,  316,    0,    0,  158,    0,    0,    0,  374,  246,
      374,  245,  374,  374,  374,  374,  374,   17,  374,  374,
      374,  374,   14,   15,  374,   16,  374,  374,  151,  269,
        0,    0,  169,    0,    0,    0,  235,    0,    0,    0,

        0,  175,  125,    0,    0,    0,    0,  181,    0,    0,
        0,    0,    0,  182,    0,    0,    0,    0,    0,    0,
        0,  316,    0,    0,  162,    0,    0,  246,  245,  374,
      374,  374,   18,  374,  374,   17,  374,  374,  374,  374,
      374,  374,  374,    0,  169,    0,  197,    0,  235,    0,
        0,    0,    0,    0,    0,    0,  181,    0,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      322,    0,    0,  270,  374,  256,  257,   18,  374,   11,
      374,  374,  374,  374,    8,  374,  374,  374,  244,  374,
      243,    0,  183,  197,    0,    0,    0,    0,    0,    0,

        0,    0,  159,    0,  163,    0,    0,    0,    0,    0,
        0,    0,  192,    0,    0,    0,    0,  254,  255,   11,
      374,  374,  374,    8,  374,  374,   26,  244,  243,  183,
        0,    0,    0,    0,    0,    0,    0,  323,    0,  163,
        0,    0,  271,    0,    0,    0,  226,  222,    0,  172,
        0,    0,    0,  374,  374,  374,  374,   26,    0,    0,
        0,    0,  193,    0,    0,    0,  323,    0,    0,  271,
        0,    0,  230,    0,    0,  178,    0,  374,  374,  374,
      374,    0,    0,  227,    0,  223,  193,    0,    0,  173,
        0,    0,    0,    0,    0,    0,    0,    0,  374,  374,

      374,  374,    0,  231,  227,  223,    0,  173,    0,    0,
      179,    0,    0,    0,    0,    0,    0,  374,  374,  374,
      374,  231,    0,    0,  179,    0,    0,  308,    0,  312,
        0,    0,    0,  374,  374,  374,  374,    0,    0,    0,
      308,  312,  194,    0,  214,  374,  374,  374,  374,    0,
        0,    0,    0,  374,  320,  374,  374,  374,   19,    0,
      195,    0,    0,  215,    0,  320,  374,  374,   22,   19,
      195,    0,  215,    0,  374,   24,   22,    0,  212,   24,
        0,    0,  213,  213,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,   39,    6,    6,
        1,    6,    1,    1,    6,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2898] =
    {   0,
        0,   66, 4586, 4585, 4596, 4595, 4592, 4591,    0,    0,
        0,    0, 4582, 4581,   13,   17,    3,    5, 4595, 4604,
      131, 4589,  195, 4586,   19,   38, 4575,   43,  254,   25,
     4561, 4550, 4604,    0, 4604,    0,    0,    0, 4604, 4604,
     4580, 4604, 4604, 4571,    0,    0,   24,   86, 4570,   91,
       43,   40, 4556, 4545, 4544,    8, 4539,    1, 4525, 4524,
       42,   18,   46,   50, 4539,   67,   62,   70, 4539, 4534,
     4604,  115,  220,  205, 4604,  122, 4568,  294, 4604, 4604,
     4551,  170,   23, 4521,   83,  210, 4526, 4529,  221, 4518,
       44,   72,  231,  229,  270,   84,  312,  151,  173, 4531,

      198, 4547, 4539,    0,    0,    0,    0, 4551, 4604, 4509,
     4507,  191, 4507, 4504, 4521, 4508, 4507, 4497, 4517,  231,
     4516, 4507, 4505, 4503, 4502, 4504, 4512, 4486,   56, 4493,
      200, 4509, 4493,  241, 4499,  173, 4498,  305,  361, 4536,
      327, 4519,  218,  241, 4489,  284,  326, 4494, 4497,  333,
     4486,  197,  253,  344,  341,  354,  279,  358,  256,  304,
     4499, 4604, 4480, 4486,  385, 4478, 4481,  372,  267,  304,
     4490, 4473, 4487, 4476, 4479, 4476,  407,  383, 4505, 4483,
     4485,  316,  417,  322, 4472, 4472, 4477, 4604, 4469, 4469,
     4471, 4460, 4464, 4470, 4457,  169, 4455, 4452, 4459, 4456,

     4449, 4453, 4456,  377, 4448, 4467,  315, 4448, 4453, 4449,
     4453, 4458, 4444,  413, 4604, 4456, 4455, 4453,    0, 4455,
     4444, 4444, 4442, 4433,  430, 4435, 4431, 4450, 4449, 4444,
     4428, 4442, 4444, 4449, 4432, 4438, 4420, 4455, 4433,  437,
      442, 4425, 4433, 4416, 4435, 4415, 4413, 4437, 4425, 4604,
      448,  452,  454, 4412, 4418,  430, 4410, 4413,  409,  332,
      336,  461, 4406, 4420, 4409, 4412, 4409,  466,  427, 4438,
     4416, 4418,  406,  470,  417, 4405, 4405, 4410,  486, 4402,
     4402, 4404, 4393, 4397, 4403, 4390,  432, 4388, 4385, 4392,
     4389, 4382, 4386, 4389,  441, 4381, 4400,  422, 4381, 4386,

     4382, 4386, 4391, 4377,  491, 4412, 4376, 4377, 4375,  452,
     4387, 4397,  439,  504, 4383, 4384, 4381, 4376, 4371, 4370,
      507,  509, 4377, 4376,  511,  513, 4375, 4359, 4357, 4357,
     4371, 4357, 4361, 4387, 4367, 4366,  515,  517, 4352,  520,
      527, 4364, 4367,   71, 4365, 4361, 4356, 4352, 4358, 4346,
     4342, 4352, 4340, 4353,  491, 4336, 4364, 4333,  533, 4332,
     4355, 4334, 4350, 4332,  536, 4344, 4328, 4342, 4341, 4331,
     4326,  516, 4353, 4335,  543, 4316, 4320, 4321, 4342, 4316,
      549, 4320,  555,  540,  558, 4334, 4322, 4313, 4351,  560,
      564, 4326, 4305, 4328, 4336, 4322, 4322, 4320,  570, 4604,

     4604, 4305,  566, 4322, 4310,  576, 4316, 4295, 4311,  581,
      583,  586,  588, 4336, 4300, 4301, 4299,  483, 4311, 4321,
      591,  593, 4307, 4308, 4305, 4300,  595,  599, 4295, 4294,
      601,  604, 4301, 4300,  611,  613, 4299, 4283, 4281, 4281,
     4295, 4281, 4285,  617, 4292, 4291,  620,  622, 4277,  624,
      627, 4289, 4292,  629,  633,  378, 4290,  636, 4282, 4278,
     4284, 4272, 4268, 4278, 4266, 4279,  609, 4262, 4290, 4259,
      652, 4258,  655, 4261, 4277, 4259,  658, 4271, 4255, 4269,
     4268, 4258, 4253,  660,  662,  664, 4261, 4248, 4245, 4251,
       10, 4263, 4254, 4258, 4243, 4261,  671,  668, 4247, 4242,

     4256, 4254, 4252, 4251,  679,  681,  687,  692,  482, 4237,
      695, 4230, 4244, 4232, 4250, 4243, 4244,  698, 4266, 4233,
     4245,  700, 4236,  703,  708, 4235,  710,  714, 4250, 4233,
     4236, 4221,  719, 4219, 4229, 4232, 4231, 4232,  427,  716,
     4216, 4212, 4209, 4238,  721, 4212, 4224, 4207,  681, 4221,
     4217,  729,  732, 4220, 4223, 4220, 4204, 4201,  737,  739,
     4202, 4214, 4199, 4604, 4202, 4225, 4211, 4209, 4212, 4211,
     4196,  741,  745, 4194, 4208, 4199, 4182, 4202,  747,  753,
     4206,  749,  759,  762, 4192, 4182, 4193, 4186,  764,  766,
      768,  771, 4182, 4183, 4180, 4191, 4178, 4171, 4174, 4177,

      779,  783, 4180, 4170,  789,  791,  797, 4174, 4169,  799,
      801,  804, 4179, 4166, 4163, 4169,  662, 4181, 4172, 4176,
      806,  808, 4161, 4179,  812,  814, 4165, 4160, 4174, 4172,
      817, 4170, 4169,  819,  822,  824,  828,  620, 4155,  830,
     4148, 4162, 4150, 4168, 4161, 4162,  832,  835,  837, 4184,
     4151, 4163,  840, 4154,  842,  844, 4153,  848,  851, 4168,
     4151, 4154, 4139,  853, 4137,  855, 4147, 4150, 4149,  858,
      860, 4150,  557,  864, 4134, 4130, 4127,  866,  869, 4131,
     4143, 4126,  735, 4140, 4136,  871,  874, 4139,  876,  882,
     4142, 4139, 4123, 4120,  887,  889, 4121, 4133, 4118,  892,

     4121, 4144,  894,  897, 4152, 4128, 4131,  899, 4125, 4129,
     4124, 4123, 4153, 4125, 4604, 4106, 4118,  688, 4120,  903,
     4118, 4112, 4100, 4114, 4104, 4099,  905,  910, 4098, 4119,
     4113, 4108, 4111,  622, 4097, 4105, 4104,  912, 4130,  915,
     4604,  512, 4089, 4082,  917, 4092,  919, 4107, 4084, 4089,
      922,  924, 4123,  929, 4095, 4085, 4080, 4079, 4076, 4086,
     4080,  931, 4604, 4101, 4072, 4076, 4089,  934,  940,  943,
     4070, 4085, 4068, 4068, 4079, 4081,  947, 4065, 4064, 4076,
     4075, 4604,  950, 4077, 4065,  952, 4054, 4075, 4050, 4062,
     4060, 3995, 3995,  954, 4007, 3997, 3994, 3993, 3998,  956,

     4604, 4604,   85,  962,  112,  207,  206,  228,  964,  968,
      285,  324,  310,  306,  330,  974,  976,  978,  351,  349,
      980,  422,  429,  424,  440,  986,  490,  497,  993,  995,
      481, 1001, 1003,  536,  559,  573,  589,  655,  646, 1005,
     1008,  654, 1010,  732,  665, 1012,  671,  678,  678,  709,
      706,  720, 1016, 1018,  730,  762,  772,  784,  808,  859,
      811,  843,  859, 1021, 1024, 1026, 1028,  926,  853,  853,
     1030,  876, 1032,  902,  882,  895, 1034, 1037, 1039,  918,
      919,  917,  929, 1041,  940,  953,  963, 1044, 1046, 1050,
      991, 1001, 1054, 1056, 1020, 1060, 1062, 1066, 1012, 1030,

     1015, 1017, 1030, 1034, 1076, 1023, 1082, 1025, 1042, 1043,
     1086, 1088, 1051, 1041, 1092, 1094, 1096, 1038, 1061, 1102,
     1063, 1061, 1066, 1063, 1059, 1055, 1056, 1095, 1056, 4604,
     1058, 1064, 1078, 1060, 1076, 1066, 1068, 1121, 1066, 1086,
     1083, 1074, 1078, 1072, 1080, 1084, 1085, 1092, 1078, 4604,
     1134, 1137, 1130, 1098, 1099, 1122, 4604, 1101, 1116, 1097,
     1094, 1151, 1153, 1155, 1157, 1138, 1159, 1107, 1109, 4604,
     1116, 1100, 1142, 1112, 1148, 1113, 1125, 1172, 1175, 1177,
     1123, 1123, 1124, 1140, 1127, 1142, 1156, 1140, 1187, 1191,
     1155, 4604, 1194, 1197, 1148, 1150, 4604, 1159, 1154, 1149,

     1143, 1207, 1153, 1154, 1170, 1193, 1168, 1177, 1216, 1167,
     1157, 4604, 4604, 1177, 1223, 1167, 1226, 1228, 1231, 1233,
     1241, 1243, 1197, 1184, 4604, 4604, 1208, 1247, 4604, 4604,
     1249, 1248, 1248, 1256, 1258, 1262, 1217, 1215, 1211, 1213,
     1252, 1214, 1273, 1275, 1277, 1279, 1281, 1227, 1233, 1247,
     1229, 1245, 1236, 1238, 1293, 1234, 1257, 1255, 1246, 1250,
     1244, 1252, 1256, 1257, 1264, 1250, 1306, 1309, 1311, 1313,
     1273, 1274, 1297, 1318, 1278, 1295, 1274, 1272, 1328, 1330,
     1334, 1336, 1283, 1280, 1338, 1294, 1278, 1320, 1344, 1346,
     1348, 1297, 1333, 1300, 1356, 1312, 1359, 1362, 1364, 1310,

     1310, 1311, 1327, 1314, 1329, 1343, 1327, 1374, 1378, 1380,
     1382, 1346, 1385, 1387, 1390, 1396, 1341, 1344, 1398, 1359,
     1354, 1404, 1360, 4604, 4604, 1361, 1353, 1368, 1354, 1366,
     4604, 1363, 1358, 1361, 1417, 1420, 1366, 1366, 1386, 1406,
     1406, 4604, 1410, 1375, 1382, 1392, 1400, 1436, 1392, 1440,
     4604, 1393, 4604, 1385, 1391, 1414, 1392, 1450, 1452, 1397,
     1456, 1458, 1416, 1404, 1402, 1424, 1421, 1407, 1419, 1420,
     1426, 1413, 1469, 1430, 1473, 1433, 1435, 1435, 1450, 1426,
     1428, 1443, 1482, 1470, 1486, 1489, 1492, 1442, 1439, 1500,
     4604, 1454, 1443, 1460, 1457, 1505, 1507, 1509, 1515, 1465,

     1517, 1464, 1476, 1473, 1523, 1525, 1494, 1532, 1520, 1553,
     1556, 1485, 1535, 1563, 1536, 1536, 1569, 1485, 1488, 1498,
     1571, 1573, 4604, 4604, 1579, 1581, 1587, 1548, 1553, 1594,
     1514, 1596, 1598, 1516, 1510, 1600, 1602, 1604, 1606, 1533,
     1520, 1537, 1614, 1538, 1534, 1553, 1616, 1620, 1554, 1555,
     1580, 1603, 1623, 1625, 1615, 1572, 1579, 1593, 1601, 1641,
     1645, 1647, 1651, 1653, 1588, 1657, 1659, 1661, 1581, 1596,
     1623, 1608, 1664, 1669, 1673, 1629, 1615, 1677, 1679, 1616,
     1643, 1640, 1685, 1626, 1641, 1642, 1648, 1635, 1693, 1695,
     1697, 1649, 1658, 1658, 1701, 1650, 1652, 1667, 1706, 1708,

     1713, 1717, 1659, 1719, 1659, 1723, 1725, 1730, 1732, 1680,
     1739, 1741, 1672, 1692, 1743, 1745, 1679, 1697, 1703, 1693,
     1731, 1701, 1713, 1709, 1710, 1759, 4604, 1711, 1704, 1720,
     1725, 1715, 1727, 1714, 1709, 1729, 1731, 1728, 1729, 1746,
     1735, 1718, 1776, 1763, 1779, 1739, 1732, 1741, 1731, 1724,
     1749, 1788, 1735, 4604, 1751, 1737, 1757, 1750, 1742, 1749,
     4604, 4604, 1743, 1800, 1802, 1763, 1786, 1749, 1770, 1778,
     1753, 1788, 1773, 1813, 1816, 1809, 1819, 1769, 1776, 4604,
     1781, 1768, 1764, 1826, 1830, 1836, 1825, 1827, 1842, 1844,
     1782, 1846, 1848, 1796, 1805, 1794, 1854, 1855, 1856, 1800,

     1863, 1865, 1815, 1820, 1815, 1821, 1822, 1836, 1840, 1847,
     1841, 1880, 1879, 1879, 1829, 4604, 4604, 1832, 1855, 1831,
     1891, 1887, 1892, 1900, 1895, 1897, 4604, 4604, 1906, 1908,
     1847, 1910, 1912, 1914, 1916, 1867, 1873, 1922, 1863, 1904,
     1875, 1927, 1930, 1892, 1887, 1888, 1935, 1937, 1893, 1883,
     1899, 1905, 1944, 1946, 1899, 1949, 1953, 1913, 1903, 1898,
     1918, 1920, 1918, 1919, 1937, 1924, 1966, 1968, 1970, 1972,
     1974, 1934, 1977, 1979, 1981, 1934, 1943, 1933, 1926, 1989,
     1936, 1992, 1995, 1955, 1941, 1961, 1954, 1946, 1953, 2003,
     2005, 2008, 2010, 1956, 2013, 2015, 1976, 2000, 1965, 2024,

     2026, 1991, 1999, 1974, 2009, 1994, 2034, 2036, 1986, 1994,
     2041, 2043, 2045, 2047, 2049, 2009, 2052, 2054, 1994, 2019,
     1998, 2004, 2012, 2006, 2018, 2013, 2024, 2016, 2017, 2021,
     2023, 2030, 2017, 2023, 2037, 2029, 2022, 2038, 2023, 2028,
     2043, 2027, 2041, 2084, 2086, 2079, 2039, 2051, 2049, 2054,
     2061, 2044, 2075, 2040, 2051, 2057, 2048, 2059, 2060, 2070,
     2104, 2074, 2061, 2063, 2054, 2061, 2089, 2067, 2063, 2066,
     2116, 2062, 2062, 2080, 2070, 4604, 2102, 2123, 2124, 2124,
     4604, 4604, 2130, 2081, 2135, 2130, 2132, 2089, 2084, 2100,
     4604, 4604, 2090, 2144, 4604, 4604, 2095, 2150, 2090, 2110,

     2114, 2103, 2108, 2111, 2100, 2106, 2127, 2111, 2106, 4604,
     4604, 2116, 2117, 2103, 2124, 4604, 4604, 4604, 4604, 2167,
     2107, 2170, 2172, 2136, 2114, 2120, 2128, 2121, 2179, 2135,
     2130, 2141, 2184, 2186, 2136, 2137, 2141, 2143, 2192, 2152,
     2195, 2141, 2147, 2162, 2154, 2147, 2163, 2148, 2153, 2168,
     2152, 2208, 2210, 2162, 2213, 2176, 2174, 2179, 2186, 2199,
     2220, 2222, 2168, 2179, 2185, 2175, 2186, 2187, 2230, 2232,
     2236, 2238, 2240, 2201, 2242, 2212, 2200, 2201, 2192, 2249,
     2202, 2230, 2208, 2204, 2207, 2200, 2218, 2259, 2261, 2263,
     2214, 2266, 2268, 2270, 4604, 2217, 4604, 4604, 2231, 2218,

     2233, 2226, 2222, 2228, 2225, 2240, 2241, 2234, 2240, 2231,
     2239, 2247, 2244, 2234, 2259, 2253, 2244, 2249, 2246, 2297,
     2250, 2258, 2259, 2261, 2263, 2258, 2263, 2245, 4604, 2255,
     2266, 2258, 2270, 2255, 2260, 2256, 2259, 2266, 4604, 2274,
     4604, 2265, 2259, 2277, 2268, 2321, 4604, 2283, 2273, 2284,
     2269, 4604, 4604, 2327, 4604, 4604, 2287, 2330, 2332, 2292,
     2337, 2339, 2342, 2285, 2295, 2324, 2299, 2349, 2310, 2309,
     2315, 2356, 2299, 2359, 2308, 2301, 2311, 2365, 2368, 2312,
     2371, 2374, 2334, 2321, 2336, 2329, 2325, 2384, 2336, 2333,
     2348, 2350, 2344, 2349, 2340, 2348, 2356, 2353, 2343, 2368,

     2362, 2353, 2358, 2364, 2365, 2367, 2369, 2364, 2350, 2412,
     2414, 2364, 2375, 2367, 2379, 2364, 2421, 2423, 2373, 2369,
     2372, 2379, 2430, 2390, 2433, 2383, 2377, 2395, 2438, 2440,
     2442, 2404, 2446, 2449, 2451, 2392, 2406, 4604, 2401, 2458,
     2427, 4604, 2461, 2406, 4604, 2423, 2410, 2411, 2434, 2431,
     2434, 2422, 2423, 2439, 2436, 2441, 2480, 2436, 2432, 2429,
     4604, 2443, 2423, 2487, 2436, 2439, 2436, 2436, 2436, 2461,
     2471, 2459, 2456, 2457, 4604, 2449, 2449, 2486, 2446, 2505,
     2507, 2467, 2469, 2450, 2474, 2513, 2516, 2464, 2522, 2524,
     2528, 2530, 2532, 2534, 2537, 2461, 2539, 2484, 2485, 2524,

     2498, 2549, 2551, 2505, 2492, 2523, 2512, 2555, 2557, 2517,
     2560, 2564, 2521, 2528, 2518, 2547, 2528, 2571, 2575, 2577,
     2580, 2511, 2582, 2586, 2588, 2590, 2534, 2593, 2539, 2598,
     2563, 2600, 2604, 2545, 2606, 2567, 2554, 2554, 2577, 2574,
     2578, 2565, 2566, 2582, 2580, 2585, 2573, 2570, 2626, 2586,
     2566, 2577, 2631, 2633, 2584, 2581, 2581, 2581, 2606, 2615,
     2604, 2601, 2602, 2647, 2649, 2651, 2653, 2655, 2594, 2605,
     2641, 2659, 2663, 2669, 2671, 2619, 2675, 2646, 2625, 4604,
     2677, 2658, 2680, 2627, 2682, 2670, 2687, 2647, 2639, 2662,
     2640, 2658, 2641, 2660, 2646, 2675, 2646, 4604, 2665, 2705,

     2707, 2669, 2653, 4604, 4604, 2669, 2712, 2714, 2661, 4604,
     4604, 4604, 2665, 2666, 2673, 2666, 2682, 2667, 2668, 2677,
     2671, 2673, 2729, 2711, 2714, 2733, 2680, 2736, 2735, 2735,
     2685, 2743, 2748, 2750, 2752, 2758, 2691, 2699, 2760, 2700,
     2711, 2765, 2706, 2749, 2730, 2769, 2715, 2772, 2720, 2776,
     2718, 2741, 2735, 2736, 2785, 2787, 2789, 2772, 2792, 2794,
     2754, 2797, 2800, 2802, 2804, 2806, 2756, 2809, 2813, 2815,
     2820, 2769, 2822, 2825, 2767, 2795, 2773, 2791, 2774, 2793,
     2778, 2807, 2778, 2838, 2797, 2783, 2841, 2843, 2845, 2847,
     2807, 2795, 2851, 2854, 2859, 2863, 2805, 2809, 2819, 2811,

     2827, 2812, 2870, 2872, 2875, 2879, 2881, 2829, 2828, 2884,
     2888, 2866, 2852, 2840, 2892, 2894, 2888, 2879, 2899, 2901,
     2894, 4604, 2847, 2848, 2870, 2860, 2864, 2862, 2866, 2861,
     2869, 2867, 2917, 2877, 2864, 4604, 2921, 2881, 2869, 2898,
     2877, 2870, 2871, 4604, 4604, 2887, 2892, 2891, 2883, 2881,
     2882, 2935, 2938, 2883, 4604, 4604, 2918, 2942, 4604, 4604,
     2906, 2908, 2950, 2952, 2954, 2906, 2910, 2905, 2919, 2921,
     2914, 2961, 2965, 2907, 2938, 2969, 2922, 2931, 2919, 2976,
     2979, 2940, 2930, 2985, 2987, 2991, 2993, 2970, 2995, 2998,
     3000, 3003, 2948, 2949, 2969, 2959, 2963, 2961, 2965, 2960,

     2967, 3016, 3018, 2965, 2964, 3021, 3023, 3025, 3027, 3029,
     3032, 2992, 3037, 3039, 3043, 3045, 3048, 3050, 2980, 3014,
     3004, 2997, 2998, 3056, 3059, 3061, 3064, 3066, 3026, 3031,
     3021, 3015, 3016, 3074, 3036, 3036, 3041, 3082, 3037, 3028,
     3047, 3040, 3029, 3029, 3047, 3048, 3032, 3040, 3051, 3043,
     4604, 3039, 3050, 3045, 3049, 3066, 3048, 4604, 3050, 3060,
     3061, 3055, 3045, 3106, 3090, 3066, 3064, 3054, 3112, 3114,
     3116, 3080, 3060, 3069, 3075, 3066, 3069, 3070, 3126, 3087,
     3077, 3131, 3133, 3093, 3081, 3081, 3138, 4604, 4604, 3083,
     3085, 3146, 3102, 3110, 3149, 3151, 3097, 3116, 3109, 3098,

     3098, 3116, 3117, 3101, 3109, 3162, 3123, 3166, 3168, 3170,
     3172, 3174, 3120, 3177, 3179, 3182, 3138, 3133, 3137, 3155,
     3137, 3190, 3192, 3194, 3196, 3198, 3200, 3151, 3161, 3166,
     3150, 3165, 3159, 3161, 3164, 4604, 3155, 3162, 3172, 3174,
     3182, 3162, 3177, 3169, 3204, 3182, 3167, 3182, 3166, 4604,
     3180, 3172, 3188, 3229, 3181, 3232, 3234, 3184, 3185, 3206,
     3188, 3194, 3241, 3188, 3203, 3191, 3207, 3204, 3205, 3196,
     3197, 3197, 3255, 3201, 3258, 3203, 3223, 3206, 3214, 3216,
     3265, 3267, 3212, 3219, 3229, 3231, 3239, 3219, 3234, 3226,
     3261, 3279, 3283, 3285, 3225, 3245, 3229, 3289, 3245, 3237,

     3295, 3297, 3299, 3301, 3253, 3253, 4604, 4604, 3249, 3264,
     3265, 3259, 3251, 3253, 3255, 3295, 3275, 3282, 4604, 4604,
     3261, 3275, 3272, 3263, 3278, 3271, 3276, 3278, 3324, 3326,
     3286, 3331, 3333, 3335, 3337, 3280, 3280, 3299, 3285, 3291,
     3324, 3290, 3290, 3308, 3298, 3313, 3352, 3354, 3310, 3357,
     3359, 3361, 3345, 3364, 3369, 3325, 3330, 3374, 3377, 3322,
     3324, 3326, 3366, 3347, 3353, 3387, 3390, 3337, 3393, 3349,
     3340, 3355, 3398, 3403, 3350, 3360, 3407, 3364, 3368, 3371,
     3355, 4604, 3372, 3359, 3381, 4604, 3365, 3380, 3370, 3368,
     3383, 3422, 3372, 3392, 4604, 3384, 3385, 3382, 3429, 3380,

     3432, 3434, 3438, 3440, 3379, 3386, 3392, 3383, 3445, 3392,
     3391, 3398, 3411, 3455, 3457, 3460, 3462, 3399, 3464, 3466,
     3470, 3401, 3416, 3472, 3475, 3479, 3481, 3420, 3483, 3485,
     3432, 3454, 3490, 3440, 3455, 3446, 3444, 3499, 3501, 3503,
     3506, 3459, 3456, 3476, 3510, 3512, 3473, 3474, 3471, 3468,
     3465, 3479, 3504, 4604, 3485, 3466, 3477, 3469, 3501, 3478,
     3530, 3532, 3483, 3483, 4604, 3480, 3486, 3481, 3539, 3541,
     3543, 3546, 3548, 3550, 3496, 3501, 3555, 3558, 3522, 3515,
     3507, 3516, 3566, 3570, 3517, 3572, 3525, 3515, 3576, 3578,
     3538, 3581, 3583, 3585, 3549, 3588, 3590, 3534, 3544, 3536,

     3568, 3597, 3601, 3548, 3553, 3553, 3606, 3608, 3610, 3556,
     3562, 3557, 3569, 4604, 3561, 3568, 3567, 3561, 3578, 3570,
     3583, 3626, 3568, 3601, 4604, 3585, 3574, 3631, 3633, 3635,
     3637, 3643, 3645, 3647, 3584, 3650, 3595, 3593, 3653, 3613,
     3600, 3658, 3662, 3664, 3668, 3670, 3673, 3611, 3677, 3615,
     3617, 3638, 3629, 3642, 3627, 3657, 3686, 3688, 3690, 3692,
     3650, 3639, 3643, 3655, 3640, 3658, 3658, 3645, 3643, 3659,
     4604, 3653, 3670, 4604, 3708, 3707, 3707, 3714, 3716, 3718,
     3678, 3670, 3680, 3723, 3725, 3698, 3728, 3731, 3733, 3735,
     3738, 3740, 3743, 3746, 3690, 3709, 3709, 3696, 3694, 3709,

     3756, 3706, 3759, 3761, 3763, 3729, 3766, 3711, 3731, 3728,
     3716, 3717, 3742, 3733, 3731, 3719, 3737, 4604, 4604, 3782,
     3724, 3727, 3756, 3786, 3735, 3789, 3791, 3793, 3795, 3797,
     3757, 3744, 3745, 3804, 3760, 3760, 3807, 3809, 3752, 3812,
     3772, 3815, 3817, 3774, 3764, 3767, 4604, 4604, 3767, 4604,
     3774, 3784, 3781, 3772, 3800, 3778, 3775, 3833, 3779, 3837,
     3839, 3841, 3843, 3788, 3846, 3797, 3849, 3809, 3807, 3857,
     3803, 3807, 4604, 3805, 3818, 4604, 3819, 3818, 3812, 3809,
     3821, 3868, 3870, 3872, 3874, 3876, 3878, 3825, 3881, 3886,
     3840, 3890, 3844, 3841, 3838, 3848, 3859, 3852, 3846, 3842,

     3854, 3849, 3902, 3906, 3908, 3910, 3858, 3912, 3878, 3915,
     3918, 3875, 3921, 3923, 3874, 3884, 3870, 3877, 3883, 3879,
     3881, 3933, 3884, 3895, 3939, 3884, 3942, 3944, 3946, 3948,
     3906, 3905, 3896, 3897, 3902, 3904, 3900, 3914, 3913, 3904,
     3962, 3964, 4604, 3922, 4604, 3967, 3918, 3914, 3971, 3973,
     3931, 3976, 3933, 3979, 3982, 3928, 3986, 3989, 3994, 3996,
     3998, 3947, 4001, 4004, 3949, 4007, 4009, 4012, 4014, 4017,
     4019, 3964, 4024, 3966, 4027, 4029, 4031, 3977, 4604, 4034,
     4036, 4038, 4042, 4044, 4604, 4055, 4060, 4065, 4070, 4075,
     4080, 4085, 4090, 4095, 4099, 4104, 4109

    } ;

static yyconst flex_int16_t yy_def[2898] =
    {   0,
     2886, 2886, 2887, 2887, 2888, 2888, 2889, 2889, 2890, 2890,
     2890, 2890, 2891, 2891, 2892, 2892, 2893, 2893, 2885, 2885,
     2885, 2885,   21, 2885,   23,   23,   23,   23, 2885, 2885,
       23,   23, 2885, 2894, 2885, 2895, 2896, 2897, 2885, 2885,
     2885, 2885, 2885, 2885,   21,   23,   23,   23,   23,   23,
       29, 2885,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2885,   23,   23,   23, 2885,   23, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885,   23,   23, 2894, 2895, 2896, 2897, 2885, 2885,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885,   23, 2885,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,

     2885,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885,   23,   23,   23,   23,   23,   23,   23,   23,   23,

     2885, 2885,   23,   23,   23,   23,   23,   23,   23,   23,
     2885, 2885,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2885, 2885,   23,   23,   23, 2885, 2885,   23,   23,
       23,   23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2885, 2885,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2885, 2885,   23,   23, 2885, 2885,
       23, 2885, 2885,   23,   23,   23, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2885, 2885,   23,   23,   23,   23,
       23,   23, 2885, 2885,   23,   23,   23, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885,   23,   23,   23,   23, 2885, 2885,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2885, 2885,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2885, 2885,   23, 2885, 2885,   23,   23,   23,
       23, 2885, 2885,   23, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885,   23,   23, 2885, 2885,
     2885, 2885,   23,   23,   23, 2885, 2885,   23,   23,   23,
     2885, 2885,   23,   23, 2885, 2885,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885,   23,   23,   23,   23, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,
       23, 2885, 2885,   23, 2885, 2885,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885,   23,   23,   23,   23, 2885, 2885,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,
       23,   23,   23,   23, 2885, 2885,   23,   23, 2885, 2885,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885,   23, 2885, 2885,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,

     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885,   23,   23,   23,   23,   23, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,   23,
       23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,

       23,   23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885,   23,   23,   23,
       23, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885,   23,   23,   23,   23, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885,   23,   23,   23,   23, 2885,
     2885, 2885, 2885,   23,   23,   23,   23,   23,   23, 2885,
     2885, 2885, 2885, 2885, 2885,   23,   23,   23,   23,   23,
     2885, 2885, 2885, 2885,   23,   23,   23, 2885, 2885,   23,
     2885, 2885, 2885, 2885,    0, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885

    } ;

static yyconst flex_int16_t yy_nxt[4671] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2885,   40,
       44,   41,   44,  713,   31,   41,  101,  101,   48,   32,
       50,   50,   50,   48,  376,   50,   50,   50,  714,   72,
       72,  101,  101,   53,   76,   76, 2885,  111,   53,   73,
       73,   73,   48,  114,   50,   50,   50,  377,  120,   74,
     2885,  112,  166,  115,   74,   33,   20,   21,   21,   20,
       22,  121,   24,  167,   25,   26,   27,   28,   28,   28,
       29,   74,   30,   20,  118,  122,   74,   72,   72,  124,
       31,  182,   76,   76,  119,   32,  183,   73,   73,   73,

       48,  130,   50,   50,   50,  123,  237,   74,  127,  125,
      134,  184,   74,  238,  128,  131,   72,   72,  132,  185,
      129,  535,  135,   76,   76,  133,  169,  200, 1007,   74,
      170,   33,   45,   45,   74,  536,   46,  201,   46,   47,
       48,   49,   50,   50,   50,   51,   46,   52, 1008,   46,
       46,   46,   46,   46,   46,   53,   46,   46,   46,   46,
       54,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   55,   56,   57,   58,   59,   60,   46,   61,   46,
       46,   62,   63,   64,   65,   46,   46,   46,   66,   67,
       68,   69,   70,   46,   46,   46,   46,   46,  209,  101,

      101,  240,  240,   46,   46,   46,   46,   46,   46, 2885,
      163, 2885,  138,  138,  210,  241,  139,  139,  139,   46,
      164,   72,   72,  247,   46,  211,  351,  352,  165,  248,
      212,   73,   73,   73,  218,   46,   46,   46,   46,   46,
       46,   74,   46,  219,  273,   46,   46,   46,   46,  274,
     1009,  227,   46,   46,   46,   46,   46,   77,  254, 1010,
      171,  244,  172,   74,   78,  177,  173,  228,  255,  191,
      186,   79,  174,  178,  187,   80,  256,  245,  179,  180,
      257,  188, 1011,  192,  189,   81,  193,  194,  195, 1012,
      190,  258,  275,   82,   83,   84,   85,   86,   87,   88,

      276,   89,   90,  300,   91,   92,   93,   94,   95,  196,
       96,   97,   98,   99,  100,  141,  139,  139,  139,  301,
      197,  315,  291,  198,  316,  142,  199,  260,  251,  251,
     1013,  261,  292,  143,  144,  145,  146,  147,  148,  149,
     1014,  150,  151,  252,  152,  153,  154,  155,  156, 1015,
      157,  158,  159,  160,  161,  202,  302,  335, 1016,  203,
      317,  303,   72,   72,  318,  204,  365,  205,  336,  366,
      206,  207,  139,  139,  139,  208,  262,  268,  263, 1023,
      339,  282,  264,  277,  340,  269,  423,  278,  265,  424,
      270,  271,  425,  287,  279,  283,  426,  280,  284,  285,

      286,  293, 1024,  281,  288,  294,  307,  289,  325,  325,
      290,  295,  308,  296,   72,   72,  297,  298,  337,  337,
      309,  299,  312,  326,  313,  327, 1025,  360,  667,  314,
      328,  383,  383,  338,  361, 1026,  362,  329,  240,  240,
      330,  331,  668,  399,  399,  384,  400,  445,  401,  251,
      251,  415,  241,  410,  410,  411,  411,  416,  446,  420,
     1027,  421,  427,  427,  252,  417,  422,  435,  435,  437,
      412,  447,  447,  477,  438,  449,  478,  428,  760,  450,
      761,  439,  436, 1028,  440,  441,  448,  454,  454,  463,
      464,  472,  485,  485, 1029,  491,  495,  496,  473,  492,

      474,  729,  455, 1030,  429,  497,  497,  486,  505,  505,
      507,  507,  325,  325,  511,  511,  337,  337,  522,  522,
      498,  524,  524,  506, 1034,  508,  617,  326,  527,  527,
      618,  338,  547,  548,  552,  552,  525,  559,  559,  730,
      567,  582,  582,  528,  572,  572,  529,  530,  568,  553,
      579,  579,  560,  954,  526,  531,  383,  383,  573,  583,
      583,  589,  589,  569,  580,  591,  591,  601,  601,  955,
      384,  399,  399,  584,  400,  590,  401,  605,  605,  592,
     1037,  602,  410,  410,  411,  411,  532,  610,  610,  611,
      611,  606,  621,  621,  625,  625,  427,  427, 1038,  412,

      631,  631,  634,  634,  612,  636,  636,  622,  886,  626,
      887,  428,  435,  435,  640,  640, 1039,  635,  648,  648,
      637,  447,  447,  653,  653,  655,  655,  436,  658,  658,
      454,  454, 1040,  649,  666,  666,  448,  670,  670,  855,
      656,  650,  946,  659,  947,  455,  660,  661,  623,  624,
      681,  682,  671,  686,  686,  662,  689,  689,  657,  695,
      695,  703,  703,  485,  485,  708,  708, 1041,  687,  720,
      720,  690,  497,  497,  696,  838,  704,  856,  486,  672,
      505,  505,  727,  727,  705, 1042,  663,  498,  507,  507,
      839,  691,  706,  728,  728,  506,  511,  511, 1048,  738,

      738,  522,  522,  508,  524,  524, 1051,  707,  739,  745,
      745,  527,  527, 1052,  740,  747,  747,  762,  762,  525,
      752,  752,  768,  768,  773, 1053,  528,  932,  774,  753,
      552,  552,  763,  777,  777,  754, 1054,  769,  559,  559,
      783,  783,  572,  572,  933,  553,  794,  794,  579,  579,
      582,  582, 1055,  560,  800,  800,  573,  801, 1056,  802,
      583,  583,  580,  804,  804,  589,  589,  809,  809,  591,
      591, 1049,  810,  810,  584,  811, 1057,  812,  901,  590,
      601,  601,  902,  592,  821,  821, 1058,  822, 1050,  823,
      605,  605,  826,  826,  602,  827, 1059,  828,  829,  829,

      610,  610,  611,  611,  606,  833,  833,  621,  621,  843,
      843, 1060,  830,  625,  625,  846,  846,  612,  631,  631,
      634,  634,  622,  853,  853,  636,  636, 1061,  626,  854,
      854,  640,  640,  864,  864,  635,  648,  648,  866,  866,
      637,  653,  653,  655,  655,  871,  871, 1062,  865,  658,
      658,  649,  873,  873,  878,  878,  666,  666,  656,  670,
      670,  884,  884, 1065,  659,  888,  888,  893,  893,  879,
      896,  896,  686,  686,  671,  905,  905,  689,  689, 1063,
      889, 1064,  894,  907,  907,  897, 1066,  687,  695,  695,
      912,  912,  690,  916,  916,  703,  703,  895,  920,  920,

      708,  708, 1067,  696,  720,  720,  727,  727,  917, 1073,
      704,  728,  728,  738,  738, 1074,  952,  952,  745,  745,
      747,  747,  739,  962,  962,  752,  752, 1075,  740,  953,
      965,  965,  762,  762,  753,  768,  768, 1076,  963, 1077,
      754,  978,  978,  966,  979,  979, 1078,  763,  777,  777,
      769,  783,  783,  993,  993,  794,  794,  800,  800,  980,
      801, 1082,  802,  804,  804,  809,  809, 1071,  994,  810,
      810, 1083,  811, 1084,  812, 1017, 1017, 1019, 1019, 1021,
     1021,  821,  821, 1072,  822, 1085,  823,  826,  826, 1018,
      827, 1020,  828, 1022,  829,  829, 1031, 1031, 1086, 1032,

     1087, 1033, 1035, 1035,  833,  833, 1043, 1043,  830, 1045,
     1045,  843,  843,  846,  846, 1088, 1036,  853,  853,  854,
      854, 1044,  864,  864, 1046, 1068, 1068,  866,  866, 1069,
     1069,  871,  871,  873,  873, 1079, 1079,  865,  878,  878,
     1081, 1081,  884,  884, 1070,  888,  888, 1089, 1089, 1093,
     1080, 1090, 1090,  879, 1094,  893,  893, 1095, 1095, 1096,
      889,  896,  896, 1097, 1097, 1047, 1091, 1098, 1098, 1100,
      894, 1101, 1102, 1103, 1104, 1105,  897,  905,  905, 1106,
     1092, 1107, 1099,  907,  907, 1108, 1109, 1110, 1110,  912,
      912, 1112, 1113, 1114, 1114,  916,  916, 1116, 1116, 1117,

     1118, 1119, 1111,  920,  920, 1120, 1121, 1122, 1115, 1123,
      917, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1135, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1146, 1147, 1148, 1148, 1136,  952,  952,
     1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1160, 1155,
     1163,  953,  962,  962, 1158, 1158, 1159, 1159,  965,  965,
     1161, 1161, 1164, 1165, 1166, 1167, 1168,  963, 1169, 1171,
     1170,  966, 1172,  978,  978, 1162,  979,  979, 1173, 1173,
     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1183,
     1181,  980, 1186, 1186, 1189,  993,  993, 1184, 1190, 1190,

     1191, 1192, 1193, 1185, 1194, 1195, 1196, 1187, 1197, 1197,
      994, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1205, 1207,
     1208, 1209, 1198, 1188, 1210, 1210, 1212, 1017, 1017, 1213,
     1213, 1206, 1019, 1019, 1214, 1214, 1218, 1215, 1211, 1216,
     1219, 1018, 1021, 1021, 1217, 1217, 1020, 1220, 1221, 1221,
     1031, 1031, 1223, 1032, 1224, 1033, 1022, 1225, 1225, 1035,
     1035, 1230, 1222, 1227, 1227, 1231, 1228, 1232, 1229, 1233,
     1234, 1226, 1235, 1036, 1043, 1043, 1236, 1236, 1045, 1045,
     1237, 1237, 1238, 1238, 1240, 1241, 1242, 1243, 1244, 1044,
     1245, 1246, 1249, 1046, 1247, 1247, 1250, 1239, 1251, 1252,

     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1260, 1248,
     1068, 1068, 1069, 1069, 1262, 1262, 1263, 1264, 1265, 1266,
     1266, 1268, 1261, 1271, 1269, 1272, 1276, 1070, 1270, 1079,
     1079, 1273, 1273, 1277, 1267, 1081, 1081, 1274, 1274, 1278,
     1278, 1280, 1281, 1282, 1080, 1089, 1089, 1090, 1090, 1283,
     1283, 1284, 1275, 1285, 1279, 1286, 1287, 1095, 1095, 1288,
     1097, 1097, 1091, 1098, 1098, 1289, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1298, 1299, 1299, 1297, 1099, 1301,
     1301, 1110, 1110, 1304, 1304, 1305, 1306, 1306, 1114, 1114,
     1300, 1308, 1308, 1309, 1302, 1310, 1111, 1116, 1116, 1311,

     1311, 1307, 1313, 1115, 1314, 1315, 1315, 1317, 1318, 1319,
     1303, 1320, 1321, 1322, 1312, 1323, 1324, 1325, 1135, 1135,
     1316, 1326, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334,
     1335, 1338, 1339, 1136, 1331, 1340, 1341, 1148, 1148, 1342,
     1336, 1343, 1343, 1346, 1347, 1348, 1337, 1349, 1350, 1351,
     1344, 1158, 1158, 1159, 1159, 1353, 1345, 1161, 1161, 1352,
     1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
     1173, 1173, 1162, 1363, 1364, 1364, 1366, 1367, 1368, 1369,
     1371, 1372, 1373, 1183, 1183, 1370, 1374, 1375, 1375, 1365,
     1186, 1186, 1184, 1377, 1377, 1378, 1379, 1380, 1185, 1381,

     1376, 1190, 1190, 1382, 1383, 1187, 1384, 1384, 1197, 1197,
     1386, 1386, 1391, 1387, 1394, 1388, 1389, 1389, 1392, 1392,
     1385, 1395, 1198, 1396, 1205, 1205, 1397, 1397, 1400, 1398,
     1390, 1399, 1393, 1401, 1401, 1415, 1213, 1213, 1206, 1403,
     1416, 1404, 1417, 1418, 1405, 1406, 1419, 1402, 1420, 1407,
     1408, 1409, 1427, 1410, 1210, 1210, 1411, 1412, 1412, 1428,
     1413, 1431, 1414, 1436, 1214, 1214, 1437, 1215, 1211, 1216,
     1217, 1217, 1221, 1221, 1421, 1421, 1439, 1422, 1440, 1423,
     1225, 1225, 1424, 1424, 1441, 1425, 1222, 1426, 1227, 1227,
     1444, 1228, 1445, 1229, 1226, 1429, 1429, 1432, 1432, 1434,

     1434, 1236, 1236, 1237, 1237, 1238, 1238, 1438, 1438, 1446,
     1430, 1448, 1433, 1449, 1435, 1442, 1442, 1247, 1247, 1450,
     1239, 1447, 1447, 1451, 1453, 1453, 1456, 1456, 1463, 1464,
     1443, 1452, 1248, 1458, 1459, 1460, 1465, 1466, 1472, 1454,
     1476, 1457, 1260, 1260, 1455, 1461, 1467, 1467, 1262, 1262,
     1477, 1462, 1468, 1468, 1470, 1470, 1478, 1261, 1266, 1266,
     1473, 1473, 1474, 1474, 1479, 1273, 1273, 1469, 1481, 1471,
     1274, 1274, 1482, 1267, 1480, 1480, 1484, 1475, 1278, 1278,
     1483, 1483, 1485, 1486, 1487, 1275, 1283, 1283, 1488, 1489,
     1490, 1491, 1497, 1279, 1289, 1289, 1492, 1492, 1495, 1495,

     1498, 1499, 1500, 1500, 1504, 1505, 1506, 1299, 1299, 1507,
     1507, 1493, 1509, 1496, 1301, 1301, 1510, 1501, 1508, 1508,
     1304, 1304, 1300, 1514, 1306, 1306, 1511, 1511, 1516, 1302,
     1502, 1308, 1308, 1512, 1512, 1517, 1503, 1519, 1494, 1307,
     1311, 1311, 1515, 1515, 1315, 1315, 1518, 1518, 1513, 1520,
     1521, 1522, 1523, 1524, 1525, 1312, 1526, 1527, 1528, 1316,
     1326, 1326, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1537, 1538, 1539, 1540, 1542, 1541, 1543, 1343, 1343, 1544,
     1545, 1545, 1547, 1548, 1549, 1550, 1344, 1551, 1552, 1352,
     1352, 1553, 1345, 1546, 1554, 1555, 1556, 1557, 1558, 1559,

     1560, 1364, 1364, 1561, 1561, 1562, 1563, 1565, 1564, 1566,
     1567, 1568, 1569, 1570, 1571, 1571, 1365, 1375, 1375, 1572,
     1377, 1377, 1573, 1574, 1575, 1576, 1577, 1384, 1384, 1581,
     1376, 1578, 1578, 1582, 1579, 1584, 1580, 1386, 1386, 1588,
     1387, 1385, 1388, 1389, 1389, 1583, 1583, 1392, 1392, 1585,
     1585, 1589, 1586, 1590, 1587, 1397, 1397, 1390, 1398, 1591,
     1399, 1393, 1592, 1593, 1401, 1401, 1594, 1594, 1597, 1595,
     1598, 1596, 1599, 1600, 1601, 1602, 1603, 1607, 1402, 1605,
     1609, 1412, 1412, 1610, 1413, 1611, 1414, 1612, 1613, 1614,
     1615, 1616, 1421, 1421, 1604, 1422, 1606, 1423, 1617, 1618,

     1608, 1424, 1424, 1619, 1425, 1621, 1426, 1429, 1429, 1620,
     1620, 1432, 1432, 1622, 1622, 1434, 1434, 1623, 1623, 1624,
     1625, 1626, 1430, 1438, 1438, 1627, 1433, 1628, 1442, 1442,
     1435, 1629, 1629, 1630, 1631, 1632, 1447, 1447, 1633, 1633,
     1635, 1636, 1637, 1443, 1638, 1453, 1453, 1639, 1639, 1640,
     1456, 1456, 1642, 1634, 1641, 1641, 1643, 1644, 1645, 1646,
     1454, 1647, 1648, 1651, 1649, 1457, 1650, 1467, 1467, 1468,
     1468, 1652, 1652, 1470, 1470, 1653, 1653, 1654, 1473, 1473,
     1474, 1474, 1655, 1655, 1469, 1656, 1657, 1658, 1471, 1659,
     1480, 1480, 1660, 1661, 1661, 1475, 1483, 1483, 1663, 1664,

     1665, 1666, 1667, 1668, 1669, 1669, 1671, 1671, 1662, 1492,
     1492, 1673, 1673, 1674, 1495, 1495, 1675, 1675, 1676, 1670,
     1677, 1672, 1678, 1679, 1493, 1500, 1500, 1680, 1680, 1496,
     1681, 1682, 1683, 1684, 1685, 1507, 1507, 1508, 1508, 1686,
     1501, 1687, 1511, 1511, 1512, 1512, 1688, 1688, 1689, 1689,
     1515, 1515, 1691, 1692, 1692, 1518, 1518, 1695, 1696, 1513,
     1697, 1698, 1699, 1690, 1700, 1701, 1702, 1703, 1693, 1704,
     1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
     1715, 1716, 1717, 1718, 1719, 1720, 1720, 1545, 1545, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,

     1546, 1732, 1733, 1734, 1735, 1561, 1561, 1736, 1737, 1694,
     1738, 1739, 1740, 1741, 1742, 1743, 1744, 1571, 1571, 1745,
     1746, 1747, 1748, 1749, 1578, 1578, 1750, 1579, 1752, 1580,
     1753, 1583, 1583, 1754, 1755, 1751, 1585, 1585, 1756, 1586,
     1757, 1587, 1758, 1759, 1760, 1594, 1594, 1761, 1595, 1764,
     1596, 1762, 1762, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1774, 1775, 1776, 1763, 1777, 1778, 1620, 1620,
     1779, 1622, 1622, 1623, 1623, 1780, 1781, 1782, 1783, 1784,
     1629, 1629, 1785, 1786, 1787, 1633, 1633, 1788, 1788, 1789,
     1790, 1791, 1792, 1639, 1639, 1793, 1641, 1641, 1794, 1795,

     1634, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1652,
     1652, 1653, 1653, 1804, 1655, 1655, 1805, 1806, 1807, 1808,
     1809, 1661, 1661, 1810, 1810, 1811, 1812, 1813, 1814, 1815,
     1816, 1669, 1669, 1817, 1817, 1819, 1662, 1671, 1671, 1818,
     1818, 1673, 1673, 1675, 1675, 1820, 1670, 1821, 1822, 1823,
     1680, 1680, 1672, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
     1688, 1688, 1689, 1689, 1831, 1831, 1832, 1692, 1692, 1833,
     1833, 1834, 1834, 1836, 1837, 1838, 1839, 1690, 1840, 1841,
     1842, 1843, 1693, 1844, 1845, 1846, 1835, 1847, 1848, 1849,
     1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1720, 1720,

     1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
     1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
     1878, 1879, 1880, 1880, 1882, 1883, 1884, 1885, 1886, 1886,
     1888, 1889, 1889, 1891, 1891, 1893, 1898, 1881, 1894, 1894,
     1762, 1762, 1887, 1897, 1897, 1890, 1899, 1892, 1900, 1901,
     1902, 1902, 1895, 1905, 1763, 1906, 1907, 1908, 1908, 1910,
     1911, 1911, 1915, 1916, 1903, 1917, 1918, 1918, 1922, 1920,
     1920, 1909, 1923, 1923, 1912, 1925, 1925, 1927, 1928, 1929,
     1919, 1930, 1931, 1913, 1921, 1788, 1788, 1924, 1932, 1933,
     1926, 1934, 1904, 1935, 1896, 1936, 1937, 1938, 1939, 1940,

     1941, 1942, 1943, 1944, 1945, 1946, 1914, 1947, 1948, 1949,
     1950, 1951, 1952, 1810, 1810, 1953, 1953, 1955, 1956, 1957,
     1958, 1959, 1817, 1817, 1818, 1818, 1960, 1961, 1962, 1963,
     1954, 1964, 1964, 1966, 1967, 1967, 1969, 1970, 1971, 1972,
     1972, 1974, 1974, 1831, 1831, 1976, 1965, 1833, 1833, 1968,
     1834, 1834, 1977, 1977, 1973, 1978, 1975, 1979, 1980, 1981,
     1981, 1984, 1985, 1985, 1988, 1835, 1989, 1990, 1982, 1991,
     1992, 1986, 1993, 1994, 1983, 1995, 1996, 1987, 1997, 1998,
     1999, 2000, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2007,
     2009, 2010, 2011, 2012, 2013, 2014, 2001, 2015, 2016, 2017,

     2018, 2019, 2020, 2008, 2021, 2022, 1880, 1880, 2023, 2023,
     2024, 2025, 2026, 2027, 1886, 1886, 2031, 2028, 2028, 2037,
     2029, 1881, 2030, 1889, 1889, 2032, 2032, 2038, 1887, 1891,
     1891, 2033, 2033, 2034, 2034, 1894, 1894, 1890, 2036, 2036,
     1897, 1897, 2039, 1892, 2040, 2041, 2043, 2035, 2044, 1895,
     1902, 1902, 2042, 2042, 2045, 2047, 1908, 1908, 2048, 2048,
     2049, 1911, 1911, 2051, 1903, 2050, 2050, 2052, 2053, 2054,
     1909, 2055, 1918, 1918, 2058, 1912, 2056, 2056, 1920, 1920,
     2046, 2057, 2057, 1923, 1923, 2061, 1919, 2059, 2059, 1925,
     1925, 2060, 2060, 1921, 2062, 2062, 2064, 2067, 1924, 2065,

     2065, 2068, 2068, 2072, 1926, 2070, 2070, 2073, 2073, 2063,
     2075, 2076, 2077, 2078, 2066, 2079, 2069, 2080, 2081, 2082,
     2071, 2083, 2074, 2084, 2085, 2086, 2087, 2088, 2088, 2090,
     2091, 2092, 1953, 1953, 2093, 2093, 2094, 2095, 2096, 2097,
     2098, 2099, 2089, 2100, 2101, 2102, 2107, 1954, 1964, 1964,
     2103, 2103, 2104, 2104, 1967, 1967, 2106, 2106, 2108, 2109,
     1972, 1972, 2112, 1965, 2110, 2110, 2113, 2105, 2114, 1968,
     1974, 1974, 2111, 2111, 2115, 1973, 1977, 1977, 1981, 1981,
     2118, 2116, 2116, 1985, 1985, 1975, 2119, 1982, 2120, 2120,
     2122, 2123, 1986, 1983, 2117, 2124, 2125, 2126, 1987, 2127,

     2128, 2121, 2129, 2130, 2131, 2132, 2000, 2000, 2133, 2133,
     2134, 2135, 2136, 2007, 2007, 2137, 2137, 2138, 2139, 2140,
     2141, 2001, 2142, 2143, 2144, 2145, 2146, 2147, 2008, 2148,
     2023, 2023, 2149, 2150, 2152, 2152, 2154, 2028, 2028, 2155,
     2029, 2156, 2030, 2157, 2032, 2032, 2151, 2161, 2153, 2033,
     2033, 2034, 2034, 2158, 2158, 2162, 2159, 2165, 2160, 2036,
     2036, 2163, 2163, 2166, 2167, 2035, 2042, 2042, 2168, 2171,
     2172, 2172, 2174, 2048, 2048, 2164, 2175, 2050, 2050, 2169,
     2176, 2177, 2178, 2179, 2173, 2170, 2180, 2180, 2056, 2056,
     2057, 2057, 2182, 2059, 2059, 2060, 2060, 2183, 2062, 2062,

     2181, 2184, 2184, 2185, 2185, 2065, 2065, 2187, 2187, 2188,
     2068, 2068, 2191, 2063, 2189, 2189, 2070, 2070, 2186, 2193,
     2066, 2190, 2190, 2073, 2073, 2069, 2192, 2192, 2194, 2195,
     2196, 2071, 2197, 2198, 2199, 2200, 2201, 2204, 2074, 2202,
     2202, 2205, 2206, 2206, 2088, 2088, 2208, 2208, 2209, 2209,
     2211, 2212, 2093, 2093, 2203, 2213, 2213, 2207, 2219, 2089,
     2215, 2215, 2220, 2210, 2217, 2217, 2221, 2222, 2223, 2224,
     2214, 2103, 2103, 2104, 2104, 2216, 2225, 2225, 2229, 2218,
     2106, 2106, 2226, 2226, 2230, 2110, 2110, 2231, 2105, 2111,
     2111, 2232, 2233, 2234, 2234, 2116, 2116, 2227, 2235, 2236,

     2238, 2238, 2120, 2120, 2239, 2240, 2241, 2237, 2117, 2242,
     2243, 2244, 2245, 2246, 2247, 2121, 2248, 2249, 2133, 2133,
     2250, 2251, 2137, 2137, 2252, 2253, 2254, 2255, 2256, 2257,
     2258, 2259, 2260, 2261, 2262, 2263, 2152, 2152, 2228, 2264,
     2264, 2265, 2266, 2158, 2158, 2267, 2159, 2268, 2160, 2272,
     2153, 2163, 2163, 2269, 2269, 2270, 2270, 2273, 2274, 2275,
     2277, 2278, 2172, 2172, 2280, 2164, 2279, 2279, 2281, 2271,
     2282, 2282, 2284, 2276, 2285, 2286, 2173, 2180, 2180, 2290,
     2287, 2287, 2291, 2288, 2283, 2289, 2184, 2184, 2185, 2185,
     2293, 2181, 2292, 2292, 2187, 2187, 2189, 2189, 2294, 2190,

     2190, 2295, 2295, 2186, 2192, 2192, 2297, 2298, 2299, 2300,
     2301, 2302, 2303, 2304, 2305, 2307, 2296, 2202, 2202, 2306,
     2306, 2308, 2206, 2206, 2309, 2309, 2208, 2208, 2209, 2209,
     2310, 2310, 2203, 2311, 2311, 2313, 2317, 2207, 2213, 2213,
     2314, 2314, 2318, 2210, 2215, 2215, 2315, 2315, 2312, 2217,
     2217, 2316, 2316, 2214, 2319, 2320, 2321, 2322, 2322, 2216,
     2225, 2225, 2226, 2226, 2218, 2324, 2324, 2325, 2325, 2327,
     2328, 2329, 2323, 2330, 2331, 2234, 2234, 2227, 2332, 2333,
     2334, 2335, 2326, 2238, 2238, 2336, 2337, 2338, 2339, 2340,
     2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350,

     2351, 2352, 2353, 2354, 2355, 2356, 2357, 2264, 2264, 2358,
     2360, 2361, 2362, 2269, 2269, 2270, 2270, 2363, 2363, 2364,
     2365, 2366, 2359, 2367, 2368, 2369, 2370, 2279, 2279, 2271,
     2371, 2372, 2282, 2282, 2373, 2373, 2374, 2375, 2376, 2287,
     2287, 2377, 2288, 2378, 2289, 2379, 2283, 2292, 2292, 2380,
     2295, 2295, 2381, 2381, 2382, 2383, 2384, 2385, 2386, 2387,
     2388, 2389, 2390, 2306, 2306, 2296, 2391, 2392, 2392, 2309,
     2309, 2310, 2310, 2311, 2311, 2394, 2394, 2395, 2314, 2314,
     2315, 2315, 2393, 2316, 2316, 2396, 2397, 2398, 2312, 2399,
     2400, 2322, 2322, 2401, 2401, 2324, 2324, 2325, 2325, 2402,

     2402, 2403, 2403, 2405, 2406, 2407, 2323, 2408, 2409, 2410,
     2411, 2412, 2326, 2413, 2414, 2415, 2404, 2416, 2417, 2418,
     2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428,
     2429, 2429, 2431, 2432, 2432, 2434, 2434, 2436, 2437, 2438,
     2439, 2440, 2363, 2363, 2441, 2430, 2442, 2433, 2443, 2435,
     2444, 2445, 2446, 2447, 2448, 2449, 2373, 2373, 2450, 2451,
     2451, 2453, 2454, 2455, 2456, 2457, 2381, 2381, 2458, 2458,
     2460, 2461, 2462, 2452, 2463, 2464, 2465, 2466, 2467, 2468,
     2392, 2392, 2470, 2459, 2469, 2469, 2394, 2394, 2471, 2472,
     2473, 2473, 2475, 2476, 2478, 2393, 2401, 2401, 2402, 2402,

     2403, 2403, 2477, 2477, 2479, 2474, 2480, 2481, 2482, 2483,
     2484, 2485, 2486, 2487, 2489, 2404, 2490, 2491, 2492, 2493,
     2494, 2495, 2496, 2497, 2498, 2429, 2429, 2499, 2499, 2500,
     2503, 2488, 2432, 2432, 2501, 2501, 2434, 2434, 2502, 2502,
     2430, 2504, 2505, 2506, 2507, 2508, 2433, 2509, 2510, 2511,
     2435, 2512, 2513, 2514, 2514, 2516, 2516, 2518, 2519, 2519,
     2451, 2451, 2521, 2521, 2522, 2524, 2524, 2515, 2528, 2517,
     2526, 2526, 2520, 2529, 2452, 2458, 2458, 2523, 2530, 2530,
     2525, 2531, 2532, 2533, 2534, 2527, 2536, 2537, 2538, 2538,
     2459, 2540, 2540, 2542, 2469, 2469, 2543, 2544, 2545, 2473,

     2473, 2547, 2535, 2539, 2546, 2546, 2541, 2548, 2477, 2477,
     2549, 2550, 2551, 2552, 2474, 2553, 2554, 2555, 2556, 2557,
     2558, 2559, 2560, 2561, 2561, 2563, 2564, 2565, 2566, 2567,
     2499, 2499, 2568, 2501, 2501, 2502, 2502, 2573, 2562, 2569,
     2569, 2571, 2571, 2574, 2575, 2576, 2577, 2577, 2579, 2580,
     2581, 2582, 2585, 2570, 2587, 2572, 2514, 2514, 2583, 2583,
     2578, 2516, 2516, 2584, 2584, 2519, 2519, 2586, 2586, 2588,
     2515, 2521, 2521, 2524, 2524, 2517, 2589, 2589, 2591, 2520,
     2526, 2526, 2590, 2590, 2592, 2592, 2530, 2530, 2525, 2594,
     2595, 2596, 2596, 2598, 2599, 2527, 2600, 2601, 2604, 2593,

     2538, 2538, 2602, 2602, 2540, 2540, 2597, 2603, 2603, 2605,
     2606, 2607, 2607, 2546, 2546, 2539, 2609, 2610, 2611, 2541,
     2612, 2613, 2614, 2615, 2616, 2617, 2608, 2618, 2619, 2620,
     2621, 2561, 2561, 2622, 2622, 2623, 2624, 2625, 2626, 2627,
     2569, 2569, 2628, 2628, 2571, 2571, 2562, 2629, 2629, 2630,
     2630, 2632, 2632, 2634, 2570, 2635, 2577, 2577, 2572, 2636,
     2636, 2637, 2638, 2631, 2639, 2633, 2640, 2583, 2583, 2641,
     2578, 2584, 2584, 2586, 2586, 2642, 2643, 2589, 2589, 2590,
     2590, 2644, 2592, 2592, 2645, 2645, 2646, 2646, 2648, 2596,
     2596, 2649, 2649, 2650, 2651, 2652, 2653, 2593, 2602, 2602,

     2654, 2647, 2603, 2603, 2597, 2655, 2656, 2607, 2607, 2657,
     2657, 2658, 2658, 2660, 2661, 2662, 2663, 2664, 2665, 2666,
     2667, 2668, 2608, 2669, 2670, 2671, 2659, 2622, 2622, 2672,
     2673, 2674, 2628, 2628, 2629, 2629, 2630, 2630, 2675, 2675,
     2681, 2676, 2682, 2677, 2632, 2632, 2678, 2678, 2679, 2679,
     2631, 2636, 2636, 2683, 2684, 2684, 2686, 2687, 2633, 2688,
     2688, 2695, 2680, 2690, 2690, 2692, 2692, 2696, 2685, 2645,
     2645, 2646, 2646, 2689, 2694, 2694, 2697, 2691, 2649, 2649,
     2693, 2698, 2699, 2700, 2701, 2702, 2647, 2657, 2657, 2658,
     2658, 2703, 2703, 2704, 2704, 2706, 2707, 2708, 2709, 2710,

     2711, 2712, 2713, 2714, 2659, 2715, 2716, 2717, 2705, 2675,
     2675, 2718, 2676, 2719, 2677, 2678, 2678, 2679, 2679, 2720,
     2720, 2721, 2722, 2723, 2684, 2684, 2724, 2724, 2725, 2726,
     2726, 2680, 2688, 2688, 2728, 2728, 2690, 2690, 2685, 2729,
     2729, 2692, 2692, 2727, 2730, 2730, 2689, 2694, 2694, 2731,
     2691, 2732, 2733, 2734, 2735, 2736, 2693, 2737, 2737, 2739,
     2703, 2703, 2704, 2704, 2740, 2740, 2741, 2742, 2742, 2744,
     2745, 2746, 2738, 2747, 2748, 2749, 2750, 2705, 2751, 2752,
     2753, 2754, 2743, 2720, 2720, 2755, 2756, 2724, 2724, 2757,
     2726, 2726, 2758, 2758, 2728, 2728, 2729, 2729, 2730, 2730,

     2759, 2760, 2761, 2765, 2727, 2762, 2762, 2766, 2737, 2737,
     2767, 2767, 2768, 2740, 2740, 2769, 2742, 2742, 2770, 2770,
     2763, 2771, 2772, 2738, 2773, 2774, 2775, 2776, 2777, 2778,
     2779, 2743, 2780, 2781, 2758, 2758, 2782, 2764, 2783, 2783,
     2785, 2785, 2762, 2762, 2787, 2787, 2788, 2789, 2789, 2791,
     2767, 2767, 2792, 2784, 2793, 2786, 2794, 2763, 2770, 2770,
     2795, 2796, 2790, 2797, 2798, 2799, 2800, 2801, 2802, 2803,
     2803, 2783, 2783, 2805, 2805, 2785, 2785, 2806, 2806, 2787,
     2787, 2807, 2789, 2789, 2804, 2809, 2784, 2808, 2808, 2812,
     2786, 2810, 2810, 2813, 2814, 2815, 2816, 2790, 2817, 2818,

     2819, 2820, 2821, 2803, 2803, 2823, 2811, 2822, 2822, 2805,
     2805, 2806, 2806, 2808, 2808, 2824, 2810, 2810, 2804, 2825,
     2825, 2826, 2827, 2827, 2829, 2829, 2831, 2832, 2833, 2834,
     2835, 2811, 2836, 2837, 2822, 2822, 2838, 2828, 2839, 2830,
     2825, 2825, 2840, 2827, 2827, 2841, 2841, 2829, 2829, 2842,
     2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2828, 2850,
     2851, 2852, 2830, 2841, 2841, 2842, 2842, 2853, 2854, 2854,
     2856, 2857, 2858, 2858, 2860, 2860, 2862, 2863, 2863, 2865,
     2854, 2854, 2855, 2866, 2866, 2867, 2859, 2868, 2868, 2861,
     2858, 2858, 2864, 2872, 2855, 2870, 2870, 2860, 2860, 2871,

     2871, 2869, 2863, 2863, 2859, 2873, 2873, 2874, 2866, 2866,
     2875, 2875, 2861, 2868, 2868, 2877, 2877, 2864, 2870, 2870,
     2871, 2871, 2878, 2879, 2876, 2873, 2873, 2869, 2875, 2875,
     2880, 2880, 2877, 2877, 2881, 2880, 2880, 2882, 2882, 2882,
     2882, 1006, 2876, 2884, 2884, 2884, 2884, 1005, 1004, 1003,
     1002, 1001, 2883, 1000, 2883,   23,   23,   23,   23,   23,
       34,   34,   34,   34,   34,   36,   36,   36,   36,   36,
       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       42,   42,   42,   42,   42,  104,  104,  104,  104,  105,

      999,  105,  105,  105,  106,  106,  998,  106,  106,  107,
      107,  107,  997,  107,  996,  995,  992,  991,  990,  989,
      988,  987,  986,  985,  984,  983,  982,  981,  977,  976,
      975,  974,  973,  972,  971,  970,  969,  968,  967,  964,
      961,  960,  959,  958,  957,  956,  951,  950,  949,  948,
      945,  944,  943,  942,  941,  940,  939,  938,  937,  936,
      935,  934,  931,  930,  929,  928,  927,  926,  925,  924,
      923,  922,  921,  919,  918,  915,  914,  913,  911,  910,
      909,  908,  906,  904,  903,  900,  899,  898,  892,  891,
      890,  885,  883,  882,  881,  880,  877,  876,  875,  874,

      872,  870,  869,  868,  867,  863,  862,  861,  860,  859,
      858,  857,  852,  851,  850,  849,  848,  847,  845,  844,
      842,  841,  840,  837,  836,  835,  834,  832,  831,  825,
      824,  820,  819,  818,  817,  816,  815,  814,  813,  808,
      807,  806,  805,  803,  799,  798,  797,  796,  795,  793,
      792,  791,  790,  789,  788,  787,  786,  785,  784,  782,
      781,  780,  779,  778,  776,  775,  772,  771,  770,  767,
      766,  765,  764,  759,  758,  757,  756,  755,  751,  750,
      749,  748,  746,  744,  743,  742,  741,  737,  736,  735,
      734,  733,  732,  731,  726,  725,  724,  723,  722,  721,

      719,  718,  717,  716,  715,  712,  711,  710,  709,  702,
      701,  700,  699,  698,  697,  694,  693,  692,  688,  685,
      684,  683,  680,  679,  678,  677,  676,  675,  674,  673,
      669,  665,  664,  654,  652,  651,  647,  646,  645,  644,
      643,  642,  641,  639,  638,  633,  632,  630,  629,  628,
      627,  620,  619,  616,  615,  614,  613,  609,  608,  607,
      604,  603,  600,  599,  598,  597,  596,  595,  594,  593,
      588,  587,  586,  585,  581,  578,  577,  576,  575,  574,
      571,  570,  566,  565,  564,  563,  562,  561,  558,  557,
      556,  555,  554,  551,  550,  549,  546,  545,  544,  543,

      542,  541,  540,  539,  538,  537,  534,  533,  523,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  510,
      509,  504,  503,  502,  501,  500,  499,  494,  493,  490,
      489,  488,  487,  484,  483,  482,  481,  480,  479,  476,
      475,  471,  470,  469,  468,  467,  466,  465,  462,  461,
      460,  459,  458,  457,  456,  453,  452,  451,  444,  443,
      442,  434,  433,  432,  431,  430,  419,  418,  414,  413,
      409,  408,  407,  406,  405,  404,  403,  402,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  382,  381,  380,  379,  378,  375,  374,  373,

      372,  371,  370,  369,  368,  367,  364,  363,  359,  358,
      357,  356,  355,  354,  353,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  334,  333,  332,  324,  323,
      322,  321,  320,  319,  311,  310,  306,  305,  304,  272,
      267,  266,  259,  253,  250,  249,  246,  243,  242,  239,
      236,  235,  234,  233,  232,  231,  230,  229,  226,  225,
      224,  223,  222,  221,  220,  217,  216,  215,  214,  214,
      213,  181,  176,  175,  168,  162,  140,  137,  136,  126,
      117,  116,  113,  110,  103,  102,   75,  109,  108,  103,
      102,   75,   71,   71, 2885,   35,   35,   35,   35,   35,

       35,   35,   35,   19, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885
    } ;

static yyconst flex_int16_t yy_chk[4671] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,  491,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,  219,   47,   47,   47,  491,   26,
       26,   52,   52,   25,   28,   28,   51,   56,   47,   26,
       26,   26,   28,   58,   28,   28,   28,  219,   62,   26,
       51,   56,   83,   58,   28,    1,    2,    2,    2,    2,
        2,   62,    2,   83,    2,    2,    2,    2,    2,    2,
        2,   26,    2,    2,   61,   63,   28,   48,   48,   64,
        2,   91,   50,   50,   61,    2,   91,   48,   48,   48,

       50,   67,   50,   50,   50,   63,  129,   48,   66,   64,
       68,   92,   50,  129,   66,   67,   72,   72,   67,   92,
       66,  344,   68,   76,   76,   67,   85,   96,  803,   48,
       85,    2,   21,   21,   50,  344,   21,   96,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,  805,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   98,  101,

      101,  131,  131,   23,   23,   23,   23,   23,   23,   23,
       82,   23,   74,   74,   98,  131,   74,   74,   74,   23,
       82,   73,   73,  136,   23,   99,  196,  196,   82,  136,
       99,   73,   73,   73,  112,   23,   23,   23,   23,   23,
       23,   73,   23,  112,  152,   23,   23,   23,   23,  152,
      806,  120,   23,   23,   23,   23,   23,   29,  143,  807,
       86,  134,   86,   73,   29,   89,   86,  120,  143,   94,
       93,   29,   86,   89,   93,   29,  143,  134,   89,   89,
      144,   93,  808,   94,   93,   29,   94,   94,   94,  811,
       93,  144,  153,   29,   29,   29,   29,   29,   29,   29,

      153,   29,   29,  159,   29,   29,   29,   29,   29,   95,
       29,   29,   29,   29,   29,   78,  138,  138,  138,  159,
       95,  169,  157,   95,  169,   78,   95,  146,  141,  141,
      812,  146,  157,   78,   78,   78,   78,   78,   78,   78,
      813,   78,   78,  141,   78,   78,   78,   78,   78,  814,
       78,   78,   78,   78,   78,   97,  160,  182,  815,   97,
      170,  160,  139,  139,  170,   97,  207,   97,  182,  207,
       97,   97,  139,  139,  139,   97,  147,  150,  147,  819,
      184,  155,  147,  154,  184,  150,  260,  154,  147,  260,
      150,  150,  261,  156,  154,  155,  261,  154,  155,  155,

      155,  158,  820,  154,  156,  158,  165,  156,  177,  177,
      156,  158,  165,  158,  214,  214,  158,  158,  183,  183,
      165,  158,  168,  177,  168,  178,  822,  204,  456,  168,
      178,  225,  225,  183,  204,  823,  204,  178,  240,  240,
      178,  178,  456,  241,  241,  225,  241,  273,  241,  251,
      251,  256,  240,  252,  252,  253,  253,  256,  273,  259,
      824,  259,  262,  262,  251,  256,  259,  268,  268,  269,
      253,  274,  274,  298,  269,  275,  298,  262,  539,  275,
      539,  269,  268,  825,  269,  269,  274,  279,  279,  287,
      287,  295,  305,  305,  827,  310,  313,  313,  295,  310,

      295,  509,  279,  828,  262,  314,  314,  305,  321,  321,
      322,  322,  325,  325,  326,  326,  337,  337,  338,  338,
      314,  340,  340,  321,  831,  322,  418,  325,  341,  341,
      418,  337,  355,  355,  359,  359,  340,  365,  365,  509,
      372,  384,  384,  341,  375,  375,  341,  341,  372,  359,
      381,  381,  365,  742,  340,  341,  383,  383,  375,  385,
      385,  390,  390,  372,  381,  391,  391,  403,  403,  742,
      383,  399,  399,  385,  399,  390,  399,  406,  406,  391,
      834,  403,  410,  410,  411,  411,  341,  412,  412,  413,
      413,  406,  421,  421,  422,  422,  427,  427,  835,  411,

      428,  428,  431,  431,  413,  432,  432,  421,  673,  422,
      673,  427,  435,  435,  436,  436,  836,  431,  444,  444,
      432,  447,  447,  448,  448,  450,  450,  435,  451,  451,
      454,  454,  837,  444,  455,  455,  447,  458,  458,  638,
      450,  444,  734,  451,  734,  454,  451,  451,  421,  421,
      467,  467,  458,  471,  471,  451,  473,  473,  450,  477,
      477,  484,  484,  485,  485,  486,  486,  838,  471,  498,
      498,  473,  497,  497,  477,  617,  484,  638,  485,  458,
      505,  505,  506,  506,  484,  839,  451,  497,  507,  507,
      617,  473,  484,  508,  508,  505,  511,  511,  842,  518,

      518,  522,  522,  507,  524,  524,  845,  484,  518,  525,
      525,  527,  527,  847,  518,  528,  528,  540,  540,  524,
      533,  533,  545,  545,  549,  848,  527,  718,  549,  533,
      552,  552,  540,  553,  553,  533,  849,  545,  559,  559,
      560,  560,  572,  572,  718,  552,  573,  573,  579,  579,
      582,  582,  850,  559,  580,  580,  572,  580,  851,  580,
      583,  583,  579,  584,  584,  589,  589,  590,  590,  591,
      591,  844,  592,  592,  583,  592,  852,  592,  683,  589,
      601,  601,  683,  591,  602,  602,  855,  602,  844,  602,
      605,  605,  606,  606,  601,  606,  856,  606,  607,  607,

      610,  610,  611,  611,  605,  612,  612,  621,  621,  622,
      622,  857,  607,  625,  625,  626,  626,  611,  631,  631,
      634,  634,  621,  635,  635,  636,  636,  858,  625,  637,
      637,  640,  640,  647,  647,  634,  648,  648,  649,  649,
      636,  653,  653,  655,  655,  656,  656,  859,  647,  658,
      658,  648,  659,  659,  664,  664,  666,  666,  655,  670,
      670,  671,  671,  861,  658,  674,  674,  678,  678,  664,
      679,  679,  686,  686,  670,  687,  687,  689,  689,  860,
      674,  860,  678,  690,  690,  679,  862,  686,  695,  695,
      696,  696,  689,  700,  700,  703,  703,  678,  704,  704,

      708,  708,  863,  695,  720,  720,  727,  727,  700,  869,
      703,  728,  728,  738,  738,  870,  740,  740,  745,  745,
      747,  747,  738,  751,  751,  752,  752,  872,  738,  740,
      754,  754,  762,  762,  752,  768,  768,  874,  751,  875,
      752,  769,  769,  754,  770,  770,  876,  762,  777,  777,
      768,  783,  783,  786,  786,  794,  794,  800,  800,  770,
      800,  880,  800,  804,  804,  809,  809,  868,  786,  810,
      810,  881,  810,  882,  810,  816,  816,  817,  817,  818,
      818,  821,  821,  868,  821,  883,  821,  826,  826,  816,
      826,  817,  826,  818,  829,  829,  830,  830,  885,  830,

      886,  830,  832,  832,  833,  833,  840,  840,  829,  841,
      841,  843,  843,  846,  846,  887,  832,  853,  853,  854,
      854,  840,  864,  864,  841,  865,  865,  866,  866,  867,
      867,  871,  871,  873,  873,  877,  877,  864,  878,  878,
      879,  879,  884,  884,  867,  888,  888,  889,  889,  891,
      877,  890,  890,  878,  892,  893,  893,  894,  894,  895,
      888,  896,  896,  897,  897,  841,  890,  898,  898,  899,
      893,  900,  901,  902,  903,  904,  896,  905,  905,  906,
      890,  908,  898,  907,  907,  909,  910,  911,  911,  912,
      912,  913,  914,  915,  915,  916,  916,  917,  917,  918,

      919,  921,  911,  920,  920,  922,  923,  924,  915,  925,
      916,  926,  927,  928,  929,  931,  932,  933,  934,  935,
      936,  937,  938,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  951,  951,  938,  952,  952,
      953,  954,  955,  956,  958,  959,  960,  961,  966,  959,
      968,  952,  962,  962,  963,  963,  964,  964,  965,  965,
      967,  967,  969,  971,  972,  973,  974,  962,  975,  976,
      975,  965,  977,  978,  978,  967,  979,  979,  980,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  989,
      987,  979,  990,  990,  991,  993,  993,  989,  994,  994,

      995,  996,  998,  989,  999, 1000, 1001,  990, 1002, 1002,
      993, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1009, 1010,
     1011, 1014, 1002,  990, 1015, 1015, 1016, 1017, 1017, 1018,
     1018, 1009, 1019, 1019, 1020, 1020, 1023, 1020, 1015, 1020,
     1024, 1017, 1021, 1021, 1022, 1022, 1019, 1027, 1028, 1028,
     1031, 1031, 1032, 1031, 1033, 1031, 1021, 1034, 1034, 1035,
     1035, 1037, 1028, 1036, 1036, 1038, 1036, 1039, 1036, 1040,
     1041, 1034, 1042, 1035, 1043, 1043, 1044, 1044, 1045, 1045,
     1046, 1046, 1047, 1047, 1048, 1049, 1050, 1051, 1052, 1043,
     1053, 1054, 1056, 1045, 1055, 1055, 1057, 1047, 1058, 1059,

     1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1067, 1055,
     1068, 1068, 1069, 1069, 1070, 1070, 1071, 1072, 1073, 1074,
     1074, 1075, 1067, 1077, 1076, 1078, 1083, 1069, 1076, 1079,
     1079, 1080, 1080, 1084, 1074, 1081, 1081, 1082, 1082, 1085,
     1085, 1086, 1087, 1088, 1079, 1089, 1089, 1090, 1090, 1091,
     1091, 1092, 1082, 1093, 1085, 1093, 1094, 1095, 1095, 1096,
     1097, 1097, 1090, 1098, 1098, 1099, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1108, 1106, 1098, 1109,
     1109, 1110, 1110, 1111, 1111, 1112, 1113, 1113, 1114, 1114,
     1108, 1115, 1115, 1117, 1109, 1118, 1110, 1116, 1116, 1119,

     1119, 1113, 1120, 1114, 1121, 1122, 1122, 1123, 1126, 1127,
     1109, 1128, 1129, 1130, 1119, 1132, 1133, 1134, 1135, 1135,
     1122, 1136, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1143,
     1143, 1144, 1145, 1135, 1140, 1146, 1147, 1148, 1148, 1149,
     1143, 1150, 1150, 1152, 1154, 1155, 1143, 1156, 1157, 1160,
     1150, 1158, 1158, 1159, 1159, 1163, 1150, 1161, 1161, 1162,
     1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1173, 1161, 1174, 1175, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1183, 1179, 1184, 1185, 1185, 1175,
     1186, 1186, 1183, 1187, 1187, 1188, 1189, 1192, 1183, 1193,

     1185, 1190, 1190, 1194, 1195, 1186, 1196, 1196, 1197, 1197,
     1198, 1198, 1200, 1198, 1202, 1198, 1199, 1199, 1201, 1201,
     1196, 1203, 1197, 1204, 1205, 1205, 1206, 1206, 1207, 1206,
     1199, 1206, 1201, 1208, 1208, 1212, 1213, 1213, 1205, 1209,
     1215, 1209, 1216, 1218, 1209, 1209, 1219, 1208, 1220, 1209,
     1209, 1209, 1228, 1209, 1210, 1210, 1209, 1211, 1211, 1229,
     1211, 1231, 1211, 1234, 1214, 1214, 1235, 1214, 1210, 1214,
     1217, 1217, 1221, 1221, 1222, 1222, 1240, 1222, 1241, 1222,
     1225, 1225, 1226, 1226, 1242, 1226, 1221, 1226, 1227, 1227,
     1244, 1227, 1245, 1227, 1225, 1230, 1230, 1232, 1232, 1233,

     1233, 1236, 1236, 1237, 1237, 1238, 1238, 1239, 1239, 1246,
     1230, 1249, 1232, 1250, 1233, 1243, 1243, 1247, 1247, 1251,
     1238, 1248, 1248, 1252, 1253, 1253, 1254, 1254, 1256, 1257,
     1243, 1252, 1247, 1255, 1255, 1255, 1258, 1259, 1265, 1253,
     1269, 1254, 1260, 1260, 1253, 1255, 1261, 1261, 1262, 1262,
     1270, 1255, 1263, 1263, 1264, 1264, 1271, 1260, 1266, 1266,
     1267, 1267, 1268, 1268, 1272, 1273, 1273, 1263, 1276, 1264,
     1274, 1274, 1277, 1266, 1275, 1275, 1280, 1268, 1278, 1278,
     1279, 1279, 1281, 1282, 1284, 1274, 1283, 1283, 1285, 1286,
     1287, 1288, 1292, 1278, 1289, 1289, 1290, 1290, 1291, 1291,

     1293, 1294, 1295, 1295, 1296, 1297, 1298, 1299, 1299, 1300,
     1300, 1290, 1303, 1291, 1301, 1301, 1305, 1295, 1302, 1302,
     1304, 1304, 1299, 1310, 1306, 1306, 1307, 1307, 1313, 1301,
     1295, 1308, 1308, 1309, 1309, 1314, 1295, 1317, 1290, 1306,
     1311, 1311, 1312, 1312, 1315, 1315, 1316, 1316, 1309, 1318,
     1319, 1320, 1321, 1322, 1323, 1311, 1324, 1325, 1328, 1315,
     1326, 1326, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1340, 1342, 1343, 1343, 1344,
     1345, 1345, 1346, 1347, 1348, 1349, 1343, 1350, 1351, 1352,
     1352, 1353, 1343, 1345, 1355, 1356, 1357, 1358, 1359, 1360,

     1363, 1364, 1364, 1365, 1365, 1366, 1367, 1368, 1367, 1369,
     1370, 1371, 1372, 1373, 1374, 1374, 1364, 1375, 1375, 1376,
     1377, 1377, 1378, 1379, 1381, 1382, 1383, 1384, 1384, 1387,
     1375, 1385, 1385, 1388, 1385, 1391, 1385, 1386, 1386, 1394,
     1386, 1384, 1386, 1389, 1389, 1390, 1390, 1392, 1392, 1393,
     1393, 1395, 1393, 1396, 1393, 1397, 1397, 1389, 1397, 1398,
     1397, 1392, 1399, 1400, 1401, 1401, 1402, 1402, 1403, 1402,
     1404, 1402, 1404, 1405, 1406, 1407, 1408, 1410, 1401, 1409,
     1411, 1412, 1412, 1413, 1412, 1414, 1412, 1415, 1418, 1419,
     1420, 1422, 1421, 1421, 1408, 1421, 1409, 1421, 1423, 1425,

     1410, 1424, 1424, 1426, 1424, 1431, 1424, 1429, 1429, 1430,
     1430, 1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435, 1436,
     1437, 1439, 1429, 1438, 1438, 1440, 1432, 1441, 1442, 1442,
     1434, 1443, 1443, 1444, 1445, 1446, 1447, 1447, 1448, 1448,
     1449, 1450, 1451, 1442, 1452, 1453, 1453, 1454, 1454, 1455,
     1456, 1456, 1458, 1448, 1457, 1457, 1459, 1460, 1461, 1462,
     1453, 1463, 1464, 1466, 1465, 1456, 1465, 1467, 1467, 1468,
     1468, 1469, 1469, 1470, 1470, 1471, 1471, 1472, 1473, 1473,
     1474, 1474, 1475, 1475, 1468, 1476, 1477, 1478, 1470, 1479,
     1480, 1480, 1481, 1482, 1482, 1474, 1483, 1483, 1484, 1485,

     1486, 1487, 1488, 1489, 1490, 1490, 1491, 1491, 1482, 1492,
     1492, 1493, 1493, 1494, 1495, 1495, 1496, 1496, 1497, 1490,
     1498, 1491, 1498, 1499, 1492, 1500, 1500, 1501, 1501, 1495,
     1502, 1503, 1504, 1505, 1506, 1507, 1507, 1508, 1508, 1509,
     1500, 1510, 1511, 1511, 1512, 1512, 1513, 1513, 1514, 1514,
     1515, 1515, 1516, 1517, 1517, 1518, 1518, 1519, 1520, 1512,
     1521, 1522, 1523, 1514, 1524, 1525, 1526, 1527, 1517, 1528,
     1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
     1539, 1540, 1541, 1542, 1543, 1544, 1544, 1545, 1545, 1546,
     1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,

     1545, 1557, 1558, 1559, 1560, 1561, 1561, 1562, 1563, 1517,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1571, 1572,
     1573, 1574, 1575, 1577, 1578, 1578, 1577, 1578, 1579, 1578,
     1580, 1583, 1583, 1584, 1586, 1577, 1585, 1585, 1587, 1585,
     1588, 1585, 1589, 1590, 1593, 1594, 1594, 1597, 1594, 1599,
     1594, 1598, 1598, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1612, 1613, 1598, 1614, 1615, 1620, 1620,
     1621, 1622, 1622, 1623, 1623, 1624, 1625, 1626, 1627, 1628,
     1629, 1629, 1630, 1631, 1632, 1633, 1633, 1634, 1634, 1635,
     1636, 1637, 1638, 1639, 1639, 1640, 1641, 1641, 1642, 1643,

     1633, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1652, 1653, 1653, 1654, 1655, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1661, 1662, 1662, 1663, 1664, 1665, 1666, 1667,
     1668, 1669, 1669, 1670, 1670, 1674, 1661, 1671, 1671, 1672,
     1672, 1673, 1673, 1675, 1675, 1676, 1669, 1677, 1678, 1679,
     1680, 1680, 1671, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1688, 1689, 1689, 1690, 1690, 1691, 1692, 1692, 1693,
     1693, 1694, 1694, 1696, 1699, 1700, 1701, 1689, 1702, 1703,
     1704, 1705, 1692, 1706, 1707, 1708, 1694, 1709, 1710, 1711,
     1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1720,

     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1730, 1731,
     1732, 1733, 1734, 1735, 1736, 1737, 1738, 1740, 1742, 1743,
     1744, 1745, 1746, 1746, 1748, 1749, 1750, 1751, 1754, 1754,
     1757, 1758, 1758, 1759, 1759, 1760, 1764, 1746, 1761, 1761,
     1762, 1762, 1754, 1763, 1763, 1758, 1765, 1759, 1766, 1767,
     1768, 1768, 1761, 1769, 1762, 1770, 1771, 1772, 1772, 1773,
     1774, 1774, 1775, 1776, 1768, 1777, 1778, 1778, 1780, 1779,
     1779, 1772, 1781, 1781, 1774, 1782, 1782, 1783, 1784, 1785,
     1778, 1786, 1787, 1774, 1779, 1788, 1788, 1781, 1789, 1790,
     1782, 1791, 1768, 1792, 1761, 1793, 1794, 1795, 1796, 1797,

     1798, 1799, 1800, 1801, 1802, 1803, 1774, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1810, 1811, 1811, 1812, 1813, 1814,
     1815, 1816, 1817, 1817, 1818, 1818, 1819, 1820, 1821, 1822,
     1811, 1823, 1823, 1824, 1825, 1825, 1826, 1827, 1828, 1829,
     1829, 1830, 1830, 1831, 1831, 1832, 1823, 1833, 1833, 1825,
     1834, 1834, 1835, 1835, 1829, 1836, 1830, 1837, 1839, 1840,
     1840, 1841, 1843, 1843, 1844, 1834, 1846, 1847, 1840, 1848,
     1849, 1843, 1850, 1851, 1840, 1852, 1853, 1843, 1854, 1855,
     1856, 1857, 1857, 1858, 1859, 1860, 1862, 1863, 1864, 1864,
     1865, 1866, 1867, 1868, 1869, 1870, 1857, 1871, 1872, 1873,

     1874, 1876, 1877, 1864, 1878, 1879, 1880, 1880, 1881, 1881,
     1882, 1883, 1884, 1885, 1886, 1886, 1888, 1887, 1887, 1896,
     1887, 1880, 1887, 1889, 1889, 1890, 1890, 1898, 1886, 1891,
     1891, 1892, 1892, 1893, 1893, 1894, 1894, 1889, 1895, 1895,
     1897, 1897, 1899, 1891, 1900, 1901, 1904, 1893, 1905, 1894,
     1902, 1902, 1903, 1903, 1906, 1907, 1908, 1908, 1909, 1909,
     1910, 1911, 1911, 1913, 1902, 1912, 1912, 1914, 1915, 1916,
     1908, 1917, 1918, 1918, 1922, 1911, 1919, 1919, 1920, 1920,
     1906, 1921, 1921, 1923, 1923, 1927, 1918, 1924, 1924, 1925,
     1925, 1926, 1926, 1920, 1928, 1928, 1929, 1931, 1923, 1930,

     1930, 1932, 1932, 1934, 1925, 1933, 1933, 1935, 1935, 1928,
     1936, 1937, 1938, 1939, 1930, 1940, 1932, 1941, 1942, 1943,
     1933, 1944, 1935, 1945, 1946, 1947, 1948, 1949, 1949, 1950,
     1951, 1952, 1953, 1953, 1954, 1954, 1955, 1956, 1957, 1958,
     1959, 1960, 1949, 1961, 1962, 1963, 1969, 1953, 1964, 1964,
     1965, 1965, 1966, 1966, 1967, 1967, 1968, 1968, 1970, 1971,
     1972, 1972, 1976, 1964, 1973, 1973, 1978, 1966, 1979, 1967,
     1974, 1974, 1975, 1975, 1982, 1972, 1977, 1977, 1981, 1981,
     1984, 1983, 1983, 1985, 1985, 1974, 1986, 1981, 1987, 1987,
     1988, 1989, 1985, 1981, 1983, 1990, 1991, 1992, 1985, 1993,

     1994, 1987, 1995, 1996, 1997, 1999, 2000, 2000, 2001, 2001,
     2002, 2003, 2006, 2007, 2007, 2008, 2008, 2009, 2013, 2014,
     2015, 2000, 2016, 2017, 2018, 2019, 2020, 2021, 2007, 2022,
     2023, 2023, 2024, 2025, 2026, 2026, 2027, 2028, 2028, 2029,
     2028, 2030, 2028, 2031, 2032, 2032, 2025, 2037, 2026, 2033,
     2033, 2034, 2034, 2035, 2035, 2038, 2035, 2040, 2035, 2036,
     2036, 2039, 2039, 2041, 2043, 2034, 2042, 2042, 2044, 2045,
     2046, 2046, 2047, 2048, 2048, 2039, 2049, 2050, 2050, 2044,
     2051, 2052, 2053, 2054, 2046, 2044, 2055, 2055, 2056, 2056,
     2057, 2057, 2058, 2059, 2059, 2060, 2060, 2061, 2062, 2062,

     2055, 2063, 2063, 2064, 2064, 2065, 2065, 2066, 2066, 2067,
     2068, 2068, 2072, 2062, 2069, 2069, 2070, 2070, 2064, 2075,
     2065, 2071, 2071, 2073, 2073, 2068, 2074, 2074, 2076, 2077,
     2078, 2070, 2079, 2080, 2081, 2082, 2083, 2085, 2073, 2084,
     2084, 2086, 2087, 2087, 2088, 2088, 2089, 2089, 2090, 2090,
     2091, 2092, 2093, 2093, 2084, 2094, 2094, 2087, 2097, 2088,
     2095, 2095, 2098, 2090, 2096, 2096, 2099, 2100, 2101, 2102,
     2094, 2103, 2103, 2104, 2104, 2095, 2105, 2105, 2108, 2096,
     2106, 2106, 2107, 2107, 2109, 2110, 2110, 2112, 2104, 2111,
     2111, 2113, 2114, 2115, 2115, 2116, 2116, 2107, 2117, 2118,

     2119, 2119, 2120, 2120, 2121, 2123, 2124, 2118, 2116, 2125,
     2126, 2127, 2128, 2129, 2130, 2120, 2131, 2132, 2133, 2133,
     2134, 2135, 2137, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
     2146, 2147, 2148, 2149, 2150, 2151, 2152, 2152, 2107, 2153,
     2153, 2154, 2157, 2158, 2158, 2161, 2158, 2162, 2158, 2166,
     2152, 2163, 2163, 2164, 2164, 2165, 2165, 2167, 2168, 2169,
     2170, 2171, 2172, 2172, 2174, 2163, 2173, 2173, 2175, 2165,
     2176, 2176, 2177, 2169, 2178, 2179, 2172, 2180, 2180, 2182,
     2181, 2181, 2183, 2181, 2176, 2181, 2184, 2184, 2185, 2185,
     2188, 2180, 2186, 2186, 2187, 2187, 2189, 2189, 2188, 2190,

     2190, 2191, 2191, 2185, 2192, 2192, 2193, 2194, 2195, 2196,
     2197, 2198, 2199, 2200, 2201, 2204, 2191, 2202, 2202, 2203,
     2203, 2205, 2206, 2206, 2207, 2207, 2208, 2208, 2209, 2209,
     2210, 2210, 2202, 2211, 2211, 2212, 2219, 2206, 2213, 2213,
     2214, 2214, 2220, 2209, 2215, 2215, 2216, 2216, 2211, 2217,
     2217, 2218, 2218, 2213, 2221, 2222, 2223, 2224, 2224, 2215,
     2225, 2225, 2226, 2226, 2217, 2227, 2227, 2228, 2228, 2229,
     2230, 2231, 2224, 2232, 2233, 2234, 2234, 2226, 2235, 2236,
     2237, 2239, 2228, 2238, 2238, 2240, 2241, 2242, 2243, 2244,
     2245, 2246, 2247, 2248, 2249, 2250, 2252, 2253, 2254, 2255,

     2256, 2257, 2259, 2260, 2261, 2262, 2263, 2264, 2264, 2265,
     2266, 2267, 2268, 2269, 2269, 2270, 2270, 2271, 2271, 2272,
     2273, 2274, 2265, 2275, 2276, 2277, 2278, 2279, 2279, 2270,
     2280, 2281, 2282, 2282, 2283, 2283, 2284, 2285, 2286, 2287,
     2287, 2290, 2287, 2291, 2287, 2293, 2282, 2292, 2292, 2294,
     2295, 2295, 2296, 2296, 2297, 2298, 2299, 2300, 2301, 2302,
     2303, 2304, 2305, 2306, 2306, 2295, 2307, 2308, 2308, 2309,
     2309, 2310, 2310, 2311, 2311, 2312, 2312, 2313, 2314, 2314,
     2315, 2315, 2308, 2316, 2316, 2317, 2318, 2319, 2311, 2320,
     2321, 2322, 2322, 2323, 2323, 2324, 2324, 2325, 2325, 2326,

     2326, 2327, 2327, 2328, 2329, 2330, 2322, 2331, 2332, 2333,
     2334, 2335, 2325, 2337, 2338, 2339, 2327, 2340, 2341, 2342,
     2343, 2344, 2345, 2346, 2347, 2348, 2349, 2351, 2352, 2353,
     2354, 2354, 2355, 2356, 2356, 2357, 2357, 2358, 2359, 2360,
     2361, 2362, 2363, 2363, 2364, 2354, 2365, 2356, 2366, 2357,
     2367, 2368, 2369, 2370, 2371, 2372, 2373, 2373, 2374, 2375,
     2375, 2376, 2377, 2378, 2379, 2380, 2381, 2381, 2382, 2382,
     2383, 2384, 2385, 2375, 2386, 2387, 2388, 2389, 2390, 2391,
     2392, 2392, 2395, 2382, 2393, 2393, 2394, 2394, 2396, 2397,
     2398, 2398, 2399, 2400, 2405, 2392, 2401, 2401, 2402, 2402,

     2403, 2403, 2404, 2404, 2406, 2398, 2409, 2410, 2411, 2412,
     2413, 2414, 2415, 2416, 2417, 2403, 2418, 2421, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2429, 2430, 2430, 2431,
     2436, 2416, 2432, 2432, 2433, 2433, 2434, 2434, 2435, 2435,
     2429, 2437, 2438, 2439, 2440, 2441, 2432, 2442, 2443, 2444,
     2434, 2445, 2446, 2447, 2447, 2448, 2448, 2449, 2450, 2450,
     2451, 2451, 2452, 2452, 2453, 2454, 2454, 2447, 2456, 2448,
     2455, 2455, 2450, 2457, 2451, 2458, 2458, 2453, 2459, 2459,
     2454, 2460, 2461, 2462, 2463, 2455, 2464, 2465, 2466, 2466,
     2458, 2467, 2467, 2468, 2469, 2469, 2470, 2471, 2472, 2473,

     2473, 2475, 2463, 2466, 2474, 2474, 2467, 2476, 2477, 2477,
     2478, 2479, 2480, 2481, 2473, 2483, 2484, 2485, 2487, 2488,
     2489, 2490, 2491, 2492, 2492, 2493, 2494, 2496, 2497, 2498,
     2499, 2499, 2500, 2501, 2501, 2502, 2502, 2505, 2492, 2503,
     2503, 2504, 2504, 2506, 2507, 2508, 2509, 2509, 2510, 2511,
     2512, 2513, 2518, 2503, 2522, 2504, 2514, 2514, 2515, 2515,
     2509, 2516, 2516, 2517, 2517, 2519, 2519, 2520, 2520, 2523,
     2514, 2521, 2521, 2524, 2524, 2516, 2525, 2525, 2528, 2519,
     2526, 2526, 2527, 2527, 2529, 2529, 2530, 2530, 2524, 2531,
     2532, 2533, 2533, 2534, 2535, 2526, 2536, 2537, 2542, 2529,

     2538, 2538, 2539, 2539, 2540, 2540, 2533, 2541, 2541, 2543,
     2544, 2545, 2545, 2546, 2546, 2538, 2547, 2548, 2549, 2540,
     2550, 2551, 2552, 2553, 2555, 2556, 2545, 2557, 2558, 2559,
     2560, 2561, 2561, 2562, 2562, 2563, 2564, 2566, 2567, 2568,
     2569, 2569, 2570, 2570, 2571, 2571, 2561, 2572, 2572, 2573,
     2573, 2574, 2574, 2575, 2569, 2576, 2577, 2577, 2571, 2578,
     2578, 2579, 2580, 2573, 2581, 2574, 2582, 2583, 2583, 2585,
     2577, 2584, 2584, 2586, 2586, 2587, 2588, 2589, 2589, 2590,
     2590, 2591, 2592, 2592, 2593, 2593, 2594, 2594, 2595, 2596,
     2596, 2597, 2597, 2598, 2599, 2600, 2601, 2592, 2602, 2602,

     2604, 2594, 2603, 2603, 2596, 2605, 2606, 2607, 2607, 2608,
     2608, 2609, 2609, 2610, 2611, 2612, 2613, 2615, 2616, 2617,
     2618, 2619, 2607, 2620, 2621, 2623, 2609, 2622, 2622, 2624,
     2626, 2627, 2628, 2628, 2629, 2629, 2630, 2630, 2631, 2631,
     2635, 2631, 2637, 2631, 2632, 2632, 2633, 2633, 2634, 2634,
     2630, 2636, 2636, 2638, 2639, 2639, 2640, 2641, 2632, 2642,
     2642, 2648, 2634, 2643, 2643, 2644, 2644, 2650, 2639, 2645,
     2645, 2646, 2646, 2642, 2647, 2647, 2651, 2643, 2649, 2649,
     2644, 2652, 2653, 2654, 2655, 2656, 2646, 2657, 2657, 2658,
     2658, 2659, 2659, 2660, 2660, 2661, 2662, 2663, 2664, 2665,

     2666, 2667, 2668, 2669, 2658, 2670, 2672, 2673, 2660, 2675,
     2675, 2676, 2675, 2677, 2675, 2678, 2678, 2679, 2679, 2680,
     2680, 2681, 2682, 2683, 2684, 2684, 2685, 2685, 2686, 2687,
     2687, 2679, 2688, 2688, 2689, 2689, 2690, 2690, 2684, 2691,
     2691, 2692, 2692, 2687, 2693, 2693, 2688, 2694, 2694, 2695,
     2690, 2696, 2697, 2698, 2699, 2700, 2692, 2701, 2701, 2702,
     2703, 2703, 2704, 2704, 2705, 2705, 2706, 2707, 2707, 2708,
     2709, 2710, 2701, 2711, 2712, 2713, 2714, 2704, 2715, 2716,
     2717, 2721, 2707, 2720, 2720, 2722, 2723, 2724, 2724, 2725,
     2726, 2726, 2727, 2727, 2728, 2728, 2729, 2729, 2730, 2730,

     2731, 2732, 2733, 2735, 2726, 2734, 2734, 2736, 2737, 2737,
     2738, 2738, 2739, 2740, 2740, 2741, 2742, 2742, 2743, 2743,
     2734, 2744, 2745, 2737, 2746, 2749, 2751, 2752, 2753, 2754,
     2755, 2742, 2756, 2757, 2758, 2758, 2759, 2734, 2760, 2760,
     2761, 2761, 2762, 2762, 2763, 2763, 2764, 2765, 2765, 2766,
     2767, 2767, 2768, 2760, 2769, 2761, 2771, 2762, 2770, 2770,
     2772, 2774, 2765, 2775, 2777, 2778, 2779, 2780, 2781, 2782,
     2782, 2783, 2783, 2784, 2784, 2785, 2785, 2786, 2786, 2787,
     2787, 2788, 2789, 2789, 2782, 2791, 2783, 2790, 2790, 2793,
     2785, 2792, 2792, 2794, 2795, 2796, 2797, 2789, 2798, 2799,

     2800, 2801, 2802, 2803, 2803, 2807, 2792, 2804, 2804, 2805,
     2805, 2806, 2806, 2808, 2808, 2809, 2810, 2810, 2803, 2811,
     2811, 2812, 2813, 2813, 2814, 2814, 2815, 2816, 2817, 2818,
     2819, 2810, 2820, 2821, 2822, 2822, 2823, 2813, 2824, 2814,
     2825, 2825, 2826, 2827, 2827, 2828, 2828, 2829, 2829, 2830,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2827, 2838,
     2839, 2840, 2829, 2841, 2841, 2842, 2842, 2844, 2846, 2846,
     2847, 2848, 2849, 2849, 2850, 2850, 2851, 2852, 2852, 2853,
     2854, 2854, 2846, 2855, 2855, 2856, 2849, 2857, 2857, 2850,
     2858, 2858, 2852, 2862, 2854, 2859, 2859, 2860, 2860, 2861,

     2861, 2857, 2863, 2863, 2858, 2864, 2864, 2865, 2866, 2866,
     2867, 2867, 2860, 2868, 2868, 2869, 2869, 2863, 2870, 2870,
     2871, 2871, 2872, 2874, 2867, 2873, 2873, 2868, 2875, 2875,
     2876, 2876, 2877, 2877, 2878, 2880, 2880, 2881, 2881, 2882,
     2882,  799, 2875, 2883, 2883, 2884, 2884,  798,  797,  796,
      795,  793, 2881,  792, 2882, 2886, 2886, 2886, 2886, 2886,
     2887, 2887, 2887, 2887, 2887, 2888, 2888, 2888, 2888, 2888,
     2889, 2889, 2889, 2889, 2889, 2890, 2890, 2890, 2890, 2890,
     2891, 2891, 2891, 2891, 2891, 2892, 2892, 2892, 2892, 2892,
     2893, 2893, 2893, 2893, 2893, 2894, 2894, 2894, 2894, 2895,

      791, 2895, 2895, 2895, 2896, 2896,  790, 2896, 2896, 2897,
     2897, 2897,  789, 2897,  788,  787,  785,  784,  781,  780,
      779,  778,  776,  775,  774,  773,  772,  771,  767,  766,
      765,  764,  761,  760,  759,  758,  757,  756,  755,  753,
      750,  749,  748,  746,  744,  743,  739,  737,  736,  735,
      733,  732,  731,  730,  729,  726,  725,  724,  723,  722,
      721,  719,  717,  716,  714,  713,  712,  711,  710,  709,
      707,  706,  705,  702,  701,  699,  698,  697,  694,  693,
      692,  691,  688,  685,  684,  682,  681,  680,  677,  676,
      675,  672,  669,  668,  667,  665,  663,  662,  661,  660,

      657,  654,  652,  651,  650,  646,  645,  644,  643,  642,
      641,  639,  633,  632,  630,  629,  628,  627,  624,  623,
      620,  619,  618,  616,  615,  614,  613,  609,  608,  604,
      603,  600,  599,  598,  597,  596,  595,  594,  593,  588,
      587,  586,  585,  581,  578,  577,  576,  575,  574,  571,
      570,  569,  568,  567,  566,  565,  563,  562,  561,  558,
      557,  556,  555,  554,  551,  550,  548,  547,  546,  544,
      543,  542,  541,  538,  537,  536,  535,  534,  532,  531,
      530,  529,  526,  523,  521,  520,  519,  517,  516,  515,
      514,  513,  512,  510,  504,  503,  502,  501,  500,  499,

      496,  495,  494,  493,  492,  490,  489,  488,  487,  483,
      482,  481,  480,  479,  478,  476,  475,  474,  472,  470,
      469,  468,  466,  465,  464,  463,  462,  461,  460,  459,
      457,  453,  452,  449,  446,  445,  443,  442,  441,  440,
      439,  438,  437,  434,  433,  430,  429,  426,  425,  424,
      423,  420,  419,  417,  416,  415,  414,  409,  408,  407,
      405,  404,  402,  398,  397,  396,  395,  394,  393,  392,
      389,  388,  387,  386,  382,  380,  379,  378,  377,  376,
      374,  373,  371,  370,  369,  368,  367,  366,  364,  363,
      362,  361,  360,  358,  357,  356,  354,  353,  352,  351,

      350,  349,  348,  347,  346,  345,  343,  342,  339,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  324,
      323,  320,  319,  318,  317,  316,  315,  312,  311,  309,
      308,  307,  306,  304,  303,  302,  301,  300,  299,  297,
      296,  294,  293,  292,  291,  290,  289,  288,  286,  285,
      284,  283,  282,  281,  280,  278,  277,  276,  272,  271,
      270,  267,  266,  265,  264,  263,  258,  257,  255,  254,
      249,  248,  247,  246,  245,  244,  243,  242,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  224,  223,  222,  221,  220,  218,  217,  216,

      213,  212,  211,  210,  209,  208,  206,  205,  203,  202,
      201,  200,  199,  198,  197,  195,  194,  193,  192,  191,
      190,  189,  187,  186,  185,  181,  180,  179,  176,  175,
      174,  173,  172,  171,  167,  166,  164,  163,  161,  151,
      149,  148,  145,  142,  140,  137,  135,  133,  132,  130,
      128,  127,  126,  125,  124,  123,  122,  121,  119,  118,
      117,  116,  115,  114,  113,  111,  110,  108,  103,  102,
      100,   90,   88,   87,   84,   81,   77,   70,   69,   65,
       60,   59,   57,   55,   54,   53,   49,   44,   41,   32,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,

        5,    4,    3, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[389] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file OSparseosol.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosol.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosol.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 107 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2554 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 117 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2810 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2886 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4604 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 120 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 127 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 377:
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 573 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 381:
#line 575 "../../../../OS/src/OSParsers/OSParseosol.l"
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 575 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 576 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 580 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 387:
/* rule 387 can match eol */
YY_RULE_SETUP
#line 585 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 597 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 5256 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2886 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2886 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2885);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 597 "../../../../OS/src/OSParsers/OSParseosol.l"





