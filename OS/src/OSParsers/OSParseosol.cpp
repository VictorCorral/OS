#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 430
#define YY_END_OF_BUFFER 431
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3273] =
    {   0,
        1,    1,  428,  428,  426,  426,  427,  427,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  431,  429,
        1,    2,  416,    2,  416,    6,  416,    5,  429,    4,
      416,  416,    2,  428,  430,  426,  427,  417,  419,  420,
      419,  423,  424,  423,    1,  416,  416,    6,  416,    5,
        0,    4,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
        3,    6,    6,  416,    7,    5,    0,    0,  422,  376,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      416,  416,  428,  426,  427,  417,    0,  425,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  378,    0,    0,    0,    0,    0,    0,    0,    0,
      148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  332,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  421,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  418,    0,  377,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  228,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  362,    0,
        0,    0,    0,    0,    0,    0,  110,    0,    0,    0,
      346,    0,    0,    0,    0,    0,    0,    0,  220,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  212,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,   27,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,   97,   98,  416,  416,
      416,  416,  416,  416,  416,  416,  377,    0,  379,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,  363,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  347,    0,    0,    0,    0,    0,
        0,  333,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  358,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  354,    0,    0,    0,
        0,    0,    0,    0,  360,    0,  356,    0,    0,  362,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      346,    0,    0,  364,    0,    0,  366,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  160,    0,    0,    0,    0,    0,    0,    0,
        0,  352,    0,    0,    0,    0,    0,    0,  368,    0,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
      416,  416,  416,  416,  416,  329,  416,  416,  416,  416,
      416,  416,  416,  416,   27,  416,  416,   28,  416,  416,

      416,  416,  416,   29,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  379,    0,  359,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  229,    0,    0,    0,  355,
        0,    0,    0,    0,  149,    0,    0,    0,  361,    0,
      357,    0,    0,  363,    0,    0,    0,    0,    0,    0,
        0,    0,  111,    0,    0,    0,  347,    0,    0,  365,
        0,    0,  367,    0,    0,    0,    0,    0,    0,  333,
        0,    0,    0,    0,  221,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      353,    0,    0,  213,    0,    0,    0,    0,    0,  369,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  215,
        0,    0,    0,  358,    0,    0,    0,    0,    0,    0,
      194,  294,    0,    0,    0,  354,    0,    0,    0,    0,
        0,    0,  360,  356,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  239,  122,    0,    0,    0,
      364,    0,  366,    0,    0,    0,    0,    0,    0,  245,
        0,    0,    0,    0,    0,    0,    0,  102,  101,  136,
        0,    0,    0,    0,  338,    0,    0,    0,    0,    0,
        0,    0,  352,    0,    0,    0,    0,  312,  368,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  416,
      416,  416,  416,  416,  329,  416,  416,  416,  416,  416,
      416,   95,   96,  416,  416,   28,  416,  416,  416,  416,
       29,  416,   59,   60,  416,  416,  416,  416,  416,  416,
      416,  416,  416,   71,   72,  416,  416,  416,   81,   82,
      416,  416,  416,  416,  359,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  229,    0,    0,  355,    0,    0,
        0,    0,    0,    0,  361,  357,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  240,  111,    0,    0,
        0,    0,  365,    0,  367,    0,    0,    0,    0,    0,

      246,    0,    0,    0,    0,  221,    0,    0,    0,    0,
      103,    0,    0,    0,    0,  161,    0,    0,  339,    0,
        0,    0,    0,    0,    0,    0,  353,    0,  213,    0,
        0,    0,    0,  369,    0,    0,    0,    0,    0,  151,
        0,    0,    0,  215,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  292,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  202,  241,  239,    0,    0,    0,    0,
      288,    0,    0,    0,    0,    0,  340,  247,  245,    0,
        0,    0,    0,  374,    0,    0,    0,    0,    0,    0,

        0,  338,    0,  344,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  106,    0,  334,    0,    0,
        0,  318,  324,    0,    0,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,   57,   58,  416,  416,  416,  416,   30,  416,  416,
      416,   31,  416,  416,   69,   70,  416,  416,   79,   80,
      416,   85,   86,  416,  416,  416,    0,    0,    0,    0,
        0,    0,    0,  195,    0,  295,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  240,    0,  123,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  341,
      246,    0,    0,    0,    0,    0,    0,    0,  103,    0,
      137,    0,    0,    0,  161,    0,  339,    0,  345,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      313,    0,    0,    0,  335,    0,  151,    0,    0,    0,
        0,    0,    0,    0,    0,  196,  198,    0,    0,    0,
        0,    0,  132,    0,    0,    0,    0,  336,    0,    0,
        0,    0,  104,  316,    0,    0,    0,    0,    0,  241,
        0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,    0,    0,    0,    0,  340,  247,    0,

        0,  342,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  344,  184,    0,    0,    0,    0,  108,    0,
        0,    0,    0,    0,  249,    0,  350,    0,    0,  334,
        0,  206,    0,    0,    0,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,   30,  416,   67,
       68,   31,  416,  416,  416,  416,  416,   83,   84,  416,
      416,  416,   93,   94,    0,    0,    0,    0,    0,    0,
      195,  295,    0,  293,    0,    0,    0,    0,    0,    0,
        0,    0,  337,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  203,  123,    0,    0,    0,
        0,  289,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  341,    0,  343,    0,    0,
        0,  375,    0,    0,    0,  137,    0,    0,    0,    0,
        0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  250,    0,  351,    0,  313,    0,    0,  107,
      335,    0,    0,    0,    0,  319,    0,  325,    0,    0,
        0,  370,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  336,  296,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  342,    0,  314,    0,    0,    0,    0,    0,    0,
      130,  172,    0,    0,  372,    0,    0,    0,    0,    0,
        0,    0,    0,  251,  249,    0,  350,    0,    0,    0,
      128,    0,  380,  416,  416,  416,  416,  416,  416,  416,
       41,   42,  416,  279,  416,  416,  416,  416,  416,  416,
      416,  416,   53,   54,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,   63,
       64,  416,   65,   66,  416,  416,  416,  416,   77,   78,

      416,   89,   90,   91,   92,    0,  371,    0,    0,  197,
        0,  199,    0,    0,  293,    0,    0,    0,    0,  133,
        0,    0,    0,  337,    0,    0,    0,    0,    0,    0,
      105,    0,    0,  317,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  203,    0,  262,    0,  127,    0,  289,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  153,    0,    0,    0,    0,
      343,    0,    0,  375,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  185,    0,    0,  373,    0,    0,    0,
        0,  109,    0,    0,    0,    0,    0,  250,  351,    0,

        0,  107,    0,    0,  207,    0,  319,  325,    0,    0,
      370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  263,  261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  372,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  251,    0,    0,
        0,    0,    0,  186,  416,  416,  416,  416,  416,   37,
       38,   39,   40,  279,  416,  416,   49,   50,  416,  416,

      416,  416,   51,   52,  416,  416,   99,  100,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,   61,   62,  416,  416,  416,  416,   75,
       76,   87,   88,  371,    0,  197,  199,    0,    0,    0,
        0,    0,  133,    0,    0,    0,    0,  297,    0,    0,
        0,    0,  105,    0,  317,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  262,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,    0,  315,
        0,    0,    0,    0,    0,    0,    0,  131,    0,  173,

      185,    0,  373,    0,    0,    0,    0,  109,    0,    0,
        0,    0,    0,    0,    0,    0,  207,    0,  129,    0,
        0,  381,    0,  200,    0,  290,  320,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  263,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  402,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  216,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  322,    0,  114,    0,    0,    0,    0,    0,
      204,    0,    0,  416,  416,  416,  416,  416,  416,   35,

       36,  416,   47,   48,  416,  416,  416,  416,  416,  416,
      416,  416,  416,   10,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  315,    0,    0,    0,
        0,    0,    0,  131,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,

      381,    0,  187,    0,    0,  224,    0,    0,    0,  236,
        0,    0,  166,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  398,  400,    0,    0,  404,    0,  382,    0,
        0,    0,  142,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  116,    0,    0,    0,
        0,    0,  348,    0,    0,  416,  416,  416,  416,  416,
      277,  416,  276,  416,  416,  416,  416,   32,  416,  416,
       33,  416,  416,  416,  416,   25,  416,   10,  416,  416,
      416,  416,  416,   23,  416,  416,  416,  416,  416,  416,

       21,  416,  416,   20,  416,  416,  416,  416,  416,  416,
       34,    0,  201,    0,    0,  291,    0,  321,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  403,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  217,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  323,    0,    0,  115,    0,    0,    0,    0,
      349,    0,  205,    0,    0,  187,    0,    0,  156,    0,
        0,  253,    0,    0,    0,  257,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  118,    0,    0,  238,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  144,  138,    0,    0,  244,    0,  112,  242,
      134,    0,    0,    0,    0,    0,    0,  234,    0,    0,
        0,  348,    0,    0,  416,  416,  416,  416,  277,  276,
      416,   45,   46,  416,   32,  416,   33,  416,  416,  416,
      416,   25,  416,  416,  416,  416,  416,   23,  416,  416,
      416,  416,  416,  416,  265,   21,  416,   20,  416,  416,
      416,  416,  416,   34,  201,    0,  291,  321,    0,    0,
      225,    0,    0,  254,    0,    0,  237,    0,  258,    0,

        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      399,    0,  401,  403,    0,    0,    0,  405,    0,    0,
      383,    0,    0,    0,    0,  143,    0,    0,    0,  217,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  323,
        0,  117,  115,    0,    0,    0,  349,  205,    0,    0,
        0,    0,  255,  253,    0,    0,  259,  257,    0,  180,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      238,    0,    0,    0,    0,    0,  392,    0,    0,    0,
        0,    0,    0,  140,  244,    0,    0,    0,    0,    0,

        0,  162,  232,    0,    0,    0,    0,    0,  416,  416,
      416,  268,  416,  416,  416,   43,   44,  416,  416,  416,
       56,   55,  416,  416,  416,  416,  416,   13,  416,  416,
      416,  416,  416,  416,  416,  416,   12,  416,  265,  416,
      416,  416,  416,  416,  416,  416,    0,    0,  225,    0,
      157,  254,    0,  237,  258,    0,  167,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  119,    0,    0,
        0,    0,    0,    0,    0,  399,  401,    0,    0,  405,
        0,  383,    0,    0,    0,  145,  143,    0,  139,    0,
        0,    0,  113,    0,  243,    0,  135,    0,    0,    0,

        0,    0,    0,  117,    0,  235,    0,    0,    0,    0,
        0,    0,    0,  255,    0,    0,    0,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      306,  386,  388,  390,    0,    0,    0,  384,    0,    0,
        0,    0,    0,    0,    0,    0,  124,    0,    0,  326,
        0,  416,  416,  268,  416,  416,  286,  287,  416,  416,
      416,  267,  416,  416,  416,   13,  416,    9,  416,  416,
      416,  416,  416,  416,  416,   12,  416,  416,  416,  278,
      416,  416,  416,  416,   74,   73,    0,    0,  157,    0,
        0,    0,  181,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  119,    0,    0,    0,    0,    0,    0,  393,
        0,    0,    0,    0,    0,    0,  145,  139,    0,  141,
        0,  113,  243,  135,    0,    0,    0,    0,    0,    0,
      163,  235,    0,  233,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  308,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  410,    0,
        0,    0,    0,  182,    0,    0,    0,    0,    0,  416,
      416,  416,  416,  284,  285,  416,  416,  416,  267,  416,
      266,  416,  416,    9,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  278,  416,  416,  416,    0,    0,    0,

        0,  181,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  307,    0,  387,    0,  389,    0,  391,
      393,    0,    0,    0,    0,  385,    0,    0,  141,    0,
        0,    0,    0,    0,    0,  163,  233,    0,  125,    0,
        0,  327,    0,  146,  298,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  170,  120,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      248,    0,  416,  274,  416,  273,  416,  416,  416,  416,
      414,  415,  266,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  275,  416,    0,    0,

        0,    0,    0,  309,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  307,  387,  389,  391,    0,    0,    0,
      385,    0,  411,    0,    0,    0,    0,    0,  183,    0,
        0,  125,    0,  327,    0,    0,    0,  164,    0,    0,
        0,  230,    0,    0,    0,    0,    0,    0,    0,  406,
      408,    0,    0,    0,  176,    0,    0,    0,  248,    0,
      274,  273,  416,  416,  416,  412,  413,  416,  416,  416,
      416,  416,  416,  416,  416,  416,   14,  416,   15,  416,
      416,   16,  275,  416,  416,    0,  147,    0,  299,    0,
        0,  309,    0,    0,    0,    0,    0,    0,    0,    0,

      171,    0,  121,    0,    0,    0,    0,  411,    0,    0,
        0,    0,  183,    0,    0,    0,    0,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,  260,    0,
        0,    0,    0,  154,    0,    0,    0,  416,  272,  416,
      271,  416,  416,  416,  416,  416,   17,  416,  416,  416,
      416,   14,   15,  416,   16,  416,  416,  147,  299,    0,
        0,  165,    0,    0,    0,  231,    0,    0,    0,    0,
      171,  121,    0,    0,    0,  407,    0,  409,    0,    0,
        0,    0,  177,    0,    0,    0,    0,    0,  178,    0,
        0,    0,    0,    0,    0,    0,  260,  394,  396,    0,

        0,  158,    0,    0,  272,  271,  416,  416,  416,   18,
      416,  416,   17,  416,  416,  416,  416,  416,  416,  416,
        0,  165,    0,  193,    0,  231,    0,    0,    0,    0,
        0,    0,  407,  409,    0,    0,    0,  177,    0,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  330,    0,    0,  300,  416,  282,  283,   18,  416,
       11,  416,  416,  416,  416,    8,  416,  416,  416,  270,
      416,  269,    0,  179,  193,    0,    0,    0,    0,    0,
        0,    0,  395,    0,  397,    0,    0,  155,    0,  159,
        0,    0,    0,    0,    0,    0,    0,  188,    0,    0,

        0,    0,  280,  281,   11,  416,  416,  416,    8,  416,
      416,   26,  270,  269,  179,    0,    0,    0,    0,    0,
        0,  395,  397,    0,  331,    0,  159,    0,    0,  301,
        0,    0,    0,  222,  218,    0,  168,    0,    0,    0,
      416,  416,  416,  416,   26,    0,    0,    0,    0,  189,
        0,    0,    0,  331,    0,    0,  301,    0,    0,  226,
        0,    0,  174,    0,  416,  416,  416,  416,    0,    0,
      223,    0,  219,  189,    0,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,  416,  416,  416,  416,    0,
      227,  223,  219,    0,  169,    0,    0,  175,    0,    0,

        0,    0,    0,    0,  416,  416,  416,  416,  227,    0,
        0,  175,    0,    0,  252,    0,  256,    0,    0,    0,
      416,  416,  416,  416,    0,    0,    0,  252,  256,  190,
        0,  210,  416,  416,  416,  416,    0,    0,    0,    0,
      416,  328,  416,  416,  416,   19,    0,  191,    0,    0,
      211,    0,  328,  416,  416,   22,   19,  191,    0,  211,
        0,  416,   24,   22,    0,  208,   24,    0,    0,  209,
      209,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,   27,   28,   29,   30,   31,   32,   33,
        6,   34,   35,   36,   37,   38,   39,   40,    6,    6,
        1,    6,    1,    1,    6,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[3285] =
    {   0,
        0,   67, 5143, 5142, 5153, 5152, 5149, 5148,    0,    0,
        0,    0, 5139, 5138,   13,   16,    3,    5, 5152, 5161,
      133, 5146,  198, 5143,   20,   38, 5132,   52,  258, 5161,
     5117, 5106, 5161,    0, 5161,    0,    0,    0, 5161, 5161,
     5137, 5161, 5161, 5128,    0,    0,   76,   92, 5127,  106,
       20, 5161, 5112, 5101,    1,    2, 5096,    9, 5082, 5081,
        4,    5,   46,   50, 5096,   78,   59,    2, 5096, 5091,
     5161,   25,  223,  208, 5161,   33, 5126,  298, 5161, 5161,
     5108,   70,   51, 5078,    0,   74, 5083, 5086,  173, 5075,
       47,   82,  222,  228,  238,  159,  316,  190,  164, 5088,

     5104, 5096,    0,    0,    0,    0, 5109, 5161, 5066, 5069,
     5063,  211, 5063, 5060, 5077, 5064, 5063, 5053, 5073,  216,
     5072, 5063, 5061, 5059, 5058, 5060, 5068, 5042,  212, 5049,
      270, 5065, 5049,  244, 5055,  176, 5054,  310,  323, 5093,
      292, 5075,  286,   58, 5045,  157,  310, 5050, 5053,  324,
     5042,  226,  257,  334,  273,  314,  335,  342,  336,  238,
     5055, 5161, 5036, 5042,  359, 5034, 5037,  346,  271,  305,
     5046, 5029, 5043, 5032, 5035, 5032,  406,  362, 5061, 5039,
     5041,  350,  410,  350, 5028, 5028, 5033, 5161, 5025, 5025,
     5027, 5016, 5020, 5026, 5013,  171, 5011, 5008, 5015, 5012,

     5005, 5009, 5012,  365, 5004, 5023,  363, 5004, 5009, 5020,
     5004, 5008, 5013,  373,  426, 5161, 5012, 5013, 5010, 5008,
      356, 5010, 4999, 4999, 4997, 4988,  430,  378, 4987, 5006,
     5005, 5000, 4984, 4998, 5000, 5005, 4988, 4994, 4976, 5011,
     4989,  432,  435, 4981, 4989, 4972, 4991, 4971, 4969, 4993,
     4981, 5161,  441,  447,  449, 4968, 4974,  416, 4966, 4969,
      402,  401,  397,  460, 4962, 4976, 4965, 4968, 4965,  462,
      424, 4994, 4972, 4974,  424,  468,  412, 4961, 4961, 4966,
      472, 4958, 4958, 4960, 4949, 4953, 4959, 4946,  422, 4944,
     4941, 4948, 4945, 4938, 4942, 4945,  434, 4937, 4956,  434,

     4937, 4942, 4953, 4937, 4941, 4946,  389,  489, 4968, 4932,
     4933, 4931,  449, 4943, 4953,  437,  497, 4939, 4940, 4937,
     4932, 4927, 4926,  499,  501, 4933, 4932,  505,  507, 4931,
     4915, 4913, 4913, 4927, 4913, 4917, 4943, 4923, 4922,  509,
      517, 4908,  521,  525, 4920, 4923,  463, 4921, 4917, 4912,
     4908, 4914, 4902, 4898, 4908, 4896, 4909,  487, 4892, 4920,
     4889,  531, 4888, 4911, 4890, 4906, 4888,  533, 4900, 4884,
     4898, 4888, 4896, 4886, 4881, 4877,  491,  507, 4886, 4889,
      542, 4870, 4874, 4875, 4896, 4870,  549, 4874,  551,  557,
     4868,  559, 4887, 4875, 4866, 4904,  561,  566, 4879, 4858,

     4881, 4889, 4875, 4875, 4873,  569, 5161, 5161, 4858,  576,
     4875, 4863,  578, 4869, 4848, 4864,  581,  585,  587,  593,
     4889, 4853, 4854, 4852,  521, 4864, 4874,  595,  597, 4860,
     4861, 4858, 4853,  601,  603, 4848, 4847,  605,  613, 4854,
     4853,  617,  621, 4852, 4836, 4834, 4834, 4848, 4834, 4838,
      623, 4845, 4844,  625,  629, 4830,  633,  635, 4842, 4845,
      641,  643,  581, 4843,  657, 4835, 4831, 4837, 4825, 4821,
     4831, 4819, 4832,  618, 4815, 4843, 4812,  661, 4811,  665,
     4814, 4830, 4812,  668, 4824, 4808, 4822, 4812, 4820, 4810,
     4805, 4801,  673,  670,  677, 4812, 4799, 4796, 4802,  571,

     4814, 4805, 4809, 4794, 4812,  681,  686, 4798, 4793, 4807,
     4805, 4803, 4802,  689,  691,  698,  702,  552, 4788,  706,
     4781, 4795, 4783, 4801, 4794, 4795,  708, 4817, 4784, 4796,
      710, 4787,  714,  718, 4786,  721,  724, 4801, 4784, 4787,
     4772,  726, 4770, 4780, 4783, 4782, 4783,  150,  730, 4767,
     4763, 4760, 4789,  732, 4763, 4775, 4758,  564, 4772, 4768,
      737,  739, 4771, 4774, 4771, 4755, 4752,  742,  748, 4753,
     4765, 4750, 4749, 5161, 4752, 4775, 4760, 4760, 4758, 4761,
     4760, 4742,  632, 4744,  750,  753, 4742, 4756, 4747, 4730,
     4750,  755,  758, 4754,  765, 4748,  767,  770, 4739, 4729,

     4740, 4733,  772,  774,  776,  779, 4729, 4730, 4727, 4738,
     4725, 4718, 4721, 4724,  787,  791, 4727, 4717,  797,  799,
      805, 4721, 4716,  807,  809,  812, 4726, 4713, 4710, 4716,
      667, 4728, 4719, 4723,  814,  816, 4708, 4726,  820,  822,
     4712, 4707, 4721, 4719,  825, 4717, 4716,  827,  830,  832,
      836,  570, 4702,  838, 4695, 4709, 4697, 4715, 4708, 4709,
      840,  843,  845, 4731, 4698, 4710,  848, 4701,  850,  852,
     4700,  856,  859, 4715, 4698, 4701, 4686,  861, 4684,  863,
     4694, 4697, 4696,  866,  868, 4697,  486,  872, 4681, 4677,
     4674,  874,  877, 4678, 4690, 4673,  572, 4687, 4683,  879,

      882, 4686,  884,  890, 4689, 4686, 4670, 4667,  895,  897,
     4668, 4680, 4665, 4664,  900, 4667, 4690, 4675,  902,  906,
     4697, 4673, 4676,  908, 4670, 4674, 4669, 4668, 4699, 4670,
     5161, 4651, 4663,  491, 4665,  911, 4663, 4657, 4645, 4659,
     4649, 4644,  913,  918, 4643, 4664, 4658, 4653, 4656,   15,
     4642, 4650, 4649,  920, 4676,  923, 5161,  671, 4634, 4627,
      925, 4637,  927, 4652, 4629, 4634,  930,  932, 4669,  937,
     4640, 4630, 4625, 4624, 4621, 4631, 4625,  939, 5161, 4646,
     4617, 4621, 4634,  942,  948,  951, 4615, 4630, 4613, 4612,
     4618, 4615,  955, 4553, 4551, 4563, 4562, 5161,  958, 4564,

     4552,  960, 4553,   50,   84,   81,  185,  232,  243,  289,
      379,  414,  433,  455,  962,  476,  502,  537,  583,  596,
      964, 5161, 5161,  603,  606,  970,  639,  641,  640,  662,
      972,  976,  731,  739,  716,  717,  734,  982,  984,  986,
      750,  730,  988,  782,  784,  757,  752,  994,  800,  813,
     1001, 1003,  791, 1009, 1011,  810,  831,  843,  845,  882,
      865, 1013, 1016,  872, 1018,  951,  881, 1020,  892,  897,
      888,  910,  916,  918, 1024, 1026,  922,  946,  953,  962,
      983, 1010,  977,  990,  991, 1035, 1037, 1039, 1041, 1002,
      988,  983, 1046,  997, 1051, 1014,  996, 1003, 1057, 1060,

     1062, 1012, 1012, 1009, 1010, 1067, 1011, 1023, 1019, 1076,
     1078, 1080, 1016, 1029, 1083, 1085, 1048, 1088, 1092, 1096,
     1033, 1053, 1042, 1044, 1057, 1061, 1104, 1050, 1107, 1053,
     1069, 1070, 1114, 1116, 1078, 1068, 1120, 1078, 1123, 1125,
     1066, 1089, 1073, 1131, 1095, 1090, 1096, 1093, 1089, 1084,
     1085, 1124, 1085, 5161, 1087, 1093, 1107, 1089, 1105, 1095,
     1097, 1151, 1095, 1115, 1112, 1103, 1107, 1101, 1109, 1113,
     1114, 1121, 1107, 5161, 1164, 1167, 1160, 1127, 1128, 1151,
     1154, 1130, 1146, 1127, 1124, 1183, 1190, 1192, 1194, 1177,
     1196, 1156, 1147, 5161, 1154, 1138, 1180, 1150, 1186, 1149,

     1162, 1212, 1214, 1216, 1153, 1160, 1161, 1177, 1164, 1179,
     1193, 1177, 1225, 1230, 1189, 5161, 1232, 1235, 1184, 1186,
     1188, 5161, 5161, 1198, 1192, 1187, 1192, 1196, 1187, 1186,
     1250, 1194, 1195, 1211, 1234, 1209, 1237, 1219, 1259, 1209,
     1200, 5161, 5161, 1221, 1266, 1209, 1269, 1271, 1274, 1276,
     1284, 1286, 1239, 1226, 5161, 5161, 1250, 1290, 5161, 5161,
     1292, 1291, 1291, 1299, 1301, 1305, 1259, 1257, 1253, 1255,
     1294, 1256, 1316, 1318, 1320, 1322, 1324, 1269, 1275, 1289,
     1271, 1287, 1278, 1280, 1336, 1276, 1299, 1297, 1288, 1292,
     1286, 1294, 1298, 1299, 1306, 1292, 1349, 1352, 1354, 1356,

     1315, 1316, 1339, 1370, 1318, 1333, 1314, 1312, 1367, 1372,
     1374, 1376, 1335, 1326, 1380, 1336, 1320, 1363, 1387, 1392,
     1399, 1335, 1386, 1340, 1409, 1355, 1411, 1413, 1415, 1360,
     1360, 1361, 1377, 1364, 1379, 1393, 1377, 1425, 1429, 1431,
     1433, 1396, 1436, 1438, 1441, 1390, 1447, 1393, 1398, 1454,
     1456, 1407, 1402, 1458, 1413, 5161, 5161, 1415, 1407, 1421,
     1407, 1419, 5161, 1415, 1410, 1414, 1474, 1476, 1415, 1420,
     1440, 1460, 1460, 5161, 1464, 1429, 1436, 1444, 1454, 1491,
     1446, 1495, 5161, 1447, 1452, 1456, 1448, 1459, 1453, 1466,
     1462, 1457, 5161, 1453, 1459, 1481, 1460, 1519, 1521, 1465,

     1523, 1526, 1489, 1472, 1470, 1492, 1489, 1475, 1487, 1488,
     1494, 1481, 1539, 1498, 1542, 1501, 1503, 1503, 1518, 1494,
     1496, 1511, 1551, 1539, 1555, 1558, 1561, 1510, 1507, 1569,
     1509, 5161, 1524, 1515, 1529, 1527, 1518, 1552, 1553, 1578,
     1580, 1582, 1588, 1537, 1590, 1536, 1548, 1548, 1546, 1597,
     1600, 1565, 1606, 1603, 1609, 1612, 1558, 1618, 1637, 1611,
     1611, 1625, 1571, 1572, 1581, 1643, 1645, 5161, 5161, 1651,
     1653, 1659, 1638, 1642, 1666, 1602, 1668, 1670, 1608, 1605,
     1672, 1674, 1676, 1678, 1620, 1622, 1635, 1686, 1632, 1630,
     1633, 1692, 1694, 1633, 1638, 1658, 1678, 1699, 1702, 1691,

     1648, 1655, 1665, 1676, 1715, 1718, 1722, 1724, 1728, 1663,
     1731, 1733, 1688, 1684, 1684, 1695, 1690, 1703, 1698, 1693,
     1748, 1691, 1698, 1720, 1699, 1756, 1758, 1760, 1725, 1708,
     1766, 1768, 1710, 1732, 1729, 1774, 1718, 1730, 1731, 1737,
     1724, 1782, 1784, 1786, 1745, 1747, 1747, 1791, 1739, 1741,
     1756, 1796, 1802, 1804, 1807, 1745, 1809, 1743, 1813, 1815,
     1817, 1756, 1821, 1780, 1824, 1829, 1831, 1833, 1779, 1794,
     1840, 1842, 1780, 1792, 1798, 1789, 1827, 1797, 1809, 1804,
     1805, 1853, 5161, 1809, 1799, 1815, 1820, 1810, 1822, 1809,
     1804, 1824, 1826, 1823, 1824, 1841, 1830, 1813, 1872, 1859,

     1875, 1834, 1839, 1821, 1837, 1822, 1822, 1828, 1833, 1827,
     1850, 1850, 1840, 1859, 1854, 1840, 1844, 1853, 1843, 1835,
     1860, 1900, 1846, 5161, 1860, 1846, 1866, 1859, 1851, 1858,
     5161, 5161, 1852, 1910, 1912, 1872, 1895, 1858, 1879, 1887,
     1862, 1897, 1882, 1923, 1926, 1919, 1929, 1878, 1885, 1882,
     5161, 1891, 1878, 1874, 1883, 1896, 1898, 1941, 1943, 1949,
     1942, 1942, 1956, 1958, 1898, 1960, 1962, 1910, 1918, 1927,
     1909, 1972, 1966, 1966, 1913, 1978, 1980, 1932, 1931, 1936,
     1929, 1936, 1937, 1951, 1954, 1941, 1965, 1957, 1997, 1996,
     1996, 1945, 5161, 5161, 1948, 1971, 1947, 2011, 2004, 2003,

     2019, 2010, 2010, 5161, 5161, 2025, 2027, 1959, 2029, 2031,
     2033, 2035, 1969, 1976, 2037, 1981, 2020, 1990, 2045, 2049,
     2002, 2000, 2004, 2052, 2054, 2009, 1999, 2015, 2020, 2061,
     2063, 2015, 2066, 2070, 2029, 2019, 2014, 2034, 2036, 2034,
     2035, 2053, 2040, 2083, 2085, 2087, 2089, 2091, 2050, 2094,
     2057, 2039, 2055, 2039, 2040, 2046, 2051, 2046, 2067, 2067,
     2057, 2076, 2071, 2057, 2112, 2114, 2065, 2074, 2064, 2056,
     2120, 2066, 2123, 2125, 2085, 2071, 2091, 2084, 2076, 2083,
     2134, 2136, 2139, 2141, 2086, 2144, 2146, 2106, 2130, 2095,
     2155, 2157, 2121, 2129, 2104, 2139, 2124, 2165, 2167, 2116,

     2124, 2172, 2123, 2175, 2177, 2179, 2181, 2183, 2142, 2186,
     2188, 2128, 2153, 2131, 2138, 2146, 2139, 2151, 2146, 2157,
     2149, 2150, 2154, 2156, 2163, 2150, 2156, 2170, 2162, 2155,
     2171, 2156, 2161, 2176, 2160, 2174, 2218, 2220, 2213, 2172,
     2179, 2191, 2174, 2184, 2185, 2184, 2171, 2174, 2182, 2206,
     2192, 2195, 2196, 2195, 2199, 2197, 2202, 2209, 2193, 2224,
     2189, 2200, 2207, 2197, 2208, 2209, 2219, 2254, 2223, 2210,
     2211, 2202, 2209, 2237, 2215, 2211, 2214, 2265, 2210, 2210,
     2228, 2231, 2219, 5161, 2251, 2220, 2212, 2214, 2277, 2276,
     2276, 5161, 5161, 2285, 2231, 2287, 2286, 2286, 2242, 2236,

     2250, 2253, 5161, 5161, 2243, 2298, 5161, 5161, 2247, 2252,
     2305, 2248, 2265, 2269, 2258, 2263, 2266, 2255, 2261, 2254,
     2283, 2267, 2262, 5161, 5161, 2273, 2274, 2259, 2280, 5161,
     5161, 5161, 5161, 2324, 2263, 2327, 2329, 2292, 2270, 2276,
     2284, 2277, 2336, 2291, 2286, 2297, 2341, 2343, 2292, 2293,
     2297, 2299, 2349, 2308, 2352, 2297, 2303, 2318, 2310, 2303,
     2319, 2304, 2309, 2324, 2308, 2365, 2367, 2318, 2325, 2337,
     2320, 2330, 2331, 2330, 2317, 2320, 2328, 2351, 2337, 2340,
     2341, 2340, 2384, 2346, 2344, 2349, 2356, 2369, 2391, 2394,
     2339, 2350, 2356, 2346, 2357, 2358, 2402, 2404, 2407, 2409,

     2411, 2379, 2414, 2383, 2371, 2372, 2363, 2423, 2370, 2401,
     2379, 2375, 2378, 2371, 2389, 2392, 2432, 2434, 2436, 2386,
     2439, 2441, 2443, 5161, 2389, 5161, 5161, 2403, 2390, 2405,
     2398, 2394, 2400, 2397, 2412, 2413, 2406, 2412, 2403, 2411,
     2419, 2416, 2406, 2431, 2425, 2416, 2421, 2418, 2470, 2422,
     2430, 2421, 2428, 2418, 2421, 2422, 2436, 2423, 5161, 2442,
     2443, 2426, 2445, 2442, 2429, 2431, 2445, 2447, 2449, 2444,
     2449, 2431, 5161, 2441, 2452, 2444, 2456, 2441, 2446, 2442,
     2445, 2452, 5161, 2460, 5161, 2451, 2445, 2463, 2454, 2508,
     5161, 2452, 2470, 2460, 2471, 2456, 2458, 2516, 2518, 5161,

     5161, 2520, 5161, 5161, 2479, 2524, 2473, 2527, 2486, 2490,
     2474, 2535, 2539, 2542, 2486, 2493, 2521, 2496, 2547, 2507,
     2505, 2511, 2497, 2555, 2497, 2558, 2506, 2500, 2509, 2564,
     2566, 2512, 2570, 2573, 2532, 2519, 2534, 2527, 2523, 2583,
     2534, 2531, 2546, 2548, 2542, 2547, 2538, 2546, 2554, 2551,
     2541, 2566, 2560, 2551, 2556, 2561, 2553, 2560, 2550, 2553,
     2554, 2568, 2555, 2613, 2576, 2577, 2560, 2579, 2576, 2563,
     2565, 2579, 2581, 2583, 2578, 2564, 2629, 2631, 2574, 2590,
     2582, 2594, 2579, 2637, 2639, 2588, 2584, 2587, 2594, 2647,
     2602, 2649, 2598, 2592, 2610, 2654, 2656, 2600, 2659, 2620,

     2665, 2667, 2672, 2600, 2619, 5161, 2617, 2675, 2643, 5161,
     2678, 2622, 5161, 2638, 2626, 2627, 2650, 2647, 2650, 2638,
     2639, 2655, 2652, 2657, 2697, 2652, 2648, 2649, 2651, 2656,
     2647, 2671, 5161, 5161, 2650, 2649, 5161, 2658, 5161, 2655,
     2676, 2655, 5161, 2670, 2650, 2715, 2663, 2666, 2663, 2663,
     2663, 2688, 2697, 2685, 2682, 2683, 5161, 2675, 2675, 2711,
     2672, 2732, 2734, 2689, 2694, 2696, 2677, 2701, 2698, 2742,
     2744, 2748, 2750, 2752, 2754, 2694, 2760, 2763, 2706, 2767,
     2769, 2771, 2716, 2722, 2775, 2777, 2721, 2782, 2737, 2727,
     2766, 2740, 2790, 2792, 2747, 2738, 2764, 2753, 2797, 2799,

     2801, 2760, 2805, 2807, 2767, 2771, 2762, 2792, 2772, 2816,
     2822, 2824, 2826, 2755, 2828, 2831, 2833, 2835, 2769, 2837,
     2783, 2841, 2810, 2845, 2849, 2789, 2853, 2808, 2798, 2799,
     2822, 2818, 2822, 2809, 2810, 2826, 2823, 2828, 2817, 2818,
     2820, 2825, 2816, 2840, 2875, 2877, 2879, 2881, 2827, 2826,
     2885, 2837, 2888, 2837, 2859, 2839, 2896, 2855, 2835, 2847,
     2904, 2906, 2850, 2852, 2852, 2852, 2878, 2887, 2875, 2872,
     2873, 2917, 2920, 2922, 2924, 2926, 2876, 2876, 2912, 2933,
     2935, 2940, 2942, 2884, 2895, 2944, 2926, 2904, 5161, 2949,
     2936, 2952, 2901, 2959, 2941, 2962, 2914, 2909, 2933, 2911,

     2930, 2912, 2931, 2916, 2945, 2918, 5161, 2937, 2978, 2980,
     2941, 2925, 2945, 2942, 2928, 2944, 2932, 2955, 2934, 2952,
     2939, 2938, 5161, 5161, 2952, 2996, 2998, 2944, 5161, 5161,
     5161, 2948, 2949, 2956, 2948, 2964, 2949, 2950, 2959, 2953,
     2954, 3012, 2961, 2994, 2997, 3017, 2963, 3020, 3022, 3024,
     3027, 3023, 3028, 2977, 3036, 2999, 3039, 3041, 3043, 2988,
     2995, 3049, 2995, 2996, 3053, 2999, 3005, 3058, 3002, 3042,
     3023, 3063, 3008, 3068, 3070, 3073, 3010, 3075, 3017, 3040,
     3034, 3036, 3084, 3086, 3088, 3070, 3091, 3093, 3052, 3096,
     3099, 3101, 3103, 3105, 3054, 3108, 3112, 3114, 3119, 3067,

     3121, 3124, 3065, 3093, 3071, 3089, 3072, 3091, 3076, 3105,
     3076, 3137, 3095, 3081, 3101, 3098, 3084, 3100, 3088, 3145,
     3147, 3149, 3153, 3155, 3117, 3101, 3158, 3161, 3124, 3165,
     3167, 3116, 3114, 3171, 3174, 3176, 3178, 3138, 3126, 3183,
     3187, 3190, 3194, 3132, 3139, 3149, 3141, 3157, 3142, 3200,
     3203, 3206, 3210, 3212, 3159, 3158, 3215, 3219, 3164, 3200,
     3183, 3171, 3224, 3228, 3217, 3210, 3231, 3233, 3226, 5161,
     3178, 3179, 3200, 3190, 3195, 3193, 3197, 3192, 3200, 3198,
     3249, 3208, 3195, 3203, 3197, 3192, 5161, 3209, 3210, 3211,
     3203, 3203, 3214, 5161, 3262, 3221, 3209, 3238, 3217, 3210,

     3212, 5161, 5161, 3228, 3233, 3232, 3222, 3225, 3223, 3224,
     3278, 3280, 3224, 3283, 3285, 5161, 5161, 3263, 3239, 3293,
     5161, 5161, 3299, 3234, 3256, 3262, 3302, 3304, 3306, 3265,
     3262, 3257, 3271, 3273, 3267, 3317, 3321, 3258, 3323, 3289,
     3326, 3278, 3286, 3274, 3332, 3334, 3297, 3286, 3341, 3343,
     3347, 3349, 3325, 3351, 3354, 3356, 3359, 3303, 3304, 3324,
     3314, 3318, 3316, 3320, 3315, 3322, 3372, 3374, 3320, 3319,
     3327, 3321, 3316, 3380, 3335, 3383, 3385, 3341, 3342, 3390,
     3336, 3393, 3339, 3350, 3398, 3400, 3402, 3404, 3406, 3408,
     3367, 3411, 3414, 3416, 3420, 3424, 3427, 3362, 3394, 3379,

     3372, 3374, 3433, 3435, 3437, 3440, 3442, 3401, 3406, 3394,
     3397, 3391, 3392, 3453, 3409, 3412, 3417, 3458, 3416, 3404,
     3423, 3416, 3405, 3405, 3423, 3424, 3408, 3416, 3427, 3419,
     5161, 5161, 5161, 5161, 3433, 3422, 3412, 5161, 3432, 3437,
     3420, 3431, 3426, 3430, 3447, 3429, 5161, 3431, 3441, 5161,
     3442, 3436, 3426, 3488, 3471, 3491, 3490, 3490, 3453, 3498,
     3500, 3504, 3506, 3455, 3450, 3509, 3515, 3517, 3472, 3453,
     3467, 3473, 3464, 3467, 3468, 3525, 3484, 3474, 3530, 3532,
     3491, 3479, 3479, 3537, 5161, 5161, 3481, 3483, 3545, 3500,
     3508, 3548, 3550, 3495, 3514, 3507, 3496, 3496, 3514, 3515,

     3499, 3507, 3561, 3521, 3565, 3567, 3569, 3571, 3573, 3575,
     3538, 3527, 3517, 3589, 3538, 3544, 3591, 3593, 3595, 3597,
     3528, 3599, 3601, 3605, 3540, 3550, 3557, 3574, 3556, 3611,
     3613, 3615, 3617, 3619, 3621, 3571, 3624, 3584, 3589, 3572,
     3587, 3581, 3584, 3587, 5161, 3577, 3585, 3595, 3597, 3605,
     3585, 3600, 3592, 3627, 3605, 3595, 3605, 3632, 5161, 3598,
     3594, 3609, 3593, 5161, 3607, 3599, 3615, 3657, 3608, 3660,
     3662, 3611, 3612, 5161, 5161, 3633, 3667, 3670, 3677, 3679,
     3682, 3617, 3637, 3685, 3631, 3645, 3632, 3647, 3644, 3645,
     3637, 3638, 3638, 3697, 3642, 3700, 3644, 3664, 3647, 3655,

     3657, 3707, 3709, 3653, 3660, 3670, 3672, 3680, 3660, 3675,
     3667, 3702, 3721, 3725, 3727, 3729, 3731, 3733, 3737, 3739,
     3743, 3671, 3692, 3724, 3747, 3749, 3753, 3693, 3755, 3694,
     3714, 3698, 3759, 3714, 3707, 3764, 3766, 3769, 3771, 3732,
     3775, 3777, 3728, 5161, 5161, 3723, 3738, 3739, 3733, 3726,
     3728, 3730, 3770, 3750, 3757, 5161, 5161, 3736, 3750, 3749,
     3738, 3738, 3752, 3751, 3742, 3757, 3750, 3755, 3757, 3804,
     3807, 3766, 3810, 3812, 3814, 3816, 3768, 3759, 3778, 3822,
     3823, 3824, 3830, 3774, 3780, 3813, 3778, 3778, 3796, 3785,
     3800, 3840, 3842, 3797, 3845, 3847, 3849, 3832, 3852, 3857,

     3812, 3817, 3862, 3865, 3809, 3811, 3813, 3853, 3834, 3840,
     3875, 3878, 3824, 3881, 3883, 3885, 3887, 3846, 3835, 3836,
     3895, 3897, 3899, 3856, 3855, 3846, 3861, 3905, 3907, 3858,
     3863, 3913, 3865, 3915, 3874, 3877, 3861, 5161, 3878, 3865,
     3887, 5161, 3871, 3886, 3876, 3874, 3889, 3929, 3881, 5161,
     5161, 3882, 3880, 3900, 5161, 3892, 3893, 3890, 3938, 3888,
     3941, 3945, 3947, 3949, 3885, 5161, 5161, 3894, 3900, 3891,
     3954, 3900, 3899, 3906, 3919, 3964, 3966, 3969, 3971, 3907,
     3973, 3975, 3979, 3909, 3924, 3981, 3984, 3988, 3990, 3928,
     3992, 3994, 3940, 3962, 3999, 3948, 3963, 3954, 3952, 4008,

     4010, 4012, 4015, 3967, 3967, 4018, 4020, 4024, 3972, 3973,
     3994, 4029, 4031, 3991, 3993, 3990, 3986, 3983, 3997, 4022,
     5161, 4003, 3984, 3995, 3987, 4019, 3996, 4049, 4051, 4010,
     4011, 4003, 4003, 5161, 4000, 4006, 4001, 4060, 4062, 4065,
     4067, 4069, 4071, 4016, 4021, 4076, 4080, 4039, 4035, 4027,
     4036, 4087, 4091, 4037, 4093, 4045, 4035, 4097, 4099, 4058,
     4102, 4104, 4106, 4069, 4109, 4111, 4054, 4064, 4056, 4088,
     4118, 4122, 4068, 4082, 4126, 4128, 4130, 4132, 4091, 4083,
     4083, 4137, 4139, 4142, 4087, 4094, 4089, 4101, 5161, 4093,
     4100, 4099, 4094, 4111, 4102, 4115, 4158, 5161, 5161, 4103,

     4133, 5161, 4117, 4106, 4164, 4166, 4168, 4170, 4176, 4178,
     4180, 4116, 4183, 4127, 4125, 4186, 4145, 4132, 4191, 4195,
     4197, 4201, 4203, 4206, 4143, 4210, 4147, 4149, 4170, 4161,
     4174, 4216, 4219, 4221, 4223, 4168, 4198, 4227, 4229, 4232,
     4234, 4191, 4180, 4185, 4197, 4182, 4200, 4200, 4188, 4186,
     4201, 5161, 4195, 4213, 5161, 4251, 4250, 4250, 4257, 4259,
     4261, 4220, 4212, 4222, 4266, 4268, 4240, 4271, 4274, 4276,
     4278, 4281, 4283, 4286, 4289, 4232, 4251, 4251, 4238, 4236,
     4251, 4299, 4301, 4303, 4305, 4307, 4256, 4310, 4312, 4315,
     4280, 4319, 4263, 4284, 4281, 4268, 4269, 4295, 4286, 4283,

     4271, 4289, 5161, 5161, 4335, 4276, 4279, 4308, 4339, 4287,
     4342, 4344, 4346, 4348, 4350, 4309, 4296, 4297, 4357, 4312,
     4312, 4360, 4362, 4364, 4366, 4308, 4369, 4328, 4373, 4375,
     4330, 4320, 4323, 5161, 5161, 4323, 5161, 4330, 4340, 4337,
     4328, 4356, 4333, 4331, 4391, 4336, 4394, 4396, 4398, 4400,
     4344, 4403, 4353, 4406, 4365, 4363, 4414, 4359, 4363, 5161,
     4361, 4374, 5161, 4375, 4374, 4368, 4365, 4377, 4425, 4427,
     4429, 4431, 4433, 4435, 4381, 4438, 4443, 4396, 4447, 4400,
     4397, 4394, 4404, 4415, 4408, 4402, 4398, 4410, 4405, 4459,
     4463, 4465, 4467, 4414, 4469, 4434, 4472, 4475, 4431, 4478,

     4480, 4430, 4440, 4426, 4433, 4439, 4435, 4437, 4490, 4440,
     4451, 4496, 4440, 4499, 4501, 4503, 4505, 4462, 4461, 4452,
     4453, 4458, 4460, 4456, 4470, 4469, 4460, 4519, 4521, 5161,
     4478, 5161, 4524, 4474, 4470, 4528, 4530, 4487, 4533, 4489,
     4536, 4539, 4484, 4543, 4546, 4551, 4553, 4555, 4503, 4558,
     4561, 4505, 4564, 4566, 4569, 4571, 4574, 4576, 4520, 4581,
     4522, 4584, 4586, 4588, 4533, 5161, 4591, 4593, 4595, 4599,
     4601, 5161, 4612, 4617, 4622, 4627, 4632, 4637, 4642, 4647,
     4652, 4656, 4661, 4666
    } ;

static yyconst flex_int16_t yy_def[3285] =
    {   0,
     3273, 3273, 3274, 3274, 3275, 3275, 3276, 3276, 3277, 3277,
     3277, 3277, 3278, 3278, 3279, 3279, 3280, 3280, 3272, 3272,
     3272, 3272,   21, 3272,   23,   23,   23,   23, 3272, 3272,
       23,   23, 3272, 3281, 3272, 3282, 3283, 3284, 3272, 3272,
     3272, 3272, 3272, 3272,   21,   23,   23,   23,   23,   23,
       29, 3272,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3272,   23,   23,   23, 3272,   23, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

       23,   23, 3281, 3282, 3283, 3284, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272,   23, 3272,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23,   23, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 3272, 3272,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 3272, 3272,   23,   23,   23, 3272, 3272,
       23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 3272, 3272,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3272, 3272,   23,   23, 3272, 3272,
       23, 3272, 3272,   23,   23,   23, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3272,
     3272,   23,   23,   23,   23,   23,   23, 3272, 3272,   23,
       23,   23, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272,   23,   23,   23,   23,   23,   23,   23,
     3272, 3272,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3272,
     3272,   23, 3272, 3272,   23,   23,   23,   23, 3272, 3272,

       23, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272,   23,   23,   23,   23,   23, 3272,
     3272, 3272, 3272,   23,   23,   23, 3272, 3272,   23,   23,

       23,   23, 3272, 3272,   23,   23, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 3272, 3272,   23,   23,   23,   23, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272,   23,   23,   23,   23,   23,   23, 3272,

     3272,   23, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23, 3272, 3272,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23, 3272, 3272,   23,   23,   23,
     3272, 3272,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272,   23,   23,   23,   23,   23, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,   23,
       23,   23,   23, 3272, 3272,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272,   23,   23,   23,   23,   23,   23,   23,   23,
     3272, 3272,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
       23,   23,   23,   23,   23, 3272, 3272,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272,   23, 3272, 3272,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
       23,   23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272,   23,   23,   23,   23, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272,   23,   23,   23,   23, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272,   23,   23,   23,   23, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
       23,   23,   23,   23, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272,   23,   23,   23,   23, 3272, 3272, 3272, 3272,
       23,   23,   23,   23,   23,   23, 3272, 3272, 3272, 3272,
     3272, 3272,   23,   23,   23,   23,   23, 3272, 3272, 3272,
     3272,   23,   23,   23, 3272, 3272,   23, 3272, 3272, 3272,
     3272,    0, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272
    } ;

static yyconst flex_int16_t yy_nxt[5229] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20,   40, 3272,
       44,   41,   44, 3272,   41,   31,   72,   72, 3272,   48,
       32,   50,   50,   50,   76,   76,  970, 3272,  971,   72,
       72,  109,  111,  134,  169,   53,  120,  118,  170,   73,
       73,   73,  110,   76,   76,  135,  112,  119, 3272,  121,
       74,   48,  114,   50,   50,   50,   33,   20,   21,   21,
       20,   22,  115,   24,   74,   25,   26,   27,   28,   28,
       28,   29,   74,   30,   20,   48,  122,   50,   50,   50,
      124,  166,   31,   72,   72,  182,   74,   32,  259,  130,

      183,   53,  167,   73,   73,   73,  123,   76,   76,  260,
      125,  163, 1020,  131,   74,   48,  132,   50,   50,   50,
      127,  164,  184,  133, 1021,  171,  128,  172,   74,  165,
      185,  173,  129,   33,   45,   45,   74,  174,   46, 1022,
       46,   47,   48,   49,   50,   50,   50,   51,   46,   52,
       74,   46,   46,   46,   46,   46,   46,   46,   53,   46,
       46,   46,   46,   54,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   55,   56,   57,   58,   59,   60,
       46,   61,   46,   46,   62,   63,   64,   65,   46,   46,
       46,   66,   67,   68,   69,   70,   46,   46,   46,   46,

       46,  262,  776,  200,  777,  263,   46,   46,   46,   46,
       46,   46, 3272,  201, 3272,  138,  138,  212,  177,  139,
      139,  139,  213,   46,   72,   72,  178,  249,   46,  354,
      355,  179,  180,  250,   73,   73,   73,  229,  209,   46,
       46,   46,   46,   46,   46,   74,   46,  210, 1023,   46,
       46,   46,   46,  230,  211,  220,   46,   46,   46,   46,
       46,   77,  186,  239,  221,  246,  187,   74,   78,  191,
      240,  242,  242,  188,  275,   79,  189, 1024,  196,  276,
       80,  247,  190,  192, 1025,  243,  193,  194,  195,  197,
       81,  305,  198,  253,  253,  199,  306,  277,   82,   83,

       84,   85,   86,   87,   88,  278,   89,   90,  254,   91,
       92,   93,   94,   95,  284,   96,   97,   98,   99,  100,
      141,  139,  139,  139,   72,   72,  318,  256,  285,  319,
      142,  286,  287,  288,  139,  139,  139,  257,  143,  144,
      145,  146,  147,  148,  149,  258,  150,  151, 1026,  152,
      153,  154,  155,  156,  289,  157,  158,  159,  160,  161,
      202,  264,  320,  265,  203,  290,  321,  266,  291,  270,
      204,  292,  205,  267,  279,  206,  207,  271,  280,  293,
      208,  310,  272,  273,  302,  281,  295,  311,  282,  294,
      296,  382,  338,  303,  283,  312,  297,  315,  298,  316,

      304,  299,  300,  339,  317,  330,  301,  328,  328,  342,
      331,  340,  340,  343,  383,  368,  363,  332,  369, 1027,
      333,  334,  329,  364,  376,  365,  341,   72,   72,  391,
      377,  389,  389,  242,  242,  392,  406,  406,  422,  407,
      492,  408,  253,  253,  423,  390,  493,  243,  417,  417,
      418,  418,  424,  427,  432,  428,  430,  254,  433,  431,
      429,  434,  434,  442,  442,  419,  452,  444, 1028,  454,
      454,  456,  445,  461,  461,  457,  435,  453,  443,  446,
      470,  471,  447,  448,  455,  479,  484, 1029,  462,  485,
      494,  494,  480,  500,  481,  504,  505,  501,  506,  506,

      514,  514,  516,  516,  436,  495,  328,  328,  520,  520,
      340,  340, 1030,  507,  544,  515,  578,  517,  531,  531,
     1031,  329,  533,  533,  579,  341,  536,  536,  545,  556,
      557,  956,  561,  561,  568,  568,  581,  534,  908,  580,
      909,  537,  582,  585,  585,  538,  539,  562,  957,  569,
      592,  592,  389,  389,  540, 1032,  535,  586,  595,  595,
      597,  597,  603,  603,  593,  631,  390,  605,  605,  632,
      406,  406,  745,  407,  598,  408,  604,  615,  615,  619,
      619,  606,  417,  417,  729,  541,  418,  418,  624,  624,
      877,  616, 1033,  620,  625,  625,  635,  635,  639,  639,

      730,  419,  434,  434,  645,  645,  648,  648,  789,  626,
      746,  636,  790,  640,  650,  650,  923,  435,  442,  442,
      924,  649,  654,  654,  662,  662,  454,  454,  878,  651,
      667,  667,  681,  443,  669,  669,  672,  672, 1034,  663,
     1035,  455,  461,  461,  680,  680,  682, 1036,  664,  670,
     1037,  673,  812,  637,  638,  674,  675,  462,  684,  684,
      695,  696,  700,  700,  676,  813,  703,  703,  671,  709,
      709,  494,  494,  685,  719,  719, 1038,  701,  724,  724,
      860,  704,  506,  506,  710, 1039,  495,  736,  736,  720,
      514,  514,  743,  743, 1040,  677,  861,  507,  721,  516,

      516,  686,  705,  744,  744,  515,  722,  520,  520,  754,
      754,  531,  531,  978,  517,  533,  533, 1041,  755,  761,
      761,  723,  536,  536,  756,  763,  763,  768,  768,  979,
      534,  778,  778,  784,  784, 1042,  769,  537,  561,  561,
      793,  793,  770,  568,  568, 1043,  779, 1044,  785,  799,
      799,  585,  585,  562,  815,  815,  592,  592,  569,  821,
      821, 1045,  822, 1046,  823,  586,  595,  595,  597,  597,
      593,  826,  826,  603,  603,  831,  831,  605,  605, 1053,
      832,  832,  598,  833, 1054,  834, 1055,  604,  615,  615,
     1056,  606,  843,  843, 1057,  844, 1058,  845,  619,  619,

      848,  848,  616,  849, 1059,  850,  851,  851,  624,  624,
      625,  625,  620,  855,  855,  635,  635,  865,  865, 1060,
      852,  639,  639,  868,  868,  626,  645,  645,  648,  648,
      636,  875,  875,  650,  650, 1064,  640,  876,  876,  654,
      654,  886,  886,  649,  662,  662,  888,  888,  651,  667,
      667,  669,  669,  893,  893, 1067,  887,  672,  672,  663,
      895,  895,  900,  900,  680,  680,  670,  684,  684,  906,
      906, 1068,  673,  910,  910,  915,  915,  901,  918,  918,
      700,  700,  685,  927,  927,  703,  703, 1069,  911, 1070,
      916,  929,  929,  919, 1071,  701,  709,  709,  934,  934,

      704,  939,  939,  719,  719, 1072,  917,  944,  944,  724,
      724,  710,  736,  736,  743,  743,  940, 1078,  720,  744,
      744,  754,  754, 1081,  976,  976,  761,  761,  763,  763,
      755,  986,  986,  768,  768, 1082,  756,  977,  989,  989,
      778,  778,  769,  784,  784, 1083,  987, 1084,  770, 1002,
     1002,  990, 1003, 1003, 1085,  779,  793,  793,  785,  799,
      799, 1017, 1017,  815,  815,  821,  821, 1004,  822, 1086,
      823,  826,  826,  831,  831, 1087, 1018,  832,  832, 1088,
      833, 1089,  834, 1047, 1047, 1049, 1049, 1051, 1051,  843,
      843, 1079,  844, 1090,  845,  848,  848, 1048,  849, 1050,

      850, 1052,  851,  851, 1061, 1061, 1091, 1062, 1080, 1063,
     1065, 1065,  855,  855, 1073, 1073,  852, 1075, 1075,  865,
      865,  868,  868, 1092, 1066,  875,  875,  876,  876, 1074,
     1095, 1093, 1076, 1094, 1096, 1097,  886,  886, 1098, 1098,
      888,  888, 1099, 1099, 1101, 1103, 1104,  893,  893, 1105,
     1106,  887,  895,  895, 1107, 1108, 1112, 1100, 1109, 1109,
     1102,  900,  900, 1111, 1111, 1113, 1114, 1115,  906,  906,
     1116, 1117, 1118, 1110, 1077, 1123,  901,  910,  910, 1119,
     1119, 1120, 1120, 1124,  915,  915, 1125, 1125, 1126,  918,
      918, 1130,  911, 1127, 1127, 1131, 1121, 1128, 1128,  916,

     1132, 1133, 1134, 1135,  919,  927,  927, 1136,  929,  929,
     1137, 1122, 1129, 1138, 1139, 1140, 1140,  934,  934, 1142,
     1143, 1144, 1144, 1146,  939,  939, 1147, 1147, 1148, 1149,
     1141, 1150,  944,  944, 1151, 1152, 1145, 1153, 1154,  940,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1167, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1179, 1180, 1180, 1168,  976,  976,
     1181, 1182, 1183, 1184, 1193, 1185, 1194, 1196, 1197, 1186,
     1195,  977, 1187, 1188,  986,  986, 1189, 1200, 1190, 1191,
     1192, 1198, 1198, 1199, 1199,  989,  989, 1201, 1201,  987,

     1203, 1204, 1205, 1206, 1207, 1208, 1211, 1209,  990, 1210,
     1212, 1214, 1202, 1002, 1002, 1003, 1003, 1213, 1213, 1215,
     1216, 1217, 1218, 1219, 1220, 1222, 1223, 1223, 1221, 1229,
     1004, 1226, 1226, 1017, 1017, 1224, 1230, 1230, 1231, 1232,
     1233, 1225, 1234, 1235, 1236, 1237, 1227, 1238, 1018, 1239,
     1240, 1241, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1250, 1252, 1228, 1253, 1242, 1254, 1255, 1255, 1257,
     1047, 1047, 1258, 1258, 1251, 1049, 1049, 1259, 1259, 1263,
     1260, 1256, 1261, 1264, 1048, 1051, 1051, 1262, 1262, 1050,
     1265, 1266, 1266, 1061, 1061, 1268, 1062, 1269, 1063, 1052,

     1270, 1270, 1065, 1065, 1275, 1267, 1272, 1272, 1276, 1273,
     1277, 1274, 1278, 1279, 1271, 1280, 1066, 1073, 1073, 1281,
     1281, 1075, 1075, 1282, 1282, 1283, 1283, 1285, 1286, 1287,
     1288, 1289, 1074, 1290, 1291, 1294, 1076, 1292, 1292, 1295,
     1284, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1305, 1293, 1098, 1098, 1099, 1099, 1307, 1307, 1308,
     1309, 1310, 1321, 1322, 1324, 1306, 1325, 1323, 1109, 1109,
     1100, 1311, 1311, 1326, 1326, 1111, 1111, 1327, 1327, 1329,
     1330, 1331, 1331, 1110, 1333, 1334, 1312, 1335, 1119, 1119,
     1337, 1313, 1328, 1120, 1120, 1314, 1332, 1340, 1315, 1316,

     1336, 1336, 1317, 1341, 1318, 1319, 1320, 1338, 1121, 1339,
     1125, 1125, 1127, 1127, 1128, 1128, 1342, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1351, 1352, 1352, 1350, 1129,
     1354, 1354, 1140, 1140, 1357, 1357, 1358, 1359, 1359, 1144,
     1144, 1353, 1361, 1361, 1362, 1355, 1363, 1141, 1147, 1147,
     1364, 1369, 1360, 1370, 1145, 1365, 1365, 1367, 1367, 1371,
     1371, 1373, 1356, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1366, 1381, 1368, 1383, 1372, 1167, 1167, 1382, 1382, 1384,
     1385, 1386, 1388, 1389, 1390, 1391, 1394, 1395, 1396, 1387,
     1168, 1397, 1180, 1180, 1398, 1392, 1399, 1399, 1402, 1405,

     1403, 1393, 1407, 1408, 1410, 1400, 1404, 1409, 1411, 1406,
     1413, 1401, 1416, 1417, 1418, 1419, 1414, 1420, 1421, 1415,
     1198, 1198, 1199, 1199, 1201, 1201, 1412, 1422, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1202,
     1213, 1213, 1433, 1434, 1434, 1436, 1437, 1438, 1439, 1441,
     1442, 1443, 1223, 1223, 1440, 1444, 1445, 1445, 1435, 1226,
     1226, 1224, 1447, 1447, 1448, 1449, 1450, 1225, 1451, 1446,
     1230, 1230, 1452, 1453, 1227, 1454, 1455, 1456, 1457, 1458,
     1458, 1241, 1241, 1460, 1460, 1465, 1461, 1468, 1462, 1463,
     1463, 1466, 1466, 1459, 1469, 1242, 1470, 1471, 1250, 1250,

     1475, 1472, 1472, 1464, 1473, 1467, 1474, 1476, 1476, 1492,
     1255, 1255, 1251, 1489, 1489, 1493, 1490, 1494, 1491, 1258,
     1258, 1477, 1478, 1479, 1256, 1480, 1262, 1262, 1481, 1482,
     1495, 1496, 1497, 1483, 1484, 1485, 1486, 1487, 1259, 1259,
     1488, 1260, 1504, 1261, 1266, 1266, 1498, 1498, 1505, 1499,
     1508, 1500, 1270, 1270, 1501, 1501, 1513, 1502, 1267, 1503,
     1272, 1272, 1514, 1273, 1516, 1274, 1271, 1506, 1506, 1509,
     1509, 1511, 1511, 1281, 1281, 1282, 1282, 1283, 1283, 1515,
     1515, 1517, 1507, 1518, 1510, 1521, 1512, 1519, 1519, 1522,
     1523, 1525, 1284, 1292, 1292, 1524, 1524, 1526, 1527, 1528,

     1530, 1530, 1520, 1533, 1533, 1540, 1541, 1529, 1293, 1542,
     1535, 1536, 1537, 1543, 1549, 1531, 1305, 1305, 1534, 1544,
     1544, 1532, 1538, 1307, 1307, 1545, 1545, 1553, 1539, 1547,
     1547, 1306, 1311, 1311, 1550, 1550, 1551, 1554, 1555, 1556,
     1546, 1558, 1552, 1557, 1548, 1559, 1561, 1312, 1564, 1565,
     1565, 1567, 1562, 1568, 1569, 1563, 1570, 1326, 1326, 1327,
     1327, 1571, 1571, 1560, 1566, 1572, 1573, 1331, 1331, 1574,
     1574, 1575, 1576, 1577, 1328, 1336, 1336, 1578, 1579, 1580,
     1581, 1582, 1332, 1342, 1342, 1583, 1583, 1586, 1586, 1588,
     1589, 1590, 1591, 1591, 1595, 1596, 1597, 1352, 1352, 1600,

     1584, 1601, 1587, 1598, 1598, 1354, 1354, 1592, 1599, 1599,
     1357, 1357, 1353, 1603, 1359, 1359, 1602, 1602, 1361, 1361,
     1355, 1593, 1604, 1604, 1606, 1365, 1365, 1594, 1585, 1360,
     1607, 1607, 1367, 1367, 1608, 1608, 1609, 1605, 1610, 1612,
     1366, 1371, 1371, 1611, 1611, 1613, 1614, 1368, 1615, 1616,
     1617, 1618, 1619, 1620, 1382, 1382, 1372, 1621, 1622, 1623,
     1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
     1635, 1634, 1636, 1399, 1399, 1637, 1638, 1638, 1640, 1641,
     1642, 1643, 1400, 1644, 1645, 1646, 1647, 1648, 1401, 1639,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,

     1659, 1422, 1422, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
     1667, 1434, 1434, 1668, 1668, 1669, 1670, 1672, 1671, 1673,
     1674, 1675, 1676, 1677, 1678, 1678, 1435, 1445, 1445, 1679,
     1447, 1447, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1446, 1688, 1458, 1458, 1689, 1689, 1692, 1690, 1693, 1691,
     1460, 1460, 1695, 1461, 1699, 1462, 1459, 1463, 1463, 1694,
     1694, 1466, 1466, 1696, 1696, 1700, 1697, 1701, 1698, 1702,
     1703, 1464, 1704, 1472, 1472, 1467, 1473, 1705, 1474, 1476,
     1476, 1706, 1706, 1709, 1707, 1710, 1708, 1711, 1713, 1712,
     1714, 1715, 1716, 1477, 1718, 1720, 1721, 1723, 1489, 1489,

     1724, 1490, 1725, 1491, 1726, 1727, 1728, 1729, 1730, 1731,
     1717, 1719, 1498, 1498, 1732, 1499, 1733, 1500, 1735, 1722,
     1501, 1501, 1738, 1502, 1739, 1503, 1506, 1506, 1734, 1734,
     1509, 1509, 1736, 1736, 1511, 1511, 1737, 1737, 1515, 1515,
     1740, 1507, 1741, 1742, 1744, 1510, 1519, 1519, 1745, 1512,
     1743, 1743, 1746, 1524, 1524, 1747, 1747, 1749, 1750, 1751,
     1752, 1520, 1530, 1530, 1753, 1753, 1754, 1533, 1533, 1756,
     1748, 1755, 1755, 1757, 1758, 1759, 1760, 1531, 1761, 1762,
     1765, 1763, 1534, 1764, 1544, 1544, 1545, 1545, 1766, 1766,
     1547, 1547, 1767, 1767, 1768, 1550, 1550, 1769, 1770, 1771,

     1772, 1546, 1773, 1774, 1775, 1548, 1776, 1777, 1778, 1779,
     1780, 1781, 1782, 1565, 1565, 1783, 1783, 1784, 1785, 1786,
     1787, 1571, 1571, 1788, 1789, 1789, 1574, 1574, 1566, 1791,
     1792, 1793, 1794, 1795, 1796, 1797, 1797, 1799, 1799, 1790,
     1583, 1583, 1801, 1801, 1802, 1586, 1586, 1803, 1803, 1804,
     1798, 1805, 1800, 1806, 1807, 1584, 1591, 1591, 1808, 1808,
     1587, 1809, 1810, 1811, 1812, 1813, 1598, 1598, 1599, 1599,
     1814, 1592, 1815, 1602, 1602, 1816, 1604, 1604, 1817, 1817,
     1818, 1818, 1607, 1607, 1608, 1608, 1820, 1821, 1821, 1611,
     1611, 1605, 1824, 1825, 1826, 1819, 1827, 1828, 1829, 1830,

     1831, 1832, 1822, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
     1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
     1849, 1638, 1638, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
     1857, 1858, 1859, 1860, 1639, 1861, 1862, 1863, 1864, 1866,
     1867, 1868, 1869, 1870, 1823, 1871, 1872, 1873, 1874, 1865,
     1875, 1876, 1877, 1878, 1879, 1668, 1668, 1880, 1881, 1882,
     1883, 1884, 1885, 1886, 1887, 1888, 1678, 1678, 1889, 1890,
     1891, 1892, 1893, 1894, 1897, 1898, 1895, 1899, 1689, 1689,
     1900, 1690, 1901, 1691, 1902, 1896, 1694, 1694, 1696, 1696,
     1903, 1697, 1904, 1698, 1905, 1906, 1907, 1908, 1909, 1706,

     1706, 1910, 1707, 1911, 1708, 1912, 1913, 1913, 1915, 1916,
     1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
     1914, 1927, 1928, 1929, 1930, 1734, 1734, 1931, 1736, 1736,
     1737, 1737, 1932, 1933, 1934, 1935, 1936, 1743, 1743, 1937,
     1938, 1939, 1747, 1747, 1940, 1940, 1941, 1942, 1943, 1944,
     1753, 1753, 1945, 1755, 1755, 1946, 1947, 1748, 1948, 1949,
     1950, 1951, 1952, 1953, 1954, 1955, 1766, 1766, 1767, 1767,
     1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
     1966, 1967, 1968, 1969, 1971, 1783, 1783, 1972, 1973, 1974,
     1975, 1976, 1789, 1789, 1970, 1977, 1977, 1978, 1979, 1980,

     1981, 1982, 1983, 1797, 1797, 1984, 1984, 1790, 1799, 1799,
     1985, 1985, 1801, 1801, 1986, 1803, 1803, 1987, 1798, 1988,
     1989, 1990, 1991, 1800, 1808, 1808, 1992, 1993, 1994, 1995,
     1996, 1997, 1998, 1817, 1817, 1818, 1818, 1999, 1999, 2000,
     1821, 1821, 2001, 2001, 2002, 2002, 2004, 2005, 2006, 2007,
     1819, 2008, 2009, 2010, 2011, 1822, 2012, 2013, 2014, 2003,
     2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
     2025, 1849, 1849, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,

     2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
     2062, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2070, 2072,
     2072, 2074, 2074, 2076, 2063, 2077, 2077, 2079, 2080, 2080,
     2082, 2071, 2083, 2073, 2084, 2075, 2085, 2085, 2089, 2078,
     1913, 1913, 2081, 2088, 2088, 2090, 2091, 2092, 2093, 2093,
     2086, 2096, 2097, 2098, 1914, 2099, 2100, 2100, 2102, 2103,
     2103, 2107, 2094, 2108, 2109, 2110, 2110, 2112, 2112, 2114,
     2101, 2115, 2115, 2104, 2117, 2117, 2119, 2120, 2121, 2111,
     2122, 2123, 2113, 2105, 1940, 1940, 2116, 2124, 2125, 2118,
     2126, 2095, 2127, 2087, 2128, 2129, 2130, 2131, 2132, 2133,

     2134, 2135, 2136, 2137, 2138, 2139, 2106, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2147, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2163, 2148,
     1977, 1977, 2161, 2161, 2164, 2165, 2166, 2167, 1984, 1984,
     1985, 1985, 2168, 2169, 2170, 2171, 2174, 2162, 2172, 2172,
     2175, 2175, 2177, 2178, 2179, 2180, 2180, 2182, 2182, 2184,
     1999, 1999, 2185, 2173, 2187, 2176, 2001, 2001, 2002, 2002,
     2181, 2188, 2183, 2186, 2186, 2189, 2190, 2190, 2193, 2194,
     2194, 2197, 2198, 2003, 2199, 2191, 2200, 2201, 2195, 2202,
     2203, 2192, 2204, 2205, 2196, 2206, 2207, 2208, 2209, 2209,

     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
     2221, 2222, 2223, 2210, 2224, 2225, 2226, 2226, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2227, 2241, 2062, 2062, 2242, 2242, 2243, 2244, 2245,
     2246, 2247, 2248, 2070, 2070, 2249, 2249, 2254, 2063, 2072,
     2072, 2250, 2250, 2074, 2074, 2251, 2251, 2071, 2252, 2256,
     2253, 2077, 2077, 2073, 2255, 2255, 2260, 2075, 2080, 2080,
     2257, 2257, 2258, 2258, 2261, 2078, 2085, 2085, 2262, 2262,
     2263, 2264, 2081, 2088, 2088, 2265, 2259, 2266, 2267, 2269,
     2086, 2093, 2093, 2268, 2268, 2270, 2271, 2273, 2274, 2274,

     2100, 2100, 2276, 2276, 2277, 2094, 2103, 2103, 2278, 2278,
     2279, 2280, 2275, 2281, 2101, 2282, 2283, 2110, 2110, 2286,
     2104, 2289, 2272, 2284, 2284, 2112, 2112, 2285, 2285, 2115,
     2115, 2111, 2287, 2287, 2117, 2117, 2288, 2288, 2290, 2290,
     2113, 2292, 2293, 2293, 2116, 2295, 2296, 2296, 2300, 2118,
     2298, 2298, 2303, 2291, 2301, 2301, 2304, 2294, 2305, 2306,
     2307, 2297, 2308, 2309, 2310, 2299, 2311, 2312, 2313, 2302,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2320, 2322, 2322,
     2147, 2147, 2324, 2324, 2325, 2326, 2327, 2327, 2329, 2330,
     2330, 2321, 2332, 2323, 2333, 2148, 2334, 2335, 2335, 2337,

     2338, 2328, 2339, 2341, 2331, 2161, 2161, 2340, 2340, 2342,
     2343, 2344, 2336, 2345, 2346, 2347, 2348, 2349, 2172, 2172,
     2162, 2350, 2350, 2351, 2351, 2175, 2175, 2353, 2353, 2354,
     2355, 2356, 2359, 2173, 2180, 2180, 2357, 2357, 2352, 2360,
     2176, 2182, 2182, 2358, 2358, 2186, 2186, 2361, 2362, 2181,
     2190, 2190, 2363, 2364, 2364, 2366, 2183, 2367, 2370, 2191,
     2194, 2194, 2371, 2368, 2368, 2192, 2365, 2372, 2373, 2195,
     2374, 2375, 2376, 2377, 2378, 2196, 2369, 2379, 2380, 2209,
     2209, 2381, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388,
     2389, 2390, 2391, 2392, 2210, 2393, 2394, 2226, 2226, 2395,

     2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404,
     2405, 2406, 2227, 2242, 2242, 2407, 2408, 2409, 2411, 2411,
     2413, 2414, 2414, 2249, 2249, 2250, 2250, 2416, 2251, 2251,
     2410, 2252, 2412, 2253, 2417, 2415, 2418, 2255, 2255, 2419,
     2257, 2257, 2258, 2258, 2420, 2420, 2423, 2421, 2424, 2422,
     2262, 2262, 2425, 2426, 2427, 2427, 2259, 2429, 2430, 2268,
     2268, 2431, 2432, 2435, 2436, 2436, 2438, 2440, 2428, 2274,
     2274, 2439, 2439, 2433, 2276, 2276, 2278, 2278, 2437, 2434,
     2441, 2442, 2443, 2275, 2444, 2445, 2445, 2284, 2284, 2285,
     2285, 2447, 2287, 2287, 2288, 2288, 2448, 2290, 2290, 2446,

     2449, 2449, 2450, 2450, 2293, 2293, 2452, 2452, 2453, 2296,
     2296, 2456, 2291, 2454, 2454, 2298, 2298, 2451, 2458, 2294,
     2455, 2455, 2301, 2301, 2297, 2457, 2457, 2459, 2460, 2461,
     2299, 2462, 2463, 2464, 2465, 2466, 2469, 2302, 2467, 2467,
     2470, 2471, 2472, 2473, 2474, 2475, 2320, 2320, 2476, 2476,
     2322, 2322, 2478, 2468, 2477, 2477, 2324, 2324, 2479, 2327,
     2327, 2321, 2480, 2480, 2481, 2323, 2330, 2330, 2482, 2482,
     2483, 2484, 2485, 2485, 2328, 2335, 2335, 2487, 2487, 2488,
     2488, 2331, 2490, 2491, 2340, 2340, 2498, 2486, 2492, 2492,
     2336, 2494, 2494, 2499, 2489, 2496, 2496, 2500, 2501, 2502,

     2503, 2350, 2350, 2493, 2351, 2351, 2495, 2504, 2504, 2508,
     2497, 2353, 2353, 2505, 2505, 2509, 2357, 2357, 2510, 2352,
     2358, 2358, 2511, 2512, 2513, 2514, 2514, 2515, 2506, 2364,
     2364, 2516, 2518, 2518, 2368, 2368, 2519, 2520, 2521, 2517,
     2522, 2523, 2365, 2524, 2525, 2526, 2527, 2369, 2528, 2529,
     2381, 2381, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
     2538, 2539, 2540, 2395, 2395, 2541, 2542, 2543, 2544, 2545,
     2507, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2411,
     2411, 2554, 2554, 2555, 2414, 2414, 2556, 2556, 2559, 2557,
     2560, 2558, 2563, 2412, 2420, 2420, 2564, 2421, 2415, 2422,

     2561, 2561, 2565, 2427, 2427, 2566, 2566, 2567, 2567, 2569,
     2570, 2571, 2572, 2574, 2562, 2575, 2577, 2428, 2436, 2436,
     2578, 2568, 2576, 2576, 2439, 2439, 2573, 2579, 2579, 2581,
     2582, 2583, 2437, 2445, 2445, 2584, 2584, 2587, 2585, 2588,
     2586, 2580, 2449, 2449, 2450, 2450, 2590, 2446, 2589, 2589,
     2452, 2452, 2454, 2454, 2591, 2455, 2455, 2592, 2592, 2451,
     2457, 2457, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601,
     2602, 2604, 2593, 2467, 2467, 2603, 2603, 2605, 2606, 2607,
     2608, 2609, 2609, 2611, 2476, 2476, 2477, 2477, 2468, 2612,
     2613, 2480, 2480, 2614, 2482, 2482, 2610, 2615, 2616, 2485,

     2485, 2617, 2617, 2487, 2487, 2488, 2488, 2618, 2618, 2619,
     2619, 2621, 2492, 2492, 2486, 2622, 2622, 2494, 2494, 2625,
     2489, 2623, 2623, 2626, 2620, 2496, 2496, 2493, 2624, 2624,
     2627, 2628, 2495, 2629, 2630, 2630, 2504, 2504, 2505, 2505,
     2497, 2632, 2632, 2633, 2633, 2635, 2636, 2637, 2638, 2631,
     2639, 2640, 2641, 2506, 2514, 2514, 2642, 2643, 2634, 2518,
     2518, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652,
     2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662,
     2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2554,
     2554, 2672, 2556, 2556, 2674, 2557, 2675, 2558, 2676, 2677,

     2677, 2561, 2561, 2682, 2673, 2679, 2679, 2680, 2680, 2683,
     2566, 2566, 2685, 2678, 2686, 2562, 2567, 2567, 2684, 2684,
     2687, 2681, 2688, 2689, 2690, 2691, 2576, 2576, 2692, 2693,
     2568, 2579, 2579, 2694, 2694, 2695, 2696, 2697, 2584, 2584,
     2698, 2585, 2699, 2586, 2700, 2580, 2589, 2589, 2701, 2592,
     2592, 2702, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709,
     2710, 2711, 2603, 2603, 2593, 2712, 2713, 2713, 2715, 2715,
     2717, 2717, 2719, 2719, 2609, 2609, 2721, 2721, 2722, 2723,
     2724, 2714, 2727, 2716, 2728, 2718, 2730, 2720, 2731, 2610,
     2725, 2725, 2617, 2617, 2618, 2618, 2619, 2619, 2729, 2729,

     2622, 2622, 2623, 2623, 2732, 2726, 2624, 2624, 2733, 2734,
     2735, 2620, 2630, 2630, 2736, 2736, 2632, 2632, 2633, 2633,
     2737, 2737, 2738, 2738, 2740, 2741, 2741, 2631, 2743, 2744,
     2745, 2746, 2747, 2634, 2748, 2749, 2750, 2739, 2751, 2752,
     2742, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
     2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2770,
     2772, 2773, 2773, 2775, 2775, 2777, 2778, 2779, 2677, 2677,
     2784, 2780, 2780, 2771, 2781, 2774, 2782, 2776, 2679, 2679,
     2680, 2680, 2678, 2783, 2783, 2785, 2684, 2684, 2786, 2787,
     2788, 2789, 2790, 2791, 2681, 2792, 2793, 2794, 2694, 2694,

     2795, 2796, 2796, 2798, 2799, 2800, 2801, 2802, 2702, 2702,
     2803, 2803, 2805, 2806, 2807, 2797, 2808, 2809, 2810, 2811,
     2812, 2813, 2713, 2713, 2818, 2804, 2814, 2814, 2715, 2715,
     2815, 2815, 2717, 2717, 2816, 2816, 2819, 2714, 2719, 2719,
     2817, 2817, 2820, 2716, 2721, 2721, 2824, 2718, 2725, 2725,
     2821, 2821, 2825, 2720, 2822, 2822, 2729, 2729, 2826, 2827,
     2828, 2828, 2830, 2726, 2831, 2736, 2736, 2737, 2737, 2823,
     2738, 2738, 2832, 2832, 2833, 2829, 2741, 2741, 2834, 2834,
     2835, 2836, 2837, 2838, 2839, 2739, 2840, 2841, 2842, 2843,
     2845, 2742, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853,

     2854, 2855, 2856, 2857, 2858, 2770, 2770, 2844, 2859, 2859,
     2860, 2773, 2773, 2861, 2861, 2775, 2775, 2862, 2862, 2863,
     2771, 2864, 2865, 2780, 2780, 2774, 2781, 2866, 2782, 2776,
     2867, 2783, 2783, 2868, 2869, 2870, 2871, 2872, 2873, 2874,
     2875, 2876, 2876, 2878, 2878, 2880, 2881, 2881, 2796, 2796,
     2883, 2883, 2884, 2886, 2886, 2877, 2890, 2879, 2888, 2888,
     2882, 2891, 2797, 2803, 2803, 2885, 2892, 2892, 2887, 2893,
     2894, 2895, 2896, 2889, 2898, 2899, 2900, 2900, 2804, 2902,
     2902, 2904, 2814, 2814, 2815, 2815, 2816, 2816, 2817, 2817,
     2897, 2901, 2905, 2906, 2903, 2907, 2821, 2821, 2822, 2822,

     2908, 2908, 2909, 2910, 2911, 2912, 2828, 2828, 2913, 2913,
     2914, 2915, 2916, 2823, 2832, 2832, 2834, 2834, 2917, 2918,
     2919, 2829, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927,
     2928, 2928, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2859,
     2859, 2937, 2861, 2861, 2942, 2929, 2862, 2862, 2938, 2938,
     2940, 2940, 2943, 2944, 2945, 2946, 2946, 2948, 2949, 2950,
     2951, 2954, 2939, 2956, 2941, 2876, 2876, 2952, 2952, 2947,
     2878, 2878, 2953, 2953, 2881, 2881, 2955, 2955, 2957, 2877,
     2883, 2883, 2886, 2886, 2879, 2958, 2958, 2960, 2882, 2888,
     2888, 2959, 2959, 2961, 2961, 2892, 2892, 2887, 2963, 2964,

     2965, 2965, 2967, 2968, 2889, 2969, 2970, 2973, 2962, 2900,
     2900, 2971, 2971, 2902, 2902, 2966, 2972, 2972, 2974, 2975,
     2975, 2977, 2977, 2979, 2901, 2908, 2908, 2980, 2903, 2981,
     2982, 2982, 2913, 2913, 2976, 2984, 2978, 2985, 2986, 2987,
     2988, 2989, 2990, 2991, 2992, 2983, 2993, 2994, 2995, 2996,
     2928, 2928, 2997, 2997, 2998, 2999, 3000, 3001, 3002, 3003,
     3004, 2938, 2938, 3005, 3005, 2929, 2940, 2940, 3006, 3006,
     3007, 3007, 3009, 3009, 3011, 2939, 3012, 2946, 2946, 3014,
     2941, 3013, 3013, 3015, 3008, 3016, 3010, 3017, 2952, 2952,
     3018, 2947, 2953, 2953, 2955, 2955, 3019, 3020, 2958, 2958,

     2959, 2959, 3021, 2961, 2961, 3022, 3022, 3023, 3023, 3025,
     2965, 2965, 3026, 3026, 3027, 3028, 3029, 3030, 2962, 2971,
     2971, 3031, 3024, 2972, 2972, 2966, 3032, 2975, 2975, 3033,
     3033, 2977, 2977, 3034, 3034, 3035, 3036, 3037, 2982, 2982,
     3038, 3038, 2976, 3039, 3039, 3041, 2978, 3042, 3043, 3044,
     3045, 3046, 3047, 2983, 3048, 3049, 3050, 3051, 3040, 2997,
     2997, 3052, 3053, 3054, 3055, 3005, 3005, 3006, 3006, 3007,
     3007, 3056, 3056, 3062, 3057, 3063, 3058, 3009, 3009, 3059,
     3059, 3060, 3060, 3008, 3013, 3013, 3064, 3065, 3065, 3067,
     3068, 3010, 3069, 3069, 3076, 3061, 3071, 3071, 3073, 3073,

     3077, 3066, 3022, 3022, 3023, 3023, 3070, 3075, 3075, 3078,
     3072, 3026, 3026, 3074, 3079, 3080, 3081, 3082, 3082, 3024,
     3033, 3033, 3034, 3034, 3084, 3084, 3086, 3087, 3038, 3038,
     3039, 3039, 3083, 3088, 3088, 3089, 3089, 3091, 3092, 3085,
     3093, 3094, 3095, 3096, 3097, 3040, 3098, 3099, 3100, 3101,
     3090, 3102, 3056, 3056, 3103, 3057, 3104, 3058, 3059, 3059,
     3060, 3060, 3105, 3105, 3106, 3107, 3108, 3065, 3065, 3109,
     3109, 3110, 3111, 3111, 3061, 3069, 3069, 3113, 3113, 3071,
     3071, 3066, 3114, 3114, 3073, 3073, 3112, 3115, 3115, 3070,
     3075, 3075, 3116, 3072, 3117, 3118, 3119, 3120, 3121, 3074,

     3082, 3082, 3122, 3122, 3084, 3084, 3123, 3123, 3124, 3124,
     3126, 3088, 3088, 3089, 3089, 3083, 3127, 3127, 3128, 3085,
     3129, 3129, 3131, 3125, 3132, 3133, 3134, 3135, 3090, 3136,
     3137, 3138, 3139, 3140, 3141, 3130, 3105, 3105, 3142, 3143,
     3109, 3109, 3144, 3111, 3111, 3145, 3145, 3113, 3113, 3114,
     3114, 3115, 3115, 3146, 3147, 3148, 3152, 3112, 3149, 3149,
     3153, 3122, 3122, 3123, 3123, 3124, 3124, 3154, 3154, 3155,
     3127, 3127, 3156, 3150, 3129, 3129, 3157, 3157, 3158, 3159,
     3125, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3130,
     3168, 3151, 3145, 3145, 3169, 3170, 3170, 3172, 3172, 3149,

     3149, 3174, 3174, 3175, 3176, 3176, 3178, 3154, 3154, 3179,
     3171, 3180, 3173, 3181, 3150, 3157, 3157, 3182, 3183, 3177,
     3184, 3185, 3186, 3187, 3188, 3189, 3190, 3190, 3170, 3170,
     3192, 3192, 3172, 3172, 3193, 3193, 3174, 3174, 3194, 3176,
     3176, 3191, 3196, 3171, 3195, 3195, 3199, 3173, 3197, 3197,
     3200, 3201, 3202, 3203, 3177, 3204, 3205, 3206, 3207, 3208,
     3190, 3190, 3210, 3198, 3209, 3209, 3192, 3192, 3193, 3193,
     3195, 3195, 3211, 3197, 3197, 3191, 3212, 3212, 3213, 3214,
     3214, 3216, 3216, 3218, 3219, 3220, 3221, 3222, 3198, 3223,
     3224, 3209, 3209, 3225, 3215, 3226, 3217, 3212, 3212, 3227,

     3214, 3214, 3228, 3228, 3216, 3216, 3229, 3229, 3230, 3231,
     3232, 3233, 3234, 3235, 3236, 3215, 3237, 3238, 3239, 3217,
     3228, 3228, 3229, 3229, 3240, 3241, 3241, 3243, 3244, 3245,
     3245, 3247, 3247, 3249, 3250, 3250, 3252, 3241, 3241, 3242,
     3253, 3253, 3254, 3246, 3255, 3255, 3248, 3245, 3245, 3251,
     3259, 3242, 3257, 3257, 3247, 3247, 3258, 3258, 3256, 3250,
     3250, 3246, 3260, 3260, 3261, 3253, 3253, 3262, 3262, 3248,
     3255, 3255, 3264, 3264, 3251, 3257, 3257, 3258, 3258, 3265,
     3266, 3263, 3260, 3260, 3256, 3262, 3262, 3267, 3267, 3264,
     3264, 3268, 3267, 3267, 3269, 3269, 3269, 3269, 1019, 3263,

     3271, 3271, 3271, 3271, 1016, 1015, 1014, 1013, 1012, 3270,
     1011, 3270,   23,   23,   23,   23,   23,   34,   34,   34,
       34,   34,   36,   36,   36,   36,   36,   37,   37,   37,
       37,   37,   35,   35,   35,   35,   35,   38,   38,   38,
       38,   38,   39,   39,   39,   39,   39,   42,   42,   42,
       42,   42,  103,  103,  103,  103,  104, 1010,  104,  104,
      104,  105,  105, 1009,  105,  105,  106,  106,  106, 1008,
      106, 1007, 1006, 1005, 1001, 1000,  999,  998,  997,  996,
      995,  994,  993,  992,  991,  988,  985,  984,  983,  982,
      981,  980,  975,  974,  973,  972,  969,  968,  967,  966,

      965,  964,  963,  962,  961,  960,  959,  958,  955,  954,
      953,  952,  951,  950,  949,  948,  947,  946,  945,  943,
      942,  941,  938,  937,  936,  935,  933,  932,  931,  930,
      928,  926,  925,  922,  921,  920,  914,  913,  912,  907,
      905,  904,  903,  902,  899,  898,  897,  896,  894,  892,
      891,  890,  889,  885,  884,  883,  882,  881,  880,  879,
      874,  873,  872,  871,  870,  869,  867,  866,  864,  863,
      862,  859,  858,  857,  856,  854,  853,  847,  846,  842,
      841,  840,  839,  838,  837,  836,  835,  830,  829,  828,
      827,  825,  824,  820,  819,  818,  817,  816,  814,  811,

      810,  809,  808,  807,  806,  805,  804,  803,  802,  801,
      800,  798,  797,  796,  795,  794,  792,  791,  788,  787,
      786,  783,  782,  781,  780,  775,  774,  773,  772,  771,
      767,  766,  765,  764,  762,  760,  759,  758,  757,  753,
      752,  751,  750,  749,  748,  747,  742,  741,  740,  739,
      738,  737,  735,  734,  733,  732,  731,  728,  727,  726,
      725,  718,  717,  716,  715,  714,  713,  712,  711,  708,
      707,  706,  702,  699,  698,  697,  694,  693,  692,  691,
      690,  689,  688,  687,  683,  679,  678,  668,  666,  665,
      661,  660,  659,  658,  657,  656,  655,  653,  652,  647,

      646,  644,  643,  642,  641,  634,  633,  630,  629,  628,
      627,  623,  622,  621,  618,  617,  614,  613,  612,  611,
      610,  609,  608,  607,  602,  601,  600,  599,  596,  594,
      591,  590,  589,  588,  587,  584,  583,  577,  576,  575,
      574,  573,  572,  571,  570,  567,  566,  565,  564,  563,
      560,  559,  558,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  543,  542,  532,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  519,  518,  513,  512,
      511,  510,  509,  508,  503,  502,  499,  498,  497,  496,
      491,  490,  489,  488,  487,  486,  483,  482,  478,  477,

      476,  475,  474,  473,  472,  469,  468,  467,  466,  465,
      464,  463,  460,  459,  458,  451,  450,  449,  441,  440,
      439,  438,  437,  426,  425,  421,  420,  416,  415,  414,
      413,  412,  411,  410,  409,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  388,  387,
      386,  385,  384,  381,  380,  379,  378,  375,  374,  373,
      372,  371,  370,  367,  366,  362,  361,  360,  359,  358,
      357,  356,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  337,  336,  335,  327,  326,  325,  324,  323,
      322,  314,  313,  309,  308,  307,  274,  269,  268,  261,

      255,  252,  251,  248,  245,  244,  241,  238,  237,  236,
      235,  234,  233,  232,  231,  228,  227,  226,  225,  224,
      223,  222,  219,  218,  217,  216,  215,  215,  214,  181,
      176,  175,  168,  162,  140,  137,  136,  126,  117,  116,
      113,  102,  101,   75,  108,  107,  102,  101,   75,   71,
       71, 3272,   35,   35,   35,   35,   35,   35,   35,   35,
       19, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272
    } ;

static yyconst flex_int16_t yy_chk[5229] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,    0,
       17,   15,   18,   51,   16,    1,   72,   72,    0,   25,
        1,   25,   25,   25,   76,   76,  750,   51,  750,   26,
       26,   55,   56,   68,   85,   25,   62,   61,   85,   26,
       26,   26,   55,   28,   28,   68,   56,   61,    0,   62,
       26,   28,   58,   28,   28,   28,    1,    2,    2,    2,
        2,    2,   58,    2,   28,    2,    2,    2,    2,    2,
        2,    2,   26,    2,    2,   47,   63,   47,   47,   47,
       64,   83,    2,   48,   48,   91,   28,    2,  144,   67,

       91,   47,   83,   48,   48,   48,   63,   50,   50,  144,
       64,   82,  804,   67,   48,   50,   67,   50,   50,   50,
       66,   82,   92,   67,  805,   86,   66,   86,   50,   82,
       92,   86,   66,    2,   21,   21,   48,   86,   21,  806,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       50,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,

       23,  146,  548,   96,  548,  146,   23,   23,   23,   23,
       23,   23,   23,   96,   23,   74,   74,   99,   89,   74,
       74,   74,   99,   23,   73,   73,   89,  136,   23,  196,
      196,   89,   89,  136,   73,   73,   73,  120,   98,   23,
       23,   23,   23,   23,   23,   73,   23,   98,  807,   23,
       23,   23,   23,  120,   98,  112,   23,   23,   23,   23,
       23,   29,   93,  129,  112,  134,   93,   73,   29,   94,
      129,  131,  131,   93,  152,   29,   93,  808,   95,  152,
       29,  134,   93,   94,  809,  131,   94,   94,   94,   95,
       29,  160,   95,  141,  141,   95,  160,  153,   29,   29,

       29,   29,   29,   29,   29,  153,   29,   29,  141,   29,
       29,   29,   29,   29,  155,   29,   29,   29,   29,   29,
       78,  138,  138,  138,  139,  139,  169,  143,  155,  169,
       78,  155,  155,  155,  139,  139,  139,  143,   78,   78,
       78,   78,   78,   78,   78,  143,   78,   78,  810,   78,
       78,   78,   78,   78,  156,   78,   78,   78,   78,   78,
       97,  147,  170,  147,   97,  156,  170,  147,  156,  150,
       97,  156,   97,  147,  154,   97,   97,  150,  154,  157,
       97,  165,  150,  150,  159,  154,  158,  165,  154,  157,
      158,  221,  182,  159,  154,  165,  158,  168,  158,  168,

      159,  158,  158,  182,  168,  178,  158,  177,  177,  184,
      178,  183,  183,  184,  221,  207,  204,  178,  207,  811,
      178,  178,  177,  204,  214,  204,  183,  215,  215,  228,
      214,  227,  227,  242,  242,  228,  243,  243,  258,  243,
      307,  243,  253,  253,  258,  227,  307,  242,  254,  254,
      255,  255,  258,  261,  263,  261,  262,  253,  263,  262,
      261,  264,  264,  270,  270,  255,  275,  271,  812,  276,
      276,  277,  271,  281,  281,  277,  264,  275,  270,  271,
      289,  289,  271,  271,  276,  297,  300,  813,  281,  300,
      308,  308,  297,  313,  297,  316,  316,  313,  317,  317,

      324,  324,  325,  325,  264,  308,  328,  328,  329,  329,
      340,  340,  814,  317,  347,  324,  377,  325,  341,  341,
      816,  328,  343,  343,  377,  340,  344,  344,  347,  358,
      358,  734,  362,  362,  368,  368,  378,  343,  687,  377,
      687,  344,  378,  381,  381,  344,  344,  362,  734,  368,
      387,  387,  389,  389,  344,  817,  343,  381,  390,  390,
      392,  392,  397,  397,  387,  425,  389,  398,  398,  425,
      406,  406,  518,  406,  392,  406,  397,  410,  410,  413,
      413,  398,  417,  417,  500,  344,  418,  418,  419,  419,
      652,  410,  818,  413,  420,  420,  428,  428,  429,  429,

      500,  418,  434,  434,  435,  435,  438,  438,  558,  420,
      518,  428,  558,  429,  439,  439,  697,  434,  442,  442,
      697,  438,  443,  443,  451,  451,  454,  454,  652,  439,
      455,  455,  463,  442,  457,  457,  458,  458,  819,  451,
      820,  454,  461,  461,  462,  462,  463,  824,  451,  457,
      825,  458,  583,  428,  428,  458,  458,  461,  465,  465,
      474,  474,  478,  478,  458,  583,  480,  480,  457,  484,
      484,  494,  494,  465,  493,  493,  827,  478,  495,  495,
      631,  480,  506,  506,  484,  828,  494,  507,  507,  493,
      514,  514,  515,  515,  829,  458,  631,  506,  493,  516,

      516,  465,  480,  517,  517,  514,  493,  520,  520,  527,
      527,  531,  531,  758,  516,  533,  533,  830,  527,  534,
      534,  493,  536,  536,  527,  537,  537,  542,  542,  758,
      533,  549,  549,  554,  554,  833,  542,  536,  561,  561,
      562,  562,  542,  568,  568,  834,  549,  835,  554,  569,
      569,  585,  585,  561,  586,  586,  592,  592,  568,  593,
      593,  836,  593,  837,  593,  585,  595,  595,  597,  597,
      592,  598,  598,  603,  603,  604,  604,  605,  605,  841,
      606,  606,  597,  606,  842,  606,  844,  603,  615,  615,
      845,  605,  616,  616,  846,  616,  847,  616,  619,  619,

      620,  620,  615,  620,  849,  620,  621,  621,  624,  624,
      625,  625,  619,  626,  626,  635,  635,  636,  636,  850,
      621,  639,  639,  640,  640,  625,  645,  645,  648,  648,
      635,  649,  649,  650,  650,  853,  639,  651,  651,  654,
      654,  661,  661,  648,  662,  662,  663,  663,  650,  667,
      667,  669,  669,  670,  670,  856,  661,  672,  672,  662,
      673,  673,  678,  678,  680,  680,  669,  684,  684,  685,
      685,  857,  672,  688,  688,  692,  692,  678,  693,  693,
      700,  700,  684,  701,  701,  703,  703,  858,  688,  859,
      692,  704,  704,  693,  860,  700,  709,  709,  710,  710,

      703,  715,  715,  719,  719,  861,  692,  720,  720,  724,
      724,  709,  736,  736,  743,  743,  715,  864,  719,  744,
      744,  754,  754,  867,  756,  756,  761,  761,  763,  763,
      754,  767,  767,  768,  768,  869,  754,  756,  770,  770,
      778,  778,  768,  784,  784,  870,  767,  871,  768,  785,
      785,  770,  786,  786,  872,  778,  793,  793,  784,  799,
      799,  802,  802,  815,  815,  821,  821,  786,  821,  873,
      821,  826,  826,  831,  831,  874,  802,  832,  832,  877,
      832,  878,  832,  838,  838,  839,  839,  840,  840,  843,
      843,  866,  843,  879,  843,  848,  848,  838,  848,  839,

      848,  840,  851,  851,  852,  852,  880,  852,  866,  852,
      854,  854,  855,  855,  862,  862,  851,  863,  863,  865,
      865,  868,  868,  881,  854,  875,  875,  876,  876,  862,
      883,  882,  863,  882,  884,  885,  886,  886,  887,  887,
      888,  888,  889,  889,  890,  891,  892,  893,  893,  894,
      896,  886,  895,  895,  897,  898,  902,  889,  899,  899,
      890,  900,  900,  901,  901,  903,  904,  905,  906,  906,
      907,  908,  909,  899,  863,  913,  900,  910,  910,  911,
      911,  912,  912,  914,  915,  915,  916,  916,  917,  918,
      918,  921,  910,  919,  919,  922,  912,  920,  920,  915,

      923,  924,  925,  926,  918,  927,  927,  928,  929,  929,
      930,  912,  920,  931,  932,  933,  933,  934,  934,  935,
      936,  937,  937,  938,  939,  939,  940,  940,  941,  942,
      933,  943,  944,  944,  945,  946,  937,  947,  948,  939,
      949,  950,  951,  952,  953,  955,  956,  957,  958,  959,
      960,  961,  962,  962,  963,  964,  965,  966,  967,  968,
      969,  970,  971,  972,  973,  975,  975,  962,  976,  976,
      977,  978,  979,  980,  982,  981,  983,  984,  985,  981,
      983,  976,  981,  981,  986,  986,  981,  990,  981,  981,
      981,  987,  987,  988,  988,  989,  989,  991,  991,  986,

      992,  993,  995,  996,  997,  998, 1000,  999,  989,  999,
     1001, 1005,  991, 1002, 1002, 1003, 1003, 1004, 1004, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1013, 1011, 1015,
     1003, 1014, 1014, 1017, 1017, 1013, 1018, 1018, 1019, 1020,
     1021, 1013, 1024, 1025, 1026, 1027, 1014, 1028, 1017, 1029,
     1030, 1031, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1039, 1040, 1014, 1041, 1031, 1044, 1045, 1045, 1046,
     1047, 1047, 1048, 1048, 1039, 1049, 1049, 1050, 1050, 1053,
     1050, 1045, 1050, 1054, 1047, 1051, 1051, 1052, 1052, 1049,
     1057, 1058, 1058, 1061, 1061, 1062, 1061, 1063, 1061, 1051,

     1064, 1064, 1065, 1065, 1067, 1058, 1066, 1066, 1068, 1066,
     1069, 1066, 1070, 1071, 1064, 1072, 1065, 1073, 1073, 1074,
     1074, 1075, 1075, 1076, 1076, 1077, 1077, 1078, 1079, 1080,
     1081, 1082, 1073, 1083, 1084, 1086, 1075, 1085, 1085, 1087,
     1077, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1097, 1085, 1098, 1098, 1099, 1099, 1100, 1100, 1101,
     1102, 1103, 1105, 1106, 1107, 1097, 1108, 1106, 1109, 1109,
     1099, 1104, 1104, 1110, 1110, 1111, 1111, 1112, 1112, 1113,
     1114, 1115, 1115, 1109, 1116, 1117, 1104, 1118, 1119, 1119,
     1122, 1104, 1112, 1120, 1120, 1104, 1115, 1124, 1104, 1104,

     1121, 1121, 1104, 1126, 1104, 1104, 1104, 1123, 1120, 1123,
     1125, 1125, 1127, 1127, 1128, 1128, 1129, 1129, 1130, 1131,
     1132, 1133, 1134, 1135, 1136, 1137, 1138, 1138, 1136, 1128,
     1139, 1139, 1140, 1140, 1141, 1141, 1142, 1143, 1143, 1144,
     1144, 1138, 1145, 1145, 1146, 1139, 1148, 1140, 1147, 1147,
     1149, 1152, 1143, 1153, 1144, 1150, 1150, 1151, 1151, 1154,
     1154, 1155, 1139, 1158, 1159, 1160, 1161, 1162, 1164, 1165,
     1150, 1166, 1151, 1169, 1154, 1167, 1167, 1168, 1168, 1170,
     1171, 1172, 1173, 1175, 1175, 1175, 1176, 1177, 1178, 1172,
     1167, 1179, 1180, 1180, 1181, 1175, 1182, 1182, 1184, 1186,

     1185, 1175, 1187, 1188, 1189, 1182, 1185, 1188, 1190, 1186,
     1191, 1182, 1192, 1194, 1195, 1196, 1191, 1197, 1200, 1191,
     1198, 1198, 1199, 1199, 1201, 1201, 1190, 1202, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1201,
     1213, 1213, 1214, 1215, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1223, 1219, 1224, 1225, 1225, 1215, 1226,
     1226, 1223, 1227, 1227, 1228, 1229, 1231, 1223, 1233, 1225,
     1230, 1230, 1234, 1235, 1226, 1236, 1237, 1238, 1239, 1240,
     1240, 1241, 1241, 1242, 1242, 1244, 1242, 1246, 1242, 1243,
     1243, 1245, 1245, 1240, 1247, 1241, 1248, 1249, 1250, 1250,

     1252, 1251, 1251, 1243, 1251, 1245, 1251, 1253, 1253, 1257,
     1255, 1255, 1250, 1256, 1256, 1260, 1256, 1261, 1256, 1258,
     1258, 1253, 1254, 1254, 1255, 1254, 1262, 1262, 1254, 1254,
     1263, 1264, 1265, 1254, 1254, 1254, 1254, 1254, 1259, 1259,
     1254, 1259, 1273, 1259, 1266, 1266, 1267, 1267, 1274, 1267,
     1276, 1267, 1270, 1270, 1271, 1271, 1279, 1271, 1266, 1271,
     1272, 1272, 1280, 1272, 1285, 1272, 1270, 1275, 1275, 1277,
     1277, 1278, 1278, 1281, 1281, 1282, 1282, 1283, 1283, 1284,
     1284, 1286, 1275, 1287, 1277, 1289, 1278, 1288, 1288, 1290,
     1291, 1294, 1283, 1292, 1292, 1293, 1293, 1295, 1296, 1297,

     1298, 1298, 1288, 1299, 1299, 1301, 1302, 1297, 1292, 1303,
     1300, 1300, 1300, 1304, 1310, 1298, 1305, 1305, 1299, 1306,
     1306, 1298, 1300, 1307, 1307, 1308, 1308, 1314, 1300, 1309,
     1309, 1305, 1311, 1311, 1312, 1312, 1313, 1314, 1315, 1316,
     1308, 1317, 1313, 1316, 1309, 1318, 1319, 1311, 1320, 1321,
     1321, 1322, 1319, 1323, 1324, 1319, 1325, 1326, 1326, 1327,
     1327, 1328, 1328, 1318, 1321, 1329, 1330, 1331, 1331, 1332,
     1332, 1333, 1334, 1335, 1327, 1336, 1336, 1337, 1338, 1339,
     1340, 1341, 1331, 1342, 1342, 1343, 1343, 1344, 1344, 1345,
     1346, 1347, 1348, 1348, 1349, 1350, 1351, 1352, 1352, 1356,

     1343, 1358, 1344, 1353, 1353, 1354, 1354, 1348, 1355, 1355,
     1357, 1357, 1352, 1362, 1359, 1359, 1360, 1360, 1361, 1361,
     1354, 1348, 1363, 1363, 1364, 1365, 1365, 1348, 1343, 1359,
     1366, 1366, 1367, 1367, 1368, 1368, 1369, 1363, 1370, 1373,
     1365, 1371, 1371, 1372, 1372, 1374, 1375, 1367, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1382, 1371, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1396, 1398, 1399, 1399, 1400, 1401, 1401, 1402, 1403,
     1404, 1405, 1399, 1406, 1407, 1408, 1409, 1410, 1399, 1401,
     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,

     1421, 1422, 1422, 1423, 1425, 1426, 1427, 1428, 1429, 1430,
     1433, 1434, 1434, 1435, 1435, 1436, 1437, 1438, 1437, 1439,
     1440, 1441, 1442, 1443, 1444, 1444, 1434, 1445, 1445, 1446,
     1447, 1447, 1448, 1449, 1450, 1452, 1453, 1454, 1455, 1456,
     1445, 1457, 1458, 1458, 1459, 1459, 1461, 1459, 1462, 1459,
     1460, 1460, 1465, 1460, 1468, 1460, 1458, 1463, 1463, 1464,
     1464, 1466, 1466, 1467, 1467, 1469, 1467, 1470, 1467, 1471,
     1473, 1463, 1474, 1472, 1472, 1466, 1472, 1475, 1472, 1476,
     1476, 1477, 1477, 1478, 1477, 1479, 1477, 1480, 1481, 1480,
     1482, 1483, 1484, 1476, 1485, 1486, 1487, 1488, 1489, 1489,

     1490, 1489, 1491, 1489, 1492, 1495, 1496, 1497, 1499, 1500,
     1484, 1485, 1498, 1498, 1502, 1498, 1503, 1498, 1508, 1487,
     1501, 1501, 1513, 1501, 1514, 1501, 1506, 1506, 1507, 1507,
     1509, 1509, 1510, 1510, 1511, 1511, 1512, 1512, 1515, 1515,
     1516, 1506, 1517, 1518, 1521, 1509, 1519, 1519, 1522, 1511,
     1520, 1520, 1523, 1524, 1524, 1525, 1525, 1526, 1527, 1528,
     1529, 1519, 1530, 1530, 1531, 1531, 1532, 1533, 1533, 1535,
     1525, 1534, 1534, 1536, 1537, 1538, 1539, 1530, 1540, 1541,
     1543, 1542, 1533, 1542, 1544, 1544, 1545, 1545, 1546, 1546,
     1547, 1547, 1548, 1548, 1549, 1550, 1550, 1551, 1552, 1553,

     1554, 1545, 1555, 1556, 1557, 1547, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1565, 1565, 1566, 1566, 1567, 1568, 1569,
     1570, 1571, 1571, 1572, 1573, 1573, 1574, 1574, 1565, 1575,
     1576, 1577, 1578, 1579, 1580, 1581, 1581, 1582, 1582, 1573,
     1583, 1583, 1584, 1584, 1585, 1586, 1586, 1587, 1587, 1588,
     1581, 1589, 1582, 1589, 1590, 1583, 1591, 1591, 1592, 1592,
     1586, 1593, 1594, 1595, 1596, 1597, 1598, 1598, 1599, 1599,
     1600, 1591, 1601, 1602, 1602, 1603, 1604, 1604, 1605, 1605,
     1606, 1606, 1607, 1607, 1608, 1608, 1609, 1610, 1610, 1611,
     1611, 1604, 1612, 1613, 1614, 1606, 1615, 1616, 1617, 1618,

     1619, 1620, 1610, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1637, 1638, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
     1646, 1647, 1648, 1649, 1638, 1650, 1651, 1652, 1653, 1654,
     1655, 1656, 1657, 1658, 1610, 1659, 1660, 1661, 1662, 1653,
     1663, 1664, 1665, 1666, 1667, 1668, 1668, 1669, 1670, 1671,
     1672, 1673, 1674, 1675, 1676, 1677, 1678, 1678, 1679, 1680,
     1681, 1682, 1683, 1685, 1686, 1687, 1685, 1688, 1689, 1689,
     1690, 1689, 1691, 1689, 1695, 1685, 1694, 1694, 1696, 1696,
     1697, 1696, 1698, 1696, 1699, 1700, 1701, 1702, 1705, 1706,

     1706, 1709, 1706, 1710, 1706, 1710, 1711, 1711, 1712, 1713,
     1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
     1711, 1726, 1727, 1728, 1729, 1734, 1734, 1735, 1736, 1736,
     1737, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1743, 1744,
     1745, 1746, 1747, 1747, 1748, 1748, 1749, 1750, 1751, 1752,
     1753, 1753, 1754, 1755, 1755, 1756, 1757, 1747, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1766, 1766, 1767, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1783, 1784, 1785, 1786,
     1787, 1788, 1789, 1789, 1781, 1790, 1790, 1791, 1792, 1793,

     1794, 1795, 1796, 1797, 1797, 1798, 1798, 1789, 1799, 1799,
     1800, 1800, 1801, 1801, 1802, 1803, 1803, 1804, 1797, 1805,
     1806, 1807, 1809, 1799, 1808, 1808, 1810, 1811, 1812, 1813,
     1814, 1815, 1816, 1817, 1817, 1818, 1818, 1819, 1819, 1820,
     1821, 1821, 1822, 1822, 1823, 1823, 1825, 1828, 1829, 1830,
     1818, 1831, 1832, 1833, 1834, 1821, 1835, 1836, 1837, 1823,
     1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
     1848, 1849, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
     1857, 1858, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
     1868, 1869, 1870, 1871, 1872, 1874, 1875, 1876, 1877, 1878,

     1879, 1880, 1881, 1882, 1884, 1886, 1887, 1888, 1889, 1890,
     1890, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1898, 1899,
     1899, 1902, 1902, 1905, 1890, 1906, 1906, 1907, 1908, 1908,
     1909, 1898, 1910, 1899, 1911, 1902, 1912, 1912, 1915, 1906,
     1913, 1913, 1908, 1914, 1914, 1916, 1917, 1918, 1919, 1919,
     1912, 1920, 1921, 1922, 1913, 1923, 1924, 1924, 1925, 1926,
     1926, 1927, 1919, 1928, 1929, 1930, 1930, 1931, 1931, 1932,
     1924, 1933, 1933, 1926, 1934, 1934, 1935, 1936, 1937, 1930,
     1938, 1939, 1931, 1926, 1940, 1940, 1933, 1941, 1942, 1934,
     1943, 1919, 1944, 1912, 1945, 1946, 1947, 1948, 1949, 1950,

     1951, 1952, 1953, 1954, 1955, 1956, 1926, 1957, 1958, 1959,
     1960, 1961, 1962, 1963, 1964, 1964, 1965, 1966, 1967, 1968,
     1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1979, 1964,
     1977, 1977, 1978, 1978, 1980, 1981, 1982, 1983, 1984, 1984,
     1985, 1985, 1986, 1987, 1988, 1989, 1991, 1978, 1990, 1990,
     1992, 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1997, 1998,
     1999, 1999, 2000, 1990, 2004, 1992, 2001, 2001, 2002, 2002,
     1996, 2005, 1997, 2003, 2003, 2007, 2008, 2008, 2009, 2011,
     2011, 2012, 2014, 2002, 2015, 2008, 2016, 2017, 2011, 2018,
     2019, 2008, 2020, 2021, 2011, 2022, 2023, 2024, 2025, 2025,

     2026, 2027, 2028, 2029, 2030, 2031, 2032, 2035, 2036, 2038,
     2040, 2041, 2042, 2025, 2044, 2045, 2046, 2046, 2047, 2048,
     2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2058, 2059,
     2060, 2046, 2061, 2062, 2062, 2063, 2063, 2064, 2065, 2066,
     2067, 2068, 2069, 2070, 2070, 2071, 2071, 2076, 2062, 2072,
     2072, 2073, 2073, 2074, 2074, 2075, 2075, 2070, 2075, 2079,
     2075, 2077, 2077, 2072, 2078, 2078, 2083, 2074, 2080, 2080,
     2081, 2081, 2082, 2082, 2084, 2077, 2085, 2085, 2086, 2086,
     2087, 2089, 2080, 2088, 2088, 2090, 2082, 2091, 2092, 2095,
     2085, 2093, 2093, 2094, 2094, 2096, 2097, 2098, 2099, 2099,

     2100, 2100, 2101, 2101, 2102, 2093, 2103, 2103, 2104, 2104,
     2105, 2106, 2099, 2107, 2100, 2108, 2109, 2110, 2110, 2114,
     2103, 2119, 2097, 2111, 2111, 2112, 2112, 2113, 2113, 2115,
     2115, 2110, 2116, 2116, 2117, 2117, 2118, 2118, 2120, 2120,
     2112, 2121, 2122, 2122, 2115, 2123, 2124, 2124, 2126, 2117,
     2125, 2125, 2128, 2120, 2127, 2127, 2129, 2122, 2130, 2131,
     2132, 2124, 2133, 2134, 2135, 2125, 2136, 2137, 2138, 2127,
     2139, 2140, 2141, 2142, 2143, 2144, 2145, 2145, 2146, 2146,
     2147, 2147, 2148, 2148, 2149, 2150, 2151, 2151, 2152, 2153,
     2153, 2145, 2154, 2146, 2155, 2147, 2156, 2157, 2157, 2158,

     2159, 2151, 2160, 2163, 2153, 2161, 2161, 2162, 2162, 2164,
     2165, 2166, 2157, 2167, 2168, 2169, 2170, 2171, 2172, 2172,
     2161, 2173, 2173, 2174, 2174, 2175, 2175, 2176, 2176, 2177,
     2178, 2179, 2184, 2172, 2180, 2180, 2181, 2181, 2174, 2185,
     2175, 2182, 2182, 2183, 2183, 2186, 2186, 2187, 2188, 2180,
     2190, 2190, 2191, 2192, 2192, 2193, 2182, 2195, 2197, 2190,
     2194, 2194, 2198, 2196, 2196, 2190, 2192, 2199, 2200, 2194,
     2201, 2202, 2203, 2204, 2205, 2194, 2196, 2206, 2208, 2209,
     2209, 2210, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
     2218, 2219, 2220, 2221, 2209, 2222, 2225, 2226, 2226, 2227,

     2227, 2228, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2241, 2226, 2242, 2242, 2243, 2244, 2245, 2246, 2246,
     2247, 2248, 2248, 2249, 2249, 2250, 2250, 2252, 2251, 2251,
     2245, 2251, 2246, 2251, 2253, 2248, 2254, 2255, 2255, 2256,
     2257, 2257, 2258, 2258, 2259, 2259, 2260, 2259, 2261, 2259,
     2262, 2262, 2263, 2264, 2265, 2265, 2258, 2266, 2267, 2268,
     2268, 2269, 2270, 2271, 2272, 2272, 2273, 2277, 2265, 2274,
     2274, 2275, 2275, 2270, 2276, 2276, 2278, 2278, 2272, 2270,
     2279, 2280, 2281, 2274, 2282, 2283, 2283, 2284, 2284, 2285,
     2285, 2286, 2287, 2287, 2288, 2288, 2289, 2290, 2290, 2283,

     2291, 2291, 2292, 2292, 2293, 2293, 2294, 2294, 2295, 2296,
     2296, 2300, 2290, 2297, 2297, 2298, 2298, 2292, 2303, 2293,
     2299, 2299, 2301, 2301, 2296, 2302, 2302, 2304, 2305, 2306,
     2298, 2307, 2308, 2309, 2310, 2311, 2313, 2301, 2312, 2312,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2320, 2321, 2321,
     2322, 2322, 2325, 2312, 2323, 2323, 2324, 2324, 2326, 2327,
     2327, 2320, 2328, 2328, 2329, 2322, 2330, 2330, 2331, 2331,
     2332, 2333, 2334, 2334, 2327, 2335, 2335, 2336, 2336, 2337,
     2337, 2330, 2338, 2339, 2340, 2340, 2344, 2334, 2341, 2341,
     2335, 2342, 2342, 2345, 2337, 2343, 2343, 2346, 2347, 2348,

     2349, 2350, 2350, 2341, 2351, 2351, 2342, 2352, 2352, 2355,
     2343, 2353, 2353, 2354, 2354, 2356, 2357, 2357, 2359, 2351,
     2358, 2358, 2360, 2361, 2362, 2363, 2363, 2365, 2354, 2364,
     2364, 2366, 2367, 2367, 2368, 2368, 2369, 2371, 2372, 2366,
     2373, 2374, 2364, 2375, 2376, 2377, 2378, 2368, 2379, 2380,
     2381, 2381, 2382, 2383, 2384, 2385, 2386, 2388, 2389, 2390,
     2391, 2392, 2393, 2395, 2395, 2396, 2397, 2398, 2399, 2400,
     2354, 2401, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411,
     2411, 2412, 2412, 2413, 2414, 2414, 2415, 2415, 2418, 2415,
     2419, 2415, 2424, 2411, 2420, 2420, 2425, 2420, 2414, 2420,

     2423, 2423, 2426, 2427, 2427, 2428, 2428, 2429, 2429, 2430,
     2431, 2432, 2433, 2434, 2423, 2435, 2438, 2427, 2436, 2436,
     2440, 2429, 2437, 2437, 2439, 2439, 2433, 2441, 2441, 2442,
     2443, 2444, 2436, 2445, 2445, 2446, 2446, 2447, 2446, 2448,
     2446, 2441, 2449, 2449, 2450, 2450, 2453, 2445, 2451, 2451,
     2452, 2452, 2454, 2454, 2453, 2455, 2455, 2456, 2456, 2450,
     2457, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465,
     2466, 2469, 2456, 2467, 2467, 2468, 2468, 2470, 2471, 2472,
     2473, 2474, 2474, 2475, 2476, 2476, 2477, 2477, 2467, 2478,
     2479, 2480, 2480, 2481, 2482, 2482, 2474, 2483, 2484, 2485,

     2485, 2486, 2486, 2487, 2487, 2488, 2488, 2489, 2489, 2490,
     2490, 2491, 2492, 2492, 2485, 2493, 2493, 2494, 2494, 2498,
     2488, 2495, 2495, 2499, 2490, 2496, 2496, 2492, 2497, 2497,
     2500, 2501, 2494, 2502, 2503, 2503, 2504, 2504, 2505, 2505,
     2496, 2506, 2506, 2507, 2507, 2508, 2509, 2510, 2511, 2503,
     2512, 2513, 2515, 2505, 2514, 2514, 2516, 2517, 2507, 2518,
     2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527,
     2528, 2529, 2530, 2535, 2536, 2537, 2539, 2540, 2541, 2542,
     2543, 2544, 2545, 2546, 2548, 2549, 2551, 2552, 2553, 2554,
     2554, 2555, 2556, 2556, 2557, 2556, 2558, 2556, 2559, 2560,

     2560, 2561, 2561, 2564, 2555, 2562, 2562, 2563, 2563, 2565,
     2566, 2566, 2569, 2560, 2570, 2561, 2567, 2567, 2568, 2568,
     2571, 2563, 2572, 2573, 2574, 2575, 2576, 2576, 2577, 2578,
     2567, 2579, 2579, 2580, 2580, 2581, 2582, 2583, 2584, 2584,
     2587, 2584, 2588, 2584, 2590, 2579, 2589, 2589, 2591, 2592,
     2592, 2593, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600,
     2601, 2602, 2603, 2603, 2592, 2604, 2605, 2605, 2606, 2606,
     2607, 2607, 2608, 2608, 2609, 2609, 2610, 2610, 2611, 2612,
     2613, 2605, 2615, 2606, 2616, 2607, 2621, 2608, 2625, 2609,
     2614, 2614, 2617, 2617, 2618, 2618, 2619, 2619, 2620, 2620,

     2622, 2622, 2623, 2623, 2626, 2614, 2624, 2624, 2627, 2628,
     2629, 2619, 2630, 2630, 2631, 2631, 2632, 2632, 2633, 2633,
     2634, 2634, 2635, 2635, 2636, 2637, 2637, 2630, 2638, 2639,
     2640, 2641, 2642, 2633, 2643, 2644, 2646, 2635, 2647, 2648,
     2637, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657,
     2658, 2660, 2661, 2662, 2663, 2665, 2666, 2667, 2668, 2668,
     2669, 2670, 2670, 2671, 2671, 2672, 2673, 2676, 2677, 2677,
     2682, 2678, 2678, 2668, 2678, 2670, 2678, 2671, 2679, 2679,
     2680, 2680, 2677, 2681, 2681, 2683, 2684, 2684, 2685, 2686,
     2687, 2688, 2689, 2690, 2680, 2691, 2692, 2693, 2694, 2694,

     2695, 2696, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2702,
     2703, 2703, 2704, 2705, 2706, 2696, 2707, 2708, 2709, 2710,
     2711, 2712, 2713, 2713, 2722, 2703, 2714, 2714, 2715, 2715,
     2716, 2716, 2717, 2717, 2718, 2718, 2723, 2713, 2719, 2719,
     2720, 2720, 2724, 2715, 2721, 2721, 2728, 2717, 2725, 2725,
     2726, 2726, 2730, 2719, 2727, 2727, 2729, 2729, 2731, 2732,
     2733, 2733, 2734, 2725, 2735, 2736, 2736, 2737, 2737, 2727,
     2738, 2738, 2739, 2739, 2740, 2733, 2741, 2741, 2742, 2742,
     2743, 2746, 2747, 2748, 2749, 2738, 2750, 2751, 2752, 2753,
     2754, 2741, 2755, 2758, 2759, 2760, 2761, 2762, 2763, 2764,

     2765, 2766, 2767, 2768, 2769, 2770, 2770, 2753, 2771, 2771,
     2772, 2773, 2773, 2774, 2774, 2775, 2775, 2776, 2776, 2777,
     2770, 2778, 2779, 2780, 2780, 2773, 2780, 2781, 2780, 2775,
     2782, 2783, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790,
     2791, 2792, 2792, 2793, 2793, 2794, 2795, 2795, 2796, 2796,
     2797, 2797, 2798, 2799, 2799, 2792, 2801, 2793, 2800, 2800,
     2795, 2802, 2796, 2803, 2803, 2798, 2804, 2804, 2799, 2805,
     2806, 2807, 2808, 2800, 2809, 2810, 2811, 2811, 2803, 2812,
     2812, 2813, 2814, 2814, 2815, 2815, 2816, 2816, 2817, 2817,
     2808, 2811, 2818, 2819, 2812, 2820, 2821, 2821, 2822, 2822,

     2823, 2823, 2824, 2825, 2826, 2827, 2828, 2828, 2829, 2829,
     2830, 2831, 2833, 2822, 2832, 2832, 2834, 2834, 2835, 2836,
     2837, 2828, 2839, 2840, 2841, 2843, 2844, 2845, 2846, 2847,
     2848, 2848, 2849, 2852, 2853, 2854, 2856, 2857, 2858, 2859,
     2859, 2860, 2861, 2861, 2865, 2848, 2862, 2862, 2863, 2863,
     2864, 2864, 2868, 2869, 2870, 2871, 2871, 2872, 2873, 2874,
     2875, 2880, 2863, 2884, 2864, 2876, 2876, 2877, 2877, 2871,
     2878, 2878, 2879, 2879, 2881, 2881, 2882, 2882, 2885, 2876,
     2883, 2883, 2886, 2886, 2878, 2887, 2887, 2890, 2881, 2888,
     2888, 2889, 2889, 2891, 2891, 2892, 2892, 2886, 2893, 2894,

     2895, 2895, 2896, 2897, 2888, 2898, 2899, 2904, 2891, 2900,
     2900, 2901, 2901, 2902, 2902, 2895, 2903, 2903, 2905, 2906,
     2906, 2907, 2907, 2909, 2900, 2908, 2908, 2910, 2902, 2911,
     2912, 2912, 2913, 2913, 2906, 2914, 2907, 2915, 2916, 2917,
     2918, 2919, 2920, 2922, 2923, 2912, 2924, 2925, 2926, 2927,
     2928, 2928, 2929, 2929, 2930, 2931, 2932, 2933, 2935, 2936,
     2937, 2938, 2938, 2939, 2939, 2928, 2940, 2940, 2941, 2941,
     2942, 2942, 2943, 2943, 2944, 2938, 2945, 2946, 2946, 2948,
     2940, 2947, 2947, 2949, 2942, 2950, 2943, 2951, 2952, 2952,
     2954, 2946, 2953, 2953, 2955, 2955, 2956, 2957, 2958, 2958,

     2959, 2959, 2960, 2961, 2961, 2962, 2962, 2963, 2963, 2964,
     2965, 2965, 2966, 2966, 2967, 2968, 2969, 2970, 2961, 2971,
     2971, 2973, 2963, 2972, 2972, 2965, 2974, 2975, 2975, 2976,
     2976, 2977, 2977, 2978, 2978, 2979, 2980, 2981, 2982, 2982,
     2983, 2983, 2975, 2984, 2984, 2985, 2977, 2986, 2987, 2988,
     2990, 2991, 2992, 2982, 2993, 2994, 2995, 2996, 2984, 2997,
     2997, 3000, 3001, 3003, 3004, 3005, 3005, 3006, 3006, 3007,
     3007, 3008, 3008, 3012, 3008, 3014, 3008, 3009, 3009, 3010,
     3010, 3011, 3011, 3007, 3013, 3013, 3015, 3016, 3016, 3017,
     3018, 3009, 3019, 3019, 3025, 3011, 3020, 3020, 3021, 3021,

     3027, 3016, 3022, 3022, 3023, 3023, 3019, 3024, 3024, 3028,
     3020, 3026, 3026, 3021, 3029, 3030, 3031, 3032, 3032, 3023,
     3033, 3033, 3034, 3034, 3035, 3035, 3036, 3037, 3038, 3038,
     3039, 3039, 3032, 3040, 3040, 3041, 3041, 3042, 3043, 3035,
     3044, 3045, 3046, 3047, 3048, 3039, 3049, 3050, 3051, 3053,
     3041, 3054, 3056, 3056, 3057, 3056, 3058, 3056, 3059, 3059,
     3060, 3060, 3061, 3061, 3062, 3063, 3064, 3065, 3065, 3066,
     3066, 3067, 3068, 3068, 3060, 3069, 3069, 3070, 3070, 3071,
     3071, 3065, 3072, 3072, 3073, 3073, 3068, 3074, 3074, 3069,
     3075, 3075, 3076, 3071, 3077, 3078, 3079, 3080, 3081, 3073,

     3082, 3082, 3083, 3083, 3084, 3084, 3085, 3085, 3086, 3086,
     3087, 3088, 3088, 3089, 3089, 3082, 3090, 3090, 3091, 3084,
     3092, 3092, 3093, 3086, 3094, 3095, 3096, 3097, 3089, 3098,
     3099, 3100, 3101, 3102, 3106, 3092, 3105, 3105, 3107, 3108,
     3109, 3109, 3110, 3111, 3111, 3112, 3112, 3113, 3113, 3114,
     3114, 3115, 3115, 3116, 3117, 3118, 3120, 3111, 3119, 3119,
     3121, 3122, 3122, 3123, 3123, 3124, 3124, 3125, 3125, 3126,
     3127, 3127, 3128, 3119, 3129, 3129, 3130, 3130, 3131, 3132,
     3124, 3133, 3136, 3138, 3139, 3140, 3141, 3142, 3143, 3129,
     3144, 3119, 3145, 3145, 3146, 3147, 3147, 3148, 3148, 3149,

     3149, 3150, 3150, 3151, 3152, 3152, 3153, 3154, 3154, 3155,
     3147, 3156, 3148, 3158, 3149, 3157, 3157, 3159, 3161, 3152,
     3162, 3164, 3165, 3166, 3167, 3168, 3169, 3169, 3170, 3170,
     3171, 3171, 3172, 3172, 3173, 3173, 3174, 3174, 3175, 3176,
     3176, 3169, 3178, 3170, 3177, 3177, 3180, 3172, 3179, 3179,
     3181, 3182, 3183, 3184, 3176, 3185, 3186, 3187, 3188, 3189,
     3190, 3190, 3194, 3179, 3191, 3191, 3192, 3192, 3193, 3193,
     3195, 3195, 3196, 3197, 3197, 3190, 3198, 3198, 3199, 3200,
     3200, 3201, 3201, 3202, 3203, 3204, 3205, 3206, 3197, 3207,
     3208, 3209, 3209, 3210, 3200, 3211, 3201, 3212, 3212, 3213,

     3214, 3214, 3215, 3215, 3216, 3216, 3217, 3217, 3218, 3219,
     3220, 3221, 3222, 3223, 3224, 3214, 3225, 3226, 3227, 3216,
     3228, 3228, 3229, 3229, 3231, 3233, 3233, 3234, 3235, 3236,
     3236, 3237, 3237, 3238, 3239, 3239, 3240, 3241, 3241, 3233,
     3242, 3242, 3243, 3236, 3244, 3244, 3237, 3245, 3245, 3239,
     3249, 3241, 3246, 3246, 3247, 3247, 3248, 3248, 3244, 3250,
     3250, 3245, 3251, 3251, 3252, 3253, 3253, 3254, 3254, 3247,
     3255, 3255, 3256, 3256, 3250, 3257, 3257, 3258, 3258, 3259,
     3261, 3254, 3260, 3260, 3255, 3262, 3262, 3263, 3263, 3264,
     3264, 3265, 3267, 3267, 3268, 3268, 3269, 3269,  803, 3262,

     3270, 3270, 3271, 3271,  801,  800,  797,  796,  795, 3268,
      794, 3269, 3273, 3273, 3273, 3273, 3273, 3274, 3274, 3274,
     3274, 3274, 3275, 3275, 3275, 3275, 3275, 3276, 3276, 3276,
     3276, 3276, 3277, 3277, 3277, 3277, 3277, 3278, 3278, 3278,
     3278, 3278, 3279, 3279, 3279, 3279, 3279, 3280, 3280, 3280,
     3280, 3280, 3281, 3281, 3281, 3281, 3282,  792, 3282, 3282,
     3282, 3283, 3283,  791, 3283, 3283, 3284, 3284, 3284,  790,
     3284,  789,  788,  787,  783,  782,  781,  780,  777,  776,
      775,  774,  773,  772,  771,  769,  766,  765,  764,  762,
      760,  759,  755,  753,  752,  751,  749,  748,  747,  746,

      745,  742,  741,  740,  739,  738,  737,  735,  733,  732,
      730,  729,  728,  727,  726,  725,  723,  722,  721,  718,
      717,  716,  714,  713,  712,  711,  708,  707,  706,  705,
      702,  699,  698,  696,  695,  694,  691,  690,  689,  686,
      683,  682,  681,  679,  677,  676,  675,  674,  671,  668,
      666,  665,  664,  660,  659,  658,  657,  656,  655,  653,
      647,  646,  644,  643,  642,  641,  638,  637,  634,  633,
      632,  630,  629,  628,  627,  623,  622,  618,  617,  614,
      613,  612,  611,  610,  609,  608,  607,  602,  601,  600,
      599,  596,  594,  591,  590,  589,  588,  587,  584,  582,

      581,  580,  579,  578,  577,  576,  575,  573,  572,  571,
      570,  567,  566,  565,  564,  563,  560,  559,  557,  556,
      555,  553,  552,  551,  550,  547,  546,  545,  544,  543,
      541,  540,  539,  538,  535,  532,  530,  529,  528,  526,
      525,  524,  523,  522,  521,  519,  513,  512,  511,  510,
      509,  508,  505,  504,  503,  502,  501,  499,  498,  497,
      496,  492,  491,  490,  489,  488,  487,  486,  485,  483,
      482,  481,  479,  477,  476,  475,  473,  472,  471,  470,
      469,  468,  467,  466,  464,  460,  459,  456,  453,  452,
      450,  449,  448,  447,  446,  445,  444,  441,  440,  437,

      436,  433,  432,  431,  430,  427,  426,  424,  423,  422,
      421,  416,  415,  414,  412,  411,  409,  405,  404,  403,
      402,  401,  400,  399,  396,  395,  394,  393,  391,  388,
      386,  385,  384,  383,  382,  380,  379,  376,  375,  374,
      373,  372,  371,  370,  369,  367,  366,  365,  364,  363,
      361,  360,  359,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  346,  345,  342,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  327,  326,  323,  322,
      321,  320,  319,  318,  315,  314,  312,  311,  310,  309,
      306,  305,  304,  303,  302,  301,  299,  298,  296,  295,

      294,  293,  292,  291,  290,  288,  287,  286,  285,  284,
      283,  282,  280,  279,  278,  274,  273,  272,  269,  268,
      267,  266,  265,  260,  259,  257,  256,  251,  250,  249,
      248,  247,  246,  245,  244,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  226,  225,
      224,  223,  222,  220,  219,  218,  217,  213,  212,  211,
      210,  209,  208,  206,  205,  203,  202,  201,  200,  199,
      198,  197,  195,  194,  193,  192,  191,  190,  189,  187,
      186,  185,  181,  180,  179,  176,  175,  174,  173,  172,
      171,  167,  166,  164,  163,  161,  151,  149,  148,  145,

      142,  140,  137,  135,  133,  132,  130,  128,  127,  126,
      125,  124,  123,  122,  121,  119,  118,  117,  116,  115,
      114,  113,  111,  110,  109,  107,  102,  101,  100,   90,
       88,   87,   84,   81,   77,   70,   69,   65,   60,   59,
       57,   54,   53,   49,   44,   41,   32,   31,   27,   24,
       22,   19,   14,   13,    8,    7,    6,    5,    4,    3,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,

     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272,
     3272, 3272, 3272, 3272, 3272, 3272, 3272, 3272
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[431] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file OSparseosol.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosol.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosol.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSoLParserData.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2815 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"

 
#line 3070 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3273 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5161 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 567 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 572 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 573 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 574 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 576 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 577 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 578 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 387:
/* rule 387 can match eol */
YY_RULE_SETUP
#line 582 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 389:
/* rule 389 can match eol */
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 585 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXIDENTITYSTART);}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 586 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXIDENTITYEND);}
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 587 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 588 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 590 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 591 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 592 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 593 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 594 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 595 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 596 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 597 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 598 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 599 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 600 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 601 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 407:
/* rule 407 can match eol */
YY_RULE_SETUP
#line 602 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 603 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 604 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 605 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 606 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 611 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 612 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 613 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 416:
/* rule 416 can match eol */
YY_RULE_SETUP
#line 618 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 619 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 621 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 419:
#line 623 "../../../../OS/src/OSParsers/OSParseosol.l"
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 623 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 624 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 626 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 423:
#line 628 "../../../../OS/src/OSParsers/OSParseosol.l"
case 424:
/* rule 424 can match eol */
YY_RULE_SETUP
#line 628 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 629 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 426:
/* rule 426 can match eol */
YY_RULE_SETUP
#line 632 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 427:
/* rule 427 can match eol */
YY_RULE_SETUP
#line 633 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 428:
/* rule 428 can match eol */
YY_RULE_SETUP
#line 634 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 638 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 650 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 5771 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3273 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3273 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3272);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 650 "../../../../OS/src/OSParsers/OSParseosol.l"





