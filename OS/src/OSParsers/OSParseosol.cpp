#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 304
#define YY_END_OF_BUFFER 305
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2326] =
    {   0,
        1,    1,  302,  302,  300,  300,  301,  301,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  305,  303,
        1,    2,  290,    2,  290,    6,  290,    5,  303,    4,
      290,  290,    2,  302,  304,  300,  301,  291,  293,  294,
      293,  297,  298,  297,    1,  290,  290,    6,  290,    5,
        0,    4,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
        3,    6,    6,  290,    7,    5,    0,    0,  296,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,  290,

      290,  302,  300,  301,  291,    0,  299,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  168,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  295,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  292,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  248,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,
        0,    0,    0,  240,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  232,    0,    0,    0,    0,    0,

        0,  234,  290,  290,  290,  290,  290,  290,  290,  290,
       29,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  112,  113,  290,  290,
      290,  290,  290,  290,  290,  290,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  180,    0,    0,    0,    0,
        0,    0,    0,    0,  170,    0,    0,    0,  290,  290,
      290,  290,  290,  290,  290,  290,  290,   29,  290,  116,
      290,  290,  290,  290,  290,  117,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,    0,    0,    0,    0,    0,
        0,    0,  249,    0,    0,    0,    0,    0,  169,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  241,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  233,    0,    0,    0,    0,    0,    0,    0,
        0,  235,    0,    0,    0,    0,    0,    0,  214,  264,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  267,  142,    0,    0,
        0,    0,    0,    0,    0,    0,  271,    0,    0,    0,
      120,  119,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  290,  290,
      290,  290,  290,  290,  290,  110,  111,  290,  116,  290,
      290,  290,  290,  117,  290,   70,   71,  290,  290,  290,

      290,  290,  290,  290,  290,  290,   86,   87,  290,  290,
      290,   96,   97,  290,  290,  290,  290,    0,    0,    0,
        0,    0,    0,    0,  249,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      268,  131,    0,    0,    0,    0,    0,    0,    0,    0,
      272,  241,    0,    0,    0,    0,  121,    0,    0,    0,
        0,  181,    0,    0,    0,    0,    0,    0,  233,    0,
        0,    0,    0,    0,  171,    0,    0,  235,    0,    0,
        0,    0,    0,    0,  262,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  222,

      269,  267,    0,    0,    0,  258,    0,    0,    0,    0,
      273,  271,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  126,    0,
        0,    0,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,   68,   69,  290,  290,  290,  290,  118,
      290,  290,  290,   30,  290,  290,   80,   81,  290,  290,
       94,   95,  290,  100,  101,  290,  290,  290,    0,    0,
        0,    0,    0,    0,  215,    0,  265,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  268,    0,  143,    0,    0,    0,    0,

        0,    0,    0,  272,    0,    0,    0,  121,    0,  157,
        0,    0,    0,  181,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  171,    0,    0,    0,    0,  216,
      218,    0,    0,    0,  152,    0,    0,    0,    0,    0,
        0,  124,    0,    0,    0,    0,    0,  269,    0,    0,
      146,  172,    0,    0,    0,    0,  273,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  204,    0,    0,  128,
        0,    0,    0,    0,    0,  275,    0,  226,    0,    0,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  118,  290,   78,

       79,   30,  290,  290,  290,  290,  290,   98,   99,  290,
      290,  290,  108,  109,    0,    0,    0,    0,    0,  215,
      265,    0,  263,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  223,  143,
        0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
        0,    0,  157,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  276,    0,    0,  127,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  287,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  150,  192,
        0,    0,    0,    0,    0,    0,    0,    0,  277,  275,
        0,    0,  148,    0,  290,  290,  290,  290,  290,   52,
       53,  290,  290,  290,  290,  290,  290,   64,   65,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,   74,   75,  290,   76,   77,  290,  290,  290,  290,
       92,   93,  290,  104,  105,  106,  107,    0,    0,  217,
        0,  219,    0,    0,  263,    0,    0,  153,    0,    0,
        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  223,    0,  288,    0,

      147,  259,    0,  173,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  205,    0,    0,
        0,    0,  129,    0,    0,    0,    0,    0,  276,    0,
      127,    0,  227,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  289,  287,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      277,    0,    0,  206,  290,  290,  290,   48,   49,   50,
       51,  290,  290,   60,   61,  290,  290,   62,   63,  290,

      290,  114,  115,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,   72,   73,  290,  290,  290,
      290,   90,   91,  102,  103,    0,  217,  219,    0,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,  125,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      288,  147,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,    0,  193,  205,    0,    0,
        0,    0,  129,    0,    0,    0,    0,    0,    0,  227,
        0,  149,    0,  220,    0,  260,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  289,    0,    0,    0,    0,
        0,    0,  236,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,    0,    0,    0,    0,  224,  290,
      290,  290,  290,   46,   47,  290,   58,   59,  290,  290,
      290,  290,  290,   10,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
      193,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  149,    0,  207,    0,  244,    0,    0,    0,  256,
        0,    0,  186,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  136,
        0,    0,    0,    0,  290,  290,  290,  290,  290,  290,
      290,   31,  290,   32,  290,  290,   25,  290,   10,  290,
      290,  290,  290,   23,  290,  290,  290,  290,  290,   21,
      290,  290,   20,  290,  290,  290,  290,  290,   33,    0,
      221,    0,    0,  261,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  237,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
        0,    0,    0,    0,  225,  207,    0,  176,    0,    0,
      279,    0,    0,    0,  283,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  138,    0,    0,  266,    0,  164,
      158,    0,    0,  270,  132,  122,  154,    0,    0,    0,
        0,    0,    0,  254,    0,    0,    0,  290,  290,  290,
      290,  290,   56,   57,   31,   32,  290,  290,   25,  290,
      290,  290,  290,   23,  290,  290,  290,  290,  290,   21,
      290,   20,  290,  290,  290,  290,   33,  221,    0,  261,

        0,  245,    0,    0,  280,    0,    0,  257,    0,  284,
        0,    0,  187,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  163,    0,    0,  237,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
      135,    0,    0,    0,  225,    0,  281,  279,    0,    0,
      285,  283,    0,  200,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  266,    0,  160,  270,    0,    0,    0,
        0,    0,  182,  252,    0,    0,    0,  290,  290,  290,
       34,  290,  290,  290,   54,   55,  290,   67,   66,  290,
      290,  290,   13,  290,  290,  290,  290,  290,  290,  290,

       12,  290,  290,  290,  290,  290,  290,  290,    0,  245,
        0,  177,  280,    0,  257,  284,    0,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,    0,    0,
      165,  163,    0,  159,    0,    0,  133,    0,  123,    0,
      155,    0,    0,    0,    0,    0,    0,  137,    0,  255,
        0,    0,    0,    0,  281,    0,    0,    0,  285,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  144,    0,    0,  290,  290,
       34,  290,  290,   44,   45,  290,  290,   13,  290,    9,
      290,  290,  290,  290,  290,  290,   12,  290,  290,  290,

      290,  290,  290,   89,   88,    0,  177,    0,    0,    0,
      201,    0,    0,    0,    0,    0,    0,    0,    0,  139,
        0,  165,  159,    0,  161,  133,  123,  155,    0,    0,
        0,    0,    0,    0,  183,  255,    0,  253,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  202,    0,    0,
        0,    0,  290,  290,  290,  290,   42,   43,  290,  290,
        9,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,    0,    0,    0,  201,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  161,    0,    0,    0,    0,

        0,  183,  253,    0,  145,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  190,  140,    0,
        0,    0,    0,    0,    0,    0,    0,  274,  290,   40,
      290,   39,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,   41,  290,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  203,    0,    0,  145,    0,    0,    0,
      184,    0,    0,    0,  250,    0,    0,    0,    0,    0,
        0,    0,  196,    0,    0,    0,  274,   40,   39,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,   14,

      290,   15,  290,  290,   16,   41,  290,  290,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      191,    0,  141,    0,    0,    0,  203,    0,    0,    0,
        0,    0,    0,  212,    0,    0,    0,    0,    0,    0,
        0,  286,    0,  174,    0,    0,  290,   38,  290,   37,
      290,  290,  290,   17,  290,  290,  290,  290,   14,   15,
      290,   16,  290,  290,  167,    0,    0,  185,    0,    0,
        0,  251,    0,    0,    0,    0,  191,  141,    0,    0,
        0,  197,    0,    0,    0,    0,  198,    0,    0,    0,
        0,    0,    0,    0,  286,    0,  178,    0,   38,   37,

      290,   18,  290,   17,  290,  290,  290,  290,  290,  290,
      290,    0,  185,    0,  213,    0,  251,    0,    0,    0,
        0,    0,    0,  197,    0,  175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,  290,
       11,  290,  290,  290,    8,  290,  290,  290,   36,  290,
       35,    0,  199,  213,    0,    0,    0,    0,    0,    0,
        0,  175,    0,  179,    0,    0,    0,    0,    0,    0,
      208,    0,    0,    0,    0,   11,  290,  290,    8,  290,
      290,   26,   36,   35,  199,    0,    0,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,  242,  238,    0,

      188,    0,    0,    0,  290,  290,  290,   26,    0,    0,
        0,    0,  209,    0,    0,    0,    0,    0,    0,    0,
      246,    0,    0,  194,    0,  290,  290,  290,    0,    0,
      243,    0,  239,  209,    0,    0,  189,    0,    0,    0,
        0,    0,    0,    0,    0,  290,  290,  290,    0,  247,
      243,  239,    0,  189,    0,    0,  195,    0,    0,    0,
        0,    0,    0,  290,  290,  290,  247,    0,    0,  195,
        0,    0,  278,    0,  282,    0,    0,    0,  290,  290,
      290,    0,    0,    0,  278,  282,  210,    0,  230,  290,
      290,  290,    0,    0,    0,    0,  290,  290,  290,   19,

        0,  211,    0,    0,  231,    0,  290,  290,   22,   19,
      211,    0,  231,    0,  290,   24,   22,    0,  228,   24,
        0,    0,  229,  229,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2338] =
    {   0,
        0,   65, 3601, 3600, 3611, 3610, 3607, 3606,    0,    0,
        0,    0, 3597, 3596,   13,   17,    3,    5, 3610, 3619,
      129, 3604,  192, 3601,   19,   38, 3590,   84,  250,   25,
     3576, 3566, 3619,    0, 3619,    0,    0,    0, 3619, 3619,
     3595, 3619, 3619, 3586,    0,    0,   24,   90, 3585,  216,
       35,   40, 3571, 3561, 3560,    6, 3555, 3545, 3540, 3539,
        4,    8,   25,   32, 3554,   58,   61,   33, 3554, 3549,
     3619,   52,  244,  107, 3619,   55, 3582,  272, 3619, 3532,
       68, 3536,   66,   58, 3541, 3544,   71, 3533, 3538,   87,
     3545,  156,  160, 3540,  168, 3519,  168, 3542,   60, 3557,

     3549,    0,    0,    0,    0, 3561, 3619, 3520, 3518, 3523,
     3517, 3514, 3519, 3518, 3508, 3528,  187, 3527, 3518, 3516,
     3514, 3513, 3515, 3523, 3497,  191, 3504,  260, 3520, 3504,
      234, 3510,  214, 3509,  260,  331, 3546, 3496,   86, 3500,
      222,  148, 3505, 3508,  223, 3497, 3502,  238, 3509,  281,
      184, 3504,  293, 3483,  226, 3506,  260, 3487, 3490, 3490,
      293, 3485, 3619, 3481, 3489, 3486,  301, 3514, 3493, 3495,
     3493,  279, 3481, 3481, 3483, 3472, 3476, 3482, 3469,   31,
     3473, 3470, 3468,  292, 3469, 3465, 3467, 3471, 3476, 3462,
      351, 3619, 3474, 3473, 3480, 3473, 3462, 3461, 3452,  358,

     3454, 3450, 3469, 3468, 3463, 3447, 3461, 3463, 3467, 3451,
     3457, 3439, 3473, 3452,  360,  362, 3444, 3452, 3435, 3454,
     3434, 3432, 3455, 3444, 3619,  344, 3431, 3434, 3434,  314,
     3429,  375, 3425, 3433, 3430,  328, 3458, 3437, 3439, 3437,
      321, 3425, 3425, 3427, 3416, 3420, 3426, 3413,  330, 3417,
     3414, 3412,  334, 3413, 3409, 3411, 3415, 3420, 3406, 3406,
     3407, 3405,  347, 3417,  338, 3414, 3415, 3412, 3403, 3410,
     3409, 3393, 3391, 3391, 3405, 3391, 3395, 3420, 3401, 3387,
     3407,  377, 3398, 3397, 3392, 3388, 3394, 3382, 3378, 3388,
     3392, 3373, 3371, 3370, 3392, 3372, 3384, 3368, 3382, 3372,

     3367, 3375,  270, 3376, 3357, 3363, 3383,  397, 3363,  399,
      401,  405, 3377, 3365, 3356, 3393,  407,  409, 3369, 3348,
     3371, 3378, 3365, 3365, 3363,  415, 3619, 3619, 3348,  424,
     3365, 3353,  426, 3359, 3338, 3354, 3344, 3345, 3343,  387,
     3355,  429, 3352, 3353, 3350,  433,  435, 3341, 3348, 3347,
     3331, 3329, 3329, 3343, 3329, 3333,  441, 3340, 3326, 3346,
      427, 3337,  450, 3332, 3328, 3334, 3322, 3318, 3328, 3332,
     3313, 3311, 3310,  452, 3313, 3325, 3309, 3323, 3313, 3308,
      457, 3304, 3301, 3307,  183, 3319, 3310, 3300, 3318, 3304,
     3299, 3313, 3310,  394, 3296, 3304, 3292, 3310, 3303, 3304,

      459, 3325, 3293, 3297, 3296, 3310, 3294, 3297,  461, 3298,
      233,  477, 3282, 3278, 3275, 3303, 3291,  398, 3286, 3289,
     3292, 3289, 3273, 3285, 3619, 3274, 3296, 3286, 3285, 3267,
     3269, 3267, 3273, 3256,  479,  494, 3280,  481,  489,  500,
     3267, 3257, 3268, 3261,  504,  506,  508,  510, 3257, 3258,
     3255, 3266, 3253, 3246, 3249, 3252,  516,  520, 3255, 3245,
      526,  528,  534, 3249, 3244, 3242, 3239, 3245,  410, 3257,
     3248,  536,  538, 3238, 3256, 3242, 3237, 3251,  541, 3248,
      457, 3234, 3242, 3230, 3248, 3241, 3242,  543,  545,  549,
     3263, 3231, 3235, 3234, 3248, 3232, 3235,  552,  554,  556,

     3236,  420,  561, 3220, 3216, 3213,  563, 3230,  525, 3225,
     3228,  571,  573, 3231, 3228, 3212, 3224,  579, 3213, 3235,
      581,  583, 3225, 3224, 3219, 3218, 3247, 3220, 3619, 3201,
     3201, 3215, 3213, 3207, 3195, 3196, 3195, 3215, 3210, 3209,
      467, 3195, 3203, 3202,  588, 3227,  591, 3619,  316, 3181,
     3191, 3205, 3183, 3188,  598, 3221,  601, 3179, 3189, 3183,
      605, 3619, 3203, 3175, 3179, 3192, 3173, 3172, 3172, 3186,
     3170, 3169, 3181, 3183, 3171, 3160, 3181, 3179, 3160, 3178,
     3160, 3172, 3160, 3159,  616, 3619, 3619, 3169,  608, 3174,
     3167, 3156, 3154,  610,  622, 3202, 3199, 3174, 3161, 3174,

      628,  630,  632, 3173, 3148,  634, 3195, 3192, 3161, 3154,
      640, 3191, 3188,  647,  649, 3151,  655, 3154, 3149, 3148,
     3177, 3150,  657,  659,  662, 3132, 3146, 3144, 3138, 3126,
     3127, 3126, 3146, 3141, 3140,  477, 3126, 3134, 3133,  664,
      666,  670,  675,  348, 3113, 3123, 3137, 3115, 3120,  677,
      680,  682, 3112, 3122, 3116,  684,  686,  688, 3109, 3113,
      693,  695, 3126, 3107, 3106, 3106, 3120, 3104,  697, 3103,
     3115, 3117, 3105,  700,  704, 3094, 3115,  706, 3113, 3102,
     3095, 3094, 3130, 3090, 3619, 3108, 3088, 3102, 3090, 3090,
     3103, 3098, 3087, 3089, 3088, 3090, 3089, 3094, 3078, 3619,

      709,  711, 3122, 3089, 3088, 3619, 3087,  688, 3079, 3069,
      718,  721, 3105, 3022, 3003, 3042, 3011,  556, 3008, 3016,
     3005,   43,   79,  104,  694,  213,  728,  228, 3619,  227,
      267,  277,  314,  329,  353,  725,  361,  390,  402,  418,
      730,  413,  405, 3619, 3619,  431,  732,  426,  735,  740,
      747,  750,  756,  758,  477,  465, 3619, 3619,  487,  762,
     3619, 3619,  764,  529,  542,  771,  773,  777,  511,  511,
      514,  568,  531,  783,  788,  790,  792,  794,  553,  539,
      559,  560,  564,  581,  583,  575,  588,  590,  606,  608,
      629,  619,  796,  799,  801,  803,  650,  661,  806,  672,

      710,  698,  701,  812,  709,  698,  744,  814,  817,  819,
      716,  760,  721,  822,  741,  753,  754,  783,  784,  797,
      782,  828,  794,  833,  835,  787,  789,  791,  795, 3619,
     3619,  796,  788,  799, 3619,  795,  790,  793,  793,  813,
      832, 3619,  835,  801,  808,  816,  823,  860,  817,  865,
     3619, 3619,  806,  815,  836,  815,  871,  823,  817,  839,
      836,  822,  834,  836,  842,  829,  843,  844,  846,  859,
      836,  838,  853,  891,  879,  895,  842, 3619,  857,  858,
      856,  847,  903,  909,  911,  860,  918,  864,  865,  920,
      924,  882,  930,  917,  942,  950,  874,  938,  957,  923,

      923,  963,  877,  880,  897,  965,  967, 3619, 3619,  973,
      975,  981,  945,  949,  914,  988,  990,  916,  915,  992,
      994,  996,  998,  926, 1000,  927,  927,  931,  946,  967,
      987, 1007,  999,  955,  962,  971,  978, 1020, 1023, 1025,
     1029, 1031, 1036, 1038, 1040,  962,  975, 1001,  988,  985,
     1008, 1006, 1048,  994, 1007, 1008, 1014, 1002, 1057, 1018,
     1020, 1061, 1011, 1013, 1028, 1066, 1068, 1015, 1073, 1077,
     1079, 1030, 1034, 1026, 1033, 1039, 1035, 1047, 1042, 1045,
     1046, 1036, 1052, 1059, 1060, 1048, 1043, 1063, 1065, 1062,
     1063, 1079, 1069, 1052, 1109, 1096, 1112, 1065, 1074, 1064,

     1056, 1082, 1079, 1065, 1085, 1078, 1072, 1079, 3619, 3619,
     1073, 1089, 1111, 1094, 1102, 1078, 1112, 1098, 1137, 1139,
     1132, 1097, 3619, 1088, 1084, 1093, 1146, 1148, 1154, 1147,
     1151, 1107, 1161, 1163, 1121, 1110, 1169, 1168, 1168, 1115,
     1177, 1179, 1130, 1135, 1130, 1136, 1150, 1153, 1160, 1155,
     1193, 1192, 1192, 1143, 3619, 3619, 1146, 1168, 1145, 1209,
     1200, 1199, 1215, 1202, 1203, 3619, 3619, 1157, 1221, 1223,
     1225, 1227, 1167, 1174, 1229, 1181, 1232, 1234, 1198, 1193,
     1194, 1196, 1186, 1202, 1207, 1245, 1248, 1213, 1200, 1195,
     1215, 1217, 1214, 1215, 1231, 1221, 1261, 1263, 1265, 1267,

     1269, 1271, 1273, 1275, 1228, 1238, 1228, 1220, 1242, 1228,
     1248, 1241, 1233, 1241, 1290, 1292, 1294, 1296, 1243, 1259,
     1281, 1303, 1310, 1264, 1275, 1252, 1289, 1275, 1314, 1271,
     1319, 1321, 1323, 1325, 1262, 1266, 1291, 1269, 1274, 1286,
     1281, 1292, 1283, 1284, 1289, 1291, 1284, 1291, 1305, 1297,
     1290, 1306, 1291, 1296, 1311, 1295, 1309, 1351, 1353, 1346,
     1318, 1316, 1321, 1327, 1311, 1306, 1317, 1323, 1313, 1324,
     1326, 1335, 1337, 1325, 1326, 1323, 1350, 1329, 1325, 1328,
     1377, 1324, 1341, 3619, 1361, 1331, 1385, 1380, 1382, 3619,
     3619, 1339, 1391, 1392, 1392, 1342, 1358, 3619, 3619, 1348,

     1401, 3619, 3619, 1353, 1407, 1348, 1368, 1372, 1365, 1368,
     1357, 1363, 1383, 1368, 1363, 3619, 3619, 1373, 1374, 1359,
     1381, 3619, 3619, 3619, 3619, 1362, 1424, 1426, 1391, 1369,
     1374, 1431, 1388, 1383, 1394, 1385, 1386, 1390, 1392, 1440,
     1387, 1393, 1407, 1399, 1392, 1408, 1393, 1398, 1413, 1397,
     1452, 1454, 1456, 1420, 1418, 1423, 1429, 1407, 1418, 1424,
     1414, 1425, 1426, 1468, 1470, 1472, 1474, 1476, 1445, 1447,
     1435, 1436, 1484, 1433, 1463, 1443, 1439, 1442, 1452, 1492,
     1494, 1496, 1498, 3619, 1446, 3619, 1446, 1461, 1453, 1449,
     1455, 1452, 1466, 1467, 1465, 1456, 1464, 1473, 1470, 1460,

     1484, 1479, 1470, 1475, 1472, 1522, 1476, 1484, 1486, 1488,
     1483, 1488, 3619, 1479, 1490, 1482, 1494, 1479, 1484, 1480,
     1483, 1490, 1498, 3619, 1489, 1483, 1501, 1492, 3619, 1494,
     1505, 1490, 1492, 3619, 3619, 1548, 3619, 3619, 1550, 1552,
     1513, 1555, 1557, 1559, 1512, 1514, 1542, 1567, 1529, 1528,
     1534, 1574, 1518, 1577, 1527, 1520, 1530, 1583, 1585, 1533,
     1589, 1537, 1552, 1544, 1540, 1546, 1544, 1558, 1560, 1557,
     1548, 1557, 1565, 1562, 1553, 1578, 1573, 1564, 1569, 1574,
     1576, 1578, 1573, 1619, 1570, 1582, 1574, 1586, 1571, 1627,
     1629, 1580, 1576, 1579, 1587, 1595, 1637, 1588, 1582, 1600,

     1642, 1644, 1646, 1648, 1589, 3619, 1596, 1653, 1622, 3619,
     1658, 1600, 3619, 1605, 1607, 1629, 1626, 1629, 1618, 1619,
     1634, 1631, 1637, 1675, 1632, 1624, 3619, 1638, 1618, 1681,
     1633, 1630, 1630, 1630, 1654, 1663, 1652, 1650, 1651, 3619,
     1643, 1643, 1678, 1640, 1658, 1639, 1663, 1660, 1702, 1704,
     1710, 1712, 1714, 1717, 1719, 1721, 1725, 1650, 1729, 1667,
     1668, 1708, 1731, 1736, 1695, 1684, 1709, 1699, 1741, 1743,
     1705, 1747, 1749, 1714, 1704, 1732, 1713, 1756, 1758, 1762,
     1765, 1699, 1767, 1771, 1773, 1714, 1775, 1745, 1779, 1783,
     1725, 1785, 1732, 1733, 1756, 1753, 1756, 1744, 1745, 1760,

     1758, 1764, 1748, 1803, 1764, 1744, 1807, 1809, 1761, 1758,
     1758, 1758, 1782, 1791, 1780, 1778, 1779, 1823, 1825, 1827,
     1771, 1778, 1813, 1831, 1833, 1835, 1818, 3619, 1841, 1824,
     1844, 1792, 1851, 1832, 1848, 1812, 1822, 1801, 1821, 1803,
     1824, 1809, 1837, 1809, 3619, 1829, 1868, 1870, 1833, 3619,
     3619, 1832, 1874, 1876, 3619, 3619, 3619, 1827, 1828, 1835,
     1827, 1843, 1829, 1830, 1839, 1833, 1834, 1872, 1891, 1839,
     1894, 1896, 1895, 1895, 1906, 1909, 1911, 1913, 1919, 1848,
     1850, 1921, 1860, 1923, 1861, 1908, 1890, 1928, 1875, 1931,
     1879, 1938, 1896, 1891, 1895, 1944, 1946, 1948, 1922, 1950,

     1952, 1954, 1956, 1959, 1961, 1912, 1964, 1968, 1972, 1975,
     1925, 1977, 1980, 1938, 1928, 1946, 1928, 1947, 1932, 1961,
     1933, 1990, 1955, 1994, 1996, 1998, 2000, 1961, 2003, 2006,
     2012, 2016, 1957, 1959, 1969, 1964, 1980, 1965, 2022, 2024,
     2028, 2032, 1979, 1976, 2034, 1999, 2038, 2040, 2033, 2024,
     2044, 2048, 2037, 3619, 1994, 2015, 2006, 2010, 2008, 2012,
     2007, 2014, 2012, 2062, 2023, 3619, 2065, 2013, 2041, 2021,
     2014, 2015, 3619, 3619, 2031, 2036, 2035, 2024, 2025, 2077,
     2079, 2025, 2082, 2085, 3619, 3619, 2092, 3619, 3619, 2047,
     2052, 2098, 2100, 2102, 2049, 2053, 2067, 2069, 2062, 2108,

     2110, 2058, 2085, 2067, 2076, 2064, 2120, 2123, 2088, 2129,
     2131, 2135, 2137, 2114, 2139, 2142, 2144, 2147, 2071, 2112,
     2102, 2106, 2104, 2108, 2103, 2110, 2156, 2160, 2110, 2162,
     2164, 2166, 2168, 2172, 2174, 2178, 2180, 2184, 2186, 2190,
     2194, 2116, 2149, 2134, 2132, 2136, 2196, 2200, 2202, 2206,
     2208, 2157, 2167, 2154, 2212, 2174, 2174, 2179, 2218, 2178,
     2184, 2177, 2167, 2167, 2185, 2186, 2170, 2178, 2189, 2181,
     2187, 2182, 2186, 2202, 2185, 3619, 2187, 2197, 2191, 2181,
     2241, 2225, 2244, 2243, 2243, 2205, 2195, 2252, 2254, 2257,
     2201, 2210, 2215, 2206, 2209, 2210, 2265, 2226, 2217, 2229,

     2217, 2217, 2273, 3619, 3619, 2219, 2279, 2236, 2244, 2282,
     2284, 2249, 2242, 2231, 2231, 2249, 2250, 2234, 2242, 2294,
     2255, 2298, 2300, 2302, 2304, 2306, 2308, 2310, 2267, 2262,
     2266, 2282, 2265, 2318, 2320, 2322, 2324, 2326, 2328, 2280,
     2294, 2291, 2286, 2288, 2291, 2281, 2288, 2299, 2300, 2307,
     2289, 2304, 2296, 2330, 2309, 2308, 2292, 3619, 2306, 2298,
     2314, 2354, 2356, 2358, 2309, 2310, 3619, 3619, 2312, 2318,
     2364, 2325, 2312, 2327, 2326, 2328, 2319, 2320, 2320, 2322,
     2378, 2324, 2344, 2334, 2336, 2384, 2330, 2337, 2347, 2348,
     2355, 2336, 2352, 2344, 2378, 2396, 2357, 2341, 2400, 2357,

     2349, 2404, 2406, 2408, 2410, 2373, 3619, 2358, 2373, 2375,
     2369, 2361, 2363, 2365, 2404, 2385, 2391, 3619, 3619, 2371,
     2385, 2372, 2387, 2380, 2385, 2387, 2432, 2434, 2436, 2440,
     2442, 2444, 2390, 2387, 2392, 2398, 2396, 2396, 2414, 2403,
     2418, 2457, 2459, 2416, 2462, 2464, 2466, 2450, 2469, 2431,
     2433, 2418, 2421, 2424, 2463, 2445, 2450, 2485, 2487, 2435,
     2435, 2450, 2492, 2494, 2447, 2452, 2503, 2455, 2462, 2449,
     3619, 2465, 2453, 2474, 3619, 2459, 2474, 2464, 2462, 2477,
     2515, 2484, 3619, 2477, 2478, 2475, 2521, 2523, 2525, 2527,
     2531, 2474, 2483, 2534, 2482, 2481, 2488, 2501, 2542, 2546,

     2549, 2551, 2489, 2553, 2557, 2559, 2493, 2504, 2561, 2564,
     2510, 2568, 2515, 2536, 2572, 2523, 2538, 2529, 2527, 2579,
     2581, 2584, 2588, 2549, 2557, 2591, 2595, 2552, 2556, 2553,
     2546, 2560, 2584, 3619, 2566, 2547, 2557, 2550, 2581, 2559,
     2610, 2612, 2563, 3619, 2560, 2566, 2617, 2619, 2621, 2623,
     2626, 2573, 2629, 2632, 2597, 2591, 2582, 2590, 2641, 2644,
     2589, 2646, 2600, 2590, 2650, 2611, 2653, 2655, 2657, 2622,
     2660, 2662, 2607, 2617, 2609, 2640, 2669, 2673, 2621, 2625,
     2677, 2679, 2681, 2628, 2634, 2640, 3619, 2632, 2639, 2638,
     2632, 2649, 2640, 2654, 2694, 2670, 3619, 2655, 2699, 2701,

     2703, 2705, 2707, 2709, 2666, 2654, 2713, 2674, 2661, 2718,
     2722, 2724, 2728, 2730, 2733, 2672, 2737, 2676, 2678, 2699,
     2690, 2703, 2716, 2746, 2748, 2750, 2752, 2701, 2702, 2714,
     2699, 2717, 2717, 2704, 2702, 2717, 2711, 2728, 2765, 2768,
     2770, 2722, 2732, 2774, 2776, 2749, 2779, 2783, 2785, 2789,
     2791, 2794, 2798, 2800, 2724, 2747, 2755, 2747, 2746, 2761,
     2755, 2807, 2810, 2812, 2778, 2759, 2779, 2776, 2763, 2764,
     2788, 2780, 2777, 2765, 2783, 2826, 2772, 2800, 2830, 2780,
     2833, 2835, 2837, 2839, 2841, 2802, 2789, 2790, 2848, 2805,
     2805, 2793, 2852, 2813, 2810, 2800, 2802, 3619, 3619, 2802,

     3619, 2809, 2819, 2816, 2833, 2812, 2809, 2866, 2813, 2869,
     2871, 2873, 2875, 2821, 2878, 2831, 2841, 2838, 2834, 2836,
     3619, 2835, 2847, 3619, 2848, 2840, 2838, 2850, 2896, 2898,
     2900, 2902, 2904, 2906, 2854, 2909, 2914, 2869, 2918, 2873,
     2870, 2867, 2877, 2887, 2881, 2870, 2882, 2877, 2929, 2931,
     2934, 2936, 2893, 2939, 2905, 2942, 2945, 2903, 2948, 2950,
     2902, 2912, 2898, 2910, 2905, 2908, 2959, 2911, 2921, 2966,
     2908, 2968, 2970, 2972, 2974, 2933, 2932, 2923, 2928, 2930,
     2926, 2939, 2939, 2930, 2988, 2990, 3619, 2943, 3619, 2942,
     2938, 2994, 2996, 2955, 2999, 2957, 2947, 3003, 3005, 3009,

     3012, 3015, 2963, 3020, 3022, 2962, 3024, 3028, 3030, 3032,
     3036, 2970, 3039, 2979, 3043, 3045, 3047, 2986, 3619, 3049,
     3051, 3053, 3055, 3058, 3619, 3070, 3075, 3080, 3085, 3090,
     3095, 3100, 3105, 3110, 3114, 3119, 3124
    } ;

static yyconst flex_int16_t yy_def[2338] =
    {   0,
     2326, 2326, 2327, 2327, 2328, 2328, 2329, 2329, 2330, 2330,
     2330, 2330, 2331, 2331, 2332, 2332, 2333, 2333, 2325, 2325,
     2325, 2325,   21, 2325,   23,   23,   23,   23, 2325, 2325,
       23,   23, 2325, 2334, 2325, 2335, 2336, 2337, 2325, 2325,
     2325, 2325, 2325, 2325,   21,   23,   23,   23,   23,   23,
       29, 2325,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2325,   23,   23,   23, 2325,   23, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,

       23, 2334, 2335, 2336, 2337, 2325, 2325,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
       23, 2325,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23, 2325, 2325,   23,   23,   23,
       23,   23,   23,   23,   23, 2325, 2325,   23,   23,   23,

       23,   23,   23,   23,   23,   23, 2325, 2325,   23,   23,
       23, 2325, 2325,   23,   23,   23,   23, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2325, 2325,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2325, 2325,   23,   23,
     2325, 2325,   23, 2325, 2325,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2325,

     2325,   23,   23,   23,   23,   23,   23, 2325, 2325,   23,
       23,   23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325,   23,   23,   23,   23,   23, 2325,
     2325,   23,   23,   23,   23,   23,   23, 2325, 2325,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2325, 2325,   23, 2325, 2325,   23,   23,   23,   23,
     2325, 2325,   23, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325,   23,   23,   23, 2325, 2325, 2325,
     2325,   23,   23, 2325, 2325,   23,   23, 2325, 2325,   23,

       23, 2325, 2325,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2325, 2325,   23,   23,   23,
       23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,
       23,   23,   23, 2325, 2325,   23, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,   23,
       23,   23, 2325, 2325,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,   23,
       23,   23,   23,   23, 2325, 2325,   23, 2325, 2325,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23,   23,   23, 2325, 2325,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325,   23,   23,   23,   23, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325,   23,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325,   23,   23,   23, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325,   23,   23,   23, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,   23,
       23, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,   23,
       23,   23, 2325, 2325, 2325, 2325,   23,   23,   23,   23,

     2325, 2325, 2325, 2325, 2325, 2325,   23,   23,   23,   23,
     2325, 2325, 2325, 2325,   23,   23,   23, 2325, 2325,   23,
     2325, 2325, 2325, 2325,    0, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325
    } ;

static yyconst flex_int16_t yy_nxt[3685] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2325,   40,
       44,   41,   44, 2325,   31,   41,   99,   99,   48,   32,
       50,   50,   50,   48, 2325,   50,   50,   50, 2325,   72,
       72,   99,   99,   53,  109,  115, 2325,  117,   53,   73,
       73,   73, 2325,   72,   72,  116,   76,   76,  110,   74,
      118,   99,   99,  119,   33,   20,   21,   21,   20,   22,
      121,   24,  131,   25,   26,   27,   28,   28,   28,   29,
       74,   30,   20,  120,  132,   76,   76,  289,  290,   31,
      122,   72,   72,   48,   32,   50,   50,   50,  124,  127,

      868,   73,   73,   73,  125,   74,  158,  163,  161,  164,
      126,   74,  162,  128,  135,  135,  129,  159,  136,  136,
      136,  869,  167,  130,  227,  172,   74,  168,  169,   33,
       45,   45,   74,  173,   46,  228,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  870,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   55,   56,
       57,   58,   59,   60,   46,   61,   46,   46,   62,   63,
       64,   65,   46,   46,   46,   66,   67,   68,   69,   70,
       46,   46,   46,   46,   46,  175,  527,  232,  180,  233,

       46,   46,   46,   46,   46,   46, 2325,  202, 2325,  176,
      183,  528,  177,  178,  179,  181,   46,   76,   76,  188,
      184,   46,  249,  203,  189,   48,  185,   50,   50,   50,
      186,   46,   46,   46,   46,   46,   46,   74,   46,  250,
      212,   46,   46,   46,   46,   72,   72,  213,   46,   46,
       46,   46,   46,   77,  219,   73,   73,   73,   74,  873,
       78,  215,  215,  222,  230,   74,  877,   79,  231,  223,
      220,  136,  136,  136,  236,  216,  241,  257,  878,  237,
      238,  260,  258,  559,  242,  560,   74,  261,   80,   81,
       82,   83,   84,   85,   86,  262,   87,   88,  429,   89,

       90,   91,   92,   93,  430,   94,   95,   96,   97,   98,
      138,  139,  140,  141,  142,  143,  144,  879,  145,  146,
      244,  147,  148,  149,  150,  151,  880,  152,  153,  154,
      155,  156,   72,   72,  245,  252,  280,  246,  247,  248,
      281,  294,  136,  136,  136,  253,  266,  272,  295,  267,
      296,  254,   72,   72,  273,  255,  704,  274,  275,  310,
      310,  215,  215,  326,  326,  337,  327,  343,  328,  881,
      344,  338,  705,  311,  351,  216,  346,  346,  359,  339,
      882,  352,  360,  373,  353,  354,  368,  369,  797,  385,
      374,  347,  375,  386,  388,  389,  406,  407,  435,  435,

      310,  310,  438,  438,  798,  408,  439,  439,  445,  445,
      447,  447,  436,  537,  311,  883,  326,  326,  886,  327,
      440,  328,  446,  621,  448,  457,  457,  461,  461,  469,
      472,  472,  887,  470,  346,  346,  479,  479,  622,  458,
      568,  462,  489,  489,  569,  473,  495,  496,  888,  347,
      538,  499,  499,  512,  512,  497,  889,  490,  521,  521,
      545,  545,  555,  555,  892,  491,  500,  893,  513,  546,
      654,  556,  655,  522,  894,  547,  632,  557,  561,  561,
      435,  435,  438,  438,  897,  474,  475,  696,  514,  697,
      439,  439,  501,  562,  436,  585,  585,  789,  586,  790,

      587,  589,  589,  523,  440,  445,  445,  594,  594,  447,
      447,  595,  595,  633,  596,  903,  597,  457,  457,  446,
      904,  606,  606,  448,  607,  905,  608,  461,  461,  611,
      611,  458,  612,  908,  613,  614,  614,  472,  472,  625,
      625,  462,  479,  479,  640,  640,  489,  489,  909,  615,
      642,  642,  473,  650,  650,  499,  499,  652,  652,  641,
      915,  490,  656,  656,  661,  661,  916,  665,  651,  917,
      500,  666,  512,  512,  669,  669,  863,  657,  864,  662,
      674,  674,  521,  521,  678,  678,  918,  513,  919,  545,
      545,  924,  702,  702,  663,  675,  925,  522,  546,  555,

      555,  926,  712,  712,  547,  703,  561,  561,  556,  589,
      589,  594,  594,  927,  557,  713,  928,  585,  585,  929,
      586,  562,  587,  595,  595,  930,  596,  931,  597,  749,
      749,  751,  751,  753,  753,  606,  606,  932,  607,  933,
      608,  611,  611,  750,  612,  752,  613,  754,  614,  614,
      763,  763,  934,  764,  935,  765,  767,  767,  774,  774,
      776,  776,  615,  625,  625,  640,  640,  794,  794,  936,
      768,  642,  642,  775,  937,  777,  795,  795,  650,  650,
      641,  804,  804,  652,  652,  656,  656,  808,  808,  809,
      809,  796,  941,  651,  661,  661,  814,  814,  669,  669,

      657,  674,  674,  942,  810,  825,  825,  678,  678,  662,
      848,  848,  702,  702,  945,  778,  675,  853,  811,  857,
      857,  854,  712,  712,  871,  703,  884,  884,  872,  874,
      874,  890,  890,  895,  895,  713,  749,  749,  875,  946,
      885,  898,  898,  947,  876,  891,  948,  896,  751,  751,
      750,  899,  899,  949,  900,  950,  901,  753,  753,  902,
      902,  951,  752,  906,  906,  763,  763,  952,  764,  954,
      765,  754,  910,  910,  767,  767,  957,  907,  912,  912,
      955,  913,  956,  914,  774,  774,  911,  958,  768,  920,
      920,  776,  776,  921,  921,  922,  922,  938,  938,  775,

      794,  794,  795,  795,  940,  940,  777,  943,  943,  959,
      923,  960,  939,  804,  804,  808,  808,  796,  809,  809,
      953,  953,  944,  814,  814,  961,  962,  963,  965,  966,
      966,  964,  968,  810,  969,  969,  825,  825,  971,  972,
      973,  974,  975,  976,  967,  977,  978,  979,  980,  970,
      981,  982,  983,  985,  986,  987,  990,  991,  992,  993,
      984,  848,  848,  994,  998,  988,  995,  995,  999, 1000,
     1001,  989,  857,  857, 1002,  996, 1003, 1004, 1005, 1006,
     1007,  997, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016,
     1017, 1018,  874,  874, 1015, 1019, 1020, 1020, 1022, 1023,

     1024,  875, 1025, 1026, 1027, 1027, 1032,  876, 1035, 1021,
      884,  884, 1029, 1029, 1036, 1030, 1040, 1031, 1028, 1033,
     1033,  890,  890, 1054,  885, 1037, 1037, 1055, 1038, 1056,
     1039, 1041, 1041, 1034, 1057,  891, 1043, 1058, 1044,  898,
      898, 1045, 1046,  895,  895, 1042, 1059, 1047, 1048, 1066,
     1049, 1051, 1051, 1050, 1052, 1067, 1053,  896,  899,  899,
     1068,  900, 1073,  901,  902,  902,  906,  906, 1060, 1060,
     1074, 1061, 1076, 1062,  910,  910, 1063, 1063, 1079, 1064,
      907, 1065,  912,  912, 1080,  913, 1081,  914,  911, 1069,
     1069, 1071, 1071,  920,  920,  921,  921,  922,  922, 1075,

     1075, 1077, 1077, 1082, 1070, 1083, 1072, 1084, 1086, 1086,
     1093, 1094,  923, 1095, 1096, 1085, 1078, 1088, 1089, 1090,
     1105,  938,  938, 1087, 1097, 1097,  940,  940, 1106, 1091,
     1098, 1098, 1100, 1100, 1107, 1092,  939,  943,  943, 1102,
     1102, 1103, 1103, 1108, 1109, 1099, 1110, 1101, 1111,  953,
      953, 1112,  944, 1113, 1114, 1115, 1104, 1116, 1117, 1117,
     1120, 1121, 1122, 1122, 1126, 1127, 1128,  966,  966, 1129,
     1129, 1130, 1134, 1118,  969,  969, 1135, 1123, 1131, 1131,
     1132, 1132,  967, 1136, 1137, 1138, 1139, 1140, 1141,  970,
     1124, 1142, 1143, 1144, 1145, 1133, 1125, 1146, 1147, 1119,

     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1155, 1157,
      995,  995, 1158, 1159, 1159, 1161, 1162, 1163, 1164,  996,
     1165, 1166, 1167, 1168, 1169,  997, 1160, 1170, 1171, 1172,
     1173, 1174, 1176, 1175, 1177, 1178, 1179, 1180, 1181, 1181,
     1020, 1020, 1182, 1183, 1184, 1185, 1186, 1027, 1027, 1187,
     1187, 1190, 1188, 1021, 1189, 1029, 1029, 1191, 1030, 1192,
     1031, 1028, 1033, 1033, 1193, 1193, 1196, 1194, 1197, 1195,
     1037, 1037, 1198, 1038, 1199, 1039, 1034, 1200, 1041, 1041,
     1201, 1201, 1204, 1202, 1205, 1203, 1206, 1207, 1208, 1209,
     1213, 1211, 1042, 1215, 1051, 1051, 1216, 1052, 1217, 1053,

     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1210, 1212, 1225,
     1060, 1060, 1214, 1061, 1226, 1062, 1063, 1063, 1229, 1064,
     1230, 1065, 1069, 1069, 1227, 1227, 1071, 1071, 1228, 1228,
     1075, 1075, 1231, 1077, 1077, 1232, 1232, 1070, 1233, 1234,
     1235, 1072, 1236, 1237, 1238, 1239, 1086, 1086, 1078, 1240,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250,
     1249, 1087, 1097, 1097, 1098, 1098, 1251, 1251, 1100, 1100,
     1252, 1252, 1102, 1102, 1103, 1103, 1253, 1253, 1254, 1099,
     1255, 1256, 1257, 1101, 1258, 1259, 1260, 1261, 1262, 1104,
     1263, 1264, 1264, 1266, 1266, 1117, 1117, 1268, 1268, 1269,

     1270, 1271, 1274, 1272, 1122, 1122, 1265, 1275, 1267, 1276,
     1118, 1273, 1273, 1277, 1278, 1129, 1129, 1279, 1283, 1123,
     1131, 1131, 1132, 1132, 1280, 1280, 1281, 1281, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1133, 1293, 1294,
     1295, 1282, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1306, 1159, 1159, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1160, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1181, 1181,
     1328, 1329, 1330, 1333, 1334, 1331, 1187, 1187, 1335, 1188,
     1336, 1189, 1193, 1193, 1332, 1194, 1337, 1195, 1338, 1339,

     1340, 1341, 1201, 1201, 1342, 1202, 1345, 1203, 1343, 1343,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1344, 1358, 1359, 1227, 1227, 1228, 1228, 1360,
     1361, 1362, 1232, 1232, 1363, 1364, 1365, 1366, 1367, 1368,
     1369, 1240, 1240, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1377, 1378, 1379, 1251, 1251, 1252, 1252, 1253, 1253, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1264,
     1264, 1390, 1390, 1266, 1266, 1391, 1391, 1268, 1268, 1392,
     1393, 1394, 1395, 1396, 1265, 1273, 1273, 1397, 1267, 1398,
     1399, 1400, 1401, 1280, 1280, 1281, 1281, 1402, 1402, 1403,

     1403, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1282, 1414, 1415, 1416, 1404, 1417, 1418, 1419, 1420, 1421,
     1422, 1423, 1424, 1306, 1306, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1449, 1451, 1451, 1453, 1453, 1455, 1456, 1456, 1343, 1343,
     1459, 1459, 1460, 1450, 1461, 1452, 1462, 1454, 1463, 1463,
     1457, 1466, 1344, 1467, 1468, 1469, 1469, 1471, 1472, 1472,
     1475, 1476, 1464, 1477, 1478, 1478, 1480, 1480, 1482, 1470,
     1483, 1483, 1473, 1485, 1486, 1487, 1488, 1489, 1479, 1490,

     1491, 1481, 1492, 1493, 1494, 1484, 1495, 1496, 1497, 1465,
     1498, 1458, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
     1507, 1507, 1509, 1474, 1510, 1511, 1512, 1513, 1390, 1390,
     1391, 1391, 1514, 1515, 1516, 1508, 1517, 1518, 1519, 1519,
     1521, 1522, 1523, 1524, 1524, 1402, 1402, 1403, 1403, 1526,
     1526, 1527, 1528, 1520, 1529, 1529, 1532, 1536, 1525, 1533,
     1533, 1537, 1404, 1530, 1538, 1539, 1540, 1541, 1534, 1531,
     1542, 1543, 1544, 1545, 1535, 1546, 1547, 1547, 1549, 1550,
     1551, 1552, 1553, 1553, 1555, 1556, 1557, 1558, 1559, 1560,
     1561, 1548, 1562, 1563, 1564, 1565, 1566, 1554, 1567, 1568,

     1569, 1570, 1571, 1449, 1449, 1572, 1572, 1580, 1573, 1581,
     1574, 1451, 1451, 1575, 1575, 1453, 1453, 1450, 1576, 1576,
     1577, 1577, 1456, 1456, 1582, 1452, 1579, 1579, 1583, 1454,
     1459, 1459, 1463, 1463, 1578, 1585, 1457, 1584, 1584, 1586,
     1587, 1589, 1469, 1469, 1590, 1590, 1464, 1591, 1472, 1472,
     1592, 1592, 1593, 1594, 1595, 1596, 1470, 1478, 1478, 1597,
     1597, 1599, 1473, 1480, 1480, 1588, 1598, 1598, 1483, 1483,
     1603, 1479, 1600, 1600, 1601, 1601, 1604, 1604, 1481, 1606,
     1607, 1607, 1611, 1484, 1609, 1609, 1612, 1612, 1614, 1602,
     1615, 1605, 1616, 1617, 1618, 1608, 1619, 1620, 1621, 1610,

     1622, 1613, 1623, 1624, 1625, 1625, 1627, 1628, 1507, 1507,
     1629, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1626,
     1637, 1638, 1642, 1508, 1639, 1639, 1519, 1519, 1641, 1641,
     1643, 1644, 1524, 1524, 1645, 1645, 1526, 1526, 1646, 1640,
     1647, 1520, 1529, 1529, 1650, 1648, 1648, 1525, 1651, 1652,
     1652, 1530, 1533, 1533, 1654, 1655, 1656, 1531, 1649, 1657,
     1658, 1534, 1653, 1659, 1660, 1661, 1662, 1535, 1663, 1547,
     1547, 1664, 1664, 1665, 1666, 1553, 1553, 1667, 1667, 1668,
     1669, 1670, 1671, 1672, 1548, 1673, 1674, 1675, 1676, 1677,
     1554, 1678, 1680, 1680, 1682, 1683, 1683, 1572, 1572, 1685,

     1573, 1686, 1574, 1690, 1679, 1691, 1681, 1575, 1575, 1684,
     1576, 1576, 1577, 1577, 1687, 1687, 1694, 1688, 1695, 1689,
     1579, 1579, 1692, 1692, 1584, 1584, 1578, 1696, 1699, 1700,
     1700, 1702, 1590, 1590, 1703, 1704, 1693, 1705, 1697, 1592,
     1592, 1706, 1709, 1701, 1698, 1707, 1707, 1597, 1597, 1598,
     1598, 1600, 1600, 1601, 1601, 1710, 1710, 1711, 1711, 1708,
     1604, 1604, 1713, 1713, 1714, 1607, 1607, 1717, 1602, 1715,
     1715, 1719, 1712, 1609, 1609, 1605, 1716, 1716, 1612, 1612,
     1608, 1718, 1718, 1720, 1721, 1722, 1723, 1724, 1610, 1725,
     1726, 1727, 1727, 1613, 1729, 1730, 1730, 1625, 1625, 1732,

     1732, 1733, 1733, 1735, 1629, 1629, 1728, 1736, 1736, 1742,
     1731, 1743, 1626, 1738, 1738, 1744, 1734, 1740, 1740, 1745,
     1746, 1747, 1737, 1639, 1639, 1748, 1748, 1752, 1739, 1641,
     1641, 1753, 1741, 1749, 1749, 1645, 1645, 1754, 1640, 1755,
     1755, 1648, 1648, 1756, 1757, 1759, 1759, 1760, 1750, 1652,
     1652, 1761, 1758, 1762, 1649, 1763, 1764, 1765, 1766, 1767,
     1768, 1769, 1653, 1664, 1664, 1770, 1667, 1667, 1771, 1772,
     1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1680, 1680,
     1781, 1781, 1782, 1683, 1683, 1786, 1783, 1783, 1751, 1784,
     1787, 1785, 1681, 1687, 1687, 1791, 1688, 1684, 1689, 1692,

     1692, 1788, 1788, 1789, 1789, 1792, 1793, 1795, 1796, 1700,
     1700, 1797, 1797, 1693, 1798, 1799, 1800, 1790, 1801, 1802,
     1794, 1707, 1707, 1701, 1803, 1803, 1806, 1804, 1812, 1805,
     1710, 1710, 1711, 1711, 1808, 1708, 1807, 1807, 1713, 1713,
     1715, 1715, 1809, 1716, 1716, 1810, 1810, 1712, 1718, 1718,
     1813, 1814, 1815, 1816, 1817, 1818, 1819, 1727, 1727, 1821,
     1811, 1820, 1820, 1730, 1730, 1822, 1822, 1732, 1732, 1733,
     1733, 1829, 1728, 1823, 1823, 1824, 1824, 1830, 1731, 1736,
     1736, 1826, 1826, 1831, 1734, 1738, 1738, 1827, 1827, 1832,
     1825, 1740, 1740, 1833, 1737, 1828, 1828, 1834, 1834, 1839,

     1739, 1748, 1748, 1749, 1749, 1840, 1741, 1836, 1836, 1837,
     1837, 1841, 1835, 1755, 1755, 1842, 1843, 1844, 1750, 1759,
     1759, 1845, 1846, 1847, 1838, 1848, 1849, 1850, 1851, 1852,
     1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
     1863, 1864, 1781, 1781, 1865, 1783, 1783, 1867, 1784, 1868,
     1785, 1869, 1870, 1788, 1788, 1789, 1789, 1866, 1871, 1871,
     1872, 1873, 1874, 1875, 1876, 1877, 1797, 1797, 1878, 1790,
     1879, 1880, 1881, 1882, 1803, 1803, 1883, 1804, 1884, 1805,
     1807, 1807, 1885, 1810, 1810, 1886, 1886, 1887, 1888, 1889,
     1890, 1891, 1892, 1893, 1894, 1820, 1820, 1895, 1811, 1822,

     1822, 1823, 1823, 1824, 1824, 1896, 1896, 1826, 1826, 1827,
     1827, 1828, 1828, 1897, 1898, 1899, 1900, 1901, 1825, 1834,
     1834, 1902, 1902, 1836, 1836, 1837, 1837, 1903, 1903, 1904,
     1904, 1906, 1907, 1908, 1835, 1909, 1910, 1911, 1912, 1913,
     1838, 1914, 1915, 1916, 1905, 1917, 1918, 1919, 1920, 1921,
     1922, 1923, 1924, 1925, 1926, 1927, 1927, 1929, 1929, 1931,
     1931, 1933, 1934, 1935, 1936, 1871, 1871, 1937, 1938, 1939,
     1928, 1930, 1940, 1932, 1941, 1942, 1943, 1944, 1945, 1946,
     1946, 1948, 1949, 1950, 1951, 1886, 1886, 1952, 1953, 1954,
     1955, 1956, 1957, 1947, 1958, 1959, 1960, 1896, 1896, 1961,

     1962, 1963, 1963, 1965, 1966, 1902, 1902, 1903, 1903, 1904,
     1904, 1967, 1967, 1968, 1969, 1970, 1964, 1971, 1972, 1973,
     1974, 1975, 1976, 1978, 1905, 1979, 1980, 1981, 1982, 1983,
     1984, 1985, 1986, 1927, 1927, 1987, 1987, 1929, 1929, 1990,
     1977, 1988, 1988, 1931, 1931, 1989, 1989, 1991, 1928, 1992,
     1993, 1930, 1994, 1995, 1996, 1997, 1998, 1932, 1999, 1999,
     2001, 2001, 2003, 2004, 2004, 1946, 1946, 2006, 2006, 2007,
     2009, 2009, 2000, 2011, 2002, 2012, 2013, 2005, 2014, 1947,
     2015, 2016, 2008, 2018, 2019, 2010, 2020, 2020, 2022, 2022,
     2024, 2025, 2026, 1963, 1963, 2027, 2027, 2028, 2029, 2017,

     2030, 2021, 2031, 2023, 1967, 1967, 2032, 2033, 1964, 2034,
     2035, 2036, 2037, 2038, 2039, 2040, 2041, 2041, 2043, 2044,
     2045, 2046, 1987, 1987, 1988, 1988, 1989, 1989, 2047, 2047,
     2051, 2042, 2049, 2049, 2052, 2053, 2053, 2055, 2056, 2057,
     2058, 2061, 2048, 1999, 1999, 2063, 2050, 2059, 2059, 2054,
     2001, 2001, 2060, 2060, 2004, 2004, 2064, 2000, 2062, 2062,
     2006, 2006, 2009, 2009, 2002, 2065, 2065, 2066, 2005, 2067,
     2067, 2069, 2070, 2071, 2071, 2073, 2074, 2010, 2075, 2076,
     2020, 2020, 2077, 2077, 2068, 2022, 2022, 2079, 2072, 2078,
     2078, 2080, 2081, 2081, 2083, 2021, 2027, 2027, 2084, 2085,

     2023, 2086, 2087, 2088, 2089, 2090, 2091, 2082, 2092, 2093,
     2094, 2041, 2041, 2095, 2095, 2096, 2097, 2098, 2047, 2047,
     2099, 2099, 2049, 2049, 2100, 2100, 2042, 2101, 2101, 2103,
     2053, 2053, 2048, 2104, 2104, 2105, 2050, 2106, 2107, 2108,
     2109, 2102, 2059, 2059, 2054, 2060, 2060, 2062, 2062, 2110,
     2111, 2065, 2065, 2112, 2067, 2067, 2113, 2113, 2114, 2114,
     2116, 2071, 2071, 2117, 2117, 2118, 2119, 2120, 2121, 2068,
     2077, 2077, 2122, 2115, 2078, 2078, 2072, 2123, 2081, 2081,
     2124, 2124, 2125, 2125, 2127, 2128, 2129, 2130, 2131, 2132,
     2133, 2134, 2135, 2082, 2136, 2095, 2095, 2126, 2137, 2138,

     2099, 2099, 2100, 2100, 2101, 2101, 2139, 2139, 2140, 2140,
     2104, 2104, 2142, 2143, 2144, 2144, 2146, 2147, 2102, 2148,
     2148, 2155, 2141, 2150, 2150, 2152, 2152, 2156, 2145, 2113,
     2113, 2114, 2114, 2149, 2154, 2154, 2157, 2151, 2117, 2117,
     2153, 2158, 2159, 2160, 2161, 2165, 2115, 2124, 2124, 2125,
     2125, 2162, 2162, 2163, 2163, 2166, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2126, 2175, 2139, 2139, 2164, 2140,
     2140, 2176, 2176, 2177, 2178, 2144, 2144, 2179, 2179, 2180,
     2181, 2181, 2186, 2141, 2148, 2148, 2183, 2183, 2187, 2145,
     2150, 2150, 2184, 2184, 2182, 2152, 2152, 2188, 2149, 2185,

     2185, 2154, 2154, 2189, 2151, 2190, 2191, 2192, 2162, 2162,
     2153, 2163, 2163, 2193, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2164, 2176, 2176, 2205,
     2206, 2179, 2179, 2207, 2181, 2181, 2208, 2208, 2183, 2183,
     2184, 2184, 2185, 2185, 2209, 2210, 2211, 2215, 2182, 2212,
     2212, 2216, 2217, 2193, 2193, 2218, 2219, 2220, 2221, 2222,
     2223, 2224, 2225, 2226, 2213, 2227, 2228, 2208, 2208, 2229,
     2230, 2230, 2232, 2232, 2212, 2212, 2234, 2234, 2235, 2236,
     2236, 2214, 2238, 2239, 2240, 2231, 2241, 2233, 2242, 2213,
     2243, 2244, 2245, 2246, 2237, 2247, 2248, 2249, 2249, 2230,

     2230, 2251, 2251, 2232, 2232, 2252, 2252, 2234, 2234, 2253,
     2236, 2236, 2250, 2255, 2231, 2254, 2254, 2258, 2233, 2256,
     2256, 2259, 2260, 2261, 2262, 2237, 2263, 2264, 2265, 2266,
     2249, 2249, 2267, 2267, 2257, 2251, 2251, 2252, 2252, 2268,
     2254, 2254, 2269, 2256, 2256, 2250, 2270, 2270, 2271, 2272,
     2272, 2274, 2274, 2276, 2277, 2278, 2279, 2280, 2257, 2281,
     2267, 2267, 2282, 2283, 2273, 2284, 2275, 2270, 2270, 2272,
     2272, 2285, 2285, 2274, 2274, 2286, 2286, 2287, 2288, 2289,
     2290, 2291, 2292, 2293, 2273, 2294, 2295, 2296, 2275, 2285,
     2285, 2286, 2286, 2297, 2298, 2299, 2299, 2301, 2301, 2303,

     2304, 2304, 2306, 2307, 2308, 2308, 2299, 2299, 2312, 2300,
     2310, 2310, 2302, 2301, 2301, 2305, 2311, 2311, 2309, 2314,
     2300, 2304, 2304, 2313, 2313, 2315, 2315, 2318, 2302, 2308,
     2308, 2317, 2317, 2310, 2310, 2319, 2305, 2311, 2311, 2316,
     2313, 2313, 2321, 2309, 2315, 2315, 2320, 2320, 2317, 2317,
     2320, 2320, 2322, 2322, 2322, 2322, 2324, 2324, 2316, 2324,
     2324,  867,  866,  865,  862,  861,  860, 2323,  859, 2323,
       23,   23,   23,   23,   23,   34,   34,   34,   34,   34,
       36,   36,   36,   36,   36,   37,   37,   37,   37,   37,
       35,   35,   35,   35,   35,   38,   38,   38,   38,   38,

       39,   39,   39,   39,   39,   42,   42,   42,   42,   42,
      102,  102,  102,  102,  103,  858,  103,  103,  103,  104,
      104,  856,  104,  104,  105,  105,  105,  855,  105,  852,
      851,  850,  849,  847,  846,  845,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  835,  834,  833,  832,  831,
      830,  829,  828,  827,  826,  824,  823,  822,  821,  820,
      819,  818,  817,  816,  815,  813,  812,  807,  806,  805,
      803,  802,  801,  800,  799,  793,  792,  791,  788,  787,
      786,  785,  784,  783,  782,  781,  780,  779,  773,  772,
      771,  770,  769,  766,  762,  761,  760,  759,  758,  757,

      756,  755,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  714,  711,  710,  709,
      708,  707,  706,  701,  700,  699,  698,  695,  694,  693,
      692,  691,  690,  689,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  677,  676,  673,  672,  671,  670,
      668,  667,  664,  660,  659,  658,  653,  649,  648,  647,
      646,  645,  644,  643,  639,  638,  637,  636,  635,  634,
      631,  630,  629,  628,  627,  626,  624,  623,  620,  619,

      618,  617,  616,  610,  609,  605,  604,  603,  602,  601,
      600,  599,  598,  593,  592,  591,  590,  588,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  567,  566,  565,  564,  563,  558,  554,
      553,  552,  551,  550,  549,  548,  544,  543,  542,  541,
      540,  539,  536,  535,  534,  533,  532,  531,  530,  529,
      526,  525,  524,  520,  519,  518,  517,  516,  515,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  498,
      494,  493,  492,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  478,  477,  476,  471,  468,  467,  466,  465,

      464,  463,  460,  459,  456,  455,  454,  453,  452,  451,
      450,  449,  444,  443,  442,  441,  437,  434,  433,  432,
      431,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  387,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  372,  371,  370,
      367,  366,  365,  364,  363,  362,  361,  358,  357,  356,
      355,  350,  349,  348,  345,  342,  341,  340,  336,  335,
      334,  333,  332,  331,  330,  329,  325,  324,  323,  322,

      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  293,  292,  291,  288,  287,  286,  285,
      284,  283,  282,  279,  278,  277,  276,  271,  270,  269,
      268,  265,  264,  263,  259,  256,  251,  243,  240,  239,
      235,  234,  229,  226,  225,  224,  221,  218,  217,  214,
      211,  210,  209,  208,  207,  206,  205,  204,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  191,  191,
      190,  187,  182,  174,  171,  170,  166,  165,  160,  157,
      137,  134,  133,  123,  114,  113,  112,  111,  108,  101,

      100,   75,  107,  106,  101,  100,   75,   71,   71, 2325,
       35,   35,   35,   35,   35,   35,   35,   35,   19, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325
    } ;

static yyconst flex_int16_t yy_chk[3685] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   56,   61,    0,   62,   47,   26,
       26,   26,   51,   72,   72,   61,   76,   76,   56,   26,
       62,   99,   99,   63,    1,    2,    2,    2,    2,    2,
       64,    2,   68,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   63,   68,   28,   28,  180,  180,    2,
       64,   48,   48,   28,    2,   28,   28,   28,   66,   67,

      722,   48,   48,   48,   66,   28,   81,   84,   83,   84,
       66,   48,   83,   67,   74,   74,   67,   81,   74,   74,
       74,  723,   87,   67,  139,   90,   28,   87,   87,    2,
       21,   21,   48,   90,   21,  139,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  724,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   92,  385,  142,   93,  142,

       23,   23,   23,   23,   23,   23,   23,  117,   23,   92,
       95,  385,   92,   92,   92,   93,   23,   50,   50,   97,
       95,   23,  151,  117,   97,   50,   95,   50,   50,   50,
       95,   23,   23,   23,   23,   23,   23,   50,   23,  151,
      126,   23,   23,   23,   23,   73,   73,  126,   23,   23,
       23,   23,   23,   29,  131,   73,   73,   73,   50,  726,
       29,  128,  128,  133,  141,   73,  728,   29,  141,  133,
      131,  135,  135,  135,  145,  128,  148,  155,  730,  145,
      145,  157,  155,  411,  148,  411,   73,  157,   29,   29,
       29,   29,   29,   29,   29,  157,   29,   29,  303,   29,

       29,   29,   29,   29,  303,   29,   29,   29,   29,   29,
       78,   78,   78,   78,   78,   78,   78,  731,   78,   78,
      150,   78,   78,   78,   78,   78,  732,   78,   78,   78,
       78,   78,  136,  136,  150,  153,  172,  150,  150,  150,
      172,  184,  136,  136,  136,  153,  161,  167,  184,  161,
      184,  153,  191,  191,  167,  153,  549,  167,  167,  200,
      200,  215,  215,  216,  216,  226,  216,  230,  216,  733,
      230,  226,  549,  200,  236,  215,  232,  232,  241,  226,
      734,  236,  241,  253,  236,  236,  249,  249,  644,  263,
      253,  232,  253,  263,  265,  265,  282,  282,  308,  308,

      310,  310,  311,  311,  644,  282,  312,  312,  317,  317,
      318,  318,  308,  394,  310,  735,  326,  326,  737,  326,
      312,  326,  317,  469,  318,  330,  330,  333,  333,  340,
      342,  342,  738,  340,  346,  346,  347,  347,  469,  330,
      418,  333,  357,  357,  418,  342,  361,  361,  739,  346,
      394,  363,  363,  374,  374,  361,  740,  357,  381,  381,
      401,  401,  409,  409,  742,  357,  363,  743,  374,  401,
      502,  409,  502,  381,  746,  401,  481,  409,  412,  412,
      435,  435,  438,  438,  748,  342,  342,  541,  374,  541,
      439,  439,  363,  412,  435,  436,  436,  636,  436,  636,

      436,  440,  440,  381,  439,  445,  445,  446,  446,  447,
      447,  448,  448,  481,  448,  755,  448,  457,  457,  445,
      756,  458,  458,  447,  458,  759,  458,  461,  461,  462,
      462,  457,  462,  764,  462,  463,  463,  472,  472,  473,
      473,  461,  479,  479,  488,  488,  489,  489,  765,  463,
      490,  490,  472,  498,  498,  499,  499,  500,  500,  488,
      769,  489,  503,  503,  507,  507,  770,  509,  498,  771,
      499,  509,  512,  512,  513,  513,  718,  503,  718,  507,
      518,  518,  521,  521,  522,  522,  772,  512,  773,  545,
      545,  779,  547,  547,  507,  518,  780,  521,  545,  555,

      555,  781,  557,  557,  545,  547,  561,  561,  555,  589,
      589,  594,  594,  782,  555,  557,  783,  585,  585,  784,
      585,  561,  585,  595,  595,  785,  595,  786,  595,  601,
      601,  602,  602,  603,  603,  606,  606,  787,  606,  788,
      606,  611,  611,  601,  611,  602,  611,  603,  614,  614,
      615,  615,  789,  615,  790,  615,  617,  617,  623,  623,
      624,  624,  614,  625,  625,  640,  640,  641,  641,  791,
      617,  642,  642,  623,  792,  624,  643,  643,  650,  650,
      640,  651,  651,  652,  652,  656,  656,  657,  657,  658,
      658,  643,  797,  650,  661,  661,  662,  662,  669,  669,

      656,  674,  674,  798,  658,  675,  675,  678,  678,  661,
      701,  701,  702,  702,  800,  624,  674,  708,  658,  711,
      711,  708,  712,  712,  725,  702,  736,  736,  725,  727,
      727,  741,  741,  747,  747,  712,  749,  749,  727,  801,
      736,  750,  750,  801,  727,  741,  802,  747,  751,  751,
      749,  752,  752,  803,  752,  805,  752,  753,  753,  754,
      754,  806,  751,  760,  760,  763,  763,  807,  763,  811,
      763,  753,  766,  766,  767,  767,  813,  760,  768,  768,
      812,  768,  812,  768,  774,  774,  766,  815,  767,  775,
      775,  776,  776,  777,  777,  778,  778,  793,  793,  774,

      794,  794,  795,  795,  796,  796,  776,  799,  799,  816,
      778,  817,  793,  804,  804,  808,  808,  795,  809,  809,
      810,  810,  799,  814,  814,  818,  819,  820,  821,  822,
      822,  820,  823,  809,  824,  824,  825,  825,  826,  827,
      828,  829,  832,  833,  822,  834,  836,  837,  838,  824,
      839,  840,  841,  843,  843,  843,  844,  845,  846,  847,
      841,  848,  848,  849,  853,  843,  850,  850,  854,  855,
      856,  843,  857,  857,  858,  850,  859,  860,  861,  862,
      863,  850,  864,  865,  866,  867,  868,  869,  870,  871,
      872,  873,  874,  874,  870,  875,  876,  876,  877,  879,

      880,  874,  881,  882,  883,  883,  886,  874,  888,  876,
      884,  884,  885,  885,  889,  885,  892,  885,  883,  887,
      887,  890,  890,  897,  884,  891,  891,  900,  891,  901,
      891,  893,  893,  887,  903,  890,  894,  904,  894,  898,
      898,  894,  894,  895,  895,  893,  905,  894,  894,  913,
      894,  896,  896,  894,  896,  914,  896,  895,  899,  899,
      915,  899,  918,  899,  902,  902,  906,  906,  907,  907,
      919,  907,  924,  907,  910,  910,  911,  911,  926,  911,
      906,  911,  912,  912,  927,  912,  928,  912,  910,  916,
      916,  917,  917,  920,  920,  921,  921,  922,  922,  923,

      923,  925,  925,  929,  916,  930,  917,  931,  932,  932,
      934,  935,  922,  936,  937,  931,  925,  933,  933,  933,
      946,  938,  938,  932,  939,  939,  940,  940,  947,  933,
      941,  941,  942,  942,  948,  933,  938,  943,  943,  944,
      944,  945,  945,  949,  950,  941,  951,  942,  952,  953,
      953,  954,  943,  955,  956,  957,  945,  958,  959,  959,
      960,  961,  962,  962,  963,  964,  965,  966,  966,  967,
      967,  968,  972,  959,  969,  969,  973,  962,  970,  970,
      971,  971,  966,  974,  975,  976,  977,  978,  979,  969,
      962,  980,  981,  982,  983,  971,  962,  984,  985,  959,

      986,  987,  988,  989,  990,  991,  992,  993,  992,  994,
      995,  995,  996,  997,  997,  998,  999, 1000, 1001,  995,
     1002, 1003, 1004, 1005, 1006,  995,  997, 1007, 1008, 1011,
     1012, 1013, 1014, 1013, 1015, 1016, 1017, 1018, 1019, 1019,
     1020, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1027, 1028,
     1028, 1030, 1028, 1020, 1028, 1029, 1029, 1031, 1029, 1032,
     1029, 1027, 1033, 1033, 1034, 1034, 1035, 1034, 1036, 1034,
     1037, 1037, 1038, 1037, 1039, 1037, 1033, 1040, 1041, 1041,
     1042, 1042, 1043, 1042, 1044, 1042, 1044, 1045, 1046, 1047,
     1049, 1048, 1041, 1050, 1051, 1051, 1052, 1051, 1053, 1051,

     1054, 1057, 1058, 1059, 1061, 1062, 1064, 1047, 1048, 1065,
     1060, 1060, 1049, 1060, 1068, 1060, 1063, 1063, 1073, 1063,
     1074, 1063, 1069, 1069, 1070, 1070, 1071, 1071, 1072, 1072,
     1075, 1075, 1076, 1077, 1077, 1078, 1078, 1069, 1079, 1080,
     1081, 1071, 1082, 1083, 1084, 1085, 1086, 1086, 1077, 1087,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1095, 1086, 1097, 1097, 1098, 1098, 1099, 1099, 1100, 1100,
     1101, 1101, 1102, 1102, 1103, 1103, 1104, 1104, 1105, 1098,
     1106, 1107, 1108, 1100, 1109, 1110, 1111, 1112, 1113, 1103,
     1114, 1115, 1115, 1116, 1116, 1117, 1117, 1118, 1118, 1119,

     1120, 1121, 1124, 1121, 1122, 1122, 1115, 1125, 1116, 1126,
     1117, 1123, 1123, 1127, 1128, 1129, 1129, 1130, 1135, 1122,
     1131, 1131, 1132, 1132, 1133, 1133, 1134, 1134, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1132, 1145, 1146,
     1147, 1134, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1158, 1159, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1159, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1181,
     1182, 1183, 1185, 1186, 1188, 1185, 1187, 1187, 1189, 1187,
     1192, 1187, 1193, 1193, 1185, 1193, 1194, 1193, 1195, 1196,

     1197, 1200, 1201, 1201, 1204, 1201, 1206, 1201, 1205, 1205,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218,
     1219, 1220, 1205, 1221, 1226, 1227, 1227, 1228, 1228, 1229,
     1230, 1231, 1232, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
     1239, 1240, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1251, 1252, 1252, 1253, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1264, 1265, 1265, 1266, 1266, 1267, 1267, 1268, 1268, 1269,
     1270, 1271, 1272, 1274, 1264, 1273, 1273, 1275, 1266, 1276,
     1277, 1278, 1279, 1280, 1280, 1281, 1281, 1282, 1282, 1283,

     1283, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
     1281, 1295, 1296, 1297, 1283, 1298, 1299, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1306, 1307, 1308, 1309, 1310, 1311,
     1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1325, 1326, 1327, 1328, 1330, 1331, 1332, 1333, 1336,
     1336, 1339, 1339, 1340, 1340, 1341, 1342, 1342, 1343, 1343,
     1344, 1344, 1345, 1336, 1346, 1339, 1347, 1340, 1348, 1348,
     1342, 1349, 1343, 1350, 1351, 1352, 1352, 1353, 1354, 1354,
     1355, 1356, 1348, 1357, 1358, 1358, 1359, 1359, 1360, 1352,
     1361, 1361, 1354, 1362, 1363, 1364, 1365, 1366, 1358, 1367,

     1368, 1359, 1369, 1370, 1371, 1361, 1372, 1373, 1374, 1348,
     1375, 1342, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1384, 1385, 1354, 1386, 1387, 1388, 1389, 1390, 1390,
     1391, 1391, 1392, 1393, 1394, 1384, 1395, 1396, 1397, 1397,
     1398, 1399, 1400, 1401, 1401, 1402, 1402, 1403, 1403, 1404,
     1404, 1405, 1407, 1397, 1408, 1408, 1409, 1412, 1401, 1411,
     1411, 1414, 1403, 1408, 1415, 1416, 1417, 1418, 1411, 1408,
     1419, 1420, 1421, 1422, 1411, 1423, 1424, 1424, 1425, 1426,
     1428, 1429, 1430, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
     1437, 1424, 1438, 1439, 1441, 1442, 1443, 1430, 1444, 1445,

     1446, 1447, 1448, 1449, 1449, 1450, 1450, 1458, 1450, 1460,
     1450, 1451, 1451, 1452, 1452, 1453, 1453, 1449, 1454, 1454,
     1455, 1455, 1456, 1456, 1461, 1451, 1457, 1457, 1462, 1453,
     1459, 1459, 1463, 1463, 1455, 1465, 1456, 1464, 1464, 1466,
     1467, 1468, 1469, 1469, 1470, 1470, 1463, 1471, 1472, 1472,
     1473, 1473, 1474, 1475, 1476, 1477, 1469, 1478, 1478, 1479,
     1479, 1482, 1472, 1480, 1480, 1467, 1481, 1481, 1483, 1483,
     1486, 1478, 1484, 1484, 1485, 1485, 1487, 1487, 1480, 1488,
     1489, 1489, 1491, 1483, 1490, 1490, 1492, 1492, 1493, 1485,
     1494, 1487, 1495, 1496, 1497, 1489, 1498, 1499, 1500, 1490,

     1501, 1492, 1502, 1503, 1504, 1504, 1505, 1506, 1507, 1507,
     1508, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1504,
     1516, 1517, 1521, 1507, 1518, 1518, 1519, 1519, 1520, 1520,
     1522, 1523, 1524, 1524, 1525, 1525, 1526, 1526, 1527, 1518,
     1530, 1519, 1529, 1529, 1532, 1531, 1531, 1524, 1534, 1535,
     1535, 1529, 1533, 1533, 1536, 1537, 1538, 1529, 1531, 1539,
     1540, 1533, 1535, 1541, 1542, 1543, 1544, 1533, 1546, 1547,
     1547, 1548, 1548, 1549, 1552, 1553, 1553, 1554, 1554, 1558,
     1559, 1560, 1561, 1562, 1547, 1563, 1564, 1565, 1566, 1567,
     1553, 1568, 1569, 1569, 1570, 1571, 1571, 1572, 1572, 1573,

     1572, 1574, 1572, 1580, 1568, 1581, 1569, 1575, 1575, 1571,
     1576, 1576, 1577, 1577, 1578, 1578, 1583, 1578, 1585, 1578,
     1579, 1579, 1582, 1582, 1584, 1584, 1577, 1586, 1587, 1588,
     1588, 1589, 1590, 1590, 1591, 1593, 1582, 1594, 1586, 1592,
     1592, 1595, 1599, 1588, 1586, 1596, 1596, 1597, 1597, 1598,
     1598, 1600, 1600, 1601, 1601, 1602, 1602, 1603, 1603, 1596,
     1604, 1604, 1605, 1605, 1606, 1607, 1607, 1611, 1601, 1608,
     1608, 1614, 1603, 1609, 1609, 1604, 1610, 1610, 1612, 1612,
     1607, 1613, 1613, 1615, 1616, 1617, 1618, 1619, 1609, 1620,
     1621, 1622, 1622, 1612, 1623, 1624, 1624, 1625, 1625, 1626,

     1626, 1627, 1627, 1628, 1629, 1629, 1622, 1630, 1630, 1633,
     1624, 1634, 1625, 1631, 1631, 1635, 1627, 1632, 1632, 1636,
     1637, 1638, 1630, 1639, 1639, 1640, 1640, 1643, 1631, 1641,
     1641, 1644, 1632, 1642, 1642, 1645, 1645, 1646, 1639, 1647,
     1647, 1648, 1648, 1649, 1650, 1651, 1651, 1653, 1642, 1652,
     1652, 1655, 1650, 1656, 1648, 1657, 1658, 1659, 1660, 1661,
     1662, 1663, 1652, 1664, 1664, 1665, 1667, 1667, 1668, 1669,
     1670, 1671, 1672, 1675, 1676, 1677, 1678, 1679, 1680, 1680,
     1681, 1681, 1682, 1683, 1683, 1690, 1684, 1684, 1642, 1684,
     1691, 1684, 1680, 1687, 1687, 1695, 1687, 1683, 1687, 1692,

     1692, 1693, 1693, 1694, 1694, 1696, 1697, 1698, 1699, 1700,
     1700, 1701, 1701, 1692, 1702, 1703, 1704, 1694, 1705, 1706,
     1697, 1707, 1707, 1700, 1708, 1708, 1709, 1708, 1719, 1708,
     1710, 1710, 1711, 1711, 1714, 1707, 1712, 1712, 1713, 1713,
     1715, 1715, 1714, 1716, 1716, 1717, 1717, 1711, 1718, 1718,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1727, 1729,
     1717, 1728, 1728, 1730, 1730, 1731, 1731, 1732, 1732, 1733,
     1733, 1742, 1727, 1734, 1734, 1735, 1735, 1743, 1730, 1736,
     1736, 1737, 1737, 1744, 1733, 1738, 1738, 1739, 1739, 1745,
     1735, 1740, 1740, 1746, 1736, 1741, 1741, 1747, 1747, 1752,

     1738, 1748, 1748, 1749, 1749, 1753, 1740, 1750, 1750, 1751,
     1751, 1754, 1747, 1755, 1755, 1756, 1757, 1758, 1749, 1759,
     1759, 1760, 1761, 1762, 1751, 1763, 1764, 1765, 1766, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1777, 1778,
     1779, 1780, 1781, 1781, 1782, 1783, 1783, 1784, 1783, 1785,
     1783, 1786, 1787, 1788, 1788, 1789, 1789, 1782, 1790, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1797, 1798, 1789,
     1799, 1800, 1801, 1802, 1803, 1803, 1806, 1803, 1808, 1803,
     1807, 1807, 1809, 1810, 1810, 1811, 1811, 1812, 1813, 1814,
     1815, 1816, 1817, 1818, 1819, 1820, 1820, 1821, 1810, 1822,

     1822, 1823, 1823, 1824, 1824, 1825, 1825, 1826, 1826, 1827,
     1827, 1828, 1828, 1829, 1830, 1831, 1832, 1833, 1824, 1834,
     1834, 1835, 1835, 1836, 1836, 1837, 1837, 1838, 1838, 1839,
     1839, 1840, 1841, 1842, 1834, 1843, 1844, 1845, 1846, 1847,
     1837, 1848, 1849, 1850, 1839, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1859, 1860, 1861, 1862, 1862, 1863, 1863, 1864,
     1864, 1865, 1866, 1869, 1870, 1871, 1871, 1872, 1873, 1874,
     1862, 1863, 1875, 1864, 1876, 1877, 1878, 1879, 1880, 1881,
     1881, 1882, 1883, 1884, 1885, 1886, 1886, 1887, 1888, 1889,
     1890, 1891, 1892, 1881, 1893, 1894, 1895, 1896, 1896, 1897,

     1898, 1899, 1899, 1900, 1901, 1902, 1902, 1903, 1903, 1904,
     1904, 1905, 1905, 1906, 1908, 1909, 1899, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1904, 1917, 1920, 1921, 1922, 1923,
     1924, 1925, 1926, 1927, 1927, 1928, 1928, 1929, 1929, 1933,
     1915, 1930, 1930, 1931, 1931, 1932, 1932, 1934, 1927, 1935,
     1936, 1929, 1937, 1938, 1939, 1940, 1941, 1931, 1942, 1942,
     1943, 1943, 1944, 1945, 1945, 1946, 1946, 1947, 1947, 1948,
     1949, 1949, 1942, 1950, 1943, 1951, 1952, 1945, 1953, 1946,
     1954, 1955, 1948, 1956, 1957, 1949, 1958, 1958, 1959, 1959,
     1960, 1961, 1962, 1963, 1963, 1964, 1964, 1965, 1966, 1955,

     1968, 1958, 1969, 1959, 1967, 1967, 1970, 1972, 1963, 1973,
     1974, 1976, 1977, 1978, 1979, 1980, 1981, 1981, 1982, 1984,
     1985, 1986, 1987, 1987, 1988, 1988, 1989, 1989, 1990, 1990,
     1992, 1981, 1991, 1991, 1993, 1994, 1994, 1995, 1996, 1997,
     1998, 2003, 1990, 1999, 1999, 2007, 1991, 2000, 2000, 1994,
     2001, 2001, 2002, 2002, 2004, 2004, 2008, 1999, 2005, 2005,
     2006, 2006, 2009, 2009, 2001, 2010, 2010, 2011, 2004, 2012,
     2012, 2013, 2014, 2015, 2015, 2016, 2017, 2009, 2018, 2019,
     2020, 2020, 2021, 2021, 2012, 2022, 2022, 2024, 2015, 2023,
     2023, 2025, 2026, 2026, 2028, 2020, 2027, 2027, 2029, 2030,

     2022, 2031, 2032, 2033, 2035, 2036, 2037, 2026, 2038, 2039,
     2040, 2041, 2041, 2042, 2042, 2043, 2045, 2046, 2047, 2047,
     2048, 2048, 2049, 2049, 2050, 2050, 2041, 2051, 2051, 2052,
     2053, 2053, 2047, 2054, 2054, 2055, 2049, 2056, 2057, 2058,
     2061, 2051, 2059, 2059, 2053, 2060, 2060, 2062, 2062, 2063,
     2064, 2065, 2065, 2066, 2067, 2067, 2068, 2068, 2069, 2069,
     2070, 2071, 2071, 2072, 2072, 2073, 2074, 2075, 2076, 2067,
     2077, 2077, 2079, 2069, 2078, 2078, 2071, 2080, 2081, 2081,
     2082, 2082, 2083, 2083, 2084, 2085, 2086, 2088, 2089, 2090,
     2091, 2092, 2093, 2081, 2094, 2095, 2095, 2083, 2096, 2098,

     2099, 2099, 2100, 2100, 2101, 2101, 2102, 2102, 2103, 2103,
     2104, 2104, 2105, 2106, 2107, 2107, 2108, 2109, 2101, 2110,
     2110, 2116, 2103, 2111, 2111, 2112, 2112, 2118, 2107, 2113,
     2113, 2114, 2114, 2110, 2115, 2115, 2119, 2111, 2117, 2117,
     2112, 2120, 2121, 2122, 2123, 2128, 2114, 2124, 2124, 2125,
     2125, 2126, 2126, 2127, 2127, 2129, 2130, 2131, 2132, 2133,
     2134, 2135, 2136, 2137, 2125, 2138, 2139, 2139, 2127, 2140,
     2140, 2141, 2141, 2142, 2143, 2144, 2144, 2145, 2145, 2146,
     2147, 2147, 2155, 2140, 2148, 2148, 2149, 2149, 2156, 2144,
     2150, 2150, 2151, 2151, 2147, 2152, 2152, 2157, 2148, 2153,

     2153, 2154, 2154, 2158, 2150, 2159, 2160, 2161, 2162, 2162,
     2152, 2163, 2163, 2164, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2173, 2174, 2175, 2163, 2176, 2176, 2177,
     2178, 2179, 2179, 2180, 2181, 2181, 2182, 2182, 2183, 2183,
     2184, 2184, 2185, 2185, 2186, 2187, 2188, 2190, 2181, 2189,
     2189, 2191, 2192, 2193, 2193, 2194, 2195, 2196, 2197, 2200,
     2202, 2203, 2204, 2205, 2189, 2206, 2207, 2208, 2208, 2209,
     2210, 2210, 2211, 2211, 2212, 2212, 2213, 2213, 2214, 2215,
     2215, 2189, 2216, 2217, 2218, 2210, 2219, 2211, 2220, 2212,
     2222, 2223, 2225, 2226, 2215, 2227, 2228, 2229, 2229, 2230,

     2230, 2231, 2231, 2232, 2232, 2233, 2233, 2234, 2234, 2235,
     2236, 2236, 2229, 2238, 2230, 2237, 2237, 2240, 2232, 2239,
     2239, 2241, 2242, 2243, 2244, 2236, 2245, 2246, 2247, 2248,
     2249, 2249, 2250, 2250, 2239, 2251, 2251, 2252, 2252, 2253,
     2254, 2254, 2255, 2256, 2256, 2249, 2257, 2257, 2258, 2259,
     2259, 2260, 2260, 2261, 2262, 2263, 2264, 2265, 2256, 2266,
     2267, 2267, 2268, 2269, 2259, 2271, 2260, 2270, 2270, 2272,
     2272, 2273, 2273, 2274, 2274, 2275, 2275, 2276, 2277, 2278,
     2279, 2280, 2281, 2282, 2272, 2283, 2284, 2288, 2274, 2285,
     2285, 2286, 2286, 2290, 2291, 2292, 2292, 2293, 2293, 2294,

     2295, 2295, 2296, 2297, 2298, 2298, 2299, 2299, 2303, 2292,
     2300, 2300, 2293, 2301, 2301, 2295, 2302, 2302, 2298, 2306,
     2299, 2304, 2304, 2305, 2305, 2307, 2307, 2312, 2301, 2308,
     2308, 2309, 2309, 2310, 2310, 2314, 2304, 2311, 2311, 2307,
     2313, 2313, 2318, 2308, 2315, 2315, 2316, 2316, 2317, 2317,
     2320, 2320, 2321, 2321, 2322, 2322, 2323, 2323, 2315, 2324,
     2324,  721,  720,  719,  717,  716,  715, 2321,  714, 2322,
     2326, 2326, 2326, 2326, 2326, 2327, 2327, 2327, 2327, 2327,
     2328, 2328, 2328, 2328, 2328, 2329, 2329, 2329, 2329, 2329,
     2330, 2330, 2330, 2330, 2330, 2331, 2331, 2331, 2331, 2331,

     2332, 2332, 2332, 2332, 2332, 2333, 2333, 2333, 2333, 2333,
     2334, 2334, 2334, 2334, 2335,  713, 2335, 2335, 2335, 2336,
     2336,  710, 2336, 2336, 2337, 2337, 2337,  709, 2337,  707,
      705,  704,  703,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  687,  686,  684,  683,  682,
      681,  680,  679,  677,  676,  673,  672,  671,  670,  668,
      667,  666,  665,  664,  663,  660,  659,  655,  654,  653,
      649,  648,  647,  646,  645,  639,  638,  637,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  622,  621,
      620,  619,  618,  616,  613,  612,  610,  609,  608,  607,

      605,  604,  600,  599,  598,  597,  596,  593,  592,  591,
      590,  588,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  560,  559,  558,  556,  554,  553,
      552,  551,  550,  546,  544,  543,  542,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  528,  527,
      526,  525,  524,  523,  520,  519,  517,  516,  515,  514,
      511,  510,  508,  506,  505,  504,  501,  497,  496,  495,
      494,  493,  492,  491,  487,  486,  485,  484,  483,  482,
      480,  478,  477,  476,  475,  474,  471,  470,  468,  467,

      466,  465,  464,  460,  459,  456,  455,  454,  453,  452,
      451,  450,  449,  444,  443,  442,  441,  437,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  424,  423,  422,
      421,  420,  419,  417,  416,  415,  414,  413,  410,  408,
      407,  406,  405,  404,  403,  402,  400,  399,  398,  397,
      396,  395,  393,  392,  391,  390,  389,  388,  387,  386,
      384,  383,  382,  380,  379,  378,  377,  376,  375,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  362,
      360,  359,  358,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  345,  344,  343,  341,  339,  338,  337,  336,

      335,  334,  332,  331,  329,  325,  324,  323,  322,  321,
      320,  319,  316,  315,  314,  313,  309,  307,  306,  305,
      304,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  264,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  252,  251,  250,
      248,  247,  246,  245,  244,  243,  242,  240,  239,  238,
      237,  235,  234,  233,  231,  229,  228,  227,  224,  223,
      222,  221,  220,  219,  218,  217,  214,  213,  212,  211,

      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      199,  198,  197,  196,  195,  194,  193,  190,  189,  188,
      187,  186,  185,  183,  182,  181,  179,  178,  177,  176,
      175,  174,  173,  171,  170,  169,  168,  166,  165,  164,
      162,  160,  159,  158,  156,  154,  152,  149,  147,  146,
      144,  143,  140,  138,  137,  134,  132,  130,  129,  127,
      125,  124,  123,  122,  121,  120,  119,  118,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  106,  101,  100,
       98,   96,   94,   91,   89,   88,   86,   85,   82,   80,
       77,   70,   69,   65,   60,   59,   58,   57,   55,   54,

       53,   49,   44,   41,   32,   31,   27,   24,   22,   19,
       14,   13,    8,    7,    6,    5,    4,    3, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[305] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
    1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 104 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2146 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 114 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2402 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2326 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3619 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 117 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 121 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 142 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 293:
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 297:
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4340 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2326 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2326 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2325);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"





