#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 314
#define YY_END_OF_BUFFER 315
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2474] =
    {   0,
        1,    1,  312,  312,  310,  310,  311,  311,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  315,  313,
        1,    2,  300,    2,  300,    6,  300,    5,  313,    4,
      300,  300,    2,  312,  314,  310,  311,  301,  303,  304,
      303,  307,  308,  307,    1,  300,  300,    6,  300,    5,
        0,    4,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
        3,    6,    6,  300,    7,    5,    0,    0,  306,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,  300,

      300,  312,  310,  311,  301,    0,  309,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    6,  305,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  302,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  240,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  122,    0,    0,    0,    0,    0,    0,
        0,  232,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  224,    0,    0,    0,    0,    0,    0,    0,
      226,  300,  300,  300,  300,  300,  300,  300,  300,   29,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  104,  105,  300,  300,  300,
      300,  300,  300,  300,  300,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  161,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  172,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  162,    0,    0,    0,    0,  300,  300,
      300,  300,  300,  300,  300,  300,   29,  300,  108,  300,
      300,  300,  300,  300,  109,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,    0,    0,    0,    0,    0,    0,
        0,  241,    0,    0,    0,    0,    0,  161,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  233,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  225,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  227,    0,    0,    0,    0,
        0,    0,    0,  206,  256,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  277,  134,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  281,    0,    0,    0,    0,  112,
      111,  148,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  268,    0,    0,    0,    0,    0,    0,  300,
      300,  300,  300,  300,  300,  102,  103,  300,  108,  300,
      300,  300,  300,  109,  300,   66,   67,  300,  300,  300,
      300,  300,  300,  300,  300,  300,   78,   79,  300,  300,
      300,   88,   89,  300,  300,  300,  300,    0,    0,    0,
        0,    0,    0,    0,  241,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  278,  123,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  282,    0,  233,    0,    0,    0,    0,
      113,    0,    0,    0,    0,  173,    0,    0,    0,    0,

        0,    0,  225,    0,    0,    0,    0,    0,    0,  163,
        0,    0,  227,    0,    0,    0,    0,    0,    0,    0,
      254,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  214,  279,
      277,    0,    0,    0,    0,  250,    0,    0,    0,    0,
      283,  281,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  118,
        0,    0,    0,    0,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,   64,   65,  300,  300,  300,  300,
      110,  300,  300,  300,   30,  300,  300,   76,   77,  300,

      300,   86,   87,  300,   92,   93,  300,  300,  300,    0,
        0,    0,    0,    0,    0,  207,    0,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  278,    0,  135,
        0,    0,    0,    0,    0,    0,    0,    0,  282,    0,
        0,    0,    0,  113,    0,  149,    0,    0,    0,  173,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
        0,    0,  163,    0,    0,    0,    0,    0,  208,  210,
        0,    0,    0,    0,  144,    0,    0,    0,    0,    0,
        0,    0,  116,  272,    0,    0,    0,    0,    0,  279,

        0,    0,  138,    0,  164,    0,    0,    0,    0,  283,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      196,    0,    0,  120,    0,    0,    0,    0,    0,  285,
        0,  218,    0,    0,    0,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  110,  300,   74,   75,   30,  300,  300,  300,  300,
      300,   90,   91,  300,  300,  300,  100,  101,    0,    0,
        0,    0,    0,  207,  257,    0,  255,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  215,  135,    0,    0,    0,

        0,  251,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  286,  269,    0,    0,  119,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  258,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      297,    0,    0,    0,    0,    0,    0,  270,    0,    0,
        0,    0,    0,    0,  142,  184,    0,    0,    0,    0,
        0,    0,    0,    0,  287,  285,    0,    0,  140,    0,
        0,  300,  300,  300,  300,   48,   49,  300,  300,  300,

      300,  300,  300,   60,   61,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,   70,   71,  300,
       72,   73,  300,  300,  300,  300,   84,   85,  300,   96,
       97,   98,   99,    0,    0,  209,    0,  211,    0,    0,
      255,    0,    0,    0,  145,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  117,    0,    0,  273,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  215,    0,  298,
        0,  139,    0,  251,    0,  165,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,  121,    0,    0,    0,    0,

        0,  286,    0,  119,    0,  219,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  299,  297,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  287,    0,    0,
        0,  198,  300,  300,   44,   45,   46,   47,  300,  300,
       56,   57,  300,  300,   58,   59,  300,  300,  106,  107,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,   68,   69,  300,  300,  300,  300,   82,   83,

       94,   95,    0,  209,  211,    0,    0,    0,    0,  145,
        0,    0,    0,    0,  259,    0,    0,    0,    0,  117,
        0,  273,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  298,  139,    0,  165,    0,    0,    0,    0,
        0,  271,    0,    0,    0,    0,    0,    0,    0,  143,
        0,  185,  197,    0,    0,    0,    0,  121,    0,    0,
        0,    0,    0,    0,  219,    0,  141,    0,    0,  212,
        0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  299,    0,    0,    0,    0,    0,    0,

        0,  228,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  126,    0,    0,    0,    0,  216,    0,  300,
      300,  300,   42,   43,  300,   54,   55,  300,  300,  300,
      300,  300,   10,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,    0,    0,    0,
        0,    0,    0,    0,    0,  259,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  271,    0,    0,    0,
        0,    0,    0,  143,  185,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  141,    0,    0,  199,    0,

        0,  236,    0,    0,    0,  248,    0,    0,  178,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,  300,  300,  300,  300,  300,  300,   31,
      300,   32,  300,  300,   25,  300,   10,  300,  300,  300,
      300,   23,  300,  300,  300,  300,  300,   21,  300,  300,
       20,  300,  300,  300,  300,  300,   33,    0,  213,    0,
        0,  253,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  229,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      127,    0,    0,    0,    0,  217,    0,  199,    0,    0,
      168,    0,    0,  289,    0,    0,    0,  293,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,  276,    0,    0,  156,  150,    0,    0,  280,  124,
      114,  146,    0,    0,    0,    0,    0,    0,  246,    0,
        0,    0,    0,  300,  300,  300,  300,   52,   53,   31,
       32,  300,  300,   25,  300,  300,  300,  300,   23,  300,
      300,  300,  300,  300,   21,  300,   20,  300,  300,  300,

      300,   33,  213,    0,  253,    0,    0,  237,    0,    0,
      290,    0,    0,  249,    0,  294,    0,    0,  179,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  155,    0,    0,  229,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  129,  127,    0,
        0,    0,  217,    0,    0,    0,  291,  289,    0,    0,
      295,  293,    0,  192,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  276,    0,    0,  152,  280,    0,
        0,    0,    0,    0,  174,  244,    0,    0,    0,    0,
      300,  300,  300,   34,  300,   50,   51,  300,   63,   62,

      300,  300,  300,   13,  300,  300,  300,  300,  300,  300,
      300,   12,  300,  300,  300,  300,  300,  300,  300,    0,
        0,  237,    0,  169,  290,    0,  249,  294,    0,  179,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,    0,    0,  157,  155,    0,  151,    0,    0,
      125,    0,  115,    0,  147,    0,    0,    0,    0,    0,
        0,  129,    0,  247,    0,    0,    0,    0,    0,    0,
      291,    0,    0,    0,  295,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
        0,    0,    0,  136,    0,    0,    0,  300,  300,   34,

      300,  300,  300,   13,  300,    9,  300,  300,  300,  300,
      300,  300,   12,  300,  300,  300,  300,  300,  300,   81,
       80,    0,    0,  169,    0,    0,    0,  193,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
      157,  151,    0,  153,  125,  115,  147,    0,    0,    0,
        0,    0,    0,  175,  247,    0,  245,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  266,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  194,
        0,    0,    0,    0,    0,  300,  300,  300,  300,  300,
      300,    9,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,    0,    0,    0,    0,  193,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  265,
      153,    0,    0,    0,    0,    0,  175,  245,    0,  137,
        0,    0,  158,  260,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  182,  132,    0,    0,    0,    0,
        0,    0,    0,    0,  284,    0,  300,   40,  300,   39,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,   41,  300,    0,    0,    0,    0,
        0,  267,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  265,    0,    0,    0,  195,    0,    0,  137,    0,

        0,    0,    0,  176,    0,    0,    0,  242,    0,    0,
        0,    0,    0,    0,    0,  188,    0,    0,    0,  284,
        0,   40,   39,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,   14,  300,   15,  300,  300,   16,   41,
      300,  300,    0,  159,    0,  261,    0,    0,  267,    0,
        0,    0,    0,    0,    0,    0,    0,  183,    0,  133,
        0,    0,    0,  195,    0,    0,    0,    0,    0,    0,
        0,  204,    0,    0,    0,    0,    0,    0,    0,  296,
        0,  166,    0,    0,    0,  300,   38,  300,   37,  300,
      300,  300,   17,  300,  300,  300,  300,   14,   15,  300,

       16,  300,  300,  159,  261,    0,    0,  177,    0,    0,
        0,  243,    0,    0,    0,    0,  183,  133,    0,    0,
        0,  189,    0,    0,    0,    0,    0,  190,    0,    0,
        0,    0,    0,    0,    0,  296,    0,  170,    0,    0,
       38,   37,  300,   18,  300,   17,  300,  300,  300,  300,
      300,  300,  300,    0,  177,    0,  205,    0,  243,    0,
        0,    0,    0,    0,    0,  189,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  262,   18,  300,   11,  300,  300,  300,    8,  300,
      300,  300,   36,  300,   35,    0,  191,  205,    0,    0,

        0,    0,    0,    0,    0,  167,    0,  171,    0,    0,
        0,    0,    0,    0,    0,  200,    0,    0,    0,    0,
       11,  300,  300,    8,  300,  300,   26,   36,   35,  191,
        0,    0,    0,    0,    0,    0,    0,  171,    0,    0,
      263,    0,    0,    0,  234,  230,    0,  180,    0,    0,
        0,  300,  300,  300,   26,    0,    0,    0,    0,  201,
        0,    0,    0,    0,    0,  263,    0,    0,  238,    0,
        0,  186,    0,  300,  300,  300,    0,    0,  235,    0,
      231,  201,    0,    0,  181,    0,    0,    0,    0,    0,
        0,    0,    0,  300,  300,  300,    0,  239,  235,  231,

        0,  181,    0,    0,  187,    0,    0,    0,    0,    0,
        0,  300,  300,  300,  239,    0,    0,  187,    0,    0,
      288,    0,  292,    0,    0,    0,  300,  300,  300,    0,
        0,    0,  288,  292,  202,    0,  222,  300,  300,  300,
        0,    0,    0,    0,  300,  300,  300,   19,    0,  203,
        0,    0,  223,    0,  300,  300,   22,   19,  203,    0,
      223,    0,  300,   24,   22,    0,  220,   24,    0,    0,
      221,  221,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2486] =
    {   0,
        0,   65, 3796, 3795, 3806, 3805, 3802, 3801,    0,    0,
        0,    0, 3792, 3791,   13,   17,    3,    5, 3805, 3814,
      129, 3799,  192, 3796,   19,   38, 3785,   84,  250,   25,
     3771, 3761, 3814,    0, 3814,    0,    0,    0, 3814, 3814,
     3790, 3814, 3814, 3781,    0,    0,   24,   90, 3780,  216,
       35,   40, 3766, 3756, 3755,    6, 3750, 3740, 3735, 3734,
        4,    8,   25,   32, 3749,   58,   61,   33, 3749, 3744,
     3814,   52,  244,  107, 3814,   55, 3777,  272, 3814, 3727,
       68, 3731,   66,   58, 3736, 3739,   71, 3728, 3733,   87,
       83,  156,  160, 3736,  212, 3715,  168, 3738,   60, 3753,

     3745,    0,    0,    0,    0, 3757, 3814, 3716, 3714, 3719,
     3713, 3710, 3715, 3714, 3704, 3724,  187, 3723, 3714, 3712,
     3710, 3709, 3711, 3719, 3693,  191, 3700,  195, 3716, 3700,
      239, 3706,  171, 3705,  250,  270, 3742, 3692,  173, 3696,
      231,  217, 3701, 3704,  228, 3693, 3698,  249,  282,  287,
      294, 3701,  294, 3680,  282, 3703,  320, 3684, 3687, 3687,
      286, 3682, 3694, 3677, 3685, 3682,  307, 3710, 3689, 3691,
      310,  219, 3678, 3678, 3676, 3679, 3668, 3672, 3678, 3665,
       31, 3669, 3666, 3664,  309, 3680, 3664, 3660, 3662, 3666,
     3671, 3657,  367, 3814, 3669, 3668, 3675, 3668, 3657, 3656,

     3647,  369, 3649, 3645, 3664, 3663, 3658, 3642, 3656, 3658,
     3662, 3646, 3652, 3634, 3668, 3647,  371,  373, 3639, 3647,
     3630, 3649, 3629, 3627, 3650, 3639, 3814,  355, 3626, 3629,
     3629,  301, 3624,  379, 3620, 3628, 3625,  346, 3653, 3632,
     3634,  338,  305, 3621, 3621, 3619, 3622, 3611, 3615, 3621,
     3608,  337, 3612, 3609, 3607,  342, 3623, 3607, 3603, 3605,
     3609, 3614, 3600, 3600, 3601, 3599,  355, 3611,  348, 3608,
     3609, 3606, 3597, 3596, 3603, 3602, 3601, 3585, 3583, 3583,
     3597, 3583, 3587, 3612, 3593, 3592, 3578, 3598,  387, 3589,
     3567, 3587, 3582, 3578, 3584, 3572, 3568, 3578, 3582, 3563,

     3561, 3560, 3582, 3562, 3561, 3573, 3557, 3571, 3561, 3556,
      364, 3582, 3565, 3546, 3552, 3572,  407, 3552,  410,  412,
      415, 3566, 3554, 3545, 3582,  417,  422, 3558, 3537, 3560,
     3567, 3554, 3554, 3552,  425, 3814, 3814, 3537,  432, 3554,
     3542,  434, 3548, 3527, 3543, 3533, 3534, 3532,  396, 3544,
      438, 3541, 3542, 3539,  442,  444, 3530, 3529, 3536, 3535,
     3534, 3518, 3516, 3516, 3530, 3516, 3520,  449, 3527, 3526,
     3512, 3532,  433, 3523, 3501,  454, 3517, 3513, 3519, 3507,
     3503, 3513, 3517, 3498, 3496, 3495,  461, 3498, 3497, 3509,
     3493, 3507, 3497, 3492,  458, 3488, 3485, 3491,  444, 3503,

     3494, 3484, 3502, 3488, 3483, 3497, 3494, 3493,  279, 3479,
     3472, 3486, 3474, 3492, 3485, 3486,  465, 3507, 3475, 3487,
     3478, 3477, 3491, 3475, 3478,  477, 3477, 3478,  333,  467,
     3462, 3458, 3455, 3483, 3471,  434, 3466, 3469, 3472, 3469,
     3451, 3452, 3464, 3814, 3453, 3475, 3461, 3464, 3463, 3448,
     3446, 3452, 3435,  483,  499, 3459,  487,  505,  490, 3446,
     3436, 3447, 3440,  507,  509,  511,  513, 3436, 3437, 3434,
     3445, 3432, 3425, 3428, 3431,  522,  526, 3434, 3424,  532,
      534,  540, 3428, 3423, 3421, 3418, 3424,  458, 3436, 3427,
      542,  544, 3417, 3435, 3421, 3416, 3430,  547, 3427, 3426,

      483, 3412, 3405, 3419, 3407, 3425, 3418, 3419,  549,  551,
      555, 3440, 3408, 3420, 3411, 3410, 3424, 3408, 3411,  558,
     3410,  560,  562, 3411,  466,  567, 3395, 3391, 3388,  569,
     3405,  479, 3400, 3403,  571,  576, 3406, 3403, 3385, 3386,
     3398,  578, 3387, 3409,  580,  587, 3395, 3398, 3397, 3392,
     3391, 3420, 3393, 3814, 3374,  444, 3389, 3387, 3381, 3369,
     3374, 3369, 3368, 3388, 3383, 3378, 3381,  509, 3367, 3375,
     3374,  589, 3399,  596, 3814,  408, 3359, 3352, 3362, 3376,
     3354, 3359,  591, 3392,  601, 3352, 3349, 3359, 3353,  607,
     3814, 3373, 3345, 3349, 3362, 3343, 3342, 3342, 3356, 3340,

     3339, 3351, 3814, 3353, 3341, 3330, 3351, 3345, 3348, 3329,
     3330, 3342, 3330, 3329,  610, 3814, 3814, 3339,  616, 3344,
     3337, 3326, 3324,  618,  620, 3372, 3369, 3344, 3331, 3344,
      626,  628,  630, 3343, 3318,  632, 3365, 3362, 3331, 3324,
      638, 3361, 3358,  645,  647, 3321,  653, 3324, 3319, 3318,
     3347, 3320,  655,  657,  660,  597, 3317, 3315, 3309, 3297,
     3302, 3297, 3296, 3316, 3311, 3306, 3309,  564, 3295, 3303,
     3302,  662,  664,  668,  673,  627, 3288, 3281, 3291, 3305,
     3283, 3288,  675,  678, 3282,  680, 3279, 3289, 3283,  683,
      685,  691, 3276, 3280,  693,  695, 3293, 3274, 3273, 3273,

     3287, 3271,  699, 3270, 3282,  701, 3283, 3266,  703,  709,
     3250, 3225,  713, 3218, 3221, 3210, 3203, 3202, 3238,   43,
     3814,   73,  108,  142,  188,  186,  226,  247,  279,  295,
      307,  339,  364,  379,  395,  508,  526,  520, 3814,  721,
      723,  585,  562,  564,  592, 3814,  583,  679,  589,  598,
      725,  727,  662,  636,  644,  635,  683,  663,  698,  675,
      685,  676,  676,  692,  693,  706,  692,  741,  701, 3814,
      693,  695,  704,  698,  693,  687,  751,  693,  712,  709,
      718,  757,  709,  699, 3814, 3814,  719,  762,  707,  766,
      768,  772,  774,  781,  783,  733,  724, 3814, 3814,  748,

      787, 3814, 3814,  789,  788,  788,  796,  798,  802,  752,
      750,  752,  791,  753,  813,  815,  817,  819,  821,  761,
      786,  768,  784,  774,  776,  773,  793,  790,  782,  786,
      780,  789,  793,  794,  801,  787,  842,  844,  846,  848,
      809,  810,  832,  853,  814,  828,  811,  808,  862,  813,
      820,  804,  845,  869,  871,  873,  823,  857,  823,  879,
      836,  827,  827,  843,  844,  858,  843,  889,  892,  894,
      859,  897,  899,  851,  853,  862,  857,  861, 3814, 3814,
      863,  855,  854,  866, 3814,  863,  858,  861,  861,  861,
      881,  900,  900, 3814,  904,  870,  877,  885,  893,  929,

      886,  934, 3814,  884, 3814,  879,  885,  906,  886,  941,
      894,  890,  888,  910,  907,  894,  906,  907,  913,  900,
      914,  915,  917,  930,  907,  909,  924,  962,  950,  966,
      913, 3814,  928,  916,  931,  928,  974,  980,  982,  931,
      989,  935,  936,  991,  995,  953, 1001,  988, 1013, 1021,
      945, 1009, 1028,  994,  994, 1034,  948,  951,  968, 1036,
     1038, 3814, 3814, 1044, 1046, 1052, 1016, 1020,  985, 1059,
     1061,  987,  986, 1063, 1065, 1067, 1069,  986, 1003, 1071,
     1004, 1000, 1019, 1020, 1021, 1041, 1060, 1080, 1083, 1072,
     1031, 1040, 1051, 1058, 1096, 1102, 1104, 1108, 1112, 1046,

     1114, 1116, 1118, 1042, 1054, 1078, 1066, 1066, 1064, 1087,
     1084, 1130, 1070, 1083, 1087, 1094, 1081, 1136, 1097, 1099,
     1140, 1090, 1092, 1107, 1145, 1147, 1149, 1097, 1156, 1153,
     1158, 1120, 1108, 1122, 1108, 1115, 1121, 1147, 1119, 1131,
     1127, 1130, 3814, 1131, 1122, 1138, 1143, 1133, 1145, 1132,
     1127, 1147, 1149, 1146, 1147, 1163, 1153, 1136, 1193, 1180,
     1196, 1157, 1150, 1159, 1149, 1142, 1167, 3814, 1164, 1150,
     1170, 1165, 1157, 1164, 3814, 3814, 1158, 1174, 1196, 1179,
     1187, 1163, 1197, 1183, 1222, 1224, 1217, 1182, 3814, 1187,
     1174, 1170, 1231, 1233, 1239, 1232, 1236, 1192, 1246, 1248,

     1206, 1195, 1254, 1253, 1253, 1200, 1262, 1264, 1215, 1220,
     1215, 1221, 1235, 1238, 1245, 1240, 1278, 1277, 1277, 1228,
     3814, 3814, 1231, 1253, 1230, 1294, 1285, 1284, 1300, 1287,
     1288, 3814, 3814, 1242, 1306, 1308, 1310, 1312, 1252, 1259,
     1314, 1296, 1267, 1318, 1322, 1281, 1279, 1281, 1327, 1284,
     1274, 1290, 1295, 1334, 1336, 1290, 1339, 1343, 1304, 1294,
     1289, 1309, 1311, 1309, 1310, 1327, 1315, 1356, 1358, 1360,
     1362, 1364, 1325, 1367, 1369, 1371, 1325, 1334, 1324, 1317,
     1379, 1340, 1326, 1346, 1340, 1332, 1339, 1388, 1390, 1392,
     1395, 1342, 1358, 1380, 1408, 1410, 1363, 1371, 1348, 1383,

     1374, 1413, 1370, 1416, 1418, 1420, 1424, 1381, 1371, 1366,
     1391, 1369, 1382, 1375, 1387, 1383, 1394, 1385, 1386, 1390,
     1393, 1400, 1387, 1393, 1407, 1399, 1392, 1408, 1393, 1398,
     1413, 1397, 1411, 1453, 1455, 1448, 1409, 1421, 1419, 1424,
     1430, 1414, 1409, 1420, 1426, 1416, 1428, 1429, 1438, 1440,
     1428, 1429, 1426, 1453, 1432, 1428, 1431, 1480, 1427, 1444,
     1434, 3814, 1465, 1486, 1487, 1487, 3814, 3814, 1443, 1495,
     1491, 1494, 1445, 1461, 3814, 3814, 1451, 1504, 3814, 3814,
     1456, 1510, 1451, 1471, 1475, 1468, 1471, 1460, 1466, 1486,
     1471, 1466, 3814, 3814, 1476, 1477, 1462, 1484, 3814, 3814,

     3814, 3814, 1465, 1527, 1529, 1494, 1472, 1485, 1478, 1535,
     1492, 1487, 1498, 1540, 1542, 1493, 1494, 1498, 1500, 1548,
     1509, 1551, 1498, 1504, 1519, 1511, 1504, 1520, 1505, 1510,
     1525, 1509, 1564, 1566, 1519, 1569, 1533, 1531, 1536, 1542,
     1575, 1577, 1524, 1535, 1541, 1531, 1542, 1543, 1585, 1587,
     1591, 1593, 1595, 1556, 1565, 1553, 1554, 1601, 1554, 1581,
     1560, 1557, 1560, 1570, 1610, 1612, 1614, 1566, 1617, 3814,
     1565, 3814, 1579, 1566, 1581, 1573, 1569, 1575, 1572, 1587,
     1588, 1581, 1586, 1578, 1586, 1594, 1591, 1581, 1605, 1600,
     1591, 1596, 1593, 1643, 1597, 1605, 1606, 1608, 1610, 1605,

     1610, 3814, 1601, 1612, 1604, 1616, 1601, 1606, 1602, 1605,
     1612, 1620, 3814, 1611, 1605, 1623, 1614, 3814, 1627, 1617,
     1628, 1613, 3814, 3814, 1670, 3814, 3814, 1672, 1674, 1635,
     1677, 1679, 1681, 1634, 1636, 1664, 1689, 1651, 1650, 1656,
     1696, 1640, 1699, 1649, 1642, 1652, 1705, 1707, 1655, 1711,
     1673, 1660, 1675, 1667, 1663, 1720, 1673, 1670, 1684, 1686,
     1679, 1684, 1676, 1685, 1693, 1690, 1680, 1704, 1699, 1690,
     1695, 1700, 1701, 1703, 1706, 1701, 1747, 1749, 1700, 1711,
     1703, 1715, 1700, 1756, 1758, 1709, 1705, 1708, 1715, 1724,
     1766, 1717, 1711, 1729, 1771, 1773, 1736, 1776, 1778, 1719,

     1733, 3814, 1728, 1784, 1754, 3814, 1788, 1734, 3814, 1751,
     1739, 1739, 1761, 1759, 1763, 1750, 1751, 1767, 1764, 1769,
     1807, 1764, 1760, 1757, 3814, 1771, 1751, 1814, 1766, 1763,
     1763, 1763, 1787, 1796, 1786, 1783, 1784, 3814, 1776, 1776,
     1811, 1773, 1790, 1792, 1773, 1797, 1835, 1837, 1843, 1845,
     1847, 1850, 1852, 1854, 1858, 1783, 1862, 1800, 1801, 1841,
     1864, 1869, 1828, 1817, 1842, 1832, 1874, 1876, 1838, 1880,
     1882, 1847, 1837, 1865, 1846, 1889, 1891, 1895, 1898, 1832,
     1900, 1904, 1853, 1906, 1853, 1911, 1876, 1913, 1916, 1862,
     1919, 1881, 1868, 1868, 1890, 1888, 1892, 1879, 1881, 1896,

     1894, 1899, 1887, 1884, 1939, 1900, 1880, 1943, 1945, 1897,
     1894, 1894, 1894, 1918, 1927, 1916, 1914, 1915, 1959, 1961,
     1963, 1907, 1914, 1949, 1967, 1969, 1930, 1972, 1956, 1936,
     3814, 1978, 1965, 1983, 1930, 1985, 1973, 1989, 1950, 1942,
     1963, 1943, 1961, 1943, 1963, 1949, 1977, 1949, 3814, 1968,
     2007, 2009, 1972, 1956, 3814, 3814, 1972, 2014, 2016, 3814,
     3814, 3814, 1967, 1968, 1975, 1967, 1984, 1969, 1970, 1979,
     1973, 1974, 2010, 2013, 2032, 1980, 2035, 2034, 2034, 2041,
     2047, 2049, 2051, 2057, 1989, 1991, 2059, 1998, 2061, 1999,
     2046, 2028, 2066, 2013, 2069, 2017, 2076, 2034, 2029, 2033,

     2082, 2084, 2086, 2060, 2088, 2049, 2091, 2093, 2097, 2099,
     2101, 2044, 2103, 2107, 2109, 2115, 2064, 2119, 2121, 2061,
     2081, 2063, 2086, 2069, 2088, 2073, 2101, 2073, 2130, 2094,
     2077, 2135, 2137, 2139, 2141, 2102, 2146, 2148, 2153, 2157,
     2093, 2100, 2110, 2105, 2121, 2106, 2164, 2166, 2169, 2173,
     2115, 2117, 2175, 2157, 2141, 2130, 2181, 2183, 2176, 2167,
     2189, 2191, 2178, 3814, 2137, 2139, 2160, 2150, 2154, 2152,
     2156, 2151, 2158, 2157, 2206, 2167, 2154, 3814, 2210, 2158,
     2186, 2166, 2159, 2160, 3814, 3814, 2176, 2181, 2180, 2172,
     2170, 2171, 2223, 2225, 2171, 3814, 3814, 2229, 3814, 3814,

     2194, 2196, 2235, 2238, 2240, 2197, 2192, 2206, 2208, 2201,
     2247, 2250, 2197, 2224, 2207, 2215, 2203, 2259, 2262, 2227,
     2216, 2268, 2270, 2274, 2276, 2253, 2278, 2281, 2283, 2286,
     2232, 2233, 2253, 2243, 2247, 2245, 2249, 2244, 2251, 2299,
     2301, 2249, 2248, 2304, 2306, 2308, 2310, 2312, 2315, 2317,
     2320, 2322, 2326, 2328, 2333, 2270, 2304, 2287, 2280, 2282,
     2339, 2341, 2344, 2346, 2348, 2309, 2314, 2304, 2297, 2299,
     2356, 2318, 2319, 2324, 2364, 2320, 2311, 2330, 2323, 2312,
     2312, 2330, 2331, 2315, 2323, 2334, 2326, 3814, 2332, 2327,
     2331, 2347, 2330, 3814, 2332, 2342, 2343, 2337, 2327, 2387,

     2371, 2345, 2335, 2392, 2394, 2396, 2340, 2349, 2354, 2345,
     2349, 2350, 2405, 2366, 2357, 2369, 2357, 2357, 2413, 3814,
     3814, 2359, 2361, 2419, 2380, 2385, 2423, 2425, 2372, 2391,
     2384, 2373, 2373, 2391, 2392, 2376, 2384, 2436, 2398, 2440,
     2442, 2444, 2446, 2448, 2450, 2452, 2456, 2409, 2407, 2411,
     2427, 2411, 2463, 2465, 2467, 2469, 2471, 2473, 2425, 2435,
     2440, 2424, 2439, 2433, 2435, 2438, 3814, 2429, 2436, 2446,
     2448, 2455, 2436, 2451, 2443, 2477, 2456, 2455, 2439, 3814,
     2453, 2445, 2461, 2501, 2454, 2504, 2506, 2457, 2458, 2460,
     2466, 2512, 2473, 2460, 2476, 2474, 2476, 2467, 2468, 2468,

     2470, 2526, 2472, 2492, 2475, 2483, 2485, 2533, 2535, 2481,
     2488, 2498, 2500, 2507, 2488, 2503, 2495, 2529, 2547, 2551,
     2553, 2508, 2497, 2556, 2513, 2505, 2560, 2563, 2565, 2567,
     2530, 2521, 3814, 3814, 2517, 2532, 2533, 2527, 2519, 2521,
     2523, 2562, 2544, 2549, 3814, 3814, 2529, 2543, 2530, 2545,
     2538, 2543, 2545, 2590, 2592, 2553, 2595, 2598, 2600, 2602,
     2556, 2547, 2551, 2557, 2555, 2555, 2573, 2562, 2578, 2616,
     2618, 2575, 2621, 2623, 2625, 2609, 2628, 2633, 2590, 2595,
     2638, 2641, 2587, 2589, 2591, 2630, 2612, 2617, 2651, 2654,
     2602, 2657, 2604, 2619, 2661, 2663, 2618, 2623, 2670, 2628,

     2632, 2635, 2619, 3814, 2636, 2623, 2644, 3814, 2629, 2644,
     2634, 2632, 2647, 2685, 2654, 3814, 2647, 2648, 2645, 2691,
     2643, 2694, 2696, 2698, 2701, 2648, 2654, 2705, 2653, 2652,
     2659, 2672, 2713, 2716, 2720, 2722, 2660, 2724, 2728, 2730,
     2667, 2675, 2732, 2735, 2739, 2741, 2681, 2743, 2745, 2693,
     2714, 2750, 2701, 2716, 2707, 2705, 2759, 2761, 2763, 2766,
     2720, 2735, 2769, 2771, 2732, 2734, 2731, 2727, 2725, 2739,
     2763, 3814, 2745, 2726, 2737, 2729, 2760, 2738, 2789, 2791,
     2742, 3814, 2739, 2745, 2740, 2797, 2799, 2801, 2805, 2807,
     2748, 2809, 2812, 2777, 2771, 2762, 2770, 2819, 2824, 2772,

     2826, 2780, 2770, 2830, 2832, 2793, 2835, 2837, 2839, 2804,
     2842, 2844, 2789, 2799, 2791, 2822, 2851, 2855, 2803, 2807,
     2859, 2861, 2863, 2810, 2816, 2811, 2823, 3814, 2815, 2822,
     2821, 2815, 2832, 2824, 2837, 2879, 2850, 3814, 2838, 2827,
     2883, 2885, 2887, 2889, 2891, 2893, 2850, 2838, 2897, 2858,
     2845, 2902, 2906, 2908, 2912, 2914, 2917, 2856, 2921, 2860,
     2862, 2883, 2874, 2887, 2900, 2930, 2932, 2934, 2936, 2885,
     2883, 2887, 2899, 2884, 2902, 2902, 2889, 2887, 2902, 2897,
     2913, 3814, 2952, 2954, 2956, 2900, 2917, 2959, 2961, 2934,
     2964, 2966, 2969, 2971, 2974, 2976, 2981, 2983, 2922, 2946,

     2946, 2933, 2931, 2946, 2941, 2993, 2995, 2997, 2963, 3000,
     2946, 2966, 2963, 2950, 2951, 2975, 2967, 2964, 2953, 2971,
     3013, 2960, 2988, 3018, 2968, 3021, 3023, 3025, 3027, 3029,
     2990, 2977, 2978, 3036, 2993, 2993, 2981, 3040, 3001, 3043,
     3045, 3002, 2992, 2994, 3814, 3814, 2994, 3814, 3002, 3012,
     3009, 3026, 3004, 3001, 3059, 3006, 3062, 3064, 3066, 3069,
     3015, 3072, 3024, 3034, 3031, 3082, 3027, 3029, 3814, 3030,
     3042, 3814, 3043, 3036, 3033, 3045, 3091, 3093, 3095, 3097,
     3099, 3101, 3049, 3104, 3109, 3064, 3113, 3068, 3065, 3062,
     3072, 3082, 3076, 3065, 3077, 3072, 3124, 3126, 3129, 3131,

     3088, 3134, 3100, 3137, 3140, 3098, 3143, 3145, 3097, 3107,
     3093, 3105, 3100, 3103, 3154, 3106, 3116, 3161, 3103, 3163,
     3165, 3167, 3169, 3128, 3127, 3118, 3123, 3125, 3121, 3134,
     3134, 3125, 3183, 3185, 3814, 3138, 3814, 3137, 3133, 3189,
     3191, 3150, 3194, 3152, 3142, 3198, 3200, 3204, 3207, 3210,
     3158, 3215, 3217, 3157, 3219, 3223, 3225, 3227, 3231, 3165,
     3234, 3174, 3238, 3240, 3242, 3181, 3814, 3244, 3246, 3248,
     3250, 3253, 3814, 3265, 3270, 3275, 3280, 3285, 3290, 3295,
     3300, 3305, 3309, 3314, 3319
    } ;

static yyconst flex_int16_t yy_def[2486] =
    {   0,
     2474, 2474, 2475, 2475, 2476, 2476, 2477, 2477, 2478, 2478,
     2478, 2478, 2479, 2479, 2480, 2480, 2481, 2481, 2473, 2473,
     2473, 2473,   21, 2473,   23,   23,   23,   23, 2473, 2473,
       23,   23, 2473, 2482, 2473, 2483, 2484, 2485, 2473, 2473,
     2473, 2473, 2473, 2473,   21,   23,   23,   23,   23,   23,
       29, 2473,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2473,   23,   23,   23, 2473,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,

       23, 2482, 2483, 2484, 2485, 2473, 2473,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473,   23, 2473,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2473, 2473,   23,   23,   23,
       23,   23,   23,   23,   23, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,
       23,   23,   23,   23,   23, 2473, 2473,   23,   23,   23,
       23,   23,   23,   23,   23, 2473, 2473,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2473, 2473,   23,   23,
       23, 2473, 2473,   23,   23,   23,   23, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2473, 2473,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2473, 2473,   23,

       23, 2473, 2473,   23, 2473, 2473,   23,   23,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2473, 2473,   23,   23,   23,   23,   23,
       23, 2473, 2473,   23,   23,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473,   23,   23,   23,   23, 2473, 2473,   23,   23,   23,

       23,   23,   23, 2473, 2473,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2473, 2473,   23,
     2473, 2473,   23,   23,   23,   23, 2473, 2473,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473,   23,   23, 2473, 2473, 2473, 2473,   23,   23,
     2473, 2473,   23,   23, 2473, 2473,   23,   23, 2473, 2473,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2473, 2473,   23,   23,   23,   23, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,
       23,   23, 2473, 2473,   23, 2473, 2473,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473,   23,   23,   23,   23, 2473, 2473,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
       23,   23,   23,   23,   23, 2473, 2473,   23, 2473, 2473,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2473, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473,   23,   23,   23,   23, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473,   23,   23,   23, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473,   23,   23,   23, 2473, 2473, 2473, 2473,

     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473,   23,   23,   23, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473,   23,   23,   23, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473,   23,   23,   23,
     2473, 2473, 2473, 2473,   23,   23,   23,   23, 2473, 2473,
     2473, 2473, 2473, 2473,   23,   23,   23,   23, 2473, 2473,
     2473, 2473,   23,   23,   23, 2473, 2473,   23, 2473, 2473,
     2473, 2473,    0, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473
    } ;

static yyconst flex_int16_t yy_nxt[3880] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2473,   40,
       44,   41,   44, 2473,   31,   41,   99,   99,   48,   32,
       50,   50,   50,   48, 2473,   50,   50,   50, 2473,   72,
       72,   99,   99,   53,  109,  115, 2473,  117,   53,   73,
       73,   73, 2473,   72,   72,  116,   76,   76,  110,   74,
      118,   99,   99,  119,   33,   20,   21,   21,   20,   22,
      121,   24,  131,   25,   26,   27,   28,   28,   28,   29,
       74,   30,   20,  120,  132,   76,   76,  297,  298,   31,
      122,   72,   72,   48,   32,   50,   50,   50,  124,  127,

      882,   73,   73,   73,  125,   74,  158,  163,  161,  164,
      126,   74,  162,  128,  135,  135,  129,  159,  136,  136,
      136,  174,  167,  130,  883,  172,   74,  168,  169,   33,
       45,   45,   74,  173,   46,  175,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  884,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   55,   56,
       57,   58,   59,   60,   46,   61,   46,   46,   62,   63,
       64,   65,   46,   46,   46,   66,   67,   68,   69,   70,
       46,   46,   46,   46,   46,  176,  217,  217,  181,  885,

       46,   46,   46,   46,   46,   46, 2473,  204, 2473,  177,
      218,  229,  178,  179,  180,  182,   46,   76,   76,  190,
      224,   46,  230,  205,  191,   48,  225,   50,   50,   50,
      886,   46,   46,   46,   46,   46,   46,   74,   46,  887,
      214,   46,   46,   46,   46,   72,   72,  215,   46,   46,
       46,   46,   46,   77,  184,   73,   73,   73,   74,  221,
       78,  136,  136,  136,  185,   74,  234,   79,  235,  186,
      187,   72,   72,  232,  188,  222,  287,  233,  888,  238,
      288,  136,  136,  136,  239,  240,   74,  243,   80,   81,
       82,   83,   84,   85,   86,  244,   87,   88,  563,   89,

       90,   91,   92,   93,  889,   94,   95,   96,   97,   98,
      138,  139,  140,  141,  142,  143,  144,  890,  145,  146,
      245,  147,  148,  149,  150,  151,  247,  152,  153,  154,
      155,  156,  252,  261,  246,  564,  255,  891,  262,  270,
      248,  264,  271,  249,  250,  251,  256,  265,  277,  253,
      285,  257,  258,  278,  352,  266,  259,  353,  302,  892,
      279,  286,  371,  280,  281,  303,  372,  304,   72,   72,
      319,  319,  217,  217,  335,  335,  346,  336,  369,  337,
      355,  355,  347,  588,  320,  589,  218,  361,  893,  370,
      348,  386,  362,  381,  382,  356,  447,  399,  387,  363,

      388,  400,  364,  365,  402,  403,  423,  424,  454,  454,
      448,  319,  319,  457,  457,  425,  458,  458,  464,  464,
      894,  357,  455,  466,  466,  320,  335,  335,  895,  336,
      459,  337,  465,  476,  476,  480,  480,  467,  488,  491,
      491,  896,  489,  355,  355,  498,  498,  477,  743,  481,
      510,  510,  517,  518,  492,  522,  522,  552,  356,  545,
      545,  519,  535,  535,  744,  511,  572,  572,  590,  590,
      523,  651,  553,  512,  546,  573,  597,  536,  583,  583,
      598,  574,  722,  591,  454,  454,  652,  584,  457,  457,
      547,  619,  619,  585,  493,  494,  524,  537,  455,  723,

      615,  615,  663,  616,  548,  617,  458,  458,  464,  464,
      624,  624,  466,  466,  625,  625,  688,  626,  689,  627,
      459,  699,  465,  476,  476,  700,  467,  636,  636,  735,
      637,  736,  638,  480,  480,  641,  641,  477,  642,  664,
      643,  644,  644,  491,  491,  655,  655,  481,  498,  498,
      672,  672,  510,  510,  897,  645,  674,  674,  492,  683,
      683,  522,  522,  686,  686,  673,  898,  511,  690,  690,
      695,  695,  535,  535,  684,  899,  523,  703,  703,  709,
      709,  545,  545,  691,  833,  696,  834,  536,  713,  713,
      572,  572,  583,  583,  710,  901,  546,  741,  741,  573,

      697,  584,  752,  752,  902,  574,  903,  585,  590,  590,
      742,  615,  615,  904,  616,  753,  617,  619,  619,  624,
      624,  625,  625,  591,  626,  905,  627,  790,  790,  792,
      792,  794,  794,  636,  636,  820,  637,  908,  638,  641,
      641,  791,  642,  793,  643,  795,  644,  644,  804,  804,
      909,  805,  821,  806,  808,  808,  815,  815,  817,  817,
      645,  655,  655,  672,  672,  838,  838,  841,  809,  674,
      674,  816,  911,  818,  839,  839,  683,  683,  673,  849,
      849,  686,  686,  842,  690,  690,  854,  854,  912,  840,
      913,  684,  855,  855,  695,  695,  860,  860,  914,  691,

      703,  703,  869,  869,  709,  709,  915,  856,  906,  696,
      873,  873,  907,  819,  713,  713,  916,  870,  917,  710,
      918,  857,  900,  900,  741,  741,  910,  910,  752,  752,
      919,  920,  921,  922,  923,  924,  925,  742,  927,  931,
      926,  753,  928,  928,  932,  933,  934,  935,  936,  937,
      940,  929,  938,  938,  941,  942,  943,  930,  944,  944,
      946,  947,  948,  949,  949,  951,  939,  790,  790,  952,
      952,  957,  945,  792,  792,  953,  953,  950,  954,  958,
      955,  791,  794,  794,  956,  956,  959,  793,  960,  960,
      804,  804,  962,  805,  963,  806,  795,  964,  964,  808,

      808,  969,  961,  966,  966,  970,  967,  971,  968,  972,
      973,  965,  978,  809,  815,  815,  974,  974,  817,  817,
      975,  975,  976,  976,  979,  980,  981,  982,  983,  816,
      984,  985,  986,  818,  987,  988,  989,  977,  990,  991,
      992,  993,  994,  995,  995,  838,  838,  839,  839,  997,
      997,  998,  999, 1000, 1001, 1001, 1003, 1004,  996, 1006,
     1007, 1005,  840,  849,  849, 1008, 1009, 1010, 1011, 1002,
      854,  854,  855,  855, 1012, 1012, 1013, 1014, 1016, 1015,
      860,  860, 1017, 1018, 1019, 1020, 1021,  856, 1022, 1024,
     1025, 1025, 1023,  869,  869, 1027, 1027, 1028, 1029, 1029,

      873,  873, 1031, 1032, 1033, 1026, 1034, 1035,  870, 1036,
     1037, 1038, 1039, 1030, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1047, 1057,
      900,  900, 1058, 1062, 1052, 1059, 1059, 1063, 1064, 1065,
     1053, 1066,  910,  910, 1060, 1067, 1068, 1069, 1070, 1071,
     1061, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1082, 1083, 1084,  928,  928, 1081, 1085, 1086, 1086, 1088,
     1089, 1090,  929, 1091, 1092, 1093, 1093, 1098,  930, 1101,
     1087,  938,  938, 1095, 1095, 1102, 1096, 1106, 1097, 1094,
     1099, 1099,  944,  944, 1120,  939, 1103, 1103, 1121, 1104,

     1122, 1105, 1107, 1107, 1100, 1123,  945, 1109, 1124, 1110,
      952,  952, 1111, 1112,  949,  949, 1108, 1125, 1113, 1114,
     1132, 1115, 1117, 1117, 1116, 1118, 1133, 1119,  950,  953,
      953, 1134,  954, 1139,  955,  956,  956,  960,  960, 1126,
     1126, 1140, 1127, 1142, 1128,  964,  964, 1129, 1129, 1143,
     1130,  961, 1131,  966,  966, 1146,  967, 1147,  968,  965,
     1135, 1135, 1137, 1137,  974,  974,  975,  975,  976,  976,
     1141, 1141, 1144, 1144, 1148, 1136, 1149, 1138, 1150, 1151,
     1152, 1154, 1154,  977, 1157, 1157, 1164, 1145, 1153, 1165,
     1159, 1160, 1161, 1166, 1167, 1173, 1155,  995,  995, 1158,

     1177, 1156, 1162, 1168, 1168,  997,  997, 1178, 1163, 1169,
     1169, 1179,  996, 1171, 1171, 1001, 1001, 1174, 1174, 1175,
     1175, 1180, 1181, 1182, 1170, 1183, 1184, 1185, 1172, 1186,
     1002, 1012, 1012, 1187, 1176, 1188, 1189, 1190, 1190, 1193,
     1194, 1195, 1195, 1199, 1200, 1201, 1025, 1025, 1202, 1202,
     1027, 1027, 1191, 1203, 1204, 1204, 1196, 1029, 1029, 1205,
     1205, 1026, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1197,
     1214, 1215, 1030, 1216, 1206, 1198, 1217, 1218, 1192, 1219,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1232, 1231, 1233, 1059, 1059, 1234, 1235, 1235, 1237,

     1238, 1239, 1240, 1060, 1241, 1242, 1243, 1244, 1245, 1061,
     1236, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1252, 1254,
     1255, 1256, 1257, 1258, 1258, 1086, 1086, 1259, 1260, 1261,
     1262, 1263, 1093, 1093, 1264, 1264, 1267, 1265, 1087, 1266,
     1095, 1095, 1268, 1096, 1269, 1097, 1094, 1099, 1099, 1270,
     1270, 1273, 1271, 1274, 1272, 1103, 1103, 1275, 1104, 1276,
     1105, 1100, 1277, 1107, 1107, 1278, 1278, 1281, 1279, 1282,
     1280, 1283, 1284, 1285, 1286, 1290, 1288, 1108, 1292, 1117,
     1117, 1293, 1118, 1294, 1119, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1287, 1289, 1302, 1126, 1126, 1291, 1127, 1303,

     1128, 1129, 1129, 1306, 1130, 1307, 1131, 1135, 1135, 1304,
     1304, 1137, 1137, 1305, 1305, 1141, 1141, 1308, 1309, 1144,
     1144, 1311, 1136, 1310, 1310, 1312, 1138, 1313, 1314, 1314,
     1316, 1317, 1318, 1319, 1145, 1154, 1154, 1320, 1320, 1321,
     1157, 1157, 1323, 1315, 1322, 1322, 1324, 1325, 1326, 1327,
     1155, 1328, 1329, 1332, 1330, 1158, 1331, 1168, 1168, 1169,
     1169, 1333, 1333, 1171, 1171, 1334, 1334, 1335, 1174, 1174,
     1175, 1175, 1336, 1336, 1170, 1337, 1338, 1339, 1172, 1340,
     1341, 1341, 1343, 1344, 1345, 1176, 1346, 1347, 1348, 1349,
     1349, 1351, 1351, 1190, 1190, 1342, 1353, 1353, 1354, 1355,

     1356, 1359, 1357, 1360, 1350, 1361, 1352, 1362, 1191, 1195,
     1195, 1358, 1358, 1363, 1202, 1202, 1364, 1204, 1204, 1205,
     1205, 1365, 1365, 1368, 1196, 1366, 1366, 1369, 1370, 1371,
     1372, 1373, 1374, 1375, 1206, 1376, 1377, 1378, 1379, 1380,
     1367, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1394, 1235, 1235, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1236,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
     1416, 1258, 1258, 1417, 1418, 1419, 1420, 1264, 1264, 1421,
     1265, 1423, 1266, 1424, 1425, 1426, 1270, 1270, 1422, 1271,

     1427, 1272, 1428, 1429, 1430, 1278, 1278, 1431, 1279, 1434,
     1280, 1432, 1432, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1433, 1447, 1448, 1304, 1304,
     1305, 1305, 1449, 1450, 1451, 1452, 1310, 1310, 1453, 1454,
     1455, 1314, 1314, 1456, 1456, 1457, 1458, 1459, 1460, 1320,
     1320, 1461, 1322, 1322, 1462, 1463, 1315, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1333, 1333, 1334, 1334, 1472,
     1336, 1336, 1473, 1474, 1475, 1476, 1341, 1341, 1477, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1349, 1349, 1484, 1484,
     1486, 1342, 1351, 1351, 1485, 1485, 1353, 1353, 1487, 1488,

     1489, 1350, 1358, 1358, 1490, 1491, 1492, 1352, 1493, 1494,
     1495, 1365, 1365, 1366, 1366, 1496, 1496, 1497, 1498, 1498,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1367, 1508,
     1509, 1510, 1511, 1499, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1394, 1394, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1547, 1549, 1549, 1551, 1551, 1553, 1554, 1554,
     1432, 1432, 1557, 1557, 1558, 1548, 1559, 1550, 1560, 1552,
     1561, 1561, 1555, 1564, 1433, 1565, 1566, 1567, 1567, 1569,

     1570, 1570, 1573, 1574, 1562, 1575, 1576, 1576, 1578, 1578,
     1580, 1568, 1581, 1581, 1571, 1583, 1584, 1585, 1586, 1587,
     1577, 1456, 1456, 1579, 1588, 1589, 1590, 1582, 1591, 1592,
     1593, 1563, 1594, 1556, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1603, 1604, 1605, 1572, 1606, 1607, 1477, 1477,
     1608, 1608, 1610, 1611, 1612, 1613, 1614, 1484, 1484, 1485,
     1485, 1615, 1616, 1617, 1618, 1609, 1619, 1620, 1620, 1622,
     1623, 1624, 1625, 1625, 1496, 1496, 1627, 1498, 1498, 1628,
     1628, 1629, 1621, 1630, 1631, 1632, 1632, 1626, 1635, 1636,
     1636, 1639, 1499, 1640, 1633, 1641, 1642, 1643, 1637, 1644,

     1634, 1645, 1646, 1647, 1638, 1648, 1649, 1650, 1651, 1651,
     1653, 1654, 1655, 1656, 1657, 1658, 1658, 1660, 1661, 1662,
     1663, 1664, 1665, 1652, 1666, 1667, 1668, 1669, 1670, 1671,
     1659, 1672, 1673, 1674, 1675, 1676, 1547, 1547, 1677, 1677,
     1685, 1678, 1686, 1679, 1549, 1549, 1680, 1680, 1551, 1551,
     1548, 1681, 1681, 1682, 1682, 1554, 1554, 1687, 1550, 1684,
     1684, 1688, 1552, 1557, 1557, 1561, 1561, 1683, 1690, 1555,
     1689, 1689, 1691, 1692, 1694, 1567, 1567, 1695, 1695, 1562,
     1696, 1570, 1570, 1697, 1697, 1698, 1699, 1700, 1701, 1568,
     1576, 1576, 1702, 1702, 1704, 1571, 1578, 1578, 1693, 1703,

     1703, 1581, 1581, 1706, 1577, 1705, 1705, 1707, 1707, 1709,
     1712, 1579, 1710, 1710, 1713, 1713, 1582, 1715, 1715, 1717,
     1718, 1718, 1708, 1720, 1721, 1722, 1723, 1711, 1724, 1714,
     1725, 1726, 1716, 1727, 1728, 1719, 1729, 1730, 1731, 1732,
     1733, 1733, 1735, 1736, 1608, 1608, 1737, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1734, 1745, 1746, 1750, 1609,
     1747, 1747, 1620, 1620, 1749, 1749, 1751, 1752, 1625, 1625,
     1753, 1753, 1754, 1628, 1628, 1748, 1755, 1621, 1756, 1632,
     1632, 1757, 1760, 1626, 1758, 1758, 1636, 1636, 1633, 1761,
     1762, 1762, 1764, 1765, 1634, 1637, 1766, 1759, 1767, 1768,

     1769, 1638, 1770, 1763, 1771, 1772, 1773, 1774, 1651, 1651,
     1775, 1775, 1776, 1777, 1778, 1658, 1658, 1779, 1779, 1780,
     1781, 1782, 1783, 1652, 1784, 1785, 1786, 1787, 1788, 1789,
     1659, 1790, 1791, 1793, 1793, 1795, 1677, 1677, 1796, 1678,
     1797, 1679, 1680, 1680, 1801, 1792, 1802, 1794, 1681, 1681,
     1682, 1682, 1798, 1798, 1805, 1799, 1806, 1800, 1684, 1684,
     1803, 1803, 1689, 1689, 1683, 1807, 1810, 1811, 1811, 1813,
     1695, 1695, 1814, 1815, 1804, 1816, 1808, 1697, 1697, 1817,
     1820, 1812, 1809, 1818, 1818, 1702, 1702, 1703, 1703, 1705,
     1705, 1821, 1707, 1707, 1822, 1822, 1826, 1819, 1823, 1823,

     1710, 1710, 1825, 1825, 1713, 1713, 1829, 1708, 1827, 1827,
     1715, 1715, 1831, 1824, 1832, 1711, 1828, 1828, 1833, 1714,
     1718, 1718, 1830, 1830, 1834, 1716, 1835, 1836, 1837, 1838,
     1839, 1840, 1840, 1842, 1843, 1719, 1844, 1844, 1733, 1733,
     1846, 1846, 1847, 1847, 1849, 1856, 1841, 1737, 1737, 1850,
     1850, 1845, 1857, 1734, 1852, 1852, 1858, 1848, 1854, 1854,
     1859, 1860, 1861, 1866, 1851, 1747, 1747, 1862, 1862, 1853,
     1749, 1749, 1867, 1855, 1863, 1863, 1753, 1753, 1868, 1869,
     1748, 1870, 1871, 1871, 1758, 1758, 1872, 1873, 1876, 1864,
     1875, 1875, 1762, 1762, 1877, 1874, 1878, 1759, 1879, 1880,

     1881, 1882, 1883, 1884, 1885, 1763, 1886, 1775, 1775, 1887,
     1888, 1779, 1779, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
     1896, 1897, 1898, 1899, 1793, 1793, 1900, 1900, 1901, 1865,
     1798, 1798, 1902, 1799, 1903, 1800, 1803, 1803, 1794, 1904,
     1904, 1905, 1905, 1907, 1908, 1909, 1911, 1912, 1811, 1811,
     1804, 1913, 1913, 1914, 1915, 1906, 1916, 1917, 1918, 1910,
     1818, 1818, 1812, 1919, 1919, 1922, 1920, 1923, 1921, 1822,
     1822, 1823, 1823, 1925, 1819, 1924, 1924, 1825, 1825, 1827,
     1827, 1926, 1828, 1828, 1927, 1927, 1824, 1830, 1830, 1929,
     1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1939, 1928,

     1840, 1840, 1938, 1938, 1940, 1844, 1844, 1941, 1941, 1846,
     1846, 1847, 1847, 1942, 1942, 1841, 1943, 1943, 1850, 1850,
     1845, 1945, 1945, 1852, 1852, 1948, 1848, 1946, 1946, 1854,
     1854, 1944, 1949, 1851, 1947, 1947, 1950, 1951, 1853, 1952,
     1953, 1953, 1862, 1862, 1855, 1863, 1863, 1955, 1955, 1956,
     1956, 1958, 1959, 1960, 1961, 1954, 1962, 1871, 1871, 1963,
     1864, 1964, 1965, 1966, 1957, 1875, 1875, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1900, 1900,
     1988, 1990, 1991, 1904, 1904, 1905, 1905, 1992, 1992, 1993,

     1994, 1995, 1996, 1989, 1997, 1998, 1913, 1913, 1999, 1906,
     2000, 2001, 2002, 2003, 1919, 1919, 2004, 1920, 2005, 1921,
     1924, 1924, 2006, 2007, 1927, 1927, 2008, 2008, 2009, 2010,
     2011, 2012, 2013, 2014, 2015, 2016, 2017, 1938, 1938, 1928,
     2018, 2019, 2019, 1941, 1941, 1942, 1942, 1943, 1943, 2021,
     2021, 1945, 1945, 1946, 1946, 2022, 2020, 1947, 1947, 2023,
     2024, 2025, 1944, 2026, 1953, 1953, 2027, 2027, 1955, 1955,
     1956, 1956, 2028, 2028, 2029, 2029, 2031, 2032, 2033, 1954,
     2034, 2035, 2036, 2037, 2038, 1957, 2039, 2040, 2041, 2030,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,

     2052, 2053, 2054, 2054, 2056, 2057, 2057, 2059, 2059, 2061,
     2062, 2063, 2064, 1992, 1992, 2065, 2066, 2055, 2067, 2058,
     2068, 2060, 2069, 2070, 2071, 2072, 2073, 2074, 2074, 2076,
     2077, 2078, 2079, 2080, 2008, 2008, 2081, 2081, 2083, 2084,
     2085, 2075, 2086, 2087, 2088, 2089, 2090, 2091, 2019, 2019,
     2093, 2082, 2092, 2092, 2021, 2021, 2094, 2095, 2095, 2097,
     2098, 2027, 2027, 2020, 2028, 2028, 2029, 2029, 2099, 2099,
     2100, 2101, 2096, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2030, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
     2119, 2054, 2054, 2120, 2120, 2121, 2057, 2057, 2110, 2122,

     2122, 2059, 2059, 2123, 2123, 2124, 2055, 2125, 2126, 2127,
     2058, 2128, 2129, 2130, 2131, 2060, 2132, 2133, 2133, 2135,
     2135, 2137, 2138, 2138, 2074, 2074, 2140, 2140, 2141, 2143,
     2143, 2134, 2147, 2136, 2145, 2145, 2139, 2148, 2075, 2081,
     2081, 2142, 2149, 2149, 2144, 2150, 2151, 2152, 2153, 2146,
     2155, 2156, 2157, 2157, 2082, 2159, 2159, 2161, 2092, 2092,
     2162, 2163, 2095, 2095, 2164, 2164, 2154, 2158, 2165, 2166,
     2160, 2099, 2099, 2167, 2168, 2169, 2170, 2096, 2171, 2172,
     2173, 2174, 2175, 2176, 2177, 2178, 2179, 2179, 2181, 2182,
     2183, 2184, 2120, 2120, 2185, 2122, 2122, 2123, 2123, 2186,

     2186, 2180, 2188, 2188, 2190, 2191, 2192, 2192, 2194, 2195,
     2196, 2197, 2200, 2187, 2133, 2133, 2189, 2198, 2198, 2202,
     2193, 2135, 2135, 2199, 2199, 2138, 2138, 2203, 2134, 2201,
     2201, 2140, 2140, 2143, 2143, 2136, 2204, 2204, 2206, 2139,
     2145, 2145, 2205, 2205, 2207, 2207, 2149, 2149, 2144, 2209,
     2210, 2211, 2211, 2213, 2214, 2146, 2215, 2216, 2219, 2208,
     2157, 2157, 2217, 2217, 2159, 2159, 2212, 2218, 2218, 2220,
     2221, 2221, 2164, 2164, 2223, 2158, 2224, 2225, 2226, 2160,
     2227, 2228, 2229, 2230, 2231, 2222, 2232, 2233, 2234, 2235,
     2179, 2179, 2236, 2236, 2237, 2238, 2239, 2240, 2186, 2186,

     2241, 2241, 2188, 2188, 2245, 2180, 2242, 2242, 2243, 2243,
     2192, 2192, 2187, 2246, 2246, 2247, 2189, 2248, 2249, 2250,
     2198, 2198, 2244, 2251, 2193, 2199, 2199, 2201, 2201, 2252,
     2253, 2204, 2204, 2205, 2205, 2254, 2207, 2207, 2255, 2255,
     2256, 2256, 2258, 2211, 2211, 2259, 2259, 2260, 2261, 2262,
     2263, 2208, 2217, 2217, 2264, 2257, 2218, 2218, 2212, 2265,
     2221, 2221, 2266, 2266, 2267, 2267, 2269, 2270, 2271, 2272,
     2273, 2274, 2275, 2276, 2277, 2222, 2278, 2279, 2280, 2268,
     2236, 2236, 2281, 2282, 2241, 2241, 2242, 2242, 2243, 2243,
     2283, 2283, 2284, 2284, 2246, 2246, 2286, 2287, 2288, 2288,

     2290, 2291, 2244, 2292, 2292, 2299, 2285, 2294, 2294, 2296,
     2296, 2300, 2289, 2255, 2255, 2256, 2256, 2293, 2298, 2298,
     2301, 2295, 2259, 2259, 2297, 2302, 2303, 2304, 2305, 2309,
     2257, 2266, 2266, 2267, 2267, 2306, 2306, 2307, 2307, 2310,
     2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2268, 2319,
     2320, 2322, 2308, 2283, 2283, 2284, 2284, 2321, 2321, 2323,
     2288, 2288, 2324, 2324, 2325, 2326, 2326, 2292, 2292, 2285,
     2328, 2328, 2294, 2294, 2289, 2329, 2329, 2296, 2296, 2327,
     2331, 2293, 2330, 2330, 2298, 2298, 2295, 2332, 2333, 2334,
     2335, 2336, 2297, 2337, 2306, 2306, 2307, 2307, 2338, 2338,

     2339, 2340, 2340, 2342, 2343, 2344, 2345, 2346, 2347, 2348,
     2349, 2308, 2350, 2351, 2321, 2321, 2341, 2352, 2353, 2324,
     2324, 2354, 2326, 2326, 2355, 2355, 2328, 2328, 2329, 2329,
     2330, 2330, 2356, 2357, 2358, 2362, 2327, 2359, 2359, 2363,
     2364, 2338, 2338, 2365, 2340, 2340, 2366, 2366, 2367, 2368,
     2369, 2370, 2360, 2371, 2372, 2373, 2374, 2375, 2376, 2341,
     2355, 2355, 2377, 2378, 2378, 2380, 2380, 2359, 2359, 2361,
     2382, 2382, 2383, 2384, 2384, 2386, 2387, 2388, 2379, 2389,
     2381, 2390, 2360, 2366, 2366, 2391, 2392, 2393, 2385, 2394,
     2395, 2396, 2397, 2397, 2378, 2378, 2399, 2399, 2380, 2380,

     2400, 2400, 2382, 2382, 2401, 2384, 2384, 2398, 2403, 2379,
     2402, 2402, 2406, 2381, 2404, 2404, 2407, 2408, 2409, 2410,
     2385, 2411, 2412, 2413, 2414, 2397, 2397, 2415, 2415, 2405,
     2399, 2399, 2400, 2400, 2416, 2402, 2402, 2417, 2404, 2404,
     2398, 2418, 2418, 2419, 2420, 2420, 2422, 2422, 2424, 2425,
     2426, 2427, 2428, 2405, 2429, 2415, 2415, 2430, 2431, 2421,
     2432, 2423, 2418, 2418, 2420, 2420, 2433, 2433, 2422, 2422,
     2434, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2421,
     2442, 2443, 2444, 2423, 2433, 2433, 2434, 2434, 2445, 2446,
     2447, 2447, 2449, 2449, 2451, 2452, 2452, 2454, 2455, 2456,

     2456, 2447, 2447, 2460, 2448, 2458, 2458, 2450, 2449, 2449,
     2453, 2459, 2459, 2457, 2462, 2448, 2452, 2452, 2461, 2461,
     2463, 2463, 2466, 2450, 2456, 2456, 2465, 2465, 2458, 2458,
     2467, 2453, 2459, 2459, 2464, 2461, 2461, 2469, 2457, 2463,
     2463, 2468, 2468, 2465, 2465, 2468, 2468, 2470, 2470, 2470,
     2470, 2472, 2472, 2464, 2472, 2472,  881,  880,  879,  878,
      877,  876, 2471,  875, 2471,   23,   23,   23,   23,   23,
       34,   34,   34,   34,   34,   36,   36,   36,   36,   36,
       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,

       42,   42,   42,   42,   42,  102,  102,  102,  102,  103,
      874,  103,  103,  103,  104,  104,  872,  104,  104,  105,
      105,  105,  871,  105,  868,  867,  866,  865,  864,  863,
      862,  861,  859,  858,  853,  852,  851,  850,  848,  847,
      846,  845,  844,  843,  837,  836,  835,  832,  831,  830,
      829,  828,  827,  826,  825,  824,  823,  822,  814,  813,
      812,  811,  810,  807,  803,  802,  801,  800,  799,  798,
      797,  796,  789,  788,  787,  786,  785,  784,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  774,  773,  772,
      771,  770,  769,  768,  767,  766,  765,  764,  763,  762,

      761,  760,  759,  758,  757,  756,  755,  754,  751,  750,
      749,  748,  747,  746,  745,  740,  739,  738,  737,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      721,  720,  719,  718,  717,  716,  715,  714,  712,  711,
      708,  707,  706,  705,  704,  702,  701,  698,  694,  693,
      692,  687,  685,  682,  681,  680,  679,  678,  677,  676,
      675,  671,  670,  669,  668,  667,  666,  665,  662,  661,
      660,  659,  658,  657,  656,  654,  653,  650,  649,  648,
      647,  646,  640,  639,  635,  634,  633,  632,  631,  630,
      629,  628,  623,  622,  621,  620,  618,  614,  613,  612,

      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  596,  595,  594,  593,  592,  587,  586,
      582,  581,  580,  579,  578,  577,  576,  575,  571,  570,
      569,  568,  567,  566,  565,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  551,  550,  549,  544,  543,  542,
      541,  540,  539,  538,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  521,  520,  516,  515,  514,  513,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  497,  496,  495,  490,  487,  486,  485,  484,  483,
      482,  479,  478,  475,  474,  473,  472,  471,  470,  469,

      468,  463,  462,  461,  460,  456,  453,  452,  451,  450,
      449,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  401,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  385,  384,  383,  380,  379,  378,  377,  376,
      375,  374,  373,  368,  367,  366,  360,  359,  358,  354,
      351,  350,  349,  345,  344,  343,  342,  341,  340,  339,
      338,  334,  333,  332,  331,  330,  329,  328,  327,  326,

      325,  324,  323,  322,  321,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  301,
      300,  299,  296,  295,  294,  293,  292,  291,  290,  289,
      284,  283,  282,  276,  275,  274,  273,  272,  269,  268,
      267,  263,  260,  254,  242,  241,  237,  236,  231,  228,
      227,  226,  223,  220,  219,  216,  213,  212,  211,  210,
      209,  208,  207,  206,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  193,  192,  189,  183,  171,
      170,  166,  165,  160,  157,  137,  134,  133,  123,  114,
      113,  112,  111,  108,  101,  100,   75,  107,  106,  101,

      100,   75,   71,   71, 2473,   35,   35,   35,   35,   35,
       35,   35,   35,   19, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473
    } ;

static yyconst flex_int16_t yy_chk[3880] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   56,   61,    0,   62,   47,   26,
       26,   26,   51,   72,   72,   61,   76,   76,   56,   26,
       62,   99,   99,   63,    1,    2,    2,    2,    2,    2,
       64,    2,   68,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   63,   68,   28,   28,  181,  181,    2,
       64,   48,   48,   28,    2,   28,   28,   28,   66,   67,

      720,   48,   48,   48,   66,   28,   81,   84,   83,   84,
       66,   48,   83,   67,   74,   74,   67,   81,   74,   74,
       74,   91,   87,   67,  722,   90,   28,   87,   87,    2,
       21,   21,   48,   90,   21,   91,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  723,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   92,  128,  128,   93,  724,

       23,   23,   23,   23,   23,   23,   23,  117,   23,   92,
      128,  139,   92,   92,   92,   93,   23,   50,   50,   97,
      133,   23,  139,  117,   97,   50,  133,   50,   50,   50,
      725,   23,   23,   23,   23,   23,   23,   50,   23,  726,
      126,   23,   23,   23,   23,   73,   73,  126,   23,   23,
       23,   23,   23,   29,   95,   73,   73,   73,   50,  131,
       29,  135,  135,  135,   95,   73,  142,   29,  142,   95,
       95,  136,  136,  141,   95,  131,  172,  141,  727,  145,
      172,  136,  136,  136,  145,  145,   73,  148,   29,   29,
       29,   29,   29,   29,   29,  148,   29,   29,  409,   29,

       29,   29,   29,   29,  728,   29,   29,   29,   29,   29,
       78,   78,   78,   78,   78,   78,   78,  729,   78,   78,
      149,   78,   78,   78,   78,   78,  150,   78,   78,   78,
       78,   78,  151,  155,  149,  409,  153,  730,  155,  161,
      150,  157,  161,  150,  150,  150,  153,  157,  167,  151,
      171,  153,  153,  167,  232,  157,  153,  232,  185,  731,
      167,  171,  243,  167,  167,  185,  243,  185,  193,  193,
      202,  202,  217,  217,  218,  218,  228,  218,  242,  218,
      234,  234,  228,  429,  202,  429,  217,  238,  732,  242,
      228,  256,  238,  252,  252,  234,  311,  267,  256,  238,

      256,  267,  238,  238,  269,  269,  289,  289,  317,  317,
      311,  319,  319,  320,  320,  289,  321,  321,  326,  326,
      733,  234,  317,  327,  327,  319,  335,  335,  734,  335,
      321,  335,  326,  339,  339,  342,  342,  327,  349,  351,
      351,  735,  349,  355,  355,  356,  356,  339,  576,  342,
      368,  368,  373,  373,  351,  376,  376,  399,  355,  395,
      395,  373,  387,  387,  576,  368,  417,  417,  430,  430,
      376,  488,  399,  368,  395,  417,  436,  387,  426,  426,
      436,  417,  556,  430,  454,  454,  488,  426,  457,  457,
      395,  459,  459,  426,  351,  351,  376,  387,  454,  556,

      455,  455,  501,  455,  395,  455,  458,  458,  464,  464,
      465,  465,  466,  466,  467,  467,  525,  467,  525,  467,
      458,  532,  464,  476,  476,  532,  466,  477,  477,  568,
      477,  568,  477,  480,  480,  481,  481,  476,  481,  501,
      481,  482,  482,  491,  491,  492,  492,  480,  498,  498,
      509,  509,  510,  510,  736,  482,  511,  511,  491,  520,
      520,  522,  522,  523,  523,  509,  737,  510,  526,  526,
      530,  530,  535,  535,  520,  738,  522,  536,  536,  542,
      542,  545,  545,  526,  668,  530,  668,  535,  546,  546,
      572,  572,  583,  583,  542,  742,  545,  574,  574,  572,

      530,  583,  585,  585,  743,  572,  744,  583,  590,  590,
      574,  615,  615,  745,  615,  585,  615,  619,  619,  624,
      624,  625,  625,  590,  625,  747,  625,  631,  631,  632,
      632,  633,  633,  636,  636,  656,  636,  749,  636,  641,
      641,  631,  641,  632,  641,  633,  644,  644,  645,  645,
      750,  645,  656,  645,  647,  647,  653,  653,  654,  654,
      644,  655,  655,  672,  672,  673,  673,  676,  647,  674,
      674,  653,  753,  654,  675,  675,  683,  683,  672,  684,
      684,  686,  686,  676,  690,  690,  691,  691,  754,  675,
      755,  683,  692,  692,  695,  695,  696,  696,  756,  690,

      703,  703,  706,  706,  709,  709,  757,  692,  748,  695,
      710,  710,  748,  654,  713,  713,  758,  706,  759,  709,
      759,  692,  740,  740,  741,  741,  751,  751,  752,  752,
      760,  761,  762,  763,  764,  765,  766,  741,  767,  769,
      766,  752,  768,  768,  771,  772,  773,  774,  775,  776,
      778,  768,  777,  777,  779,  780,  781,  768,  782,  782,
      783,  784,  787,  788,  788,  789,  777,  790,  790,  791,
      791,  796,  782,  792,  792,  793,  793,  788,  793,  797,
      793,  790,  794,  794,  795,  795,  800,  792,  801,  801,
      804,  804,  805,  804,  806,  804,  794,  807,  807,  808,

      808,  810,  801,  809,  809,  811,  809,  812,  809,  813,
      814,  807,  820,  808,  815,  815,  816,  816,  817,  817,
      818,  818,  819,  819,  821,  822,  823,  824,  825,  815,
      826,  827,  828,  817,  829,  830,  831,  819,  832,  833,
      834,  835,  836,  837,  837,  838,  838,  839,  839,  840,
      840,  841,  842,  843,  844,  844,  845,  846,  837,  847,
      848,  846,  839,  849,  849,  850,  851,  852,  853,  844,
      854,  854,  855,  855,  856,  856,  857,  858,  859,  858,
      860,  860,  861,  862,  863,  864,  865,  855,  866,  867,
      868,  868,  866,  869,  869,  870,  870,  871,  872,  872,

      873,  873,  874,  875,  876,  868,  877,  878,  869,  881,
      882,  883,  884,  872,  886,  887,  888,  889,  890,  891,
      892,  893,  895,  895,  895,  896,  897,  898,  892,  899,
      900,  900,  901,  904,  895,  902,  902,  906,  907,  908,
      895,  909,  910,  910,  902,  911,  912,  913,  914,  915,
      902,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  928,  924,  929,  930,  930,  931,
      933,  934,  928,  935,  936,  937,  937,  940,  928,  942,
      930,  938,  938,  939,  939,  943,  939,  946,  939,  937,
      941,  941,  944,  944,  951,  938,  945,  945,  954,  945,

      955,  945,  947,  947,  941,  957,  944,  948,  958,  948,
      952,  952,  948,  948,  949,  949,  947,  959,  948,  948,
      967,  948,  950,  950,  948,  950,  968,  950,  949,  953,
      953,  969,  953,  972,  953,  956,  956,  960,  960,  961,
      961,  973,  961,  978,  961,  964,  964,  965,  965,  979,
      965,  960,  965,  966,  966,  981,  966,  982,  966,  964,
      970,  970,  971,  971,  974,  974,  975,  975,  976,  976,
      977,  977,  980,  980,  983,  970,  984,  971,  985,  986,
      987,  988,  988,  976,  989,  989,  991,  980,  987,  992,
      990,  990,  990,  993,  994, 1000,  988,  995,  995,  989,

     1004,  988,  990,  996,  996,  997,  997, 1005,  990,  998,
      998, 1006,  995,  999,  999, 1001, 1001, 1002, 1002, 1003,
     1003, 1007, 1008, 1009,  998, 1010, 1011, 1013,  999, 1014,
     1001, 1012, 1012, 1015, 1003, 1016, 1017, 1018, 1018, 1019,
     1020, 1021, 1021, 1022, 1023, 1024, 1025, 1025, 1026, 1026,
     1027, 1027, 1018, 1028, 1030, 1030, 1021, 1029, 1029, 1031,
     1031, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1021,
     1039, 1040, 1029, 1041, 1031, 1021, 1042, 1044, 1018, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1056, 1058, 1059, 1059, 1060, 1061, 1061, 1062,

     1063, 1064, 1065, 1059, 1066, 1067, 1069, 1070, 1071, 1059,
     1061, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1079, 1081,
     1082, 1083, 1084, 1085, 1085, 1086, 1086, 1087, 1088, 1090,
     1091, 1092, 1093, 1093, 1094, 1094, 1096, 1094, 1086, 1094,
     1095, 1095, 1097, 1095, 1098, 1095, 1093, 1099, 1099, 1100,
     1100, 1101, 1100, 1102, 1100, 1103, 1103, 1104, 1103, 1105,
     1103, 1099, 1106, 1107, 1107, 1108, 1108, 1109, 1108, 1110,
     1108, 1110, 1111, 1112, 1113, 1115, 1114, 1107, 1116, 1117,
     1117, 1118, 1117, 1119, 1117, 1120, 1123, 1124, 1125, 1127,
     1128, 1130, 1113, 1114, 1131, 1126, 1126, 1115, 1126, 1134,

     1126, 1129, 1129, 1139, 1129, 1140, 1129, 1135, 1135, 1136,
     1136, 1137, 1137, 1138, 1138, 1141, 1141, 1142, 1143, 1144,
     1144, 1146, 1135, 1145, 1145, 1147, 1137, 1148, 1149, 1149,
     1150, 1151, 1152, 1153, 1144, 1154, 1154, 1155, 1155, 1156,
     1157, 1157, 1159, 1149, 1158, 1158, 1160, 1161, 1162, 1163,
     1154, 1164, 1165, 1167, 1166, 1157, 1166, 1168, 1168, 1169,
     1169, 1170, 1170, 1171, 1171, 1172, 1172, 1173, 1174, 1174,
     1175, 1175, 1176, 1176, 1169, 1177, 1178, 1179, 1171, 1180,
     1181, 1181, 1182, 1183, 1184, 1175, 1185, 1186, 1187, 1188,
     1188, 1189, 1189, 1190, 1190, 1181, 1191, 1191, 1192, 1193,

     1194, 1197, 1194, 1198, 1188, 1199, 1189, 1200, 1190, 1195,
     1195, 1196, 1196, 1201, 1202, 1202, 1203, 1204, 1204, 1205,
     1205, 1206, 1206, 1208, 1195, 1207, 1207, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1205, 1216, 1217, 1218, 1219, 1220,
     1207, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1234, 1235, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1235,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1258, 1259, 1260, 1261, 1263, 1264, 1264, 1263,
     1264, 1265, 1264, 1266, 1269, 1271, 1270, 1270, 1263, 1270,

     1272, 1270, 1273, 1274, 1277, 1278, 1278, 1281, 1278, 1283,
     1278, 1282, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1295, 1296, 1297, 1282, 1298, 1303, 1304, 1304,
     1305, 1305, 1306, 1307, 1308, 1309, 1310, 1310, 1311, 1312,
     1313, 1314, 1314, 1315, 1315, 1316, 1317, 1318, 1319, 1320,
     1320, 1321, 1322, 1322, 1323, 1324, 1314, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1333, 1334, 1334, 1335,
     1336, 1336, 1337, 1338, 1339, 1340, 1341, 1341, 1342, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1349, 1350, 1350,
     1354, 1341, 1351, 1351, 1352, 1352, 1353, 1353, 1355, 1356,

     1357, 1349, 1358, 1358, 1359, 1360, 1361, 1351, 1362, 1363,
     1364, 1365, 1365, 1366, 1366, 1367, 1367, 1368, 1369, 1369,
     1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1366, 1380,
     1381, 1382, 1383, 1369, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1414, 1415, 1416, 1417, 1419, 1420, 1421,
     1422, 1425, 1425, 1428, 1428, 1429, 1429, 1430, 1431, 1431,
     1432, 1432, 1433, 1433, 1434, 1425, 1435, 1428, 1436, 1429,
     1437, 1437, 1431, 1438, 1432, 1439, 1440, 1441, 1441, 1442,

     1443, 1443, 1444, 1445, 1437, 1446, 1447, 1447, 1448, 1448,
     1449, 1441, 1450, 1450, 1443, 1451, 1452, 1453, 1454, 1455,
     1447, 1456, 1456, 1448, 1457, 1458, 1459, 1450, 1460, 1461,
     1462, 1437, 1463, 1431, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1443, 1475, 1476, 1477, 1477,
     1478, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1484, 1485,
     1485, 1486, 1487, 1488, 1489, 1478, 1490, 1491, 1491, 1492,
     1493, 1494, 1495, 1495, 1496, 1496, 1497, 1498, 1498, 1499,
     1499, 1500, 1491, 1501, 1503, 1504, 1504, 1495, 1505, 1507,
     1507, 1508, 1498, 1510, 1504, 1511, 1512, 1513, 1507, 1514,

     1504, 1515, 1516, 1517, 1507, 1518, 1519, 1520, 1521, 1521,
     1522, 1523, 1524, 1526, 1527, 1528, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1521, 1535, 1536, 1537, 1539, 1540, 1541,
     1528, 1542, 1543, 1544, 1545, 1546, 1547, 1547, 1548, 1548,
     1556, 1548, 1558, 1548, 1549, 1549, 1550, 1550, 1551, 1551,
     1547, 1552, 1552, 1553, 1553, 1554, 1554, 1559, 1549, 1555,
     1555, 1560, 1551, 1557, 1557, 1561, 1561, 1553, 1563, 1554,
     1562, 1562, 1564, 1565, 1566, 1567, 1567, 1568, 1568, 1561,
     1569, 1570, 1570, 1571, 1571, 1572, 1573, 1574, 1575, 1567,
     1576, 1576, 1577, 1577, 1580, 1570, 1578, 1578, 1565, 1579,

     1579, 1581, 1581, 1583, 1576, 1582, 1582, 1584, 1584, 1585,
     1587, 1578, 1586, 1586, 1588, 1588, 1581, 1589, 1589, 1590,
     1591, 1591, 1584, 1592, 1593, 1594, 1595, 1586, 1596, 1588,
     1597, 1598, 1589, 1599, 1600, 1591, 1601, 1602, 1603, 1604,
     1605, 1605, 1606, 1607, 1608, 1608, 1609, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1605, 1617, 1618, 1622, 1608,
     1619, 1619, 1620, 1620, 1621, 1621, 1623, 1624, 1625, 1625,
     1626, 1626, 1627, 1628, 1628, 1619, 1629, 1620, 1630, 1632,
     1632, 1633, 1635, 1625, 1634, 1634, 1636, 1636, 1632, 1637,
     1638, 1638, 1639, 1640, 1632, 1636, 1641, 1634, 1642, 1643,

     1644, 1636, 1645, 1638, 1646, 1647, 1648, 1650, 1651, 1651,
     1652, 1652, 1653, 1654, 1657, 1658, 1658, 1659, 1659, 1663,
     1664, 1665, 1666, 1651, 1667, 1668, 1669, 1670, 1671, 1672,
     1658, 1673, 1674, 1675, 1675, 1676, 1677, 1677, 1678, 1677,
     1679, 1677, 1680, 1680, 1685, 1674, 1686, 1675, 1681, 1681,
     1682, 1682, 1683, 1683, 1688, 1683, 1690, 1683, 1684, 1684,
     1687, 1687, 1689, 1689, 1682, 1691, 1692, 1693, 1693, 1694,
     1695, 1695, 1696, 1698, 1687, 1699, 1691, 1697, 1697, 1700,
     1704, 1693, 1691, 1701, 1701, 1702, 1702, 1703, 1703, 1705,
     1705, 1706, 1707, 1707, 1708, 1708, 1712, 1701, 1709, 1709,

     1710, 1710, 1711, 1711, 1713, 1713, 1717, 1707, 1714, 1714,
     1715, 1715, 1720, 1709, 1721, 1710, 1716, 1716, 1722, 1713,
     1718, 1718, 1719, 1719, 1723, 1715, 1724, 1725, 1726, 1727,
     1728, 1729, 1729, 1730, 1731, 1718, 1732, 1732, 1733, 1733,
     1734, 1734, 1735, 1735, 1736, 1741, 1729, 1737, 1737, 1738,
     1738, 1732, 1742, 1733, 1739, 1739, 1743, 1735, 1740, 1740,
     1744, 1745, 1746, 1751, 1738, 1747, 1747, 1748, 1748, 1739,
     1749, 1749, 1752, 1740, 1750, 1750, 1753, 1753, 1754, 1755,
     1747, 1756, 1757, 1757, 1758, 1758, 1759, 1760, 1763, 1750,
     1761, 1761, 1762, 1762, 1765, 1760, 1766, 1758, 1767, 1768,

     1769, 1770, 1771, 1772, 1773, 1762, 1774, 1775, 1775, 1776,
     1777, 1779, 1779, 1780, 1781, 1782, 1783, 1784, 1787, 1788,
     1789, 1790, 1791, 1792, 1793, 1793, 1794, 1794, 1795, 1750,
     1798, 1798, 1801, 1798, 1802, 1798, 1803, 1803, 1793, 1804,
     1804, 1805, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1811,
     1803, 1812, 1812, 1813, 1814, 1805, 1815, 1816, 1817, 1808,
     1818, 1818, 1811, 1819, 1819, 1820, 1819, 1821, 1819, 1822,
     1822, 1823, 1823, 1826, 1818, 1824, 1824, 1825, 1825, 1827,
     1827, 1826, 1828, 1828, 1829, 1829, 1823, 1830, 1830, 1831,
     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1842, 1829,

     1840, 1840, 1841, 1841, 1843, 1844, 1844, 1845, 1845, 1846,
     1846, 1847, 1847, 1848, 1848, 1840, 1849, 1849, 1850, 1850,
     1844, 1851, 1851, 1852, 1852, 1856, 1847, 1853, 1853, 1854,
     1854, 1849, 1857, 1850, 1855, 1855, 1858, 1859, 1852, 1860,
     1861, 1861, 1862, 1862, 1854, 1863, 1863, 1864, 1864, 1865,
     1865, 1866, 1867, 1868, 1869, 1861, 1870, 1871, 1871, 1872,
     1863, 1873, 1874, 1876, 1865, 1875, 1875, 1877, 1878, 1879,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1889, 1890,
     1891, 1892, 1893, 1895, 1896, 1897, 1898, 1899, 1900, 1900,
     1901, 1902, 1903, 1904, 1904, 1905, 1905, 1906, 1906, 1907,

     1908, 1909, 1910, 1901, 1911, 1912, 1913, 1913, 1914, 1905,
     1915, 1916, 1917, 1918, 1919, 1919, 1922, 1919, 1923, 1919,
     1924, 1924, 1925, 1926, 1927, 1927, 1928, 1928, 1929, 1930,
     1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1938, 1927,
     1939, 1940, 1940, 1941, 1941, 1942, 1942, 1943, 1943, 1944,
     1944, 1945, 1945, 1946, 1946, 1948, 1940, 1947, 1947, 1949,
     1950, 1951, 1943, 1952, 1953, 1953, 1954, 1954, 1955, 1955,
     1956, 1956, 1957, 1957, 1958, 1958, 1959, 1960, 1961, 1953,
     1962, 1963, 1964, 1965, 1966, 1956, 1968, 1969, 1970, 1958,
     1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1981,

     1982, 1983, 1984, 1984, 1985, 1986, 1986, 1987, 1987, 1988,
     1989, 1990, 1991, 1992, 1992, 1993, 1994, 1984, 1995, 1986,
     1996, 1987, 1997, 1998, 1999, 2000, 2001, 2002, 2002, 2003,
     2004, 2005, 2006, 2007, 2008, 2008, 2009, 2009, 2010, 2011,
     2012, 2002, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2019,
     2022, 2009, 2020, 2020, 2021, 2021, 2023, 2024, 2024, 2025,
     2026, 2027, 2027, 2019, 2028, 2028, 2029, 2029, 2030, 2030,
     2031, 2032, 2024, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2029, 2043, 2044, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2054, 2055, 2055, 2056, 2057, 2057, 2042, 2058,

     2058, 2059, 2059, 2060, 2060, 2061, 2054, 2062, 2063, 2064,
     2057, 2065, 2066, 2067, 2068, 2059, 2069, 2070, 2070, 2071,
     2071, 2072, 2073, 2073, 2074, 2074, 2075, 2075, 2076, 2077,
     2077, 2070, 2079, 2071, 2078, 2078, 2073, 2080, 2074, 2081,
     2081, 2076, 2082, 2082, 2077, 2083, 2084, 2085, 2086, 2078,
     2087, 2088, 2089, 2089, 2081, 2090, 2090, 2091, 2092, 2092,
     2093, 2094, 2095, 2095, 2096, 2096, 2086, 2089, 2097, 2098,
     2090, 2099, 2099, 2100, 2101, 2102, 2103, 2095, 2105, 2106,
     2107, 2109, 2110, 2111, 2112, 2113, 2114, 2114, 2115, 2117,
     2118, 2119, 2120, 2120, 2121, 2122, 2122, 2123, 2123, 2124,

     2124, 2114, 2125, 2125, 2126, 2127, 2128, 2128, 2129, 2130,
     2131, 2132, 2137, 2124, 2133, 2133, 2125, 2134, 2134, 2141,
     2128, 2135, 2135, 2136, 2136, 2138, 2138, 2142, 2133, 2139,
     2139, 2140, 2140, 2143, 2143, 2135, 2144, 2144, 2147, 2138,
     2145, 2145, 2146, 2146, 2148, 2148, 2149, 2149, 2143, 2150,
     2151, 2152, 2152, 2153, 2154, 2145, 2155, 2156, 2161, 2148,
     2157, 2157, 2158, 2158, 2159, 2159, 2152, 2160, 2160, 2162,
     2163, 2163, 2164, 2164, 2165, 2157, 2166, 2167, 2168, 2159,
     2169, 2170, 2171, 2173, 2174, 2163, 2175, 2176, 2177, 2178,
     2179, 2179, 2180, 2180, 2181, 2183, 2184, 2185, 2186, 2186,

     2187, 2187, 2188, 2188, 2191, 2179, 2189, 2189, 2190, 2190,
     2192, 2192, 2186, 2193, 2193, 2194, 2188, 2195, 2196, 2197,
     2198, 2198, 2190, 2200, 2192, 2199, 2199, 2201, 2201, 2202,
     2203, 2204, 2204, 2205, 2205, 2206, 2207, 2207, 2208, 2208,
     2209, 2209, 2210, 2211, 2211, 2212, 2212, 2213, 2214, 2215,
     2216, 2207, 2217, 2217, 2219, 2209, 2218, 2218, 2211, 2220,
     2221, 2221, 2222, 2222, 2223, 2223, 2224, 2225, 2226, 2227,
     2229, 2230, 2231, 2232, 2233, 2221, 2234, 2235, 2237, 2223,
     2236, 2236, 2239, 2240, 2241, 2241, 2242, 2242, 2243, 2243,
     2244, 2244, 2245, 2245, 2246, 2246, 2247, 2248, 2249, 2249,

     2250, 2251, 2243, 2252, 2252, 2258, 2245, 2253, 2253, 2254,
     2254, 2260, 2249, 2255, 2255, 2256, 2256, 2252, 2257, 2257,
     2261, 2253, 2259, 2259, 2254, 2262, 2263, 2264, 2265, 2270,
     2256, 2266, 2266, 2267, 2267, 2268, 2268, 2269, 2269, 2271,
     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2267, 2280,
     2281, 2286, 2269, 2283, 2283, 2284, 2284, 2285, 2285, 2287,
     2288, 2288, 2289, 2289, 2290, 2291, 2291, 2292, 2292, 2284,
     2293, 2293, 2294, 2294, 2288, 2295, 2295, 2296, 2296, 2291,
     2299, 2292, 2297, 2297, 2298, 2298, 2294, 2300, 2301, 2302,
     2303, 2304, 2296, 2305, 2306, 2306, 2307, 2307, 2308, 2308,

     2309, 2310, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,
     2318, 2307, 2319, 2320, 2321, 2321, 2310, 2322, 2323, 2324,
     2324, 2325, 2326, 2326, 2327, 2327, 2328, 2328, 2329, 2329,
     2330, 2330, 2331, 2332, 2333, 2335, 2326, 2334, 2334, 2336,
     2337, 2338, 2338, 2339, 2340, 2340, 2341, 2341, 2342, 2343,
     2344, 2347, 2334, 2349, 2350, 2351, 2352, 2353, 2354, 2340,
     2355, 2355, 2356, 2357, 2357, 2358, 2358, 2359, 2359, 2334,
     2360, 2360, 2361, 2362, 2362, 2363, 2364, 2365, 2357, 2367,
     2358, 2368, 2359, 2366, 2366, 2370, 2371, 2373, 2362, 2374,
     2375, 2376, 2377, 2377, 2378, 2378, 2379, 2379, 2380, 2380,

     2381, 2381, 2382, 2382, 2383, 2384, 2384, 2377, 2386, 2378,
     2385, 2385, 2388, 2380, 2387, 2387, 2389, 2390, 2391, 2392,
     2384, 2393, 2394, 2395, 2396, 2397, 2397, 2398, 2398, 2387,
     2399, 2399, 2400, 2400, 2401, 2402, 2402, 2403, 2404, 2404,
     2397, 2405, 2405, 2406, 2407, 2407, 2408, 2408, 2409, 2410,
     2411, 2412, 2413, 2404, 2414, 2415, 2415, 2416, 2417, 2407,
     2419, 2408, 2418, 2418, 2420, 2420, 2421, 2421, 2422, 2422,
     2423, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2420,
     2431, 2432, 2436, 2422, 2433, 2433, 2434, 2434, 2438, 2439,
     2440, 2440, 2441, 2441, 2442, 2443, 2443, 2444, 2445, 2446,

     2446, 2447, 2447, 2451, 2440, 2448, 2448, 2441, 2449, 2449,
     2443, 2450, 2450, 2446, 2454, 2447, 2452, 2452, 2453, 2453,
     2455, 2455, 2460, 2449, 2456, 2456, 2457, 2457, 2458, 2458,
     2462, 2452, 2459, 2459, 2455, 2461, 2461, 2466, 2456, 2463,
     2463, 2464, 2464, 2465, 2465, 2468, 2468, 2469, 2469, 2470,
     2470, 2471, 2471, 2463, 2472, 2472,  719,  718,  717,  716,
      715,  714, 2469,  712, 2470, 2474, 2474, 2474, 2474, 2474,
     2475, 2475, 2475, 2475, 2475, 2476, 2476, 2476, 2476, 2476,
     2477, 2477, 2477, 2477, 2477, 2478, 2478, 2478, 2478, 2478,
     2479, 2479, 2479, 2479, 2479, 2480, 2480, 2480, 2480, 2480,

     2481, 2481, 2481, 2481, 2481, 2482, 2482, 2482, 2482, 2483,
      711, 2483, 2483, 2483, 2484, 2484,  708, 2484, 2484, 2485,
     2485, 2485,  707, 2485,  705,  704,  702,  701,  700,  699,
      698,  697,  694,  693,  689,  688,  687,  685,  682,  681,
      680,  679,  678,  677,  671,  670,  669,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  652,  651,
      650,  649,  648,  646,  643,  642,  640,  639,  638,  637,
      635,  634,  630,  629,  628,  627,  626,  623,  622,  621,
      620,  618,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  602,  601,  600,  599,  598,  597,  596,

      595,  594,  593,  592,  589,  588,  587,  586,  584,  582,
      581,  580,  579,  578,  577,  573,  571,  570,  569,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      555,  553,  552,  551,  550,  549,  548,  547,  544,  543,
      541,  540,  539,  538,  537,  534,  533,  531,  529,  528,
      527,  524,  521,  519,  518,  517,  516,  515,  514,  513,
      512,  508,  507,  506,  505,  504,  503,  502,  500,  499,
      497,  496,  495,  494,  493,  490,  489,  487,  486,  485,
      484,  483,  479,  478,  475,  474,  473,  472,  471,  470,
      469,  468,  463,  462,  461,  460,  456,  453,  452,  451,

      450,  449,  448,  447,  446,  445,  443,  442,  441,  440,
      439,  438,  437,  435,  434,  433,  432,  431,  428,  427,
      425,  424,  423,  422,  421,  420,  419,  418,  416,  415,
      414,  413,  412,  411,  410,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  398,  397,  396,  394,  393,  392,
      391,  390,  389,  388,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  375,  374,  372,  371,  370,  369,
      367,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  354,  353,  352,  350,  348,  347,  346,  345,  344,
      343,  341,  340,  338,  334,  333,  332,  331,  330,  329,

      328,  325,  324,  323,  322,  318,  316,  315,  314,  313,
      312,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  268,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  255,  254,  253,  251,  250,  249,  248,  247,
      246,  245,  244,  241,  240,  239,  237,  236,  235,  233,
      231,  230,  229,  226,  225,  224,  223,  222,  221,  220,
      219,  216,  215,  214,  213,  212,  211,  210,  209,  208,

      207,  206,  205,  204,  203,  201,  200,  199,  198,  197,
      196,  195,  192,  191,  190,  189,  188,  187,  186,  184,
      183,  182,  180,  179,  178,  177,  176,  175,  174,  173,
      170,  169,  168,  166,  165,  164,  163,  162,  160,  159,
      158,  156,  154,  152,  147,  146,  144,  143,  140,  138,
      137,  134,  132,  130,  129,  127,  125,  124,  123,  122,
      121,  120,  119,  118,  116,  115,  114,  113,  112,  111,
      110,  109,  108,  106,  101,  100,   98,   96,   94,   89,
       88,   86,   85,   82,   80,   77,   70,   69,   65,   60,
       59,   58,   57,   55,   54,   53,   49,   44,   41,   32,

       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473, 2473
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[315] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules, this file is maintained in several pieces 
 * in order to avoid duplication when parsing OSgL elements. This is the first part.  
 */
#line 17 "../../../../OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 106 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2238 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 116 "../../../../OS/src/OSParsers/OSParseosol.l"


 
#line 2494 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2474 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3814 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 119 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 126 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 128 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 144 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 259 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.inc

 /* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 303:
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 307:
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4495 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2474 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2474 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2473);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 512 "../../../../OS/src/OSParsers/OSParseosol.l"





