#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 394
#define YY_END_OF_BUFFER 395
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2945] =
    {   0,
        1,    1,  392,  392,  390,  390,  391,  391,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  395,  393,
        1,    2,  380,    2,  380,    6,  380,    5,  393,    4,
      380,  380,    2,  392,  394,  390,  391,  381,  383,  384,
      383,  387,  388,  387,    1,  380,  380,    6,  380,    5,
        0,    4,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
        3,    6,    6,  380,    7,    5,    0,    0,  386,  370,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        4,  380,  380,  392,  390,  391,  381,    0,  389,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  372,    0,    0,    0,    0,    0,    0,    0,    0,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  385,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      382,    0,  371,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  230,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  356,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,  340,
        0,    0,    0,    0,    0,    0,    0,  222,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  214,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  216,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,   29,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,   99,  100,  380,  380,  380,  380,  380,  380,
      380,  380,  371,    0,  373,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,    0,    0,    0,    0,    0,    0,    0,  357,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      341,    0,    0,    0,    0,    0,    0,  327,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  352,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  348,    0,    0,    0,    0,    0,    0,    0,  354,
        0,  350,    0,    0,  356,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  340,    0,    0,  358,    0,
        0,  360,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  162,    0,    0,
        0,    0,    0,    0,    0,    0,  346,    0,    0,    0,
        0,    0,    0,  362,    0,    0,    0,    0,  152,    0,
        0,    0,    0,    0,  380,  380,  380,  323,  380,  380,
      380,  380,  380,  380,  380,  380,   29,  380,   30,  380,
      380,  380,  380,  380,   31,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  373,    0,  353,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  231,    0,    0,    0,
      349,    0,    0,    0,    0,  151,    0,    0,    0,  355,
        0,  351,    0,    0,  357,    0,    0,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,  341,    0,    0,
      359,    0,    0,  361,    0,    0,    0,    0,    0,    0,
      327,    0,    0,    0,    0,  223,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  347,    0,    0,  215,    0,    0,    0,    0,    0,

      363,    0,    0,    0,    0,    0,    0,    0,    0,  217,
        0,    0,    0,  352,    0,    0,    0,    0,    0,    0,
      196,  288,    0,    0,    0,  348,    0,    0,    0,    0,
        0,    0,  354,  350,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  241,  124,    0,    0,    0,
      358,    0,  360,    0,    0,    0,    0,    0,    0,  247,
        0,    0,    0,    0,    0,    0,    0,  104,  103,  138,
        0,    0,    0,    0,  332,    0,    0,    0,    0,    0,
        0,    0,  346,    0,    0,    0,    0,  306,  362,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  380,  380,

      323,  380,  380,  380,  380,  380,  380,   97,   98,  380,
       30,  380,  380,  380,  380,   31,  380,   61,   62,  380,
      380,  380,  380,  380,  380,  380,  380,  380,   73,   74,
      380,  380,  380,   83,   84,  380,  380,  380,  380,  353,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  231,
        0,    0,  349,    0,    0,    0,    0,    0,    0,  355,
      351,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  242,  113,    0,    0,    0,    0,  359,    0,  361,
        0,    0,    0,    0,    0,  248,    0,    0,    0,    0,
      223,    0,    0,    0,    0,  105,    0,    0,    0,    0,

      163,    0,    0,  333,    0,    0,    0,    0,    0,    0,
        0,  347,    0,  215,    0,    0,    0,    0,  363,    0,
        0,    0,    0,    0,  153,    0,    0,  217,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  286,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  204,  243,  241,
        0,    0,    0,    0,  282,    0,    0,    0,    0,    0,
      334,  249,  247,    0,    0,    0,    0,  368,    0,    0,
        0,    0,    0,    0,    0,  332,    0,  338,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,

        0,  328,    0,    0,    0,  318,    0,    0,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
       59,   60,  380,  380,  380,  380,   32,  380,  380,  380,
       33,  380,  380,   71,   72,  380,  380,   81,   82,  380,
       87,   88,  380,  380,  380,    0,    0,    0,    0,    0,
        0,    0,  197,    0,  289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  242,    0,  125,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  335,  248,
        0,    0,    0,    0,    0,    0,    0,  105,    0,  139,

        0,    0,    0,  163,    0,  333,    0,  339,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  307,
        0,    0,    0,  329,    0,  153,    0,    0,    0,    0,
        0,    0,    0,  198,  200,    0,    0,    0,    0,    0,
      134,    0,    0,    0,    0,  330,    0,    0,    0,    0,
      106,  310,    0,    0,    0,    0,    0,  243,    0,    0,
      128,    0,    0,  154,    0,    0,    0,    0,  334,  249,
        0,    0,  336,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  338,  186,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,  251,    0,  344,    0,    0,

      328,    0,  208,    0,    0,    0,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,   32,  380,   69,   70,   33,  380,
      380,  380,  380,  380,   85,   86,  380,  380,  380,   95,
       96,    0,    0,    0,    0,    0,    0,  197,  289,    0,
      287,    0,    0,    0,    0,    0,    0,    0,    0,  331,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  205,  125,    0,    0,    0,    0,  283,    0,
        0,    0,    0,    0,    0,  335,    0,  337,    0,    0,
        0,  369,    0,    0,    0,  139,    0,    0,    0,    0,

        0,  339,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  252,    0,  345,    0,  307,    0,    0,  109,
      329,    0,    0,    0,    0,  319,    0,    0,    0,  364,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  330,
      290,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  263,    0,
        0,    0,    0,    0,    0,    0,    0,  336,    0,  308,
        0,    0,    0,    0,    0,    0,  132,  174,    0,    0,
      366,    0,    0,    0,    0,    0,    0,    0,    0,  253,
      251,    0,  344,    0,    0,    0,  130,    0,  374,  380,

      380,  380,  380,   43,   44,  380,  277,  380,  380,  380,
      380,  380,  380,  380,   55,   56,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,   65,
       66,  380,   67,   68,  380,  380,  380,  380,   79,   80,
      380,   91,   92,   93,   94,    0,  365,    0,    0,  199,
        0,  201,    0,    0,  287,    0,    0,    0,    0,  135,
        0,    0,    0,  331,    0,    0,    0,    0,    0,    0,
      107,    0,    0,  311,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  205,    0,  264,    0,  129,    0,  283,
        0,    0,    0,  155,    0,    0,    0,    0,  337,    0,

        0,  369,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  187,    0,    0,  367,    0,    0,    0,    0,  111,
        0,    0,    0,    0,    0,  252,  345,    0,    0,  109,
        0,    0,  209,    0,  319,    0,    0,  364,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  265,  263,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  366,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  253,    0,    0,    0,    0,    0,  188,  380,

      380,   39,   40,   41,   42,  277,  380,  380,   51,   52,
      380,  380,  380,   53,   54,  380,  380,  101,  102,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,   63,   64,  380,  380,  380,  380,   77,   78,
       89,   90,  365,    0,  199,  201,    0,    0,    0,    0,
        0,  135,    0,    0,    0,    0,  291,    0,    0,    0,
        0,  107,    0,  311,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  264,  129,    0,    0,    0,  155,
        0,    0,    0,    0,    0,    0,  309,    0,    0,    0,
        0,    0,    0,    0,  133,    0,  175,  187,    0,  367,

        0,    0,    0,    0,  111,    0,    0,    0,    0,    0,
        0,    0,    0,  209,    0,  131,    0,    0,  375,    0,
      202,    0,  284,  314,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  316,    0,  116,    0,
        0,    0,    0,    0,  206,    0,    0,  380,  380,  380,
       37,   38,  380,   49,   50,  380,  380,  380,  380,  380,
      380,   10,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  291,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      309,    0,    0,    0,    0,    0,    0,  133,  175,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  131,    0,  375,    0,  189,    0,    0,  226,
        0,    0,    0,  238,    0,    0,  168,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  376,    0,  144,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  118,    0,
        0,    0,    0,    0,  342,    0,    0,  380,  380,  380,
      380,  380,  380,  380,   34,  380,   35,  380,  380,   25,
      380,   10,  380,  380,  380,  380,  380,   23,  380,  380,
      380,  380,  380,   21,  380,  380,   20,  380,  380,  380,
      380,  380,  380,   36,    0,  203,    0,    0,  285,    0,
      315,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      219,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  317,    0,    0,  117,    0,    0,    0,    0,  343,
        0,  207,    0,    0,  189,    0,    0,  158,    0,    0,
      255,    0,    0,    0,  259,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  120,    0,    0,  240,    0,
        0,    0,  146,  140,    0,    0,  246,    0,  114,  244,
      136,    0,    0,    0,    0,    0,    0,  236,    0,    0,
        0,  342,    0,    0,  380,  380,  380,  380,   47,   48,
      380,   34,   35,  380,  380,   25,  380,  380,  380,  380,
      380,   23,  380,  380,  380,  380,  380,   21,  380,   20,
      380,  380,  380,  380,  380,   36,  203,    0,  285,  315,

        0,    0,  227,    0,    0,  256,    0,    0,  239,    0,
      260,    0,    0,  169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  377,    0,
        0,  145,    0,    0,    0,  219,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  317,    0,  119,  117,    0,
        0,    0,  343,  207,    0,    0,    0,    0,  257,  255,
        0,    0,  261,  259,    0,  182,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  240,    0,    0,    0,
      142,  246,    0,    0,    0,    0,    0,    0,  164,  234,
        0,    0,    0,    0,    0,  380,  380,  380,  266,  380,

       45,   46,  380,  380,   58,   57,  380,  380,  380,   13,
      380,  380,  380,  380,  380,  380,  380,  380,   12,  380,
      380,  380,  380,  380,  380,  380,  380,    0,    0,  227,
        0,  159,  256,    0,  239,  260,    0,  169,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
        0,    0,  377,    0,  147,  145,    0,  141,    0,    0,
        0,  115,    0,  245,    0,  137,    0,    0,    0,    0,
        0,    0,  119,    0,  237,    0,    0,    0,    0,    0,
        0,    0,  257,    0,    0,    0,  261,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  300,

      378,    0,    0,    0,    0,    0,    0,  126,    0,    0,
      320,    0,  380,  380,  266,  380,  380,  380,  380,   13,
      380,    9,  380,  380,  380,  380,  380,  380,  380,   12,
      380,  380,  380,  276,  380,  380,  380,  380,   76,   75,
        0,    0,  159,    0,    0,    0,  183,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  121,    0,    0,    0,
      147,  141,    0,  143,    0,  115,  245,  137,    0,    0,
        0,    0,    0,    0,  165,  237,    0,  235,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  302,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  184,    0,    0,    0,    0,    0,  380,  380,
      380,  380,  380,  380,  380,    9,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  276,  380,  380,  380,    0,
        0,    0,    0,  183,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  301,    0,  379,  143,    0,
        0,    0,    0,    0,    0,  165,  235,    0,  127,    0,
        0,  321,    0,  148,  292,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  172,  122,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  250,    0,  380,  272,
      380,  271,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  273,  380,
        0,    0,    0,    0,    0,  303,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  301,  379,    0,    0,    0,
        0,  185,    0,    0,  127,    0,  321,    0,    0,    0,
      166,    0,    0,    0,  232,    0,    0,    0,    0,    0,
        0,    0,    0,  178,    0,    0,    0,  250,    0,  272,
      271,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,   14,  380,   15,  380,  380,   16,  273,
      380,  380,    0,  149,    0,  293,    0,    0,  303,    0,
        0,    0,    0,    0,    0,    0,    0,  173,    0,  123,

        0,    0,    0,    0,  185,    0,    0,    0,    0,    0,
        0,    0,  194,    0,    0,    0,    0,    0,    0,    0,
      262,    0,    0,  156,    0,    0,    0,  380,  270,  380,
      269,  380,  380,  380,  380,  380,   17,  380,  380,  380,
      380,   14,   15,  380,   16,  380,  380,  149,  293,    0,
        0,  167,    0,    0,    0,  233,    0,    0,    0,    0,
      173,  123,    0,    0,    0,    0,  179,    0,    0,    0,
        0,    0,  180,    0,    0,    0,    0,    0,    0,    0,
      262,    0,    0,  160,    0,    0,  270,  269,  380,  380,
      380,   18,  380,  380,   17,  380,  380,  380,  380,  380,

      380,  380,    0,  167,    0,  195,    0,  233,    0,    0,
        0,    0,    0,    0,    0,  179,    0,  157,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  324,
        0,    0,  294,  380,  280,  281,   18,  380,   11,  380,
      380,  380,  380,    8,  380,  380,  380,  268,  380,  267,
        0,  181,  195,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,  161,    0,    0,    0,    0,    0,    0,
        0,  190,    0,    0,    0,    0,  278,  279,   11,  380,
      380,  380,    8,  380,  380,   26,  268,  267,  181,    0,
        0,    0,    0,    0,    0,    0,  325,    0,  161,    0,

        0,  295,    0,    0,    0,  224,  220,    0,  170,    0,
        0,    0,  380,  380,  380,  380,   26,    0,    0,    0,
        0,  191,    0,    0,    0,  325,    0,    0,  295,    0,
        0,  228,    0,    0,  176,    0,  380,  380,  380,  380,
        0,    0,  225,    0,  221,  191,    0,    0,  171,    0,
        0,    0,    0,    0,    0,    0,    0,  380,  380,  380,
      380,    0,  229,  225,  221,    0,  171,    0,    0,  177,
        0,    0,    0,    0,    0,    0,  380,  380,  380,  380,
      229,    0,    0,  177,    0,    0,  254,    0,  258,    0,
        0,    0,  380,  380,  380,  380,    0,    0,    0,  254,

      258,  192,    0,  212,  380,  380,  380,  380,    0,    0,
        0,    0,  380,  322,  380,  380,  380,   19,    0,  193,
        0,    0,  213,    0,  322,  380,  380,   22,   19,  193,
        0,  213,    0,  380,   24,   22,    0,  210,   24,    0,
        0,  211,  211,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,   39,    6,    6,
        1,    6,    1,    1,    6,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2957] =
    {   0,
        0,   66, 4666, 4665, 4676, 4675, 4672, 4671,    0,    0,
        0,    0, 4662, 4661,   13,   17,    3,    5, 4675, 4684,
      131, 4669,  195, 4666,   19,   38, 4655,   43,  254,   25,
     4641, 4630, 4684,    0, 4684,    0,    0,    0, 4684, 4684,
     4660, 4684, 4684, 4651,    0,    0,   24,   86, 4650,   91,
       43,   40, 4636, 4625, 4624,    8, 4619,    1, 4605, 4604,
       42,   18,   46,   50, 4619,   67,   62,   70, 4619, 4614,
     4684,  115,  220,  205, 4684,  122, 4648,  294, 4684, 4684,
     4631,  170,   23, 4601,   83,  210, 4606, 4609,  221, 4598,
       44,   72,  231,  229,  270,   84,  312,  167,  177, 4611,

      197, 4627, 4619,    0,    0,    0,    0, 4631, 4684, 4589,
     4587,  206, 4587, 4584, 4601, 4588, 4587, 4577, 4597,  207,
     4596, 4587, 4585, 4583, 4582, 4584, 4592, 4566,   56, 4573,
      200, 4589, 4573,  231, 4579,  194, 4578,  305,  361, 4616,
      275, 4599,  242,  280, 4569,  281,  326, 4574, 4577,  333,
     4566,  275,  282,  344,  341,  354,  313,  358,  333,  312,
     4579, 4684, 4560, 4566,  322, 4558, 4561,  362,  304,  346,
     4570, 4553, 4567, 4556, 4559, 4556,  407,  373, 4585, 4563,
     4565,  327,  423,  360, 4552, 4552, 4557, 4684, 4549, 4549,
     4551, 4540, 4544, 4550, 4537,  168, 4535, 4532, 4539, 4536,

     4529, 4533, 4536,  376, 4528, 4547,  378, 4528, 4533, 4544,
     4528, 4532, 4537, 4523,  330, 4684, 4535, 4534, 4532,    0,
     4534, 4523, 4523, 4521, 4512,  435, 4514, 4510, 4529, 4528,
     4523, 4507, 4521, 4523, 4528, 4511, 4517, 4499, 4534, 4512,
      439,  441, 4504, 4512, 4495, 4514, 4494, 4492, 4516, 4504,
     4684,  447,  450,  454, 4491, 4497,  432, 4489, 4492,  408,
      407,  378,  467, 4485, 4499, 4488, 4491, 4488,  470,  431,
     4517, 4495, 4497,  405,  474,  404, 4484, 4484, 4489,  478,
     4481, 4481, 4483, 4472, 4476, 4482, 4469,  424, 4467, 4464,
     4471, 4468, 4461, 4465, 4468,  434, 4460, 4479,  423, 4460,

     4465, 4476, 4460, 4464, 4469, 4455,  495, 4490, 4454, 4455,
     4453,  452, 4465, 4475,  443,  501, 4461, 4462, 4459, 4454,
     4449, 4448,  503,  505, 4455, 4454,  507,  511, 4453, 4437,
     4435, 4435, 4449, 4435, 4439, 4465, 4445, 4444,  513,  523,
     4430,  525,  529, 4442, 4445,   71, 4443, 4439, 4434, 4430,
     4436, 4424, 4420, 4430, 4418, 4431,  491, 4414, 4442, 4411,
      534, 4410, 4433, 4412, 4428, 4410,  536, 4422, 4406, 4420,
     4410, 4418, 4408, 4403,  496, 4430, 4412,  538, 4393, 4397,
     4398, 4419, 4393,  545, 4397,  553,  560,  562, 4411, 4399,
     4390, 4428,  564,  568, 4403, 4382, 4405, 4413, 4399, 4399,

     4397,  570, 4684, 4684, 4382,  579, 4399, 4387,  583, 4393,
     4372, 4388,  585,  588,  590,  594, 4413, 4377, 4378, 4376,
      475, 4388, 4398,  598,  600, 4384, 4385, 4382, 4377,  604,
      606, 4372, 4371,  610,  616, 4378, 4377,  620,  622, 4376,
     4360, 4358, 4358, 4372, 4358, 4362,  626, 4369, 4368,  628,
      632, 4354,  636,  638, 4366, 4369,  644,  646,  239, 4367,
      660, 4359, 4355, 4361, 4349, 4345, 4355, 4343, 4356,  622,
     4339, 4367, 4336,  666, 4335,  670, 4338, 4354, 4336,  672,
     4348, 4332, 4346, 4336, 4344, 4334, 4329,  676,  678,  682,
     4337, 4324, 4321, 4327,   10, 4339, 4330, 4334, 4319, 4337,

      688,  694, 4323, 4318, 4332, 4330, 4328, 4327,  697,  700,
      708,  710,  525, 4313,  713, 4306, 4320, 4308, 4326, 4319,
     4320,  715, 4342, 4309, 4321,  717, 4312,  719,  725, 4311,
      727,  731, 4326, 4309, 4312, 4297,  735, 4295, 4305, 4308,
     4307, 4308,  208,  737, 4292, 4288, 4285, 4314,  739, 4288,
     4300, 4283,  550, 4297, 4293,  745,  747, 4296, 4299, 4296,
     4280, 4277,  755,  757, 4278, 4290, 4275, 4274, 4684, 4277,
     4300, 4286, 4284, 4287, 4286, 4271,  761,  763, 4269, 4283,
     4274, 4257, 4277,  765,  768, 4281,  776,  780,  782, 4267,
     4257, 4268, 4261,  784,  786,  788,  790, 4257, 4258, 4255,

     4266, 4253, 4246, 4249, 4252,  796,  800, 4255, 4245,  806,
      808,  814, 4249, 4244,  816,  818,  821, 4254, 4241, 4238,
     4244,  545, 4256, 4247, 4251,  823,  825, 4236, 4254,  829,
      831, 4240, 4235, 4249, 4247,  834, 4245, 4244,  836,  839,
      841,  845,  556, 4230,  847, 4223, 4237, 4225, 4243, 4236,
     4237,  849,  852,  854, 4259, 4226, 4238,  857, 4229,  859,
      861, 4228,  865,  868, 4243, 4226, 4229, 4214,  870, 4212,
      872, 4222, 4225, 4224,  875,  877, 4225,  333,  881, 4209,
     4205, 4202,  883,  886, 4206, 4218, 4201,  572, 4215, 4211,
      888,  891, 4214,  893,  899, 4217, 4214, 4198, 4195,  904,

      906, 4196, 4208, 4193, 4192,  909, 4195, 4218,  911,  914,
     4226, 4202, 4205,  916, 4199, 4203, 4198, 4197, 4227, 4199,
     4684, 4180, 4192,  495, 4194,  920, 4192, 4186, 4174, 4188,
     4178, 4173,  922,  927, 4172, 4193, 4187, 4182, 4185,  621,
     4171, 4179, 4178,  929, 4204,  932, 4684,  387, 4163, 4156,
      934, 4166,  936, 4181, 4158, 4163,  939,  941, 4197,  946,
     4169, 4159, 4154, 4153, 4150, 4160, 4154,  948, 4684, 4175,
     4146, 4150, 4163,  951,  957,  960, 4144, 4159, 4142, 4142,
     4153, 4155,  964, 4139, 4138, 4149, 4143, 4684,  967, 4140,
     4082,  969, 4087, 4069, 4090, 4066, 4083, 4081,   70,   92,

      971,  157,  216,  226,  286,  317,  973, 4684, 4684,  349,
      979,  451,  449,  445,  462,  981,  985,  538,  550,  537,
      535,  575,  991,  993,  995,  581,  572,  997,  627,  629,
      613,  608, 1003,  649,  653, 1010, 1012,  622, 1018, 1020,
      625,  636,  638,  642,  675,  652, 1022, 1025,  649, 1027,
      666,  666, 1029,  688,  687,  684,  701,  698,  696, 1033,
     1035,  698,  726,  729,  730,  736,  876,  727,  750,  757,
     1038, 1041, 1043, 1045,  787,  749,  751, 1047,  813, 1049,
      845,  846,  868, 1051, 1054, 1056,  883,  880,  888,  898,
     1058,  898,  916,  926, 1061, 1063, 1067,  926,  935, 1070,

     1072,  951, 1074, 1077, 1079,  943,  961,  958,  961,  988,
     1025, 1083, 1031, 1087, 1035, 1049, 1050, 1097, 1099, 1054,
     1045, 1101, 1060, 1104, 1106, 1048, 1071, 1110, 1076, 1071,
     1076, 1074, 1069, 1065, 1066, 1105, 1066, 4684, 1068, 1074,
     1088, 1070, 1086, 1076, 1078, 1131, 1076, 1096, 1093, 1084,
     1088, 1082, 1090, 1094, 1095, 1102, 1088, 4684, 1144, 1147,
     1140, 1108, 1109, 1132, 1120, 1112, 1127, 1108, 1105, 1161,
     1163, 1165, 1167, 1149, 1169, 1129, 1120, 4684, 1127, 1111,
     1153, 1124, 1160, 1123, 1136, 1185, 1187, 1189, 1127, 1134,
     1135, 1151, 1138, 1153, 1167, 1151, 1198, 1203, 1163, 4684,

     1205, 1208, 1158, 1160, 1162, 4684, 1172, 1166, 1161, 1155,
     1221, 1162, 1166, 1182, 1205, 1180, 1189, 1228, 1179, 1169,
     4684, 4684, 1189, 1236, 1175, 1238, 1240, 1243, 1246, 1253,
     1255, 1207, 1193, 4684, 4684, 1220, 1259, 4684, 4684, 1261,
     1260, 1260, 1268, 1270, 1274, 1229, 1227, 1223, 1225, 1264,
     1226, 1285, 1287, 1289, 1291, 1293, 1239, 1245, 1259, 1241,
     1257, 1248, 1250, 1305, 1246, 1269, 1267, 1258, 1262, 1256,
     1264, 1268, 1269, 1276, 1262, 1318, 1321, 1323, 1325, 1285,
     1286, 1309, 1330, 1290, 1307, 1286, 1284, 1340, 1342, 1346,
     1349, 1295, 1292, 1351, 1302, 1290, 1332, 1356, 1358, 1360,

     1309, 1346, 1313, 1369, 1325, 1374, 1376, 1378, 1316, 1323,
     1324, 1340, 1327, 1342, 1356, 1340, 1387, 1392, 1394, 1396,
     1352, 1398, 1400, 1403, 1353, 1410, 1355, 1358, 1416, 1370,
     1365, 1418, 1374, 4684, 4684, 1375, 1367, 1382, 1368, 1380,
     4684, 1376, 1371, 1374, 1434, 1436, 1374, 1375, 1400, 1420,
     1420, 4684, 1424, 1389, 1396, 1404, 1413, 1450, 1406, 1454,
     4684, 1407, 1405, 4684, 1400, 1408, 1430, 1409, 1465, 1467,
     1419, 1471, 1473, 1437, 1420, 1418, 1440, 1437, 1423, 1435,
     1436, 1442, 1429, 1487, 1443, 1489, 1449, 1451, 1451, 1466,
     1442, 1444, 1459, 1498, 1486, 1502, 1505, 1508, 1458, 1455,

     1516, 1457, 4684, 1472, 1463, 1477, 1475, 1522, 1524, 1526,
     1532, 1482, 1534, 1481, 1493, 1490, 1540, 1542, 1511, 1549,
     1537, 1570, 1573, 1502, 1552, 1580, 1553, 1553, 1586, 1502,
     1505, 1515, 1588, 1590, 4684, 4684, 1596, 1598, 1604, 1565,
     1570, 1611, 1531, 1613, 1615, 1533, 1527, 1617, 1619, 1621,
     1623, 1550, 1537, 1554, 1631, 1555, 1551, 1570, 1633, 1637,
     1571, 1572, 1597, 1620, 1640, 1642, 1632, 1589, 1596, 1610,
     1618, 1658, 1662, 1664, 1668, 1670, 1605, 1674, 1676, 1626,
     1679, 1598, 1613, 1640, 1627, 1686, 1690, 1692, 1646, 1632,
     1695, 1697, 1640, 1662, 1659, 1702, 1647, 1660, 1661, 1667,

     1654, 1711, 1713, 1715, 1675, 1677, 1677, 1720, 1669, 1671,
     1686, 1725, 1731, 1736, 1733, 1675, 1738, 1673, 1741, 1743,
     1745, 1692, 1749, 1710, 1757, 1759, 1698, 1719, 1762, 1765,
     1710, 1717, 1723, 1713, 1751, 1722, 1734, 1729, 1730, 1778,
     4684, 1734, 1724, 1740, 1745, 1735, 1747, 1734, 1729, 1749,
     1751, 1748, 1749, 1766, 1755, 1738, 1796, 1783, 1799, 1759,
     1770, 1765, 1754, 1764, 1754, 1746, 1771, 1813, 1755, 4684,
     1773, 1759, 1779, 1772, 1764, 1771, 4684, 4684, 1765, 1822,
     1824, 1785, 1808, 1771, 1792, 1800, 1775, 1810, 1795, 1835,
     1838, 1831, 1841, 1791, 1798, 1795, 4684, 1804, 1791, 1787,

     1849, 1852, 1859, 1851, 1851, 1865, 1867, 1806, 1869, 1871,
     1819, 1828, 1817, 1877, 1878, 1879, 1823, 1886, 1888, 1838,
     1843, 1838, 1844, 1845, 1859, 1863, 1870, 1864, 1903, 1902,
     1902, 1852, 4684, 4684, 1855, 1878, 1854, 1914, 1910, 1915,
     1923, 1918, 1920, 4684, 4684, 1929, 1931, 1870, 1933, 1935,
     1937, 1939, 1890, 1896, 1945, 1886, 1927, 1898, 1950, 1953,
     1915, 1910, 1911, 1958, 1960, 1916, 1906, 1922, 1928, 1967,
     1969, 1922, 1972, 1976, 1936, 1926, 1921, 1941, 1943, 1941,
     1942, 1960, 1947, 1989, 1991, 1993, 1995, 1997, 1957, 2000,
     1970, 1965, 2004, 2007, 1959, 1969, 1959, 1951, 2014, 1961,

     2017, 2020, 1980, 1966, 1986, 1979, 1971, 1978, 2028, 2030,
     2033, 2035, 1981, 2038, 2040, 2001, 2025, 1990, 2049, 2051,
     2016, 2024, 1999, 2034, 2019, 2059, 2061, 2011, 2019, 2066,
     2018, 2069, 2071, 2073, 2075, 2035, 2078, 2080, 2020, 2045,
     2024, 2030, 2038, 2032, 2044, 2039, 2050, 2042, 2043, 2047,
     2049, 2056, 2043, 2049, 2063, 2055, 2048, 2064, 2049, 2054,
     2069, 2053, 2067, 2110, 2112, 2105, 2065, 2076, 2077, 2079,
     2077, 2082, 2089, 2072, 2103, 2068, 2080, 2086, 2076, 2087,
     2088, 2098, 2132, 2103, 2090, 2091, 2082, 2089, 2117, 2095,
     2091, 2094, 2144, 2090, 2090, 2108, 2111, 2099, 4684, 2131,

     2152, 2153, 2153, 4684, 4684, 2159, 2110, 2164, 2159, 2161,
     2118, 2113, 2129, 4684, 4684, 2119, 2173, 4684, 4684, 2124,
     2179, 2119, 2139, 2143, 2132, 2137, 2140, 2129, 2135, 2156,
     2140, 2135, 4684, 4684, 2145, 2146, 2132, 2153, 4684, 4684,
     4684, 4684, 2196, 2136, 2199, 2201, 2165, 2143, 2149, 2157,
     2150, 2208, 2164, 2159, 2170, 2213, 2215, 2165, 2166, 2170,
     2172, 2221, 2181, 2224, 2170, 2176, 2191, 2183, 2176, 2192,
     2177, 2182, 2197, 2181, 2237, 2239, 2191, 2202, 2203, 2244,
     2207, 2205, 2210, 2217, 2230, 2251, 2253, 2199, 2210, 2216,
     2206, 2217, 2218, 2261, 2263, 2267, 2269, 2271, 2232, 2273,

     2243, 2231, 2232, 2223, 2280, 2233, 2261, 2239, 2235, 2238,
     2231, 2249, 2252, 2291, 2293, 2295, 2246, 2298, 2300, 2302,
     4684, 2249, 4684, 4684, 2263, 2250, 2265, 2258, 2254, 2260,
     2257, 2272, 2273, 2266, 2272, 2263, 2271, 2279, 2276, 2266,
     2291, 2285, 2276, 2281, 2278, 2329, 2282, 2290, 2295, 2292,
     2293, 2295, 2297, 2292, 2297, 2279, 4684, 2289, 2300, 2292,
     2304, 2289, 2294, 2290, 2293, 2300, 4684, 2308, 4684, 2299,
     2293, 2311, 2302, 2355, 4684, 2300, 2318, 2308, 2319, 2304,
     4684, 4684, 2362, 4684, 4684, 2322, 2365, 2367, 2327, 2371,
     2373, 2377, 2325, 2330, 2359, 2334, 2388, 2342, 2341, 2350,

     2391, 2334, 2394, 2343, 2336, 2345, 2399, 2403, 2346, 2406,
     2409, 2369, 2356, 2372, 2364, 2360, 2419, 2371, 2368, 2383,
     2384, 2378, 2383, 2375, 2383, 2391, 2388, 2378, 2403, 2397,
     2388, 2393, 2399, 2404, 2401, 2402, 2404, 2406, 2401, 2387,
     2449, 2451, 2401, 2412, 2404, 2416, 2401, 2458, 2460, 2410,
     2406, 2409, 2416, 2467, 2427, 2470, 2420, 2414, 2432, 2475,
     2477, 2422, 2480, 2443, 2486, 2488, 2493, 2422, 2441, 4684,
     2439, 2496, 2465, 4684, 2499, 2444, 4684, 2460, 2448, 2449,
     2472, 2469, 2472, 2460, 2461, 2477, 2474, 2479, 2518, 2474,
     2470, 2473, 4684, 2468, 4684, 2482, 2462, 2526, 2475, 2478,

     2475, 2475, 2475, 2501, 2510, 2498, 2495, 2496, 4684, 2488,
     2488, 2525, 2485, 2544, 2546, 2502, 2507, 2509, 2490, 2514,
     2553, 2555, 2506, 2561, 2563, 2565, 2568, 2570, 2572, 2576,
     2517, 2580, 2536, 2526, 2564, 2539, 2587, 2589, 2551, 2537,
     2563, 2552, 2595, 2597, 2557, 2602, 2604, 2559, 2568, 2558,
     2587, 2568, 2611, 2613, 2617, 2620, 2553, 2622, 2626, 2628,
     2630, 2574, 2633, 2579, 2638, 2603, 2640, 2644, 2585, 2646,
     2607, 2594, 2594, 2617, 2614, 2618, 2605, 2606, 2622, 2620,
     2625, 2613, 2616, 2666, 2613, 2669, 2629, 2609, 2620, 2674,
     2676, 2627, 2624, 2624, 2625, 2650, 2660, 2648, 2645, 2646,

     2690, 2692, 2694, 2696, 2698, 2649, 2649, 2685, 2703, 2706,
     2712, 2714, 2662, 2668, 2716, 2700, 2678, 4684, 2721, 2708,
     2724, 2674, 2731, 2713, 2734, 2687, 2682, 2706, 2684, 2703,
     2685, 2704, 2689, 2718, 2691, 4684, 2710, 2750, 2752, 2714,
     2698, 2718, 4684, 4684, 2715, 2758, 2760, 2707, 4684, 4684,
     4684, 2711, 2712, 2720, 2712, 2728, 2713, 2714, 2723, 2717,
     2719, 2775, 2725, 2758, 2761, 2780, 2727, 2783, 2782, 2782,
     2732, 2790, 2795, 2797, 2799, 2805, 2738, 2746, 2807, 2747,
     2758, 2812, 2753, 2796, 2777, 2816, 2762, 2819, 2767, 2823,
     2765, 2788, 2782, 2783, 2832, 2834, 2836, 2819, 2839, 2841,

     2801, 2844, 2847, 2849, 2851, 2853, 2803, 2856, 2860, 2862,
     2867, 2816, 2869, 2872, 2814, 2842, 2820, 2838, 2821, 2840,
     2825, 2854, 2825, 2885, 2844, 2830, 2850, 2889, 2891, 2893,
     2895, 2897, 2901, 2857, 2848, 2905, 2911, 2913, 2917, 2855,
     2857, 2869, 2864, 2880, 2865, 2922, 2924, 2929, 2933, 2935,
     2879, 2876, 2937, 2940, 2890, 2923, 2906, 2894, 2946, 2948,
     2942, 2933, 2953, 2955, 2948, 4684, 2901, 2902, 2924, 2914,
     2918, 2916, 2920, 2915, 2923, 2921, 2971, 2931, 2918, 2920,
     4684, 2976, 2936, 2924, 2953, 2932, 2925, 2926, 4684, 4684,
     2942, 2947, 2946, 2936, 2939, 2937, 2938, 2992, 2994, 2939,

     4684, 4684, 2974, 2998, 4684, 4684, 2962, 2964, 3004, 3007,
     3009, 2969, 2966, 2961, 2975, 2977, 2970, 3019, 3021, 2961,
     2995, 3025, 2978, 2987, 2975, 3031, 3035, 2996, 2986, 3041,
     3043, 3046, 3048, 3032, 3052, 3054, 3056, 3060, 2993, 3005,
     3025, 3015, 3019, 3017, 3021, 3016, 3023, 3072, 3074, 3021,
     3020, 3022, 3078, 3080, 3082, 3084, 3088, 3090, 3092, 3044,
     3096, 3098, 3100, 3104, 3108, 3112, 3039, 3075, 3057, 3053,
     3057, 3116, 3118, 3120, 3124, 3126, 3080, 3090, 3078, 3081,
     3075, 3076, 3136, 3093, 3096, 3101, 3142, 3097, 3088, 3107,
     3100, 3089, 3089, 3107, 3108, 3092, 3100, 3111, 3103, 4684,

     4684, 3099, 3110, 3105, 3109, 3126, 3108, 4684, 3110, 3120,
     4684, 3121, 3115, 3105, 3166, 3150, 3126, 3124, 3114, 3172,
     3174, 3176, 3140, 3120, 3129, 3135, 3126, 3129, 3130, 3186,
     3147, 3137, 3191, 3193, 3153, 3141, 3141, 3198, 4684, 4684,
     3143, 3145, 3206, 3162, 3170, 3209, 3211, 3157, 3176, 3169,
     3158, 3158, 3176, 3177, 3161, 3169, 3222, 3183, 3226, 3228,
     3230, 3232, 3234, 3236, 3182, 3239, 3244, 3246, 3196, 3196,
     3201, 3218, 3200, 3253, 3255, 3257, 3259, 3261, 3263, 3214,
     3266, 3227, 3232, 3215, 3230, 3224, 3227, 3230, 4684, 3220,
     3228, 3238, 3240, 3248, 3228, 3243, 3235, 3270, 3248, 3233,

     3248, 3232, 4684, 3246, 3238, 3254, 3295, 3247, 3298, 3300,
     3250, 3251, 3272, 3254, 3260, 3307, 3254, 3269, 3257, 3273,
     3270, 3271, 3262, 3263, 3263, 3321, 3267, 3324, 3269, 3289,
     3272, 3280, 3282, 3331, 3333, 3278, 3285, 3295, 3297, 3305,
     3285, 3300, 3292, 3327, 3345, 3349, 3351, 3353, 3355, 3291,
     3315, 3299, 3361, 3313, 3308, 3364, 3367, 3369, 3371, 3333,
     3374, 3377, 3329, 4684, 4684, 3324, 3339, 3340, 3334, 3327,
     3329, 3331, 3371, 3352, 3358, 4684, 4684, 3337, 3351, 3348,
     3339, 3354, 3347, 3352, 3354, 3400, 3402, 3362, 3407, 3409,
     3411, 3413, 3356, 3356, 3375, 3361, 3367, 3400, 3366, 3366,

     3384, 3374, 3389, 3428, 3430, 3386, 3433, 3435, 3437, 3421,
     3440, 3445, 3401, 3406, 3450, 3453, 3398, 3400, 3402, 3442,
     3423, 3429, 3463, 3466, 3413, 3469, 3471, 3427, 3418, 3433,
     3479, 3482, 3426, 3438, 3485, 3442, 3488, 3448, 3451, 3435,
     4684, 3451, 3439, 3461, 4684, 3445, 3460, 3450, 3448, 3463,
     3502, 3452, 3472, 4684, 3464, 3465, 3462, 3509, 3460, 3512,
     3514, 3518, 3520, 3459, 3466, 3472, 3463, 3525, 3472, 3471,
     3478, 3491, 3535, 3537, 3540, 3542, 3479, 3544, 3546, 3550,
     3481, 3496, 3552, 3555, 3559, 3561, 3500, 3563, 3565, 3512,
     3534, 3570, 3520, 3535, 3526, 3524, 3579, 3581, 3583, 3586,

     3539, 3536, 3556, 3590, 3592, 3553, 3554, 3551, 3548, 3545,
     3559, 3584, 4684, 3565, 3546, 3557, 3549, 3581, 3558, 3610,
     3612, 3563, 3563, 4684, 3560, 3566, 3561, 3619, 3621, 3623,
     3626, 3628, 3630, 3576, 3581, 3635, 3638, 3602, 3595, 3587,
     3596, 3646, 3650, 3597, 3652, 3605, 3595, 3656, 3658, 3618,
     3661, 3663, 3665, 3629, 3668, 3670, 3614, 3624, 3616, 3648,
     3677, 3681, 3628, 3633, 3633, 3686, 3688, 3690, 3636, 3642,
     3637, 3649, 4684, 3641, 3648, 3647, 3641, 3658, 3650, 3663,
     3706, 3648, 3681, 4684, 3665, 3654, 3711, 3713, 3715, 3717,
     3723, 3725, 3727, 3664, 3730, 3675, 3673, 3733, 3693, 3680,

     3738, 3742, 3744, 3748, 3750, 3753, 3691, 3757, 3695, 3697,
     3718, 3709, 3722, 3707, 3737, 3766, 3768, 3770, 3772, 3730,
     3719, 3723, 3735, 3720, 3738, 3738, 3725, 3723, 3739, 4684,
     3733, 3750, 4684, 3788, 3787, 3787, 3794, 3796, 3798, 3758,
     3750, 3760, 3803, 3805, 3778, 3808, 3811, 3813, 3815, 3818,
     3820, 3823, 3826, 3770, 3789, 3789, 3776, 3774, 3789, 3836,
     3786, 3839, 3841, 3843, 3809, 3846, 3791, 3811, 3808, 3796,
     3797, 3822, 3813, 3811, 3799, 3817, 4684, 4684, 3862, 3804,
     3807, 3836, 3866, 3815, 3869, 3871, 3873, 3875, 3877, 3837,
     3824, 3825, 3884, 3840, 3840, 3887, 3889, 3832, 3892, 3852,

     3895, 3897, 3854, 3844, 3847, 4684, 4684, 3847, 4684, 3854,
     3864, 3861, 3852, 3880, 3858, 3855, 3913, 3859, 3917, 3919,
     3921, 3923, 3868, 3926, 3877, 3929, 3889, 3887, 3937, 3883,
     3887, 4684, 3885, 3898, 4684, 3899, 3898, 3892, 3889, 3901,
     3948, 3950, 3952, 3954, 3956, 3958, 3905, 3961, 3966, 3920,
     3970, 3924, 3921, 3918, 3928, 3939, 3932, 3926, 3922, 3934,
     3929, 3982, 3986, 3988, 3990, 3938, 3992, 3958, 3995, 3998,
     3955, 4001, 4003, 3954, 3964, 3950, 3957, 3963, 3959, 3961,
     4013, 3964, 3975, 4019, 3964, 4022, 4024, 4026, 4028, 3986,
     3985, 3976, 3977, 3982, 3984, 3980, 3994, 3993, 3984, 4042,

     4044, 4684, 4002, 4684, 4047, 3998, 3994, 4051, 4053, 4011,
     4056, 4013, 4059, 4062, 4008, 4066, 4069, 4074, 4076, 4078,
     4027, 4081, 4084, 4029, 4087, 4089, 4092, 4094, 4097, 4099,
     4044, 4104, 4046, 4107, 4109, 4111, 4057, 4684, 4114, 4116,
     4118, 4122, 4124, 4684, 4135, 4140, 4145, 4150, 4155, 4160,
     4165, 4170, 4175, 4179, 4184, 4189
    } ;

static yyconst flex_int16_t yy_def[2957] =
    {   0,
     2945, 2945, 2946, 2946, 2947, 2947, 2948, 2948, 2949, 2949,
     2949, 2949, 2950, 2950, 2951, 2951, 2952, 2952, 2944, 2944,
     2944, 2944,   21, 2944,   23,   23,   23,   23, 2944, 2944,
       23,   23, 2944, 2953, 2944, 2954, 2955, 2956, 2944, 2944,
     2944, 2944, 2944, 2944,   21,   23,   23,   23,   23,   23,
       29, 2944,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2944,   23,   23,   23, 2944,   23, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944,   23,   23, 2953, 2954, 2955, 2956, 2944, 2944,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944,   23, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23, 2944, 2944,   23,   23,   23,   23,   23,   23,
       23,   23, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2944, 2944,   23,
       23,   23,   23,   23,   23,   23,   23, 2944, 2944,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2944, 2944,
       23,   23,   23, 2944, 2944,   23,   23,   23,   23, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2944, 2944,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2944, 2944,   23,   23, 2944, 2944,   23,
     2944, 2944,   23,   23,   23, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2944, 2944,   23,   23,
       23,   23,   23,   23, 2944, 2944,   23,   23,   23, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,

       23,   23,   23, 2944, 2944,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2944, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2944,
     2944,   23, 2944, 2944,   23,   23,   23,   23, 2944, 2944,
       23, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,

       23, 2944, 2944, 2944, 2944,   23,   23,   23, 2944, 2944,
       23,   23,   23, 2944, 2944,   23,   23, 2944, 2944,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2944, 2944,   23,   23,   23,   23, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,
     2944, 2944,   23, 2944, 2944,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944,   23,   23,   23,   23, 2944, 2944,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,   23,

     2944, 2944,   23,   23, 2944, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944,   23, 2944, 2944,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944,   23,   23,   23,   23,   23, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,
       23, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944,   23,   23,   23,   23,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944,   23,   23,   23,   23, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944,   23,   23,   23,   23, 2944, 2944,
     2944, 2944,   23,   23,   23,   23,   23,   23, 2944, 2944,
     2944, 2944, 2944, 2944,   23,   23,   23,   23,   23, 2944,
     2944, 2944, 2944,   23,   23,   23, 2944, 2944,   23, 2944,
     2944, 2944, 2944,    0, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944
    } ;

static yyconst flex_int16_t yy_nxt[4751] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2944,   40,
       44,   41,   44,  719,   31,   41,  101,  101,   48,   32,
       50,   50,   50,   48,  379,   50,   50,   50,  720,   72,
       72,  101,  101,   53,   76,   76, 2944,  111,   53,   73,
       73,   73,   48,  114,   50,   50,   50,  380,  120,   74,
     2944,  112,  166,  115,   74,   33,   20,   21,   21,   20,
       22,  121,   24,  167,   25,   26,   27,   28,   28,   28,
       29,   74,   30,   20,  118,  122,   74,   72,   72,  124,
       31,  182,   76,   76,  119,   32,  183,   73,   73,   73,

       48,  130,   50,   50,   50,  123,  238,   74,  127,  125,
      134,  184,   74,  239,  128,  131,   72,   72,  132,  185,
      129,  539,  135,   76,   76,  133,  169,  200, 1009,   74,
      170,   33,   45,   45,   74,  540,   46,  201,   46,   47,
       48,   49,   50,   50,   50,   51,   46,   52, 1010,   46,
       46,   46,   46,   46,   46,   53,   46,   46,   46,   46,
       54,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   55,   56,   57,   58,   59,   60,   46,   61,   46,
       46,   62,   63,   64,   65,   46,   46,   46,   66,   67,
       68,   69,   70,   46,   46,   46,   46,   46,  101,  101,

     1011,  241,  241,   46,   46,   46,   46,   46,   46, 2944,
      163, 2944,  138,  138,  209,  242,  139,  139,  139,   46,
      164,   72,   72,  210,   46,  353,  354,  228,  165,  212,
      211,   73,   73,   73,  213,   46,   46,   46,   46,   46,
       46,   74,   46,  229,  248,   46,   46,   46,   46,  219,
      249,  245,   46,   46,   46,   46,   46,   77,  220,  766,
      171,  767,  172,   74,   78,  177,  173,  246, 1012,  191,
      186,   79,  174,  178,  187,   80,  252,  252,  179,  180,
     1013,  188,  255,  192,  189,   81,  193,  194,  195,  672,
      190,  253,  256,   82,   83,   84,   85,   86,   87,   88,

      257,   89,   90,  673,   91,   92,   93,   94,   95,  196,
       96,   97,   98,   99,  100,  141,  139,  139,  139,  258,
      197,  276,  274,  198,  261,  142,  199,  275,  262,  277,
      259,   72,   72,  143,  144,  145,  146,  147,  148,  149,
     1014,  150,  151,  309,  152,  153,  154,  155,  156,  310,
      157,  158,  159,  160,  161,  202,  292,  311,  317,  203,
     1015,  318,   72,   72,  304,  204,  293,  205,  337,  305,
      206,  207,  139,  139,  139,  208,  263,  269,  264,  338,
      301,  283,  265,  278,  893,  270,  894,  279,  266,  302,
      271,  272, 1016,  288,  280,  284,  303,  281,  285,  286,

      287,  294,  319,  282,  289,  295,  320,  290,  327,  327,
      291,  296,  314,  297,  315,  329,  298,  299,  341,  316,
      330,  300,  342,  328,  339,  339,  362,  331,  962,  367,
      332,  333,  368,  363,  428,  364,  386,  386,  429,  340,
      241,  241,  402,  402,  963,  403,  448,  404,  252,  252,
      387,  413,  413,  418,  242,  414,  414,  449,  423,  419,
      424,  426,  452,  253,  427,  425,  453,  420,  430,  430,
      415,  438,  438,  440,  480,  450,  450,  481,  441,  457,
      457,  466,  467,  431,  475,  442,  439, 1017,  443,  444,
      451,  476, 1018,  477,  458,  495,  489,  489, 1019,  496,

      499,  500,  501,  501,  509,  509,  511,  511,  327,  327,
      432,  490,  515,  515,  339,  339, 1020,  502,  622,  510,
      572,  512,  623,  328,  526,  526,  528,  528,  573,  340,
      531,  531,  551,  552,  940,  556,  556,  563,  563,  577,
      577,  529, 1021,  574,  735,  532,  584,  584,  533,  534,
      557,  941,  564,  578,  386,  386, 1022,  535,  845,  530,
      585,  587,  587,  588,  588,  594,  594, 1023,  387,  596,
      596,  402,  402,  846,  403,  862,  404,  589, 1024,  595,
      606,  606,  736,  597,  610,  610,  413,  413,  536,  414,
      414,  615,  615,  779,  607,  616,  616,  780,  611,  626,

      626,  630,  630, 1025,  415,  430,  430,  636,  636, 1032,
      617,  639,  639,  863,  627,  908,  631,  641,  641,  909,
      431,  438,  438,  645,  645, 1033,  640,  653,  653,  450,
      450, 1034,  642,  658,  658, 1035,  439,  660,  660,  663,
      663,  954,  654,  955,  451,  457,  457,  671,  671, 1036,
      655, 1037,  661, 1038,  664,  628,  629,  665,  666, 1039,
      458,  675,  675,  686,  687, 1043,  667,  691,  691, 1046,
      662,  694,  694,  700,  700, 1047,  676,  709,  709,  489,
      489, 1048,  692,  714,  714, 1049,  695, 1050,  701,  501,
      501, 1051,  710, 1057,  490,  726,  726,  668,  509,  509,

      711,  733,  733,  677,  502, 1058,  696, 1060,  712,  511,
      511,  734,  734,  510,  515,  515,  744,  744,  526,  526,
      528,  528, 1059,  713,  512,  745,  751,  751,  531,  531,
     1061,  746,  753,  753, 1062,  529,  758,  758,  768,  768,
      774,  774, 1063,  532, 1064,  759,  556,  556,  783,  783,
     1065,  760, 1066,  769, 1067,  775,  563,  563,  789,  789,
     1068,  557,  577,  577,  801,  801,  584,  584, 1069,  807,
      807,  564,  808, 1070,  809, 1071,  578,  587,  587, 1074,
      585,  588,  588,  811,  811,  594,  594,  816,  816,  596,
      596,  817,  817, 1075,  818,  589,  819,  606,  606,  595,

     1076,  828,  828,  597,  829, 1082,  830,  610,  610,  833,
      833,  607,  834, 1083,  835,  836,  836,  615,  615,  616,
      616,  611,  840,  840,  626,  626,  850,  850, 1080,  837,
      630,  630,  853,  853,  617,  636,  636,  639,  639,  627,
      860,  860,  641,  641, 1081,  631,  861,  861,  645,  645,
      871,  871,  640,  653,  653,  873,  873,  642,  658,  658,
      660,  660,  878,  878, 1084,  872,  663,  663,  654,  880,
      880,  885,  885,  671,  671,  661,  675,  675,  891,  891,
     1085,  664,  895,  895,  900,  900,  886,  903,  903,  691,
      691,  676,  912,  912,  694,  694, 1072,  896, 1073,  901,

      914,  914,  904, 1086,  692,  700,  700,  919,  919,  695,
      924,  924,  709,  709,  902,  928,  928,  714,  714, 1087,
      701,  726,  726,  733,  733,  925, 1091,  710,  734,  734,
      744,  744, 1092,  960,  960,  751,  751,  753,  753,  745,
      970,  970,  758,  758, 1093,  746,  961,  973,  973,  768,
      768,  759,  774,  774, 1094,  971, 1095,  760,  986,  986,
      974,  987,  987, 1096,  769,  783,  783,  775,  789,  789,
     1001, 1001,  801,  801,  807,  807,  988,  808, 1097,  809,
      811,  811,  816,  816, 1102, 1002,  817,  817, 1103,  818,
     1105,  819, 1026, 1026, 1028, 1028, 1030, 1030,  828,  828,

     1109,  829, 1110,  830,  833,  833, 1027,  834, 1029,  835,
     1031,  836,  836, 1040, 1040, 1111, 1041, 1112, 1042, 1044,
     1044,  840,  840, 1052, 1052,  837, 1054, 1054,  850,  850,
      853,  853, 1113, 1045,  860,  860,  861,  861, 1053,  871,
      871, 1055, 1077, 1077,  873,  873, 1078, 1078,  878,  878,
      880,  880, 1088, 1088,  872,  885,  885, 1090, 1090,  891,
      891, 1079,  895,  895, 1098, 1098, 1114, 1089, 1099, 1099,
      886,  900,  900, 1104, 1104,  903,  903,  896, 1106, 1106,
     1107, 1107, 1056, 1100,  912,  912,  901, 1115,  914,  914,
      904, 1116, 1117, 1118, 1121, 1108, 1122, 1101, 1119, 1119,

      919,  919, 1123, 1123, 1125,  924,  924, 1126, 1126, 1127,
     1128,  928,  928, 1120, 1129, 1130, 1131, 1124, 1132, 1133,
      925, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1145, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1158, 1158, 1146,  960,  960,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1171,
     1166,  961,  970,  970, 1169, 1169, 1170, 1170,  973,  973,
     1172, 1172, 1174, 1175, 1176, 1177, 1178,  971, 1179, 1182,
     1180,  974, 1181, 1183, 1185, 1173,  986,  986,  987,  987,
     1184, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194,

     1194, 1192, 1200,  988, 1197, 1197, 1001, 1001, 1195, 1201,
     1201, 1202, 1203, 1204, 1196, 1205, 1206, 1207, 1208, 1198,
     1211, 1002, 1209, 1209, 1212, 1213, 1214, 1215, 1216, 1217,
     1217, 1219, 1220, 1221, 1224, 1199, 1210, 1222, 1222, 1026,
     1026, 1225, 1225, 1218, 1028, 1028, 1230, 1226, 1226, 1231,
     1227, 1223, 1228, 1027, 1030, 1030, 1229, 1229, 1029, 1232,
     1233, 1233, 1040, 1040, 1235, 1041, 1236, 1042, 1031, 1237,
     1237, 1044, 1044, 1242, 1234, 1239, 1239, 1243, 1240, 1244,
     1241, 1245, 1246, 1238, 1247, 1045, 1052, 1052, 1248, 1248,
     1054, 1054, 1249, 1249, 1250, 1250, 1252, 1253, 1254, 1255,

     1256, 1053, 1257, 1258, 1261, 1055, 1259, 1259, 1262, 1251,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
     1272, 1260, 1077, 1077, 1078, 1078, 1274, 1274, 1275, 1276,
     1277, 1278, 1278, 1281, 1273, 1284, 1282, 1285, 1289, 1079,
     1283, 1088, 1088, 1286, 1286, 1290, 1279, 1090, 1090, 1293,
     1287, 1287, 1291, 1291, 1294, 1295, 1089, 1098, 1098, 1099,
     1099, 1296, 1296, 1297, 1280, 1288, 1298, 1292, 1299, 1300,
     1104, 1104, 1301, 1303, 1100, 1106, 1106, 1107, 1107, 1302,
     1302, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1312,
     1310, 1318, 1108, 1314, 1314, 1119, 1119, 1317, 1317, 1319,

     1319, 1123, 1123, 1313, 1321, 1321, 1322, 1323, 1315, 1324,
     1120, 1126, 1126, 1327, 1320, 1328, 1124, 1325, 1325, 1329,
     1329, 1331, 1332, 1333, 1316, 1334, 1335, 1336, 1337, 1338,
     1339, 1341, 1326, 1342, 1330, 1145, 1145, 1340, 1340, 1343,
     1344, 1346, 1347, 1348, 1349, 1352, 1353, 1354, 1345, 1355,
     1146, 1158, 1158, 1356, 1350, 1357, 1357, 1360, 1361, 1363,
     1351, 1362, 1364, 1365, 1358, 1366, 1169, 1169, 1170, 1170,
     1359, 1367, 1172, 1172, 1368, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1173, 1184, 1184,
     1380, 1380, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1194,

     1194, 1386, 1390, 1391, 1391, 1381, 1197, 1197, 1195, 1393,
     1393, 1394, 1395, 1396, 1196, 1397, 1392, 1201, 1201, 1398,
     1399, 1198, 1400, 1401, 1401, 1209, 1209, 1403, 1403, 1408,
     1404, 1411, 1405, 1406, 1406, 1409, 1409, 1402, 1412, 1210,
     1413, 1217, 1217, 1414, 1414, 1417, 1415, 1407, 1416, 1410,
     1418, 1418, 1432, 1225, 1225, 1218, 1420, 1433, 1421, 1434,
     1435, 1422, 1423, 1436, 1419, 1437, 1424, 1425, 1426, 1444,
     1427, 1222, 1222, 1428, 1429, 1429, 1445, 1430, 1448, 1431,
     1453, 1226, 1226, 1454, 1227, 1223, 1228, 1229, 1229, 1233,
     1233, 1438, 1438, 1456, 1439, 1457, 1440, 1237, 1237, 1441,

     1441, 1458, 1442, 1234, 1443, 1239, 1239, 1461, 1240, 1462,
     1241, 1238, 1446, 1446, 1449, 1449, 1451, 1451, 1248, 1248,
     1249, 1249, 1250, 1250, 1455, 1455, 1463, 1447, 1465, 1450,
     1466, 1452, 1459, 1459, 1259, 1259, 1467, 1251, 1464, 1464,
     1468, 1470, 1470, 1473, 1473, 1480, 1481, 1460, 1469, 1260,
     1475, 1476, 1477, 1482, 1483, 1489, 1471, 1495, 1474, 1272,
     1272, 1472, 1478, 1484, 1484, 1274, 1274, 1496, 1479, 1485,
     1485, 1487, 1487, 1497, 1273, 1278, 1278, 1490, 1490, 1491,
     1493, 1493, 1492, 1498, 1486, 1500, 1488, 1286, 1286, 1501,
     1279, 1287, 1287, 1499, 1499, 1494, 1291, 1291, 1502, 1502,

     1503, 1504, 1505, 1296, 1296, 1506, 1288, 1507, 1508, 1509,
     1510, 1292, 1302, 1302, 1511, 1511, 1514, 1514, 1516, 1517,
     1518, 1519, 1519, 1523, 1524, 1525, 1312, 1312, 1528, 1512,
     1529, 1515, 1526, 1526, 1527, 1527, 1520, 1314, 1314, 1317,
     1317, 1313, 1319, 1319, 1530, 1530, 1321, 1321, 1531, 1521,
     1532, 1532, 1315, 1534, 1536, 1522, 1513, 1320, 1325, 1325,
     1535, 1535, 1537, 1329, 1329, 1533, 1538, 1538, 1539, 1540,
     1541, 1542, 1543, 1326, 1544, 1545, 1546, 1547, 1330, 1340,
     1340, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1562, 1561, 1563, 1357, 1357, 1564,

     1565, 1565, 1567, 1568, 1569, 1570, 1358, 1571, 1572, 1573,
     1574, 1575, 1359, 1566, 1368, 1368, 1576, 1577, 1578, 1579,
     1580, 1581, 1582, 1380, 1380, 1583, 1583, 1584, 1585, 1587,
     1586, 1588, 1589, 1590, 1591, 1592, 1593, 1593, 1381, 1391,
     1391, 1594, 1393, 1393, 1595, 1596, 1597, 1598, 1599, 1600,
     1401, 1401, 1392, 1601, 1601, 1604, 1602, 1605, 1603, 1607,
     1403, 1403, 1611, 1404, 1402, 1405, 1406, 1406, 1606, 1606,
     1409, 1409, 1608, 1608, 1612, 1609, 1613, 1610, 1414, 1414,
     1407, 1415, 1614, 1416, 1410, 1615, 1616, 1418, 1418, 1617,
     1617, 1620, 1618, 1621, 1619, 1622, 1623, 1624, 1625, 1626,

     1630, 1419, 1628, 1632, 1429, 1429, 1633, 1430, 1634, 1431,
     1635, 1636, 1637, 1638, 1639, 1438, 1438, 1627, 1439, 1629,
     1440, 1640, 1641, 1631, 1441, 1441, 1642, 1442, 1644, 1443,
     1446, 1446, 1643, 1643, 1449, 1449, 1645, 1645, 1451, 1451,
     1646, 1646, 1647, 1648, 1649, 1447, 1455, 1455, 1650, 1450,
     1651, 1459, 1459, 1452, 1652, 1652, 1653, 1654, 1655, 1464,
     1464, 1656, 1656, 1658, 1659, 1660, 1460, 1661, 1470, 1470,
     1662, 1662, 1663, 1473, 1473, 1665, 1657, 1664, 1664, 1666,
     1667, 1668, 1669, 1471, 1670, 1671, 1674, 1672, 1474, 1673,
     1484, 1484, 1485, 1485, 1675, 1675, 1487, 1487, 1676, 1676,

     1677, 1490, 1490, 1678, 1679, 1493, 1493, 1486, 1680, 1680,
     1681, 1488, 1682, 1683, 1684, 1499, 1499, 1685, 1686, 1686,
     1494, 1502, 1502, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
     1694, 1696, 1696, 1687, 1511, 1511, 1698, 1698, 1699, 1514,
     1514, 1700, 1700, 1701, 1695, 1702, 1697, 1703, 1704, 1512,
     1519, 1519, 1705, 1705, 1515, 1706, 1707, 1708, 1709, 1710,
     1526, 1526, 1527, 1527, 1711, 1520, 1712, 1530, 1530, 1713,
     1532, 1532, 1714, 1714, 1715, 1715, 1535, 1535, 1717, 1718,
     1718, 1538, 1538, 1721, 1722, 1533, 1723, 1724, 1725, 1716,
     1726, 1727, 1728, 1729, 1719, 1730, 1731, 1732, 1733, 1734,

     1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
     1745, 1746, 1746, 1565, 1565, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1566, 1758, 1759, 1760,
     1761, 1762, 1763, 1583, 1583, 1720, 1764, 1765, 1766, 1767,
     1768, 1769, 1770, 1771, 1772, 1593, 1593, 1773, 1774, 1775,
     1776, 1777, 1778, 1601, 1601, 1779, 1602, 1781, 1603, 1782,
     1606, 1606, 1783, 1784, 1780, 1608, 1608, 1785, 1609, 1786,
     1610, 1787, 1788, 1789, 1617, 1617, 1790, 1618, 1793, 1619,
     1791, 1791, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1792, 1806, 1807, 1643, 1643, 1808,

     1645, 1645, 1646, 1646, 1809, 1810, 1811, 1812, 1813, 1652,
     1652, 1814, 1815, 1816, 1656, 1656, 1817, 1817, 1818, 1819,
     1820, 1821, 1662, 1662, 1822, 1664, 1664, 1823, 1824, 1657,
     1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1675, 1675,
     1676, 1676, 1833, 1834, 1835, 1680, 1680, 1836, 1837, 1838,
     1839, 1840, 1686, 1686, 1841, 1841, 1842, 1843, 1844, 1845,
     1846, 1847, 1694, 1694, 1848, 1848, 1850, 1687, 1696, 1696,
     1849, 1849, 1698, 1698, 1700, 1700, 1851, 1695, 1852, 1853,
     1854, 1705, 1705, 1697, 1855, 1856, 1857, 1858, 1859, 1860,
     1861, 1862, 1714, 1714, 1715, 1715, 1863, 1863, 1864, 1718,

     1718, 1865, 1865, 1866, 1866, 1868, 1869, 1870, 1871, 1716,
     1872, 1873, 1874, 1875, 1719, 1876, 1877, 1878, 1867, 1879,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
     1746, 1746, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
     1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
     1908, 1909, 1910, 1911, 1912, 1913, 1914, 1914, 1916, 1917,
     1918, 1919, 1920, 1921, 1921, 1923, 1924, 1924, 1926, 1926,
     1928, 1915, 1929, 1929, 1791, 1791, 1933, 1922, 1932, 1932,
     1925, 1934, 1927, 1935, 1936, 1940, 1930, 1941, 1792, 1937,
     1937, 1942, 1943, 1943, 1945, 1946, 1946, 1950, 1951, 1952,

     1953, 1953, 1957, 1938, 1955, 1955, 1944, 1958, 1958, 1947,
     1960, 1960, 1962, 1963, 1954, 1964, 1965, 1966, 1948, 1956,
     1817, 1817, 1959, 1967, 1968, 1961, 1969, 1970, 1931, 1971,
     1972, 1939, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
     1981, 1949, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
     1841, 1841, 1990, 1990, 1992, 1993, 1994, 1995, 1996, 1848,
     1848, 1849, 1849, 1997, 1998, 1999, 2000, 1991, 2001, 2001,
     2003, 2004, 2004, 2006, 2007, 2008, 2009, 2009, 2011, 2011,
     2013, 1863, 1863, 2002, 2014, 2016, 2005, 1865, 1865, 1866,
     1866, 2010, 2017, 2012, 2015, 2015, 2018, 2019, 2019, 2022,

     2023, 2023, 2026, 2027, 1867, 2028, 2020, 2029, 2030, 2024,
     2031, 2032, 2021, 2033, 2034, 2025, 2035, 2036, 2037, 2038,
     2038, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2046, 2048,
     2049, 2050, 2051, 2052, 2039, 2053, 2054, 2055, 2056, 2057,
     2058, 2059, 2047, 2060, 2061, 1914, 1914, 2062, 2062, 2063,
     2064, 2065, 2066, 2067, 1921, 1921, 2068, 2068, 2071, 2069,
     1915, 2070, 1924, 1924, 2072, 2072, 1926, 1926, 1922, 2073,
     2073, 2074, 2074, 1929, 1929, 2077, 1925, 2076, 2076, 2078,
     1927, 1932, 1932, 2079, 2080, 2075, 2081, 1930, 1937, 1937,
     2082, 2082, 2083, 2084, 2085, 2087, 1943, 1943, 2088, 2088,

     2089, 2091, 1938, 1946, 1946, 2090, 2090, 2092, 2093, 2094,
     1944, 2095, 1953, 1953, 2096, 2096, 2098, 1947, 1955, 1955,
     2086, 2097, 2097, 1958, 1958, 2101, 1954, 2099, 2099, 1960,
     1960, 2100, 2100, 1956, 2102, 2102, 2104, 2107, 1959, 2105,
     2105, 2108, 2108, 2112, 1961, 2110, 2110, 2113, 2113, 2103,
     2115, 2116, 2117, 2118, 2106, 2119, 2109, 2120, 2121, 2122,
     2111, 2123, 2114, 2124, 2125, 2126, 2127, 2128, 2128, 2130,
     2131, 2131, 2133, 2134, 2135, 1990, 1990, 2136, 2136, 2137,
     2138, 2139, 2129, 2140, 2141, 2132, 2142, 2143, 2144, 2145,
     1991, 2001, 2001, 2146, 2146, 2147, 2147, 2004, 2004, 2149,

     2149, 2150, 2151, 2152, 2009, 2009, 2002, 2153, 2153, 2155,
     2148, 2156, 2005, 2011, 2011, 2154, 2154, 2015, 2015, 2010,
     2157, 2158, 2019, 2019, 2159, 2160, 2160, 2162, 2012, 2163,
     2166, 2020, 2023, 2023, 2167, 2164, 2164, 2021, 2161, 2168,
     2169, 2024, 2170, 2171, 2172, 2173, 2174, 2025, 2165, 2175,
     2176, 2038, 2038, 2177, 2177, 2178, 2179, 2180, 2181, 2046,
     2046, 2182, 2182, 2183, 2184, 2185, 2039, 2186, 2187, 2188,
     2189, 2190, 2191, 2192, 2047, 2193, 2062, 2062, 2194, 2195,
     2196, 2198, 2198, 2200, 2068, 2068, 2201, 2069, 2202, 2070,
     2203, 2072, 2072, 2197, 2207, 2199, 2073, 2073, 2074, 2074,

     2204, 2204, 2208, 2205, 2211, 2206, 2076, 2076, 2209, 2209,
     2212, 2213, 2075, 2082, 2082, 2214, 2217, 2218, 2218, 2220,
     2088, 2088, 2210, 2221, 2090, 2090, 2215, 2222, 2223, 2224,
     2225, 2219, 2216, 2226, 2226, 2096, 2096, 2097, 2097, 2228,
     2099, 2099, 2100, 2100, 2229, 2102, 2102, 2227, 2230, 2230,
     2231, 2231, 2105, 2105, 2233, 2233, 2234, 2108, 2108, 2237,
     2103, 2235, 2235, 2110, 2110, 2232, 2239, 2106, 2236, 2236,
     2113, 2113, 2109, 2238, 2238, 2240, 2241, 2242, 2111, 2243,
     2244, 2245, 2246, 2247, 2250, 2114, 2248, 2248, 2251, 2252,
     2128, 2128, 2253, 2253, 2254, 2254, 2131, 2131, 2256, 2256,

     2259, 2249, 2257, 2257, 2260, 2129, 2136, 2136, 2267, 2255,
     2268, 2132, 2261, 2261, 2263, 2263, 2269, 2258, 2265, 2265,
     2270, 2271, 2272, 2146, 2146, 2147, 2147, 2262, 2277, 2264,
     2273, 2273, 2278, 2266, 2149, 2149, 2274, 2274, 2153, 2153,
     2148, 2154, 2154, 2279, 2280, 2281, 2282, 2283, 2283, 2160,
     2160, 2275, 2284, 2285, 2287, 2287, 2164, 2164, 2288, 2289,
     2290, 2286, 2161, 2291, 2292, 2293, 2294, 2295, 2296, 2165,
     2297, 2298, 2177, 2177, 2299, 2300, 2301, 2182, 2182, 2302,
     2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312,
     2313, 2314, 2276, 2198, 2198, 2315, 2315, 2316, 2317, 2204,

     2204, 2318, 2205, 2319, 2206, 2209, 2209, 2199, 2320, 2320,
     2321, 2321, 2323, 2324, 2325, 2326, 2328, 2329, 2331, 2210,
     2218, 2218, 2330, 2330, 2322, 2332, 2333, 2333, 2335, 2327,
     2336, 2337, 2226, 2226, 2219, 2341, 2338, 2338, 2342, 2339,
     2334, 2340, 2230, 2230, 2231, 2231, 2227, 2343, 2343, 2233,
     2233, 2348, 2344, 2235, 2235, 2236, 2236, 2346, 2346, 2232,
     2345, 2238, 2238, 2349, 2350, 2351, 2352, 2353, 2354, 2355,
     2356, 2358, 2347, 2248, 2248, 2357, 2357, 2359, 2360, 2253,
     2253, 2254, 2254, 2361, 2361, 2256, 2256, 2365, 2249, 2257,
     2257, 2362, 2362, 2363, 2363, 2369, 2255, 2261, 2261, 2366,

     2366, 2263, 2263, 2370, 2258, 2367, 2367, 2371, 2364, 2265,
     2265, 2372, 2262, 2368, 2368, 2373, 2264, 2374, 2374, 2273,
     2273, 2274, 2274, 2379, 2266, 2376, 2376, 2377, 2377, 2380,
     2381, 2382, 2375, 2383, 2384, 2385, 2275, 2283, 2283, 2386,
     2387, 2388, 2378, 2287, 2287, 2389, 2390, 2391, 2392, 2393,
     2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403,
     2404, 2405, 2406, 2407, 2408, 2409, 2410, 2315, 2315, 2411,
     2413, 2414, 2415, 2320, 2320, 2321, 2321, 2416, 2416, 2417,
     2418, 2419, 2412, 2420, 2421, 2422, 2423, 2330, 2330, 2322,
     2424, 2425, 2333, 2333, 2426, 2426, 2427, 2428, 2429, 2338,

     2338, 2430, 2339, 2431, 2340, 2432, 2334, 2343, 2343, 2433,
     2346, 2346, 2434, 2434, 2435, 2436, 2437, 2438, 2439, 2440,
     2441, 2442, 2443, 2357, 2357, 2347, 2444, 2445, 2445, 2447,
     2447, 2361, 2361, 2362, 2362, 2363, 2363, 2449, 2449, 2450,
     2366, 2366, 2446, 2451, 2448, 2367, 2367, 2368, 2368, 2452,
     2364, 2453, 2454, 2455, 2374, 2374, 2456, 2456, 2376, 2376,
     2377, 2377, 2457, 2457, 2458, 2458, 2460, 2461, 2461, 2375,
     2463, 2464, 2465, 2466, 2467, 2378, 2468, 2469, 2470, 2459,
     2471, 2472, 2462, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
     2480, 2481, 2482, 2483, 2484, 2485, 2486, 2486, 2488, 2489,

     2489, 2491, 2491, 2493, 2494, 2495, 2496, 2497, 2416, 2416,
     2498, 2487, 2499, 2490, 2500, 2492, 2501, 2502, 2503, 2504,
     2505, 2506, 2426, 2426, 2507, 2508, 2508, 2510, 2511, 2512,
     2513, 2514, 2434, 2434, 2515, 2515, 2517, 2518, 2519, 2509,
     2520, 2521, 2522, 2523, 2524, 2525, 2445, 2445, 2528, 2516,
     2526, 2526, 2447, 2447, 2527, 2527, 2449, 2449, 2529, 2530,
     2533, 2446, 2531, 2531, 2534, 2456, 2456, 2448, 2457, 2457,
     2458, 2458, 2535, 2535, 2536, 2461, 2461, 2532, 2537, 2537,
     2538, 2539, 2540, 2541, 2542, 2459, 2543, 2544, 2545, 2546,
     2462, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556,

     2557, 2486, 2486, 2558, 2558, 2559, 2562, 2547, 2489, 2489,
     2560, 2560, 2491, 2491, 2561, 2561, 2487, 2563, 2564, 2565,
     2566, 2567, 2490, 2568, 2569, 2570, 2492, 2571, 2572, 2573,
     2573, 2575, 2575, 2577, 2578, 2578, 2508, 2508, 2580, 2580,
     2581, 2583, 2583, 2574, 2587, 2576, 2585, 2585, 2579, 2588,
     2509, 2515, 2515, 2582, 2589, 2589, 2584, 2590, 2591, 2592,
     2593, 2586, 2595, 2596, 2597, 2597, 2516, 2599, 2599, 2601,
     2526, 2526, 2527, 2527, 2602, 2603, 2604, 2606, 2594, 2598,
     2531, 2531, 2600, 2605, 2605, 2607, 2535, 2535, 2608, 2537,
     2537, 2609, 2610, 2611, 2612, 2532, 2613, 2614, 2615, 2616,

     2617, 2618, 2619, 2620, 2620, 2622, 2623, 2624, 2625, 2626,
     2558, 2558, 2627, 2560, 2560, 2561, 2561, 2632, 2621, 2628,
     2628, 2630, 2630, 2633, 2634, 2635, 2636, 2636, 2638, 2639,
     2640, 2641, 2644, 2629, 2646, 2631, 2573, 2573, 2642, 2642,
     2637, 2575, 2575, 2643, 2643, 2578, 2578, 2645, 2645, 2647,
     2574, 2580, 2580, 2583, 2583, 2576, 2648, 2648, 2650, 2579,
     2585, 2585, 2649, 2649, 2651, 2651, 2589, 2589, 2584, 2653,
     2654, 2655, 2655, 2657, 2658, 2586, 2659, 2660, 2663, 2652,
     2597, 2597, 2661, 2661, 2599, 2599, 2656, 2662, 2662, 2664,
     2665, 2666, 2666, 2605, 2605, 2598, 2668, 2669, 2670, 2600,

     2671, 2672, 2673, 2674, 2675, 2676, 2667, 2677, 2678, 2679,
     2680, 2620, 2620, 2681, 2681, 2682, 2683, 2684, 2685, 2686,
     2628, 2628, 2687, 2687, 2630, 2630, 2621, 2688, 2688, 2689,
     2689, 2691, 2691, 2693, 2629, 2694, 2636, 2636, 2631, 2695,
     2695, 2696, 2697, 2690, 2698, 2692, 2699, 2642, 2642, 2700,
     2637, 2643, 2643, 2645, 2645, 2701, 2702, 2648, 2648, 2649,
     2649, 2703, 2651, 2651, 2704, 2704, 2705, 2705, 2707, 2655,
     2655, 2708, 2708, 2709, 2710, 2711, 2712, 2652, 2661, 2661,
     2713, 2706, 2662, 2662, 2656, 2714, 2715, 2666, 2666, 2716,
     2716, 2717, 2717, 2719, 2720, 2721, 2722, 2723, 2724, 2725,

     2726, 2727, 2667, 2728, 2729, 2730, 2718, 2681, 2681, 2731,
     2732, 2733, 2687, 2687, 2688, 2688, 2689, 2689, 2734, 2734,
     2740, 2735, 2741, 2736, 2691, 2691, 2737, 2737, 2738, 2738,
     2690, 2695, 2695, 2742, 2743, 2743, 2745, 2746, 2692, 2747,
     2747, 2754, 2739, 2749, 2749, 2751, 2751, 2755, 2744, 2704,
     2704, 2705, 2705, 2748, 2753, 2753, 2756, 2750, 2708, 2708,
     2752, 2757, 2758, 2759, 2760, 2761, 2706, 2716, 2716, 2717,
     2717, 2762, 2762, 2763, 2763, 2765, 2766, 2767, 2768, 2769,
     2770, 2771, 2772, 2773, 2718, 2774, 2775, 2776, 2764, 2734,
     2734, 2777, 2735, 2778, 2736, 2737, 2737, 2738, 2738, 2779,

     2779, 2780, 2781, 2782, 2743, 2743, 2783, 2783, 2784, 2785,
     2785, 2739, 2747, 2747, 2787, 2787, 2749, 2749, 2744, 2788,
     2788, 2751, 2751, 2786, 2789, 2789, 2748, 2753, 2753, 2790,
     2750, 2791, 2792, 2793, 2794, 2795, 2752, 2796, 2796, 2798,
     2762, 2762, 2763, 2763, 2799, 2799, 2800, 2801, 2801, 2803,
     2804, 2805, 2797, 2806, 2807, 2808, 2809, 2764, 2810, 2811,
     2812, 2813, 2802, 2779, 2779, 2814, 2815, 2783, 2783, 2816,
     2785, 2785, 2817, 2817, 2787, 2787, 2788, 2788, 2789, 2789,
     2818, 2819, 2820, 2824, 2786, 2821, 2821, 2825, 2796, 2796,
     2826, 2826, 2827, 2799, 2799, 2828, 2801, 2801, 2829, 2829,

     2822, 2830, 2831, 2797, 2832, 2833, 2834, 2835, 2836, 2837,
     2838, 2802, 2839, 2840, 2817, 2817, 2841, 2823, 2842, 2842,
     2844, 2844, 2821, 2821, 2846, 2846, 2847, 2848, 2848, 2850,
     2826, 2826, 2851, 2843, 2852, 2845, 2853, 2822, 2829, 2829,
     2854, 2855, 2849, 2856, 2857, 2858, 2859, 2860, 2861, 2862,
     2862, 2842, 2842, 2864, 2864, 2844, 2844, 2865, 2865, 2846,
     2846, 2866, 2848, 2848, 2863, 2868, 2843, 2867, 2867, 2871,
     2845, 2869, 2869, 2872, 2873, 2874, 2875, 2849, 2876, 2877,
     2878, 2879, 2880, 2862, 2862, 2882, 2870, 2881, 2881, 2864,
     2864, 2865, 2865, 2867, 2867, 2883, 2869, 2869, 2863, 2884,

     2884, 2885, 2886, 2886, 2888, 2888, 2890, 2891, 2892, 2893,
     2894, 2870, 2895, 2896, 2881, 2881, 2897, 2887, 2898, 2889,
     2884, 2884, 2899, 2886, 2886, 2900, 2900, 2888, 2888, 2901,
     2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2887, 2909,
     2910, 2911, 2889, 2900, 2900, 2901, 2901, 2912, 2913, 2913,
     2915, 2916, 2917, 2917, 2919, 2919, 2921, 2922, 2922, 2924,
     2913, 2913, 2914, 2925, 2925, 2926, 2918, 2927, 2927, 2920,
     2917, 2917, 2923, 2931, 2914, 2929, 2929, 2919, 2919, 2930,
     2930, 2928, 2922, 2922, 2918, 2932, 2932, 2933, 2925, 2925,
     2934, 2934, 2920, 2927, 2927, 2936, 2936, 2923, 2929, 2929,

     2930, 2930, 2937, 2938, 2935, 2932, 2932, 2928, 2934, 2934,
     2939, 2939, 2936, 2936, 2940, 2939, 2939, 2941, 2941, 2941,
     2941, 1008, 2935, 2943, 2943, 2943, 2943, 1007, 1006, 1005,
     1004, 1003, 2942, 1000, 2942,   23,   23,   23,   23,   23,
       34,   34,   34,   34,   34,   36,   36,   36,   36,   36,
       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       42,   42,   42,   42,   42,  104,  104,  104,  104,  105,
      999,  105,  105,  105,  106,  106,  998,  106,  106,  107,
      107,  107,  997,  107,  996,  995,  994,  993,  992,  991,

      990,  989,  985,  984,  983,  982,  981,  980,  979,  978,
      977,  976,  975,  972,  969,  968,  967,  966,  965,  964,
      959,  958,  957,  956,  953,  952,  951,  950,  949,  948,
      947,  946,  945,  944,  943,  942,  939,  938,  937,  936,
      935,  934,  933,  932,  931,  930,  929,  927,  926,  923,
      922,  921,  920,  918,  917,  916,  915,  913,  911,  910,
      907,  906,  905,  899,  898,  897,  892,  890,  889,  888,
      887,  884,  883,  882,  881,  879,  877,  876,  875,  874,
      870,  869,  868,  867,  866,  865,  864,  859,  858,  857,
      856,  855,  854,  852,  851,  849,  848,  847,  844,  843,

      842,  841,  839,  838,  832,  831,  827,  826,  825,  824,
      823,  822,  821,  820,  815,  814,  813,  812,  810,  806,
      805,  804,  803,  802,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  788,  787,  786,  785,  784,
      782,  781,  778,  777,  776,  773,  772,  771,  770,  765,
      764,  763,  762,  761,  757,  756,  755,  754,  752,  750,
      749,  748,  747,  743,  742,  741,  740,  739,  738,  737,
      732,  731,  730,  729,  728,  727,  725,  724,  723,  722,
      721,  718,  717,  716,  715,  708,  707,  706,  705,  704,
      703,  702,  699,  698,  697,  693,  690,  689,  688,  685,

      684,  683,  682,  681,  680,  679,  678,  674,  670,  669,
      659,  657,  656,  652,  651,  650,  649,  648,  647,  646,
      644,  643,  638,  637,  635,  634,  633,  632,  625,  624,
      621,  620,  619,  618,  614,  613,  612,  609,  608,  605,
      604,  603,  602,  601,  600,  599,  598,  593,  592,  591,
      590,  586,  583,  582,  581,  580,  579,  576,  575,  571,
      570,  569,  568,  567,  566,  565,  562,  561,  560,  559,
      558,  555,  554,  553,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  538,  537,  527,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  514,  513,  508,

      507,  506,  505,  504,  503,  498,  497,  494,  493,  492,
      491,  488,  487,  486,  485,  484,  483,  482,  479,  478,
      474,  473,  472,  471,  470,  469,  468,  465,  464,  463,
      462,  461,  460,  459,  456,  455,  454,  447,  446,  445,
      437,  436,  435,  434,  433,  422,  421,  417,  416,  412,
      411,  410,  409,  408,  407,  406,  405,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  385,  384,  383,  382,  381,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  366,  365,  361,  360,
      359,  358,  357,  356,  355,  352,  351,  350,  349,  348,

      347,  346,  345,  344,  343,  336,  335,  334,  326,  325,
      324,  323,  322,  321,  313,  312,  308,  307,  306,  273,
      268,  267,  260,  254,  251,  250,  247,  244,  243,  240,
      237,  236,  235,  234,  233,  232,  231,  230,  227,  226,
      225,  224,  223,  222,  221,  218,  217,  216,  215,  215,
      214,  181,  176,  175,  168,  162,  140,  137,  136,  126,
      117,  116,  113,  110,  103,  102,   75,  109,  108,  103,
      102,   75,   71,   71, 2944,   35,   35,   35,   35,   35,
       35,   35,   35,   19, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944
    } ;

static yyconst flex_int16_t yy_chk[4751] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,  495,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,  220,   47,   47,   47,  495,   26,
       26,   52,   52,   25,   28,   28,   51,   56,   47,   26,
       26,   26,   28,   58,   28,   28,   28,  220,   62,   26,
       51,   56,   83,   58,   28,    1,    2,    2,    2,    2,
        2,   62,    2,   83,    2,    2,    2,    2,    2,    2,
        2,   26,    2,    2,   61,   63,   28,   48,   48,   64,
        2,   91,   50,   50,   61,    2,   91,   48,   48,   48,

       50,   67,   50,   50,   50,   63,  129,   48,   66,   64,
       68,   92,   50,  129,   66,   67,   72,   72,   67,   92,
       66,  346,   68,   76,   76,   67,   85,   96,  799,   48,
       85,    2,   21,   21,   50,  346,   21,   96,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,  800,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,  101,  101,

      802,  131,  131,   23,   23,   23,   23,   23,   23,   23,
       82,   23,   74,   74,   98,  131,   74,   74,   74,   23,
       82,   73,   73,   98,   23,  196,  196,  120,   82,   99,
       98,   73,   73,   73,   99,   23,   23,   23,   23,   23,
       23,   73,   23,  120,  136,   23,   23,   23,   23,  112,
      136,  134,   23,   23,   23,   23,   23,   29,  112,  543,
       86,  543,   86,   73,   29,   89,   86,  134,  803,   94,
       93,   29,   86,   89,   93,   29,  141,  141,   89,   89,
      804,   93,  143,   94,   93,   29,   94,   94,   94,  459,
       93,  141,  143,   29,   29,   29,   29,   29,   29,   29,

      143,   29,   29,  459,   29,   29,   29,   29,   29,   95,
       29,   29,   29,   29,   29,   78,  138,  138,  138,  144,
       95,  153,  152,   95,  146,   78,   95,  152,  146,  153,
      144,  215,  215,   78,   78,   78,   78,   78,   78,   78,
      805,   78,   78,  165,   78,   78,   78,   78,   78,  165,
       78,   78,   78,   78,   78,   97,  157,  165,  169,   97,
      806,  169,  139,  139,  160,   97,  157,   97,  182,  160,
       97,   97,  139,  139,  139,   97,  147,  150,  147,  182,
      159,  155,  147,  154,  678,  150,  678,  154,  147,  159,
      150,  150,  810,  156,  154,  155,  159,  154,  155,  155,

      155,  158,  170,  154,  156,  158,  170,  156,  177,  177,
      156,  158,  168,  158,  168,  178,  158,  158,  184,  168,
      178,  158,  184,  177,  183,  183,  204,  178,  748,  207,
      178,  178,  207,  204,  262,  204,  226,  226,  262,  183,
      241,  241,  242,  242,  748,  242,  274,  242,  252,  252,
      226,  253,  253,  257,  241,  254,  254,  274,  260,  257,
      260,  261,  276,  252,  261,  260,  276,  257,  263,  263,
      254,  269,  269,  270,  299,  275,  275,  299,  270,  280,
      280,  288,  288,  263,  296,  270,  269,  812,  270,  270,
      275,  296,  813,  296,  280,  312,  307,  307,  814,  312,

      315,  315,  316,  316,  323,  323,  324,  324,  327,  327,
      263,  307,  328,  328,  339,  339,  815,  316,  421,  323,
      375,  324,  421,  327,  340,  340,  342,  342,  375,  339,
      343,  343,  357,  357,  724,  361,  361,  367,  367,  378,
      378,  342,  818,  375,  513,  343,  384,  384,  343,  343,
      361,  724,  367,  378,  386,  386,  819,  343,  622,  342,
      384,  387,  387,  388,  388,  393,  393,  820,  386,  394,
      394,  402,  402,  622,  402,  643,  402,  388,  821,  393,
      406,  406,  513,  394,  409,  409,  413,  413,  343,  414,
      414,  415,  415,  553,  406,  416,  416,  553,  409,  424,

      424,  425,  425,  822,  414,  430,  430,  431,  431,  826,
      416,  434,  434,  643,  424,  688,  425,  435,  435,  688,
      430,  438,  438,  439,  439,  827,  434,  447,  447,  450,
      450,  829,  435,  451,  451,  830,  438,  453,  453,  454,
      454,  740,  447,  740,  450,  457,  457,  458,  458,  831,
      447,  832,  453,  834,  454,  424,  424,  454,  454,  835,
      457,  461,  461,  470,  470,  838,  454,  474,  474,  841,
      453,  476,  476,  480,  480,  842,  461,  488,  488,  489,
      489,  843,  474,  490,  490,  844,  476,  845,  480,  501,
      501,  846,  488,  849,  489,  502,  502,  454,  509,  509,

      488,  510,  510,  461,  501,  851,  476,  852,  488,  511,
      511,  512,  512,  509,  515,  515,  522,  522,  526,  526,
      528,  528,  851,  488,  511,  522,  529,  529,  531,  531,
      854,  522,  532,  532,  855,  528,  537,  537,  544,  544,
      549,  549,  856,  531,  857,  537,  556,  556,  557,  557,
      858,  537,  859,  544,  862,  549,  563,  563,  564,  564,
      863,  556,  577,  577,  578,  578,  584,  584,  864,  585,
      585,  563,  585,  865,  585,  866,  577,  587,  587,  868,
      584,  588,  588,  589,  589,  594,  594,  595,  595,  596,
      596,  597,  597,  869,  597,  588,  597,  606,  606,  594,

      870,  607,  607,  596,  607,  876,  607,  610,  610,  611,
      611,  606,  611,  877,  611,  612,  612,  615,  615,  616,
      616,  610,  617,  617,  626,  626,  627,  627,  875,  612,
      630,  630,  631,  631,  616,  636,  636,  639,  639,  626,
      640,  640,  641,  641,  875,  630,  642,  642,  645,  645,
      652,  652,  639,  653,  653,  654,  654,  641,  658,  658,
      660,  660,  661,  661,  879,  652,  663,  663,  653,  664,
      664,  669,  669,  671,  671,  660,  675,  675,  676,  676,
      881,  663,  679,  679,  683,  683,  669,  684,  684,  691,
      691,  675,  692,  692,  694,  694,  867,  679,  867,  683,

      695,  695,  684,  882,  691,  700,  700,  701,  701,  694,
      706,  706,  709,  709,  683,  710,  710,  714,  714,  883,
      700,  726,  726,  733,  733,  706,  887,  709,  734,  734,
      744,  744,  888,  746,  746,  751,  751,  753,  753,  744,
      757,  757,  758,  758,  889,  744,  746,  760,  760,  768,
      768,  758,  774,  774,  890,  757,  892,  758,  775,  775,
      760,  776,  776,  893,  768,  783,  783,  774,  789,  789,
      792,  792,  801,  801,  807,  807,  776,  807,  894,  807,
      811,  811,  816,  816,  898,  792,  817,  817,  899,  817,
      902,  817,  823,  823,  824,  824,  825,  825,  828,  828,

      906,  828,  907,  828,  833,  833,  823,  833,  824,  833,
      825,  836,  836,  837,  837,  908,  837,  909,  837,  839,
      839,  840,  840,  847,  847,  836,  848,  848,  850,  850,
      853,  853,  910,  839,  860,  860,  861,  861,  847,  871,
      871,  848,  872,  872,  873,  873,  874,  874,  878,  878,
      880,  880,  884,  884,  871,  885,  885,  886,  886,  891,
      891,  874,  895,  895,  896,  896,  911,  884,  897,  897,
      885,  900,  900,  901,  901,  903,  903,  895,  904,  904,
      905,  905,  848,  897,  912,  912,  900,  913,  914,  914,
      903,  915,  916,  917,  920,  905,  921,  897,  918,  918,

      919,  919,  922,  922,  923,  924,  924,  925,  925,  926,
      927,  928,  928,  918,  929,  930,  931,  922,  932,  933,
      924,  934,  935,  936,  937,  939,  940,  941,  942,  943,
      944,  945,  946,  946,  947,  948,  949,  950,  951,  952,
      953,  954,  955,  956,  957,  959,  959,  946,  960,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  974,
      967,  960,  970,  970,  971,  971,  972,  972,  973,  973,
      975,  975,  976,  977,  979,  980,  981,  970,  982,  984,
      983,  973,  983,  985,  989,  975,  986,  986,  987,  987,
      988,  988,  990,  991,  992,  993,  994,  995,  996,  997,

      997,  995,  999,  987,  998,  998, 1001, 1001,  997, 1002,
     1002, 1003, 1004, 1005,  997, 1007, 1008, 1009, 1010,  998,
     1012, 1001, 1011, 1011, 1013, 1014, 1015, 1016, 1017, 1018,
     1018, 1019, 1020, 1023, 1025,  998, 1011, 1024, 1024, 1026,
     1026, 1027, 1027, 1018, 1028, 1028, 1032, 1029, 1029, 1033,
     1029, 1024, 1029, 1026, 1030, 1030, 1031, 1031, 1028, 1036,
     1037, 1037, 1040, 1040, 1041, 1040, 1042, 1040, 1030, 1043,
     1043, 1044, 1044, 1046, 1037, 1045, 1045, 1047, 1045, 1048,
     1045, 1049, 1050, 1043, 1051, 1044, 1052, 1052, 1053, 1053,
     1054, 1054, 1055, 1055, 1056, 1056, 1057, 1058, 1059, 1060,

     1061, 1052, 1062, 1063, 1065, 1054, 1064, 1064, 1066, 1056,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1076, 1064, 1077, 1077, 1078, 1078, 1079, 1079, 1080, 1081,
     1082, 1083, 1083, 1084, 1076, 1086, 1085, 1087, 1092, 1078,
     1085, 1088, 1088, 1089, 1089, 1093, 1083, 1090, 1090, 1095,
     1091, 1091, 1094, 1094, 1096, 1097, 1088, 1098, 1098, 1099,
     1099, 1100, 1100, 1101, 1083, 1091, 1102, 1094, 1102, 1103,
     1104, 1104, 1105, 1109, 1099, 1106, 1106, 1107, 1107, 1108,
     1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1117,
     1115, 1121, 1107, 1118, 1118, 1119, 1119, 1120, 1120, 1122,

     1122, 1123, 1123, 1117, 1124, 1124, 1125, 1127, 1118, 1128,
     1119, 1126, 1126, 1130, 1122, 1131, 1123, 1129, 1129, 1132,
     1132, 1133, 1136, 1137, 1118, 1138, 1139, 1140, 1142, 1143,
     1144, 1147, 1129, 1148, 1132, 1145, 1145, 1146, 1146, 1149,
     1150, 1151, 1153, 1153, 1153, 1154, 1155, 1156, 1150, 1157,
     1145, 1158, 1158, 1159, 1153, 1160, 1160, 1162, 1163, 1165,
     1153, 1163, 1166, 1167, 1160, 1168, 1169, 1169, 1170, 1170,
     1160, 1171, 1172, 1172, 1173, 1173, 1174, 1175, 1176, 1177,
     1178, 1179, 1180, 1181, 1182, 1183, 1185, 1172, 1184, 1184,
     1186, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,

     1194, 1190, 1195, 1196, 1196, 1186, 1197, 1197, 1194, 1198,
     1198, 1199, 1200, 1202, 1194, 1204, 1196, 1201, 1201, 1205,
     1206, 1197, 1207, 1208, 1208, 1209, 1209, 1210, 1210, 1212,
     1210, 1214, 1210, 1211, 1211, 1213, 1213, 1208, 1215, 1209,
     1216, 1217, 1217, 1218, 1218, 1219, 1218, 1211, 1218, 1213,
     1220, 1220, 1224, 1225, 1225, 1217, 1221, 1227, 1221, 1228,
     1230, 1221, 1221, 1231, 1220, 1232, 1221, 1221, 1221, 1240,
     1221, 1222, 1222, 1221, 1223, 1223, 1241, 1223, 1243, 1223,
     1246, 1226, 1226, 1247, 1226, 1222, 1226, 1229, 1229, 1233,
     1233, 1234, 1234, 1252, 1234, 1253, 1234, 1237, 1237, 1238,

     1238, 1254, 1238, 1233, 1238, 1239, 1239, 1256, 1239, 1257,
     1239, 1237, 1242, 1242, 1244, 1244, 1245, 1245, 1248, 1248,
     1249, 1249, 1250, 1250, 1251, 1251, 1258, 1242, 1261, 1244,
     1262, 1245, 1255, 1255, 1259, 1259, 1263, 1250, 1260, 1260,
     1264, 1265, 1265, 1266, 1266, 1268, 1269, 1255, 1264, 1259,
     1267, 1267, 1267, 1270, 1271, 1277, 1265, 1282, 1266, 1272,
     1272, 1265, 1267, 1273, 1273, 1274, 1274, 1283, 1267, 1275,
     1275, 1276, 1276, 1284, 1272, 1278, 1278, 1279, 1279, 1280,
     1281, 1281, 1280, 1285, 1275, 1289, 1276, 1286, 1286, 1290,
     1278, 1287, 1287, 1288, 1288, 1281, 1291, 1291, 1292, 1292,

     1293, 1294, 1295, 1296, 1296, 1297, 1287, 1298, 1299, 1300,
     1301, 1291, 1302, 1302, 1303, 1303, 1304, 1304, 1305, 1306,
     1307, 1308, 1308, 1309, 1310, 1311, 1312, 1312, 1316, 1303,
     1318, 1304, 1313, 1313, 1315, 1315, 1308, 1314, 1314, 1317,
     1317, 1312, 1319, 1319, 1320, 1320, 1321, 1321, 1322, 1308,
     1323, 1323, 1314, 1324, 1327, 1308, 1303, 1319, 1325, 1325,
     1326, 1326, 1328, 1329, 1329, 1323, 1330, 1330, 1331, 1332,
     1333, 1334, 1335, 1325, 1336, 1337, 1338, 1339, 1329, 1340,
     1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1354, 1356, 1357, 1357, 1358,

     1359, 1359, 1360, 1361, 1362, 1363, 1357, 1364, 1365, 1366,
     1367, 1369, 1357, 1359, 1368, 1368, 1371, 1372, 1373, 1374,
     1375, 1376, 1379, 1380, 1380, 1381, 1381, 1382, 1383, 1384,
     1383, 1385, 1386, 1387, 1388, 1389, 1390, 1390, 1380, 1391,
     1391, 1392, 1393, 1393, 1394, 1395, 1396, 1398, 1399, 1400,
     1401, 1401, 1391, 1402, 1402, 1404, 1402, 1405, 1402, 1408,
     1403, 1403, 1411, 1403, 1401, 1403, 1406, 1406, 1407, 1407,
     1409, 1409, 1410, 1410, 1412, 1410, 1413, 1410, 1414, 1414,
     1406, 1414, 1415, 1414, 1409, 1416, 1417, 1418, 1418, 1419,
     1419, 1420, 1419, 1421, 1419, 1421, 1422, 1423, 1424, 1425,

     1427, 1418, 1426, 1428, 1429, 1429, 1430, 1429, 1431, 1429,
     1432, 1435, 1436, 1437, 1439, 1438, 1438, 1425, 1438, 1426,
     1438, 1440, 1442, 1427, 1441, 1441, 1443, 1441, 1448, 1441,
     1446, 1446, 1447, 1447, 1449, 1449, 1450, 1450, 1451, 1451,
     1452, 1452, 1453, 1454, 1456, 1446, 1455, 1455, 1457, 1449,
     1458, 1459, 1459, 1451, 1460, 1460, 1461, 1462, 1463, 1464,
     1464, 1465, 1465, 1466, 1467, 1468, 1459, 1469, 1470, 1470,
     1471, 1471, 1472, 1473, 1473, 1475, 1465, 1474, 1474, 1476,
     1477, 1478, 1479, 1470, 1480, 1481, 1483, 1482, 1473, 1482,
     1484, 1484, 1485, 1485, 1486, 1486, 1487, 1487, 1488, 1488,

     1489, 1490, 1490, 1491, 1492, 1493, 1493, 1485, 1494, 1494,
     1495, 1487, 1496, 1497, 1498, 1499, 1499, 1500, 1501, 1501,
     1493, 1502, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1509, 1510, 1510, 1501, 1511, 1511, 1512, 1512, 1513, 1514,
     1514, 1515, 1515, 1516, 1509, 1517, 1510, 1517, 1518, 1511,
     1519, 1519, 1520, 1520, 1514, 1521, 1522, 1523, 1524, 1525,
     1526, 1526, 1527, 1527, 1528, 1519, 1529, 1530, 1530, 1531,
     1532, 1532, 1533, 1533, 1534, 1534, 1535, 1535, 1536, 1537,
     1537, 1538, 1538, 1539, 1540, 1532, 1541, 1542, 1543, 1534,
     1544, 1545, 1546, 1547, 1537, 1548, 1549, 1550, 1551, 1552,

     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
     1563, 1564, 1564, 1565, 1565, 1566, 1567, 1568, 1569, 1570,
     1571, 1572, 1573, 1574, 1575, 1576, 1565, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1583, 1537, 1584, 1585, 1586, 1587,
     1588, 1589, 1590, 1591, 1592, 1593, 1593, 1594, 1595, 1596,
     1597, 1598, 1600, 1601, 1601, 1600, 1601, 1602, 1601, 1603,
     1606, 1606, 1607, 1609, 1600, 1608, 1608, 1610, 1608, 1611,
     1608, 1612, 1613, 1616, 1617, 1617, 1620, 1617, 1622, 1617,
     1621, 1621, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
     1631, 1632, 1635, 1636, 1621, 1637, 1638, 1643, 1643, 1644,

     1645, 1645, 1646, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1652, 1653, 1654, 1655, 1656, 1656, 1657, 1657, 1658, 1659,
     1660, 1661, 1662, 1662, 1663, 1664, 1664, 1665, 1666, 1656,
     1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1675,
     1676, 1676, 1677, 1678, 1679, 1680, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1686, 1687, 1687, 1688, 1689, 1690, 1691,
     1692, 1693, 1694, 1694, 1695, 1695, 1699, 1686, 1696, 1696,
     1697, 1697, 1698, 1698, 1700, 1700, 1701, 1694, 1702, 1703,
     1704, 1705, 1705, 1696, 1706, 1707, 1708, 1709, 1710, 1711,
     1712, 1713, 1714, 1714, 1715, 1715, 1716, 1716, 1717, 1718,

     1718, 1719, 1719, 1720, 1720, 1722, 1725, 1726, 1727, 1715,
     1728, 1729, 1730, 1731, 1718, 1732, 1733, 1734, 1720, 1735,
     1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
     1746, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
     1755, 1756, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
     1766, 1768, 1770, 1771, 1772, 1773, 1774, 1774, 1776, 1777,
     1778, 1779, 1780, 1783, 1783, 1786, 1787, 1787, 1788, 1788,
     1789, 1774, 1790, 1790, 1791, 1791, 1793, 1783, 1792, 1792,
     1787, 1794, 1788, 1795, 1796, 1798, 1790, 1799, 1791, 1797,
     1797, 1800, 1801, 1801, 1802, 1803, 1803, 1804, 1805, 1806,

     1807, 1807, 1809, 1797, 1808, 1808, 1801, 1810, 1810, 1803,
     1811, 1811, 1812, 1813, 1807, 1814, 1815, 1816, 1803, 1808,
     1817, 1817, 1810, 1818, 1819, 1811, 1820, 1821, 1790, 1822,
     1823, 1797, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
     1832, 1803, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
     1841, 1841, 1842, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
     1848, 1849, 1849, 1850, 1851, 1852, 1853, 1842, 1854, 1854,
     1855, 1856, 1856, 1857, 1858, 1859, 1860, 1860, 1861, 1861,
     1862, 1863, 1863, 1854, 1864, 1868, 1856, 1865, 1865, 1866,
     1866, 1860, 1869, 1861, 1867, 1867, 1871, 1872, 1872, 1873,

     1875, 1875, 1876, 1878, 1866, 1879, 1872, 1880, 1881, 1875,
     1882, 1883, 1872, 1884, 1885, 1875, 1886, 1887, 1888, 1889,
     1889, 1890, 1891, 1892, 1894, 1896, 1897, 1898, 1898, 1899,
     1900, 1901, 1902, 1903, 1889, 1904, 1905, 1906, 1907, 1908,
     1910, 1911, 1898, 1912, 1913, 1914, 1914, 1915, 1915, 1916,
     1917, 1918, 1919, 1920, 1921, 1921, 1922, 1922, 1923, 1922,
     1914, 1922, 1924, 1924, 1925, 1925, 1926, 1926, 1921, 1927,
     1927, 1928, 1928, 1929, 1929, 1931, 1924, 1930, 1930, 1933,
     1926, 1932, 1932, 1934, 1935, 1928, 1936, 1929, 1937, 1937,
     1938, 1938, 1939, 1940, 1941, 1942, 1943, 1943, 1944, 1944,

     1945, 1948, 1937, 1946, 1946, 1947, 1947, 1949, 1950, 1951,
     1943, 1952, 1953, 1953, 1954, 1954, 1957, 1946, 1955, 1955,
     1941, 1956, 1956, 1958, 1958, 1962, 1953, 1959, 1959, 1960,
     1960, 1961, 1961, 1955, 1963, 1963, 1964, 1966, 1958, 1965,
     1965, 1967, 1967, 1969, 1960, 1968, 1968, 1970, 1970, 1963,
     1971, 1972, 1973, 1974, 1965, 1975, 1967, 1976, 1977, 1978,
     1968, 1979, 1970, 1980, 1981, 1982, 1983, 1984, 1984, 1985,
     1986, 1986, 1987, 1988, 1989, 1990, 1990, 1991, 1991, 1992,
     1993, 1994, 1984, 1995, 1996, 1986, 1997, 1998, 1999, 2000,
     1990, 2001, 2001, 2002, 2002, 2003, 2003, 2004, 2004, 2005,

     2005, 2006, 2007, 2008, 2009, 2009, 2001, 2010, 2010, 2013,
     2003, 2014, 2004, 2011, 2011, 2012, 2012, 2015, 2015, 2009,
     2016, 2017, 2019, 2019, 2020, 2021, 2021, 2022, 2011, 2024,
     2026, 2019, 2023, 2023, 2027, 2025, 2025, 2019, 2021, 2028,
     2029, 2023, 2030, 2031, 2032, 2033, 2034, 2023, 2025, 2035,
     2037, 2038, 2038, 2039, 2039, 2040, 2041, 2042, 2045, 2046,
     2046, 2047, 2047, 2048, 2052, 2053, 2038, 2054, 2055, 2056,
     2057, 2058, 2059, 2060, 2046, 2061, 2062, 2062, 2063, 2064,
     2065, 2066, 2066, 2067, 2068, 2068, 2069, 2068, 2070, 2068,
     2071, 2072, 2072, 2065, 2077, 2066, 2073, 2073, 2074, 2074,

     2075, 2075, 2078, 2075, 2080, 2075, 2076, 2076, 2079, 2079,
     2081, 2083, 2074, 2082, 2082, 2084, 2085, 2086, 2086, 2087,
     2088, 2088, 2079, 2089, 2090, 2090, 2084, 2091, 2092, 2093,
     2094, 2086, 2084, 2095, 2095, 2096, 2096, 2097, 2097, 2098,
     2099, 2099, 2100, 2100, 2101, 2102, 2102, 2095, 2103, 2103,
     2104, 2104, 2105, 2105, 2106, 2106, 2107, 2108, 2108, 2112,
     2102, 2109, 2109, 2110, 2110, 2104, 2115, 2105, 2111, 2111,
     2113, 2113, 2108, 2114, 2114, 2116, 2117, 2118, 2110, 2119,
     2120, 2121, 2122, 2123, 2125, 2113, 2124, 2124, 2126, 2127,
     2128, 2128, 2129, 2129, 2130, 2130, 2131, 2131, 2132, 2132,

     2134, 2124, 2133, 2133, 2135, 2128, 2136, 2136, 2140, 2130,
     2141, 2131, 2137, 2137, 2138, 2138, 2142, 2133, 2139, 2139,
     2143, 2144, 2145, 2146, 2146, 2147, 2147, 2137, 2151, 2138,
     2148, 2148, 2152, 2139, 2149, 2149, 2150, 2150, 2153, 2153,
     2147, 2154, 2154, 2155, 2156, 2157, 2158, 2159, 2159, 2160,
     2160, 2150, 2161, 2162, 2163, 2163, 2164, 2164, 2165, 2167,
     2168, 2162, 2160, 2169, 2170, 2171, 2172, 2173, 2174, 2164,
     2175, 2176, 2177, 2177, 2178, 2179, 2180, 2182, 2182, 2183,
     2184, 2185, 2186, 2187, 2188, 2191, 2192, 2193, 2194, 2195,
     2196, 2197, 2150, 2198, 2198, 2199, 2199, 2200, 2203, 2204,

     2204, 2207, 2204, 2208, 2204, 2209, 2209, 2198, 2210, 2210,
     2211, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2220, 2209,
     2218, 2218, 2219, 2219, 2211, 2221, 2222, 2222, 2223, 2215,
     2224, 2225, 2226, 2226, 2218, 2228, 2227, 2227, 2229, 2227,
     2222, 2227, 2230, 2230, 2231, 2231, 2226, 2232, 2232, 2233,
     2233, 2239, 2234, 2235, 2235, 2236, 2236, 2237, 2237, 2231,
     2234, 2238, 2238, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
     2247, 2250, 2237, 2248, 2248, 2249, 2249, 2251, 2252, 2253,
     2253, 2254, 2254, 2255, 2255, 2256, 2256, 2260, 2248, 2257,
     2257, 2258, 2258, 2259, 2259, 2267, 2254, 2261, 2261, 2262,

     2262, 2263, 2263, 2268, 2257, 2264, 2264, 2269, 2259, 2265,
     2265, 2270, 2261, 2266, 2266, 2271, 2263, 2272, 2272, 2273,
     2273, 2274, 2274, 2277, 2265, 2275, 2275, 2276, 2276, 2278,
     2279, 2280, 2272, 2281, 2282, 2284, 2274, 2283, 2283, 2285,
     2286, 2288, 2276, 2287, 2287, 2289, 2290, 2291, 2292, 2293,
     2294, 2295, 2296, 2297, 2298, 2299, 2302, 2303, 2304, 2305,
     2306, 2307, 2309, 2310, 2312, 2313, 2314, 2315, 2315, 2316,
     2317, 2318, 2319, 2320, 2320, 2321, 2321, 2322, 2322, 2323,
     2324, 2325, 2316, 2326, 2327, 2328, 2329, 2330, 2330, 2321,
     2331, 2332, 2333, 2333, 2334, 2334, 2335, 2336, 2337, 2338,

     2338, 2341, 2338, 2342, 2338, 2344, 2333, 2343, 2343, 2345,
     2346, 2346, 2347, 2347, 2348, 2349, 2350, 2351, 2352, 2353,
     2354, 2355, 2356, 2357, 2357, 2346, 2358, 2359, 2359, 2360,
     2360, 2361, 2361, 2362, 2362, 2363, 2363, 2364, 2364, 2365,
     2366, 2366, 2359, 2369, 2360, 2367, 2367, 2368, 2368, 2370,
     2363, 2371, 2372, 2373, 2374, 2374, 2375, 2375, 2376, 2376,
     2377, 2377, 2378, 2378, 2379, 2379, 2380, 2381, 2381, 2374,
     2382, 2383, 2384, 2385, 2386, 2377, 2387, 2388, 2390, 2379,
     2391, 2392, 2381, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
     2400, 2401, 2402, 2404, 2405, 2406, 2407, 2407, 2408, 2409,

     2409, 2410, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2416,
     2417, 2407, 2418, 2409, 2419, 2410, 2420, 2421, 2422, 2423,
     2424, 2425, 2426, 2426, 2427, 2428, 2428, 2429, 2430, 2431,
     2432, 2433, 2434, 2434, 2435, 2435, 2436, 2437, 2438, 2428,
     2439, 2440, 2441, 2442, 2443, 2444, 2445, 2445, 2450, 2435,
     2446, 2446, 2447, 2447, 2448, 2448, 2449, 2449, 2451, 2452,
     2454, 2445, 2453, 2453, 2455, 2456, 2456, 2447, 2457, 2457,
     2458, 2458, 2459, 2459, 2460, 2461, 2461, 2453, 2462, 2462,
     2463, 2466, 2467, 2468, 2469, 2458, 2470, 2471, 2472, 2473,
     2461, 2474, 2475, 2478, 2479, 2480, 2481, 2482, 2483, 2484,

     2485, 2486, 2486, 2487, 2487, 2488, 2493, 2473, 2489, 2489,
     2490, 2490, 2491, 2491, 2492, 2492, 2486, 2494, 2495, 2496,
     2497, 2498, 2489, 2499, 2500, 2501, 2491, 2502, 2503, 2504,
     2504, 2505, 2505, 2506, 2507, 2507, 2508, 2508, 2509, 2509,
     2510, 2511, 2511, 2504, 2513, 2505, 2512, 2512, 2507, 2514,
     2508, 2515, 2515, 2510, 2516, 2516, 2511, 2517, 2518, 2519,
     2520, 2512, 2521, 2522, 2523, 2523, 2515, 2524, 2524, 2525,
     2526, 2526, 2527, 2527, 2528, 2529, 2530, 2533, 2520, 2523,
     2531, 2531, 2524, 2532, 2532, 2534, 2535, 2535, 2536, 2537,
     2537, 2538, 2539, 2540, 2542, 2531, 2543, 2544, 2546, 2547,

     2548, 2549, 2550, 2551, 2551, 2552, 2553, 2555, 2556, 2557,
     2558, 2558, 2559, 2560, 2560, 2561, 2561, 2564, 2551, 2562,
     2562, 2563, 2563, 2565, 2566, 2567, 2568, 2568, 2569, 2570,
     2571, 2572, 2577, 2562, 2581, 2563, 2573, 2573, 2574, 2574,
     2568, 2575, 2575, 2576, 2576, 2578, 2578, 2579, 2579, 2582,
     2573, 2580, 2580, 2583, 2583, 2575, 2584, 2584, 2587, 2578,
     2585, 2585, 2586, 2586, 2588, 2588, 2589, 2589, 2583, 2590,
     2591, 2592, 2592, 2593, 2594, 2585, 2595, 2596, 2601, 2588,
     2597, 2597, 2598, 2598, 2599, 2599, 2592, 2600, 2600, 2602,
     2603, 2604, 2604, 2605, 2605, 2597, 2606, 2607, 2608, 2599,

     2609, 2610, 2611, 2612, 2614, 2615, 2604, 2616, 2617, 2618,
     2619, 2620, 2620, 2621, 2621, 2622, 2623, 2625, 2626, 2627,
     2628, 2628, 2629, 2629, 2630, 2630, 2620, 2631, 2631, 2632,
     2632, 2633, 2633, 2634, 2628, 2635, 2636, 2636, 2630, 2637,
     2637, 2638, 2639, 2632, 2640, 2633, 2641, 2642, 2642, 2644,
     2636, 2643, 2643, 2645, 2645, 2646, 2647, 2648, 2648, 2649,
     2649, 2650, 2651, 2651, 2652, 2652, 2653, 2653, 2654, 2655,
     2655, 2656, 2656, 2657, 2658, 2659, 2660, 2651, 2661, 2661,
     2663, 2653, 2662, 2662, 2655, 2664, 2665, 2666, 2666, 2667,
     2667, 2668, 2668, 2669, 2670, 2671, 2672, 2674, 2675, 2676,

     2677, 2678, 2666, 2679, 2680, 2682, 2668, 2681, 2681, 2683,
     2685, 2686, 2687, 2687, 2688, 2688, 2689, 2689, 2690, 2690,
     2694, 2690, 2696, 2690, 2691, 2691, 2692, 2692, 2693, 2693,
     2689, 2695, 2695, 2697, 2698, 2698, 2699, 2700, 2691, 2701,
     2701, 2707, 2693, 2702, 2702, 2703, 2703, 2709, 2698, 2704,
     2704, 2705, 2705, 2701, 2706, 2706, 2710, 2702, 2708, 2708,
     2703, 2711, 2712, 2713, 2714, 2715, 2705, 2716, 2716, 2717,
     2717, 2718, 2718, 2719, 2719, 2720, 2721, 2722, 2723, 2724,
     2725, 2726, 2727, 2728, 2717, 2729, 2731, 2732, 2719, 2734,
     2734, 2735, 2734, 2736, 2734, 2737, 2737, 2738, 2738, 2739,

     2739, 2740, 2741, 2742, 2743, 2743, 2744, 2744, 2745, 2746,
     2746, 2738, 2747, 2747, 2748, 2748, 2749, 2749, 2743, 2750,
     2750, 2751, 2751, 2746, 2752, 2752, 2747, 2753, 2753, 2754,
     2749, 2755, 2756, 2757, 2758, 2759, 2751, 2760, 2760, 2761,
     2762, 2762, 2763, 2763, 2764, 2764, 2765, 2766, 2766, 2767,
     2768, 2769, 2760, 2770, 2771, 2772, 2773, 2763, 2774, 2775,
     2776, 2780, 2766, 2779, 2779, 2781, 2782, 2783, 2783, 2784,
     2785, 2785, 2786, 2786, 2787, 2787, 2788, 2788, 2789, 2789,
     2790, 2791, 2792, 2794, 2785, 2793, 2793, 2795, 2796, 2796,
     2797, 2797, 2798, 2799, 2799, 2800, 2801, 2801, 2802, 2802,

     2793, 2803, 2804, 2796, 2805, 2808, 2810, 2811, 2812, 2813,
     2814, 2801, 2815, 2816, 2817, 2817, 2818, 2793, 2819, 2819,
     2820, 2820, 2821, 2821, 2822, 2822, 2823, 2824, 2824, 2825,
     2826, 2826, 2827, 2819, 2828, 2820, 2830, 2821, 2829, 2829,
     2831, 2833, 2824, 2834, 2836, 2837, 2838, 2839, 2840, 2841,
     2841, 2842, 2842, 2843, 2843, 2844, 2844, 2845, 2845, 2846,
     2846, 2847, 2848, 2848, 2841, 2850, 2842, 2849, 2849, 2852,
     2844, 2851, 2851, 2853, 2854, 2855, 2856, 2848, 2857, 2858,
     2859, 2860, 2861, 2862, 2862, 2866, 2851, 2863, 2863, 2864,
     2864, 2865, 2865, 2867, 2867, 2868, 2869, 2869, 2862, 2870,

     2870, 2871, 2872, 2872, 2873, 2873, 2874, 2875, 2876, 2877,
     2878, 2869, 2879, 2880, 2881, 2881, 2882, 2872, 2883, 2873,
     2884, 2884, 2885, 2886, 2886, 2887, 2887, 2888, 2888, 2889,
     2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2886, 2897,
     2898, 2899, 2888, 2900, 2900, 2901, 2901, 2903, 2905, 2905,
     2906, 2907, 2908, 2908, 2909, 2909, 2910, 2911, 2911, 2912,
     2913, 2913, 2905, 2914, 2914, 2915, 2908, 2916, 2916, 2909,
     2917, 2917, 2911, 2921, 2913, 2918, 2918, 2919, 2919, 2920,
     2920, 2916, 2922, 2922, 2917, 2923, 2923, 2924, 2925, 2925,
     2926, 2926, 2919, 2927, 2927, 2928, 2928, 2922, 2929, 2929,

     2930, 2930, 2931, 2933, 2926, 2932, 2932, 2927, 2934, 2934,
     2935, 2935, 2936, 2936, 2937, 2939, 2939, 2940, 2940, 2941,
     2941,  798, 2934, 2942, 2942, 2943, 2943,  797,  796,  795,
      794,  793, 2940,  791, 2941, 2945, 2945, 2945, 2945, 2945,
     2946, 2946, 2946, 2946, 2946, 2947, 2947, 2947, 2947, 2947,
     2948, 2948, 2948, 2948, 2948, 2949, 2949, 2949, 2949, 2949,
     2950, 2950, 2950, 2950, 2950, 2951, 2951, 2951, 2951, 2951,
     2952, 2952, 2952, 2952, 2952, 2953, 2953, 2953, 2953, 2954,
      790, 2954, 2954, 2954, 2955, 2955,  787, 2955, 2955, 2956,
     2956, 2956,  786, 2956,  785,  784,  782,  781,  780,  779,

      778,  777,  773,  772,  771,  770,  767,  766,  765,  764,
      763,  762,  761,  759,  756,  755,  754,  752,  750,  749,
      745,  743,  742,  741,  739,  738,  737,  736,  735,  732,
      731,  730,  729,  728,  727,  725,  723,  722,  720,  719,
      718,  717,  716,  715,  713,  712,  711,  708,  707,  705,
      704,  703,  702,  699,  698,  697,  696,  693,  690,  689,
      687,  686,  685,  682,  681,  680,  677,  674,  673,  672,
      670,  668,  667,  666,  665,  662,  659,  657,  656,  655,
      651,  650,  649,  648,  647,  646,  644,  638,  637,  635,
      634,  633,  632,  629,  628,  625,  624,  623,  621,  620,

      619,  618,  614,  613,  609,  608,  605,  604,  603,  602,
      601,  600,  599,  598,  593,  592,  591,  590,  586,  583,
      582,  581,  580,  579,  576,  575,  574,  573,  572,  571,
      570,  568,  567,  566,  565,  562,  561,  560,  559,  558,
      555,  554,  552,  551,  550,  548,  547,  546,  545,  542,
      541,  540,  539,  538,  536,  535,  534,  533,  530,  527,
      525,  524,  523,  521,  520,  519,  518,  517,  516,  514,
      508,  507,  506,  505,  504,  503,  500,  499,  498,  497,
      496,  494,  493,  492,  491,  487,  486,  485,  484,  483,
      482,  481,  479,  478,  477,  475,  473,  472,  471,  469,

      468,  467,  466,  465,  464,  463,  462,  460,  456,  455,
      452,  449,  448,  446,  445,  444,  443,  442,  441,  440,
      437,  436,  433,  432,  429,  428,  427,  426,  423,  422,
      420,  419,  418,  417,  412,  411,  410,  408,  407,  405,
      401,  400,  399,  398,  397,  396,  395,  392,  391,  390,
      389,  385,  383,  382,  381,  380,  379,  377,  376,  374,
      373,  372,  371,  370,  369,  368,  366,  365,  364,  363,
      362,  360,  359,  358,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  345,  344,  341,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  326,  325,  322,

      321,  320,  319,  318,  317,  314,  313,  311,  310,  309,
      308,  306,  305,  304,  303,  302,  301,  300,  298,  297,
      295,  294,  293,  292,  291,  290,  289,  287,  286,  285,
      284,  283,  282,  281,  279,  278,  277,  273,  272,  271,
      268,  267,  266,  265,  264,  259,  258,  256,  255,  250,
      249,  248,  247,  246,  245,  244,  243,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  225,  224,  223,  222,  221,  219,  218,  217,  214,
      213,  212,  211,  210,  209,  208,  206,  205,  203,  202,
      201,  200,  199,  198,  197,  195,  194,  193,  192,  191,

      190,  189,  187,  186,  185,  181,  180,  179,  176,  175,
      174,  173,  172,  171,  167,  166,  164,  163,  161,  151,
      149,  148,  145,  142,  140,  137,  135,  133,  132,  130,
      128,  127,  126,  125,  124,  123,  122,  121,  119,  118,
      117,  116,  115,  114,  113,  111,  110,  108,  103,  102,
      100,   90,   88,   87,   84,   81,   77,   70,   69,   65,
       60,   59,   57,   55,   54,   53,   49,   44,   41,   32,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,

     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[395] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file OSparseosol.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosol.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosol.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSoLParserData.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2599 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"

 
#line 2854 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2945 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4684 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 256 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 578 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 581 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 383:
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 586 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 387:
#line 588 "../../../../OS/src/OSParsers/OSParseosol.l"
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 588 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 592 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 593 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 594 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 598 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 5337 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2945 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2945 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2944);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"





