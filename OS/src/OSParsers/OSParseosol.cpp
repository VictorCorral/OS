#line 2 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 441
#define YY_END_OF_BUFFER 442
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3504] =
    {   0,
        1,    1,  439,  439,  437,  437,  438,  438,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  442,  440,
        1,    2,  427,    2,  427,    6,  427,    5,  440,    4,
      427,  427,    2,  439,  441,  437,  438,  428,  430,  431,
      430,  434,  435,  434,    1,  427,  427,    6,  427,    5,
        0,    4,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
        3,    6,    6,  427,    7,    5,    0,    0,  433,  381,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      427,  427,  439,  437,  438,  428,    0,  436,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,    6,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  383,    0,    0,    0,    0,    0,    0,    0,
        0,  148,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  337,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,  432,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  429,    0,  382,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  228,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  367,    0,    0,    0,    0,    0,    0,
        0,  110,    0,    0,    0,  351,    0,    0,    0,    0,
        0,    0,    0,  220,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  212,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  214,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,   27,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,   97,   98,  427,  427,  427,  427,  427,  427,
      427,  427,  382,    0,  384,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      149,    0,    0,    0,    0,    0,    0,    0,    0,  368,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  352,    0,    0,    0,    0,    0,    0,  338,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  363,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  359,    0,    0,    0,    0,    0,
        0,    0,  365,    0,  361,    0,    0,    0,  367,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  351,
        0,    0,  369,    0,    0,  371,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  357,    0,    0,    0,    0,    0,    0,  373,
        0,    0,    0,    0,  150,    0,    0,    0,    0,    0,
        0,  427,  427,  427,  427,  427,  334,  427,  427,  427,

      427,  427,  427,  427,   27,  427,  427,   28,  427,  427,
      427,  427,  427,   29,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  384,    0,  364,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  229,    0,    0,
        0,    0,  360,    0,    0,    0,    0,  149,    0,    0,
        0,  366,    0,  362,    0,    0,    0,  368,    0,    0,
        0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
      352,    0,    0,  370,    0,    0,  372,    0,    0,    0,
        0,    0,    0,  338,    0,    0,    0,    0,  221,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  358,    0,    0,  213,
        0,    0,    0,    0,    0,  374,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  215,    0,    0,    0,  363,
        0,    0,    0,    0,    0,    0,  194,  299,    0,    0,
        0,    0,  359,    0,    0,    0,    0,    0,    0,  365,
      361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  239,  122,    0,    0,    0,  369,    0,
      371,    0,    0,    0,    0,    0,    0,  245,    0,    0,
        0,    0,    0,    0,    0,    0,  102,  101,  136,    0,

        0,    0,    0,    0,  343,    0,    0,    0,    0,    0,
        0,    0,  357,    0,    0,    0,    0,  317,  373,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  427,
      427,  427,  427,  427,  334,  427,  427,  427,  427,  427,
       95,   96,  427,  427,   28,  427,  427,  427,  427,   29,
      427,   59,   60,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,   71,   72,  427,  427,  427,   81,
       82,  427,  427,  427,  427,  364,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  229,    0,    0,    0,  360,
        0,    0,    0,    0,    0,    0,  366,  362,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
      111,    0,    0,    0,    0,  370,    0,  372,    0,    0,
        0,    0,    0,  246,    0,    0,    0,    0,  221,    0,
        0,    0,    0,    0,  103,    0,    0,    0,    0,  161,
        0,    0,    0,  344,    0,    0,    0,    0,    0,    0,
        0,  358,    0,  213,    0,    0,    0,    0,  374,    0,
        0,    0,    0,    0,  151,    0,    0,    0,  215,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  297,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      202,  241,  239,    0,    0,    0,    0,  293,    0,    0,
        0,    0,    0,  345,  247,  245,    0,    0,    0,    0,
      379,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      343,    0,  349,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  106,    0,  339,    0,    0,    0,
      323,  329,    0,    0,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,   57,
       58,  427,  427,  427,  427,  427,   30,  427,  427,  427,
       31,  427,  427,  427,   69,   70,  427,  427,   79,   80,
      427,   85,   86,  427,  427,  427,    0,    0,    0,    0,

        0,    0,    0,  195,    0,  300,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
        0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  346,  246,    0,    0,    0,    0,    0,    0,    0,
        0,  103,    0,  137,    0,    0,    0,  161,    0,    0,
      344,    0,  350,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  318,    0,    0,    0,  340,    0,
      151,    0,    0,    0,    0,    0,    0,    0,    0,  196,
      198,    0,    0,    0,    0,    0,    0,  132,    0,    0,

        0,    0,  341,    0,    0,    0,    0,  104,    0,  321,
        0,    0,    0,    0,    0,  241,    0,    0,  126,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  152,
        0,    0,    0,    0,  345,  247,    0,    0,  347,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  349,  184,    0,    0,    0,    0,  108,    0,    0,
        0,    0,    0,  249,    0,  355,    0,    0,  339,    0,
      206,    0,    0,    0,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,   30,  427,   67,   68,

       31,  427,  427,  427,  427,  427,  427,   83,   84,  427,
      427,  427,   93,   94,    0,    0,    0,    0,    0,    0,
      195,  300,    0,  298,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  342,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  203,  123,    0,
        0,    0,    0,  294,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  346,    0,
      348,    0,    0,    0,  380,    0,    0,    0,    0,  137,
        0,    0,    0,    0,    0,    0,  350,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  250,    0,  356,

        0,  318,    0,    0,  107,  340,    0,    0,    0,    0,
      324,    0,  330,    0,    0,    0,  375,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  341,  301,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      347,    0,  319,    0,    0,    0,    0,    0,    0,    0,
      130,  172,    0,    0,    0,  377,    0,    0,    0,    0,
        0,    0,    0,    0,  251,  249,    0,  355,    0,    0,

        0,  128,    0,  385,  427,  427,  427,  427,  427,  427,
      427,   41,   42,  427,  280,  427,  427,  427,  427,  427,
      427,  427,   53,   54,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
       63,   64,  427,   65,   66,  427,  427,  427,  427,  427,
      427,   77,   78,  427,   89,   90,   91,   92,    0,  376,
        0,    0,  197,    0,  199,    0,    0,  298,    0,    0,
        0,    0,    0,  133,    0,    0,    0,  342,    0,    0,
        0,    0,    0,    0,  105,    0,    0,    0,  322,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  203,    0,

      262,    0,  127,    0,  294,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,  348,    0,    0,
      380,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  185,    0,    0,  378,    0,    0,    0,    0,
      109,    0,    0,    0,    0,    0,  250,  356,    0,    0,
      107,    0,    0,  207,    0,  324,  330,    0,    0,  375,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  263,  261,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  377,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  251,    0,    0,    0,    0,    0,  186,  427,
      427,  427,  427,  427,   37,   38,   39,   40,  280,  427,
      427,   49,   50,  427,  427,  427,   51,   52,  427,  427,
       99,  100,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,   61,   62,
      427,  427,  291,  292,  427,  427,  427,   75,   76,   87,

       88,  376,    0,  197,  199,    0,    0,    0,    0,    0,
        0,  133,    0,    0,    0,    0,  302,    0,    0,    0,
        0,  105,    0,    0,  322,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  262,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,  320,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,  173,    0,  185,    0,  378,    0,    0,    0,
        0,  109,    0,    0,    0,    0,    0,    0,    0,    0,
      207,    0,  129,    0,    0,  386,    0,  200,    0,  295,

      325,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  263,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  216,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  327,    0,  114,    0,    0,    0,    0,    0,
      204,    0,    0,  427,  427,  427,  427,  427,  427,   35,
       36,  427,   47,   48,  427,  427,  427,  427,  427,  427,
      427,  427,  427,   10,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  289,  290,
      427,  427,  427,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  302,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  320,    0,    0,    0,    0,    0,    0,
        0,  131,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  129,    0,  386,
        0,  187,    0,    0,    0,  224,    0,    0,    0,  236,

        0,    0,  166,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  405,    0,    0,  409,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  142,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  116,    0,    0,    0,    0,    0,  353,
        0,    0,  427,  427,  427,  427,  427,  277,  427,  276,
      427,  427,  427,   32,  427,  427,   33,  427,  427,  427,
      427,  427,   25,  427,   10,  427,  427,  427,  427,  427,
       23,  427,  427,  427,  427,  427,  427,   21,  427,  427,

      427,   20,  427,  427,  427,  427,  427,  427,   34,    0,
      201,    0,    0,  296,    0,  326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  410,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  217,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  328,    0,    0,  115,
        0,    0,    0,    0,  354,    0,  205,    0,    0,  187,
        0,    0,    0,  156,    0,    0,  253,    0,    0,    0,

      257,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,    0,    0,  238,    0,    0,    0,    0,
        0,    0,    0,    0,  407,  409,    0,    0,    0,    0,
        0,  411,    0,    0,  389,    0,    0,  144,  138,    0,
        0,  244,    0,    0,  112,  242,  134,    0,    0,    0,
        0,    0,    0,    0,  234,    0,    0,    0,  353,    0,
        0,  427,  427,  427,  427,  277,  276,  427,   45,   46,
       32,  427,   33,  427,  427,  427,  427,  427,   25,  427,
      427,  427,  427,  427,   23,  427,  427,  427,  427,  427,
      427,  265,   21,  427,  427,   20,  427,  427,  427,  427,

      427,   34,  201,    0,  296,  326,    0,    0,    0,  225,
        0,    0,  254,    0,    0,  237,    0,  258,    0,    0,
      167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      406,    0,  408,  410,    0,    0,    0,    0,    0,  412,
        0,    0,  390,    0,    0,    0,    0,  143,    0,    0,
        0,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  328,    0,  117,  115,    0,    0,    0,
      354,  205,    0,    0,    0,    0,    0,  255,  253,    0,
        0,  259,  257,    0,  180,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  238,    0,    0,    0,
        0,    0,    0,    0,  407,    0,    0,    0,    0,  411,
        0,  389,    0,    0,  140,  244,    0,    0,    0,    0,
        0,    0,    0,    0,  162,  232,    0,    0,    0,    0,
        0,  427,  427,  427,  268,  427,  427,  427,   43,   44,
      427,  427,   56,   55,  427,  427,  427,  427,  427,  427,
       13,  427,  427,  427,  427,  427,  427,  427,  427,   12,
      427,  265,  427,  427,  427,  427,  427,  427,  427,  427,
        0,    0,    0,  225,    0,  157,  254,    0,  237,  258,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  119,    0,    0,    0,    0,    0,    0,
        0,  406,  408,    0,    0,    0,    0,  412,    0,  390,
        0,    0,    0,  145,  143,    0,  139,    0,    0,    0,
        0,  113,    0,  243,    0,  135,    0,    0,    0,    0,
        0,    0,    0,  117,    0,  235,    0,    0,    0,    0,
        0,    0,    0,    0,  255,    0,    0,    0,  259,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  311,    0,    0,    0,    0,  399,    0,    0,
      413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  124,    0,    0,  331,    0,

      427,  427,  268,  427,  427,  287,  288,  427,  427,  427,
      267,  427,  427,  427,   13,  427,    9,  427,  427,  427,
      427,  427,  427,  427,   12,  427,  427,  427,  278,  427,
      279,  427,  427,  427,  427,   74,   73,    0,    0,    0,
      157,    0,    0,    0,  181,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  119,    0,    0,    0,    0,
        0,    0,  400,    0,    0,  414,    0,    0,    0,    0,
        0,    0,  145,  139,    0,  141,    0,    0,  113,  243,
      135,    0,    0,    0,    0,    0,    0,    0,  163,  235,
        0,  233,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  313,    0,  421,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  395,    0,
      397,  399,    0,  413,  393,    0,    0,    0,  391,    0,
        0,    0,    0,    0,    0,  315,  182,    0,    0,    0,
        0,    0,  427,  427,  427,  427,  285,  286,  427,  427,
      427,  427,  267,  427,  266,  427,  427,    9,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  278,  279,  427,
      427,  427,    0,    0,    0,    0,    0,  181,    0,    0,
      422,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  312,    0,    0,  396,    0,  398,  400,    0,  414,

        0,    0,    0,    0,  392,    0,    0,  141,    0,    0,
        0,    0,    0,    0,    0,    0,  163,  233,    0,  125,
        0,    0,  332,    0,  146,    0,  303,    0,    0,    0,
        0,  421,    0,    0,    0,    0,    0,    0,  170,  120,
        0,    0,    0,  395,  397,    0,    0,    0,  391,    0,
      419,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      248,    0,  427,  274,  427,  273,  427,  427,  427,  425,
      426,  427,  283,  284,  266,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  275,  427,
        0,    0,    0,    0,    0,    0,  314,  422,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  312,    0,  396,
      398,    0,    0,  394,    0,    0,  392,    0,  420,    0,
        0,    0,    0,    0,    0,  316,    0,  183,    0,    0,
      125,    0,  332,    0,    0,    0,    0,  164,    0,    0,
        0,  230,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  419,    0,    0,    0,    0,  176,    0,    0,
        0,  248,    0,  274,  273,  427,  427,  423,  424,  281,
      282,  427,  427,  427,  427,  427,  427,  427,  427,  427,
       14,  427,   15,  427,  427,   16,  275,  427,  427,    0,
      147,    0,    0,  304,    0,    0,  314,    0,    0,    0,

        0,    0,    0,    0,    0,  171,    0,  121,    0,    0,
        0,  394,    0,    0,  420,    0,    0,    0,    0,    0,
      316,  183,    0,    0,    0,    0,    0,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,  260,    0,
      387,    0,    0,  415,    0,  417,    0,    0,    0,    0,
      154,    0,    0,    0,  427,  272,  427,  271,  427,  427,
      427,  427,   17,  427,  427,  427,  427,   14,   15,  427,
       16,  427,  427,  147,    0,  304,    0,    0,  165,    0,
        0,    0,  231,    0,    0,    0,    0,  171,  121,    0,
        0,  388,    0,    0,  416,    0,  418,    0,    0,    0,

        0,    0,  177,    0,    0,    0,    0,    0,    0,  178,
        0,    0,    0,    0,    0,    0,    0,  260,  387,  401,
      415,  417,  403,    0,    0,    0,  158,    0,    0,  272,
      271,  427,   18,  427,  427,   17,  427,  427,  427,  427,
      427,  427,  427,    0,    0,  165,    0,  193,    0,  231,
        0,    0,    0,    0,    0,  388,    0,  416,  418,    0,
        0,    0,    0,  177,    0,  155,    0,    0,    0,  309,
        0,    0,    0,    0,    0,    0,    0,    0,  335,  307,
        0,    0,  305,   18,  427,   11,  427,  427,  427,  427,
        8,  427,  427,  427,  270,  427,  269,    0,    0,  179,

      193,    0,    0,    0,    0,    0,    0,    0,  402,    0,
      404,    0,    0,    0,  155,    0,  159,    0,    0,    0,
        0,    0,    0,    0,  188,    0,    0,    0,    0,   11,
      427,  427,  427,    8,  427,  427,   26,  270,  269,    0,
      310,  179,    0,    0,    0,    0,    0,    0,  402,  404,
        0,  336,    0,  308,    0,  159,    0,    0,  306,    0,
        0,    0,  222,  218,    0,  168,    0,    0,    0,  427,
      427,  427,  427,   26,  310,    0,    0,    0,    0,  189,
        0,    0,    0,  336,  308,    0,    0,  306,    0,    0,
      226,    0,    0,  174,    0,  427,  427,  427,  427,    0,

        0,  223,    0,  219,  189,    0,    0,  169,    0,    0,
        0,    0,    0,    0,    0,    0,  427,  427,  427,  427,
        0,  227,  223,  219,    0,  169,    0,    0,  175,    0,
        0,    0,    0,    0,    0,  427,  427,  427,  427,  227,
        0,    0,  175,    0,    0,  252,    0,  256,    0,    0,
        0,  427,  427,  427,  427,    0,    0,    0,  252,  256,
      190,    0,  210,  427,  427,  427,  427,    0,    0,    0,
        0,  427,  333,  427,  427,  427,   19,    0,  191,    0,
        0,  211,    0,  333,  427,  427,   22,   19,  191,    0,
      211,    0,  427,   24,   22,    0,  208,   24,    0,    0,

      209,  209,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,   19,   20,   21,   22,   23,   24,
        6,   25,   26,   27,   28,   29,   30,   31,   32,   33,
        6,   34,   35,   36,   37,   38,   39,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[3516] =
    {   0,
        0,   66, 5527, 5526, 5537, 5536, 5533, 5532,    0,    0,
        0,    0, 5523, 5522,   13,   16,    3,    5, 5536, 5545,
      131, 5530,  195, 5527,   20,   38, 5516,   86,  254, 5545,
     5501, 5491, 5545,    0, 5545,    0,    0,    0, 5545, 5545,
     5521, 5545, 5545, 5512,    0,    0,   46,   41, 5511,   91,
       20, 5545, 5496, 5486,   23,    8, 5481, 5471, 5466, 5465,
        4,   54,    5,   46, 5480,   65,  159,   69, 5480, 5475,
     5545,   25,  248,  103, 5545,   33, 5509,  293, 5545, 5545,
     5491,   77,   51, 5462,   76,  167, 5467, 5470,  174, 5459,
       73,   83,  171,  223,  212,  190,  311,  211,  221, 5472,

     5487, 5479,    0,    0,    0,    0, 5492, 5545, 5450, 5453,
     5447,  223, 5447, 5444, 5449, 5448, 5438, 5458,  207, 5457,
     5448, 5446, 5444, 5449, 5442, 5444, 5452, 5426,  177, 5438,
     5432,  198, 5448, 5432,  248, 5438,  233, 5437,  305,  318,
     5475,  326, 5457,  315,   87, 5428,  241,  325, 5433, 5436,
      334, 5425,  240,  309,  329,  340,  350,  247,  358,  346,
      269, 5438, 5545, 5419, 5425,  335, 5417, 5420,  310,  350,
      352, 5429, 5412, 5426, 5415, 5418, 5415, 5423,  394,  372,
     5442, 5421, 5423,  379,  421,  366, 5410, 5410, 5415, 5545,
     5407, 5407, 5409, 5398, 5402, 5408, 5395,  144, 5393, 5390,

     5397, 5394, 5387, 5391, 5394,  368, 5386, 5405,  381, 5386,
     5391, 5402, 5386, 5390, 5395,  253,  321, 5545, 5394, 5395,
     5392, 5390,  304, 5392, 5381, 5380, 5371,  432,  334, 5370,
     5389, 5388, 5383, 5367, 5381, 5384, 5382, 5386, 5370, 5376,
     5358, 5392, 5365, 5370,  437,  439, 5362, 5370, 5353, 5372,
     5352, 5350, 5373, 5362, 5545,  447,  449,  452, 5349, 5355,
      433, 5347, 5350,  407,  408,  386,  465, 5343, 5357, 5346,
     5349, 5346, 5354,  469,  430, 5373, 5352, 5354,  434,  477,
      398, 5341, 5341, 5346,  481, 5338, 5338, 5340, 5329, 5333,
     5339, 5326,  416, 5324, 5321, 5328, 5325, 5318, 5322, 5325,

      439, 5317, 5336,  440, 5317, 5322, 5333, 5317, 5321, 5326,
      445,  498, 5347, 5312, 5313, 5311,  433, 5323, 5332,  459,
      502, 5319, 5320, 5317, 5312, 5307, 5306,  504,  508, 5313,
     5312, 5302,  510,  520, 5310, 5294, 5292, 5292, 5306, 5292,
     5296, 5321, 5302, 5301,  526,  528, 5287,  530,  532, 5299,
     5302,  394, 5300,    5, 5292, 5288, 5294, 5282, 5278,  444,
     5277, 5290,  494, 5273, 5300, 5270,  538, 5269, 5291, 5271,
     5287, 5269,  542, 5281, 5265, 5279, 5269, 5277, 5267, 5262,
     5258,  490,  478, 5267, 5270,  548, 5251, 5255, 5256, 5276,
      554, 5256,  558,  565, 5250,  569, 5269, 5257, 5248, 5285,

      573,  575, 5246, 5260, 5239, 5262, 5269, 5256, 5256, 5254,
     5253,  577, 5545, 5545, 5238,  584, 5255, 5243,  591, 5249,
     5228, 5244,  593,  595,  599,  601, 5268, 5233, 5234, 5232,
      498, 5244, 5253,  603,  606, 5240, 5241, 5238, 5233,  608,
      611, 5228, 5227,  613,  619, 5234, 5233, 5223,  624,  626,
     5231, 5215, 5213, 5213, 5227, 5213, 5217,  629, 5224, 5223,
      631,  636, 5209,  640,  642, 5221, 5224,  648,  650,  518,
     5222,  664, 5214, 5210, 5216, 5204, 5200,  588, 5199, 5212,
      626, 5195, 5222, 5192,  668, 5191,  671, 5194, 5210, 5192,
      675, 5204, 5188, 5202, 5192, 5200, 5190, 5185, 5181,  677,

      680,  684, 5192, 5179, 5176, 5182,  551, 5194, 5185, 5189,
     5189, 5173, 5191,  687,  693, 5177, 5172, 5186, 5184, 5182,
     5181,  697,  703,  710,  713,  505, 5167, 5164,  715, 5159,
     5173, 5161, 5179, 5172, 5173,  717, 5194, 5162, 5174,  719,
     5165,  721,  727, 5164,  729,  733, 5178, 5162, 5165, 5150,
      737, 5148, 5158, 5161, 5160, 5159, 5160,  332,  739, 5144,
     5140, 5137, 5165, 5153,  741, 5139, 5151, 5134,  504, 5148,
     5144,  747,  749, 5147, 5150, 5147, 5131, 5128,  757,  759,
     5129, 5141, 5126, 5125, 5545, 5128, 5150, 5136, 5136, 5134,
     5137, 5136, 5118,    8, 5120,  763,  765, 5118, 5132, 5123,

     5106,  767,  770, 5130,  778, 5125,  782,  784, 5116, 5106,
     5117, 5110,  786,  788,  790,  792, 5115, 5105, 5106, 5103,
     5114, 5101, 5094, 5097, 5096, 5099,  798,  802, 5102, 5092,
      808,  810,  816, 5096, 5091,  818,  820,  823, 5101, 5088,
     5085, 5091,  610, 5103, 5094, 5098,  825,  827, 5098, 5082,
     5100,  831,  833, 5086, 5081, 5095, 5093,  836, 5091, 5090,
      838,  841,  843,  847,  596, 5076, 5073,  849, 5068, 5082,
     5070, 5088, 5081, 5082,  851,  854,  856, 5103, 5071, 5083,
      859, 5074,  861,  863, 5073,  867,  870, 5087, 5071, 5074,
     5059,  872, 5057,  874, 5067, 5070, 5069,  877,  879, 5068,

     5069,  536,  883, 5053, 5049, 5046,  885, 5063,  888, 5049,
     5061, 5044,  612, 5058, 5054,  890,  893, 5057,  895,  901,
     5060, 5057, 5041, 5038,  906,  908, 5039, 5051, 5036, 5035,
      911, 5038, 5060, 5046,  913,  917, 5046, 5044, 5047,  919,
     5041, 5045, 5040, 5039, 5069, 5041, 5545, 5022, 5034, 5033,
      618, 5035,  922, 5033, 5027, 5015, 5029, 5019, 5014,  924,
      929, 5013, 5033, 5028, 5019, 5022, 5025,  669, 5011, 5019,
     5018,  931, 5044,  934, 5545,  668, 5003, 4996,  936, 5006,
      938, 5020, 4998, 5002,  941,  943, 5031,  948, 4998, 4942,
     4936, 4935, 4946, 4931, 4941, 4930,  950, 5545,    5,   28,

       71,  109,  185,  953,  959,  962,  215,  238,  267,  303,
      371,  395,  966,  463,  482,  514,  529, 5545,  969,  558,
      567,  971,  604,  622,  661,  649,  670,  692,  704,  688,
      713,  701,  703,  706,  973,  727,  723,  723,  727,  975,
     5545, 5545,  752,  759,  981,  770,  772,  777,  792,  983,
      987,  862,  876,  838,  869,  862,  887,  993,  995,  997,
      872,  905,  893,  999,  952,  952,  928,  937, 1005,  982,
      984, 1012, 1014,  949, 1020, 1022,  958,  965,  974,  976,
     1013,  987, 1027, 1029,  988, 1032,  992,  998,  997, 1038,
      999,  995,  986, 1003,  995,  992, 1048, 1050,  997, 1020,

     1017, 1010, 1015, 1020, 1039, 1009, 1020, 1021, 1064, 1066,
     1068, 1071, 1033, 1015, 1013, 1075, 1027, 1080, 1043, 1026,
     1033, 1087, 1090, 1092, 1042, 1043, 1040, 1041, 1097, 1056,
     1043, 1055, 1052, 1106, 1108, 1110, 1047, 1060, 1113, 1115,
     1079, 1063, 1119, 1122, 1126, 1068, 1089, 1074, 1076, 1089,
     1093, 1135, 1082, 1138, 1087, 1101, 1102, 1145, 1147, 1110,
     1100, 1151, 1110, 1154, 1156, 1098, 1121, 1105, 1162, 1103,
     1122, 1128, 1125, 1121, 1116, 1117, 1155, 1117, 5545, 1119,
     1134, 1126, 1140, 1122, 1138, 1128, 1130, 1183, 1128, 1148,
     1145, 1136, 1140, 1133, 1135, 1143, 1147, 1148, 1155, 1141,

     5545, 1199, 1201, 1188, 1161, 1162, 1184, 1188, 1164, 1178,
     1161, 1158, 1217, 1224, 1226, 1228, 1204, 1230, 1191, 1182,
     5545, 1193, 1190, 1174, 1215, 1186, 1220, 1188, 1198, 1195,
     1247, 1249, 1251, 1197, 1197, 1198, 1214, 1201, 1216, 1229,
     1214, 1261, 1265, 1229, 5545, 1268, 1271, 1221, 1223, 1225,
     5545, 5545, 1235, 1229, 1224, 1230, 1233, 1224, 1223, 1286,
     1231, 1232, 1248, 1245, 1272, 1255, 1294, 1245, 1236, 5545,
     5545, 1257, 1258, 1302, 1246, 1305, 1309, 1311, 1317, 1313,
     1323, 1245, 1277, 1266, 5545, 5545, 1288, 1328, 5545, 5545,
     1330, 1329, 1329, 1336, 1338, 1340, 1301, 1297, 1292, 1293,

     1331, 1294, 1353, 1355, 1357, 1359, 1361, 1307, 1322, 1314,
     1328, 1310, 1327, 1317, 1319, 1373, 1318, 1339, 1336, 1327,
     1331, 1324, 1326, 1334, 1338, 1339, 1346, 1332, 1389, 1391,
     1393, 1395, 1355, 1356, 1378, 1409, 1358, 1372, 1354, 1351,
     1406, 1411, 1413, 1415, 1375, 1366, 1419, 1380, 1377, 1362,
     1403, 1427, 1431, 1438, 1382, 1425, 1393, 1449, 1405, 1401,
     1453, 1455, 1457, 1403, 1403, 1404, 1420, 1407, 1422, 1435,
     1420, 1467, 1471, 1473, 1475, 1439, 1478, 1480, 1483, 1433,
     1489, 1436, 1441, 1496, 1498, 1450, 1445, 1500, 1456, 5545,
     5545, 1458, 1450, 1464, 1452, 1451, 1463, 5545, 1459, 1455,

     1459, 1516, 1518, 1464, 1464, 1484, 1504, 1502, 1463, 5545,
     1508, 1474, 1481, 1491, 1498, 1535, 1491, 1539, 5545, 1492,
     1500, 1492, 1493, 1505, 1500, 1508, 1513, 1510, 1504, 5545,
     1500, 1506, 1527, 1506, 1563, 1566, 1517, 1569, 1572, 1536,
     1519, 1521, 1518, 1540, 1537, 1523, 1535, 1536, 1542, 1530,
     1565, 1587, 1547, 1590, 1550, 1552, 1552, 1566, 1543, 1545,
     1560, 1599, 1587, 1603, 1606, 1609, 1559, 1556, 1617, 1558,
     5545, 1573, 1564, 1578, 1576, 1567, 1600, 1601, 1626, 1628,
     1630, 1636, 1586, 1638, 1590, 1595, 1594, 1644, 1646, 1614,
     1653, 1624, 1650, 1656, 1659, 1612, 1665, 1684, 1660, 1667,

     1676, 1690, 1616, 1621, 1639, 1692, 1694, 5545, 5545, 1700,
     1702, 1708, 1693, 1693, 1715, 1664, 1717, 1719, 1666, 1666,
     1722, 1724, 1726, 1728, 1689, 1678, 1678, 1690, 1737, 1688,
     1683, 1687, 1743, 1745, 1691, 1691, 1711, 1731, 1753, 1688,
     1755, 1742, 1702, 1714, 1722, 1729, 1766, 1775, 1779, 1782,
     1784, 1720, 1786, 1788, 1748, 1720, 1721, 1749, 1743, 1735,
     1753, 1750, 1750, 1806, 1746, 1755, 1776, 1755, 1812, 1814,
     1816, 1780, 1763, 1822, 1824, 1765, 1767, 1789, 1786, 1830,
     1775, 1787, 1788, 1794, 1781, 1817, 1839, 1841, 1843, 1803,
     1805, 1805, 1849, 1795, 1799, 1814, 1853, 1859, 1861, 1865,

     1803, 1869, 1801, 1871, 1873, 1879, 1808, 1881, 1825, 1887,
     1889, 1891, 1893, 1820, 1835, 1897, 1899, 1828, 1844, 1855,
     1846, 1862, 1884, 1856, 1868, 1863, 1864, 1913, 5545, 1865,
     1858, 1874, 1879, 1869, 1891, 1882, 1869, 1864, 1884, 1886,
     1883, 1884, 1900, 1890, 1873, 1931, 1918, 1934, 1894, 1880,
     1900, 1882, 1882, 1882, 1888, 1893, 1887, 1896, 1906, 1912,
     1912, 1902, 1920, 1916, 1902, 1906, 1915, 1905, 1897, 1922,
     1961, 1908, 5545, 1922, 1923, 1909, 1929, 1922, 1914, 1921,
     5545, 5545, 1922, 1916, 1973, 1975, 1936, 1958, 1922, 1943,
     1950, 1926, 1960, 1946, 1986, 1989, 1982, 1992, 1942, 1949,

     1946, 5545, 1955, 1942, 1938, 1947, 1960, 1962, 2004, 2006,
     2012, 2005, 2005, 2019, 2021, 1962, 2023, 2025, 1971, 1989,
     1971, 2031, 2032, 2033, 1977, 2040, 2042, 2006, 1997, 1996,
     2000, 1993, 2000, 2001, 2016, 2019, 2004, 2028, 2021, 2060,
     2059, 2059, 2009, 5545, 5545, 2067, 2082, 2014, 2036, 2013,
     2088, 2069, 2070, 2094, 2073, 2072, 5545, 5545, 2100, 2078,
     2027, 2102, 2104, 2106, 2108, 2035, 2044, 2110, 2035, 2054,
     2077, 2061, 2113, 2118, 2076, 2074, 2076, 2123, 2125, 2081,
     2072, 2088, 2093, 2132, 2134, 2087, 2109, 2138, 2141, 2105,
     2092, 2087, 2107, 2110, 2107, 2108, 2125, 2113, 2155, 2157,

     2159, 2161, 2163, 2123, 2166, 2111, 2131, 2113, 2112, 2113,
     2119, 2124, 2119, 2126, 2136, 2142, 2142, 2132, 2150, 2146,
     2132, 2186, 2188, 2140, 2149, 2139, 2131, 2194, 2141, 2197,
     2199, 2160, 2161, 2147, 2167, 2160, 2152, 2159, 2209, 2213,
     2162, 2215, 2217, 2163, 2220, 2222, 2184, 2207, 2169, 2231,
     2233, 2198, 2205, 2181, 2215, 2201, 2241, 2243, 2193, 2201,
     2248, 2200, 2251, 2253, 2255, 2257, 2259, 2219, 2262, 2264,
     2205, 2230, 2208, 2215, 2221, 2224, 2217, 2229, 2224, 2236,
     2227, 2228, 2232, 2234, 2241, 2246, 2229, 2235, 2249, 2241,
     2234, 2250, 2235, 2240, 2255, 2239, 2253, 2296, 2298, 2291,

     2251, 2260, 2259, 2270, 2263, 2264, 2263, 2250, 2253, 2269,
     2270, 2264, 2286, 2273, 2276, 2277, 2277, 2281, 2279, 2284,
     2290, 2274, 2304, 2275, 2271, 2283, 2289, 2279, 2290, 2291,
     2292, 2301, 2336, 2305, 2293, 2294, 2285, 2292, 2319, 2298,
     2294, 2297, 2347, 2293, 2293, 2311, 2314, 2302, 5545, 2333,
     2303, 2295, 2297, 2359, 2358, 2358, 5545, 5545, 2367, 2314,
     2369, 2368, 2368, 2318, 2332, 2335, 5545, 5545, 2325, 2379,
     5545, 5545, 2324, 2331, 2336, 2388, 2328, 2348, 2352, 2341,
     2346, 2349, 2338, 2344, 2337, 2365, 2350, 2351, 5545, 5545,
     2355, 2404, 2400, 2403, 2364, 2349, 2370, 5545, 5545, 5545,

     5545, 2413, 2353, 2416, 2418, 2382, 2360, 2366, 2372, 2375,
     2368, 2426, 2382, 2377, 2388, 2431, 2433, 2383, 2384, 2388,
     2390, 2439, 2399, 2404, 2443, 2389, 2396, 2410, 2402, 2395,
     2411, 2396, 2401, 2416, 2400, 2456, 2458, 2410, 2419, 2418,
     2429, 2422, 2423, 2422, 2409, 2412, 2428, 2428, 2422, 2444,
     2431, 2434, 2435, 2434, 2477, 2440, 2438, 2443, 2449, 2462,
     2484, 2487, 2438, 2434, 2445, 2451, 2441, 2452, 2453, 2496,
     2500, 2502, 2504, 2456, 2506, 2474, 2509, 2479, 2467, 2468,
     2459, 2518, 2466, 2496, 2475, 2471, 2474, 2467, 2485, 2488,
     2527, 2529, 2531, 2482, 2534, 2536, 2538, 5545, 2485, 5545,

     5545, 2501, 2500, 2487, 2503, 2495, 2491, 2497, 2495, 2509,
     2510, 2504, 2498, 2510, 2501, 2509, 2517, 2514, 2504, 2528,
     2523, 2514, 2519, 2516, 2567, 2520, 2528, 2516, 2520, 2527,
     2519, 2520, 2534, 2521, 2578, 2522, 2526, 2544, 2545, 2528,
     2547, 2544, 2531, 2533, 2547, 2549, 2551, 2546, 2552, 2534,
     2556, 5545, 2545, 2556, 2548, 2560, 2545, 2552, 2551, 2547,
     2550, 2557, 5545, 2565, 5545, 2556, 2550, 2568, 2559, 2612,
     5545, 2557, 2575, 2565, 2576, 2561, 2563, 2620, 2622, 5545,
     5545, 2624, 5545, 5545, 2628, 2574, 2630, 2590, 2576, 2595,
     2579, 2639, 2645, 2647, 2591, 2593, 2625, 2601, 2651, 2612,

     2610, 2616, 2601, 2660, 2599, 2604, 2663, 2613, 5545, 5545,
     2606, 2615, 2669, 2671, 2618, 2675, 2679, 2638, 2639, 2626,
     2642, 2634, 2632, 2691, 2638, 2641, 2655, 2656, 2649, 2643,
     2655, 2646, 2654, 2662, 2659, 2649, 2673, 2668, 2660, 2665,
     2670, 2658, 2662, 2669, 2661, 2662, 2676, 2663, 2720, 2664,
     2668, 2686, 2687, 2670, 2689, 2686, 2673, 2675, 2689, 2691,
     2693, 2688, 2675, 2737, 2699, 2740, 2690, 2701, 2693, 2705,
     2690, 2747, 2749, 2701, 2700, 2696, 2699, 2707, 2757, 2717,
     2760, 2710, 2704, 2722, 2765, 2767, 2712, 2770, 2733, 2776,
     2778, 2783, 2712, 2739, 2735, 5545, 2730, 2787, 2755, 5545,

     2790, 2735, 5545, 2752, 2740, 2741, 2741, 2764, 2761, 2765,
     2752, 2754, 2769, 2766, 2771, 2810, 2766, 2762, 2764, 2764,
     2766, 2761, 2784, 5545, 2819, 2821, 2823, 2786, 2785, 2773,
     2772, 2830, 2783, 2837, 2780, 2801, 2784, 5545, 2798, 2778,
     2842, 2791, 2804, 2796, 2793, 2793, 2793, 2817, 2811, 2828,
     2817, 2814, 2816, 5545, 2808, 2808, 2843, 2804, 2863, 2865,
     2821, 2826, 2828, 2809, 2833, 2830, 2873, 2875, 2879, 2881,
     2883, 2885, 2891, 2894, 2826, 2898, 2900, 2902, 2847, 2848,
     2854, 2906, 2908, 2853, 2913, 2869, 2859, 2897, 2872, 2921,
     2923, 2879, 2870, 2895, 2885, 2928, 2930, 2932, 2892, 2894,

     2938, 2940, 2896, 2905, 2896, 2924, 2905, 2948, 2953, 2955,
     2957, 2888, 2959, 2963, 2965, 2967, 2919, 2919, 2971, 2917,
     2975, 2943, 2978, 2981, 2926, 2984, 2945, 2933, 2933, 2934,
     2956, 2954, 2957, 2945, 2946, 2962, 2959, 2964, 2952, 2954,
     2954, 2956, 2951, 2974, 3009, 3011, 3013, 3015, 2977, 2976,
     2964, 2963, 3021, 2974, 3029, 2972, 2993, 2976, 3032, 2992,
     2972, 2984, 2996, 3039, 3041, 2992, 2990, 2990, 2991, 3015,
     3008, 3025, 3014, 3011, 3013, 3056, 3058, 3060, 3062, 3064,
     3015, 3015, 3050, 3069, 3072, 3078, 3080, 3028, 3034, 3082,
     3065, 3065, 3045, 5545, 3088, 3075, 3091, 3042, 3098, 3080,

     3101, 3054, 3049, 3059, 3073, 3053, 3071, 3053, 3072, 3057,
     3087, 3059, 5545, 3078, 3118, 3120, 3082, 3066, 3078, 3087,
     3084, 3085, 3073, 3129, 3131, 3134, 3079, 3086, 3104, 3084,
     3140, 3142, 3107, 3146, 3148, 3098, 3096, 5545, 5545, 3110,
     3153, 3156, 3103, 3138, 5545, 5545, 5545, 3108, 3110, 3112,
     3118, 3110, 3126, 3111, 3113, 3122, 3116, 3117, 3173, 3123,
     3155, 3158, 3178, 3125, 3181, 3183, 3185, 3188, 3184, 3189,
     3196, 3160, 3199, 3201, 3203, 3150, 3151, 3158, 3210, 3157,
     3158, 3216, 3158, 3167, 3219, 3164, 3203, 3185, 3224, 3170,
     3227, 3231, 3234, 3174, 3180, 3242, 3176, 3201, 3198, 3199,

     3246, 3248, 3250, 3232, 3253, 3255, 3236, 3216, 3261, 3263,
     3265, 3267, 3269, 3207, 3271, 3273, 3277, 3283, 3233, 3287,
     3289, 3228, 3235, 3252, 3236, 3255, 3237, 3256, 3241, 3269,
     3241, 3299, 3262, 3246, 3258, 3267, 3264, 3265, 3253, 3309,
     3311, 3315, 3317, 3319, 3256, 3270, 3288, 3268, 3325, 3327,
     3291, 3331, 3333, 3283, 3281, 3337, 3341, 3343, 3347, 3297,
     3290, 3328, 3350, 3353, 3357, 3359, 3303, 3309, 3312, 3318,
     3310, 3326, 3311, 3369, 3375, 3377, 3379, 3381, 3323, 3318,
     3383, 3385, 3335, 3367, 3351, 3342, 3341, 3393, 3397, 3386,
     3379, 3400, 3402, 3395, 5545, 3348, 3345, 3351, 3371, 3362,

     3366, 3364, 3368, 3364, 3371, 3369, 3419, 3379, 3366, 3372,
     3375, 3369, 3426, 3382, 3429, 3431, 3393, 3388, 3389, 3438,
     3381, 3442, 3384, 3398, 5545, 3447, 3403, 3400, 3395, 3423,
     3395, 3404, 3397, 3398, 5545, 5545, 3414, 3419, 3418, 3408,
     3411, 3409, 3410, 3463, 3465, 3410, 3468, 3470, 5545, 5545,
     3423, 3478, 5545, 5545, 3423, 3484, 3420, 3442, 3448, 3487,
     3489, 3491, 3451, 3448, 3443, 3457, 3459, 3453, 3502, 3506,
     3444, 3508, 3474, 3511, 3513, 3466, 3475, 3463, 3519, 3521,
     3485, 3479, 3478, 3530, 3534, 3536, 3538, 3512, 3541, 3543,
     3545, 3547, 3493, 3490, 3495, 3515, 3505, 3509, 3507, 3511,

     3506, 3513, 3561, 3563, 3516, 3510, 3516, 3519, 3513, 3570,
     3526, 3573, 3577, 3579, 3535, 3535, 3536, 3583, 3531, 3587,
     3533, 3544, 3591, 3595, 3597, 3599, 3601, 3603, 3551, 3556,
     3607, 3609, 3611, 3615, 3619, 3623, 3558, 3589, 3564, 3576,
     3570, 3571, 3629, 3631, 3635, 3637, 3639, 3591, 3603, 3591,
     3594, 3588, 3604, 3590, 3648, 3610, 3610, 3615, 3655, 3614,
     3602, 3659, 3623, 3616, 3605, 3605, 3623, 3624, 3608, 3616,
     3627, 3619, 5545, 3633, 3672, 3675, 3677, 3679, 3643, 3682,
     3684, 3644, 3638, 3628, 3693, 3649, 3657, 3640, 3656, 3653,
     3648, 3645, 3653, 3669, 3652, 5545, 3654, 3664, 5545, 3665,

     3660, 3650, 3711, 3694, 3714, 3713, 3713, 3720, 3722, 3724,
     3727, 3729, 3685, 3675, 3739, 3741, 3744, 3695, 3676, 3686,
     3699, 3690, 3693, 3694, 3750, 3710, 3700, 3756, 3758, 3760,
     3762, 3712, 3709, 3709, 3766, 5545, 5545, 3711, 3730, 3716,
     3775, 3735, 3740, 3779, 3781, 3727, 3784, 3748, 3741, 3730,
     3730, 3748, 3749, 3733, 3741, 3795, 3755, 3800, 3760, 3802,
     3804, 3806, 3808, 3772, 3811, 3813, 3774, 3768, 3759, 3822,
     3782, 3787, 3827, 3829, 3831, 3833, 3779, 3794, 3838, 3840,
     3842, 3798, 3793, 3791, 3799, 3815, 3798, 3851, 3853, 3855,
     3857, 3859, 3861, 3812, 3864, 3825, 3830, 3819, 3814, 3829,

     3824, 3826, 3829, 5545, 3877, 3880, 3825, 3832, 3842, 3843,
     3850, 3831, 3846, 3838, 3872, 3851, 3842, 3894, 3896, 3898,
     3900, 3902, 3853, 3905, 5545, 3865, 3891, 3910, 3914, 3916,
     3861, 3862, 3869, 3878, 3862, 5545, 5545, 3876, 3868, 3884,
     3926, 3878, 3929, 3932, 3882, 3883, 5545, 5545, 3936, 3939,
     3947, 3951, 3957, 3959, 3962, 3887, 3899, 3964, 3894, 3911,
     3899, 3924, 3921, 3922, 3913, 3914, 3914, 3974, 3976, 3916,
     3978, 3923, 3943, 3932, 3927, 3935, 3937, 3986, 3988, 3990,
     3993, 3938, 3945, 3955, 3956, 3963, 3944, 3959, 3951, 3986,
     4006, 4008, 3959, 4011, 4013, 4015, 4017, 4019, 3971, 4023,

     4027, 3983, 4012, 4031, 4033, 4035, 3986, 4038, 3984, 3991,
     4001, 3985, 4047, 4051, 3999, 3994, 4053, 4055, 4057, 4059,
     4021, 4063, 4067, 4015, 5545, 4027, 5545, 4014, 4029, 4031,
     4025, 4075, 4019, 4022, 4024, 4063, 4044, 4049, 5545, 5545,
     4029, 4043, 4029, 4087, 4089, 4047, 4036, 4036, 4094, 4096,
     4100, 4054, 4056, 4061, 4048, 4063, 4056, 4061, 4063, 4109,
     4112, 4072, 4115, 4117, 4119, 4121, 4074, 4065, 4127, 4123,
     4126, 4134, 4133, 4133, 4140, 4085, 4091, 4123, 4089, 4089,
     4107, 4096, 4111, 4150, 4152, 4108, 4155, 4157, 4159, 4142,
     4162, 4123, 4167, 4128, 4130, 4175, 4178, 4180, 4115, 4126,

     4128, 4167, 4148, 4153, 4191, 4193, 4133, 4195, 4132, 4197,
     4199, 4157, 4204, 4209, 4146, 4150, 4211, 4213, 4215, 4173,
     4172, 4178, 4165, 4180, 4223, 4225, 4229, 4231, 4177, 4187,
     4234, 4191, 4239, 4195, 4190, 4202, 4186, 5545, 4203, 4190,
     4211, 5545, 4196, 4211, 4201, 4199, 4214, 4253, 4255, 4208,
     4258, 4260, 4262, 4215, 4213, 4215, 4233, 5545, 4227, 4229,
     4226, 4276, 4223, 4278, 4280, 4282, 4284, 5545, 5545, 5545,
     5545, 4230, 4236, 4227, 4289, 4236, 4235, 4242, 4255, 4299,
     4301, 4304, 4306, 4243, 4308, 4310, 4314, 4245, 4260, 4316,
     4319, 4270, 4323, 4325, 4270, 4328, 4332, 4274, 4298, 4335,

     4285, 4301, 4291, 4289, 4344, 4346, 4348, 4351, 4304, 4353,
     4306, 4356, 4360, 4364, 4366, 4309, 4310, 4318, 4336, 4371,
     4373, 4376, 4336, 4338, 4335, 4331, 4326, 4329, 4343, 4368,
     5545, 4350, 4331, 4341, 4333, 4364, 4342, 4394, 4396, 4398,
     4400, 4360, 4403, 4405, 4407, 4410, 4370, 4363, 4358, 4364,
     5545, 4361, 4368, 4363, 4423, 4425, 4427, 4429, 4431, 4365,
     4380, 4434, 4438, 4398, 4394, 4386, 4394, 4446, 4449, 4393,
     4451, 4404, 4394, 4455, 4400, 4458, 4418, 4461, 4463, 4465,
     4429, 4468, 4470, 4414, 4424, 4416, 4447, 4477, 4481, 4428,
     4484, 4486, 4446, 4489, 4491, 4493, 4495, 4455, 4447, 4443,

     4449, 4502, 4505, 4509, 4451, 4460, 4455, 4457, 4468, 5545,
     4460, 4467, 4467, 4461, 4478, 4469, 4482, 4525, 4527, 5545,
     4529, 4531, 5545, 4467, 4477, 4506, 5545, 4491, 4480, 4537,
     4539, 4541, 4543, 4545, 4492, 4548, 4504, 4492, 4552, 4512,
     4500, 4557, 4560, 4506, 4563, 4567, 4569, 4572, 4516, 4575,
     4526, 4521, 4538, 4529, 4542, 4585, 4587, 4589, 4591, 4593,
     4527, 4539, 4568, 4597, 4599, 4603, 4605, 4557, 4551, 5545,
     4556, 4568, 4553, 4571, 4571, 4559, 4557, 4572, 5545, 5545,
     4566, 4582, 5545, 4621, 4623, 4625, 4585, 4577, 4587, 4630,
     4632, 4604, 4635, 4638, 4640, 4642, 4645, 4647, 4650, 4653,

     4657, 4597, 4618, 4618, 4605, 4604, 4619, 4666, 4668, 4670,
     4672, 4674, 4676, 4626, 4679, 4682, 4686, 4647, 4692, 4631,
     4652, 4652, 4639, 4640, 4665, 4657, 4654, 4642, 4660, 4703,
     4649, 4649, 4678, 4709, 4658, 4712, 4714, 4716, 4718, 4720,
     4722, 4724, 4685, 4672, 4673, 4730, 4690, 4687, 4736, 4738,
     4740, 4742, 4746, 4748, 4675, 4750, 4702, 4752, 4756, 4708,
     4701, 4703, 5545, 5545, 4703, 5545, 4711, 4722, 4719, 4710,
     4738, 4716, 4713, 4771, 4773, 4719, 4776, 4778, 4780, 4782,
     4727, 4785, 4736, 4788, 4796, 4748, 4746, 4798, 4742, 4749,
     5545, 4747, 4759, 5545, 4760, 4759, 4753, 4750, 4762, 4809,

     4811, 4813, 4815, 4817, 4819, 4766, 4822, 4827, 4781, 4831,
     4785, 4782, 4779, 4789, 4799, 4793, 4787, 4783, 4795, 4790,
     4843, 4847, 4849, 4851, 4799, 4853, 4818, 4856, 4859, 4816,
     4862, 4864, 4815, 4825, 4811, 4818, 4824, 4820, 4822, 4874,
     4825, 4836, 4880, 4825, 4883, 4885, 4887, 4889, 4847, 4846,
     4837, 4838, 4843, 4845, 4841, 4855, 4854, 4845, 4903, 4905,
     5545, 4863, 5545, 4908, 4859, 4855, 4912, 4914, 4872, 4917,
     4874, 4920, 4923, 4869, 4927, 4930, 4935, 4937, 4939, 4888,
     4942, 4945, 4890, 4948, 4950, 4953, 4955, 4958, 4960, 4905,
     4965, 4907, 4968, 4970, 4972, 4918, 5545, 4975, 4977, 4979,

     4983, 4985, 5545, 4996, 5001, 5006, 5011, 5016, 5021, 5026,
     5031, 5036, 5040, 5045, 5050
    } ;

static yyconst flex_int16_t yy_def[3516] =
    {   0,
     3504, 3504, 3505, 3505, 3506, 3506, 3507, 3507, 3508, 3508,
     3508, 3508, 3509, 3509, 3510, 3510, 3511, 3511, 3503, 3503,
     3503, 3503,   21, 3503,   23,   23,   23,   23, 3503, 3503,
       23,   23, 3503, 3512, 3503, 3513, 3514, 3515, 3503, 3503,
     3503, 3503, 3503, 3503,   21,   23,   23,   23,   23,   23,
       29, 3503,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503,   23,   23,   23, 3503,   23, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

       23,   23, 3512, 3513, 3514, 3515, 3503, 3503,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503,   23, 3503,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503, 3503,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 3503, 3503,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3503, 3503,   23,   23,   23, 3503,
     3503,   23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3503,
     3503,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 3503, 3503,   23,   23, 3503, 3503,
       23, 3503, 3503,   23,   23,   23, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 3503, 3503,

       23,   23,   23,   23,   23,   23,   23, 3503, 3503,   23,
       23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23, 3503, 3503,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503, 3503,   23, 3503, 3503,   23,   23,   23,   23,   23,
       23, 3503, 3503,   23, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,   23,
       23,   23,   23,   23, 3503, 3503, 3503, 3503,   23,   23,
       23, 3503, 3503,   23,   23,   23, 3503, 3503,   23,   23,
     3503, 3503,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 3503, 3503,
       23,   23, 3503, 3503,   23,   23,   23, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503,   23,   23,   23,   23,   23,   23, 3503,
     3503,   23, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23, 3503, 3503,
       23,   23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503,   23,   23,   23,   23,   23,   23,   23, 3503, 3503,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503,   23,   23,   23,   23,   23,   23,   23, 3503, 3503,
       23,   23, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

       23,   23,   23,   23,   23, 3503, 3503,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503,   23,   23,   23,   23, 3503, 3503,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503,   23,   23,   23,   23,   23,   23,   23, 3503,
     3503,   23, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503,   23,   23,   23,   23, 3503, 3503, 3503,
     3503,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,   23,
       23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503,   23,   23,   23,   23, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503,   23,   23,   23,   23,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503,   23,   23,   23,   23, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503,   23,   23,   23,   23, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503,   23,   23,   23,   23, 3503, 3503, 3503,
     3503,   23,   23,   23,   23,   23,   23, 3503, 3503, 3503,
     3503, 3503, 3503,   23,   23,   23,   23,   23, 3503, 3503,
     3503, 3503,   23,   23,   23, 3503, 3503,   23, 3503, 3503,

     3503, 3503,    0, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503
    } ;

static yyconst flex_int16_t yy_nxt[5612] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20,   40, 3503,
       44,   41,   44, 3503,   41,   31,   72,   72,  832,   48,
       32,   50,   50,   50,   76,   76, 1026, 3503,  556,   72,
       72,  833,   72,   72,  121,   53,  117,  111,  557,   73,
       73,   73,   73,   73,   73,   48,  118,   50,   50,   50,
       74,  112,  109,   74,  122,   33,   20,   21,   21,   20,
       22,   53,   24,  110,   25,   26,   27,   28,   28,   28,
       29,   74,   30,   20,   74,  123, 1027,   76,   76,  124,
      167,   31,   76,   76,  119,   48,   32,   50,   50,   50,

       48,  168,   50,   50,   50,  125,  127,  120,   74,  135,
      139,  139,  128,   74,  140,  140,  140,  164,  129,  170,
      184,  136,  186,  171, 1028,  185,  262,  165,  130,   74,
      187,   33,   45,   45,   74,  166,   46,  263,   46,   47,
       48,   49,   50,   50,   50,   51,   46,   52, 1029,   46,
       46,   46,   46,   46,   46,   46,   53,   46,   46,   46,
       46,   54,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   55,   56,   57,   58,   59,   60,   46,   61,   46,
       46,   62,   63,   64,   65,   46,   46,   46,   66,   67,
       68,   69,   70,   46,   46,   46,   46,   46,  131,  245,

      245,  359,  360,   46,   46,   46,   46,   46,   46, 3503,
      188, 3503,  132,  246,  189,  133,  178,  172,  179,  173,
       46,  190,  134,  174,  191,   46,  180,  241,  230,  175,
      192,  181,  182,  202,  242,   46,   46,   46,   46,   46,
       46, 1030,   46,  203,  231,   46,   46,   46,   46,   72,
       72,  198,   46,   46,   46,   46,   46,   77,  211,   73,
       73,   73,  199,  193,   78,  200,  222,  212,  201,  249,
       74,   79, 1034,  214,  213,  223,   80,  194,  215, 1035,
      195,  196,  197,  252,  265,  250,   81,  279,  266,  253,
      297,   74,  280,   82,   83,   84,   85,   86,   87,   88,

      298,   89,   90,  381,   91,   92,   93,   94,   95,  382,
       96,   97,   98,   99,  100,  142,  140,  140,  140,   72,
       72,  309,   72,   72, 1036,  143,  310,  256,  256,  140,
      140,  140,  144,  145,  146,  147,  148,  149,  150,  387,
      151,  152,  257,  153,  154,  155,  156,  157,  281,  158,
      159,  160,  161,  162,  204,  259,  282,  314,  205, 1037,
      319,  388,  320,  315,  206,  260,  207,  321,  283,  208,
      209,  316,  284,  261,  210,  267,  273,  268,  274,  285,
      288,  269,  286,  795,  395,  796,  275,  270,  287,  293,
      396,  276,  277,  306,  289,  333,  333,  290,  291,  292,

      294,  299,  307,  295,  322,  300,  296,  323,  324,  308,
      334,  301,  325,  302,  335, 1038,  303,  304,  368,  336,
      343,  305,  345,  345,  347,  369,  337,  370,  348,  338,
      339,  344,  373,  393,  393,  374, 1039,  346,  245,  245,
      412,  412,  438,  413,  553,  414,  439,  394,  256,  256,
      423,  423,  246,  424,  424,  428,  463,  433,  554,  434,
      464,  429,  436,  257,  435,  437,  440,  440,  425,  430,
      449,  449,  451,  477,  478,  459,  507,  452,  461,  461,
      508,  441,  468,  468,  453,  450,  460,  454,  455,  486,
      563,  491,  511,  462,  492,  499,  487,  469,  488,  501,

      501,  500,  564,  514,  514,  522,  522,  592,  442,  524,
      524,  333,  333,  593,  502,  589,  512,  513,  515, 1040,
      523,  529,  529,  590,  525,  762,  334,  345,  345,  540,
      540,  542,  542,  545,  545,  567,  568,  591, 1041,  572,
      572,  643,  346,  579,  579,  644,  543,  809,  546,  596,
      596,  810,  547,  548,  573,  602,  602, 1042,  580,  393,
      393,  549,  763,  597,  745,  544,  605,  605,  695,  603,
      607,  607, 1043,  394,  613,  613,  615,  615,  412,  412,
      746,  413,  696,  414,  608,  627,  627,  932,  614,  933,
      616,  550,  631,  631,  423,  423,  424,  424, 1044,  628,

      636,  636,  637,  637,  647,  647,  632,  652,  652,  440,
      440,  425,  658,  658,  661,  661,  899,  638, 1045,  648,
      663,  663,  653,  881,  441,  449,  449,  668,  668,  662,
      676,  676,  461,  461,  707,  664,  649,  681,  681,  882,
      450,  683,  683,  686,  686,  677,  708,  462, 1048,  468,
      468,  694,  694,  900,  678,  948,  684,  982,  687,  949,
      650,  651,  688,  689,  469,  698,  698,  711,  712,  716,
      716,  690,  719,  719,  983,  685,  725,  725,  735,  735,
      699,  501,  501, 1049,  717,  740,  740,  720,  514,  514,
      997,  726,  998,  736,  753,  753,  502,  700,  522,  522,

     1050,  691,  737,  515,  760,  760, 1051,  701,  721, 1005,
      738,  524,  524,  523,  761,  761,  529,  529,  772,  772,
      540,  540,  542,  542,  739, 1006,  525,  773,  779,  779,
      545,  545, 1052,  774,  781,  781, 1053,  543,  786,  786,
      797,  797,  804,  804, 1054,  546, 1055,  787,  572,  572,
      813,  813, 1056,  788, 1057,  798, 1058,  805,  579,  579,
      819,  819, 1059,  573,  596,  596,  835,  835,  602,  602,
     1060,  840,  840,  580,  841, 1061,  842, 1062,  597,  605,
      605, 1063,  603,  607,  607,  845,  845,  613,  613,  850,
      850,  615,  615,  851,  851, 1064,  852,  608,  853,  627,

      627,  614, 1065,  864,  864,  616,  865, 1066,  866,  631,
      631,  869,  869,  628,  870, 1067,  871,  872,  872,  636,
      636,  637,  637,  632,  876,  876,  647,  647,  886,  886,
     1068,  873,  652,  652,  890,  890,  638,  658,  658,  661,
      661,  648,  897,  897,  663,  663, 1069,  653,  898,  898,
      668,  668,  909,  909,  662,  676,  676,  911,  911,  664,
      681,  681,  683,  683,  916,  916, 1070,  910,  686,  686,
      677,  918,  918,  923,  923,  694,  694,  684,  698,  698,
      929,  929, 1071,  687,  934,  934,  939,  939,  924,  943,
      943,  716,  716,  699,  952,  952,  719,  719, 1072,  935,

     1073,  940,  954,  954,  944, 1074,  717,  725,  725,  959,
      959,  720,  964,  964,  735,  735, 1075,  941,  969,  969,
      740,  740,  726,  753,  753,  760,  760,  965, 1082,  736,
      761,  761,  772,  772, 1083, 1003, 1003,  779,  779,  781,
      781,  773, 1013, 1013,  786,  786, 1084,  774, 1004, 1016,
     1016,  797,  797,  787,  804,  804, 1085, 1014, 1086,  788,
     1031, 1031, 1017, 1032, 1032, 1087,  798,  813,  813,  805,
      819,  819, 1046, 1046,  835,  835,  840,  840, 1033,  841,
     1088,  842,  845,  845,  850,  850, 1089, 1047,  851,  851,
     1090,  852, 1094,  853, 1076, 1076, 1078, 1078, 1080, 1080,

      864,  864, 1097,  865, 1098,  866,  869,  869, 1077,  870,
     1079,  871, 1081,  872,  872, 1091, 1091, 1099, 1092, 1100,
     1093, 1095, 1095,  876,  876, 1101, 1102,  873, 1103, 1103,
     1105, 1105, 1108,  886,  886, 1096, 1109, 1110, 1112,  890,
      890, 1113, 1114, 1104, 1115, 1106, 1116, 1117, 1118,  897,
      897,  898,  898, 1119, 1111, 1120, 1121, 1122, 1123, 1124,
     1125, 1127, 1126, 1128, 1129,  909,  909, 1130, 1130,  911,
      911, 1135, 1131, 1131, 1133, 1136,  916,  916, 1137, 1138,
      910,  918,  918, 1139, 1140, 1144, 1107, 1132, 1141, 1141,
     1134,  923,  923, 1143, 1143, 1145, 1146, 1147,  929,  929,

     1148, 1149, 1150, 1142, 1151, 1156,  924,  934,  934, 1152,
     1152, 1153, 1153, 1157,  939,  939, 1158, 1158, 1159, 1160,
      943,  943,  935, 1161, 1161, 1164, 1154, 1162, 1162,  940,
     1165, 1166, 1167, 1168, 1169,  944,  952,  952, 1170,  954,
      954, 1155, 1163, 1171, 1172, 1173, 1174, 1174,  959,  959,
     1176, 1177, 1178, 1178, 1180,  964,  964, 1181, 1181, 1182,
     1183, 1175, 1184,  969,  969, 1185, 1186, 1179, 1187, 1188,
      965, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1202, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1203,

     1216, 1216, 1003, 1003, 1218, 1219, 1220, 1230, 1231, 1221,
     1233, 1234, 1232, 1222, 1237, 1004, 1223, 1224, 1013, 1013,
     1225, 1226, 1227, 1228, 1229, 1235, 1235, 1236, 1236, 1016,
     1016, 1238, 1238, 1014, 1240, 1241, 1242, 1243, 1244, 1245,
     1246, 1247, 1017, 1248, 1249, 1250, 1239, 1251, 1031, 1031,
     1032, 1032, 1252, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1261, 1262, 1262, 1260, 1033, 1265, 1265, 1268, 1046,
     1046, 1263, 1269, 1269, 1270, 1271, 1272, 1264, 1273, 1274,
     1275, 1266, 1276, 1277, 1047, 1278, 1279, 1280, 1280, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1288, 1290, 1267, 1291,

     1292, 1281, 1293, 1294, 1294, 1296, 1076, 1076, 1302, 1289,
     1297, 1297, 1078, 1078, 1080, 1080, 1303, 1295, 1298, 1298,
     1077, 1299, 1304, 1300, 1301, 1301, 1079, 1305, 1081, 1306,
     1306, 1091, 1091, 1308, 1092, 1309, 1093, 1310, 1310, 1095,
     1095, 1312, 1312, 1307, 1313, 1315, 1314, 1316, 1317, 1318,
     1319, 1311, 1320, 1096, 1103, 1103, 1321, 1321, 1105, 1105,
     1322, 1322, 1323, 1323, 1325, 1326, 1327, 1328, 1329, 1104,
     1330, 1331, 1332, 1106, 1333, 1333, 1335, 1324, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1334,
     1347, 1347, 1130, 1130, 1131, 1131, 1349, 1349, 1350, 1351,

     1352, 1364, 1365, 1367, 1368, 1348, 1366, 1141, 1141, 1132,
     1353, 1353, 1369, 1369, 1143, 1143, 1370, 1370, 1372, 1373,
     1374, 1374, 1142, 1376, 1377, 1354, 1378, 1379, 1152, 1152,
     1355, 1371, 1153, 1153, 1356, 1375, 1381, 1357, 1358, 1380,
     1380, 1359, 1360, 1361, 1362, 1363, 1382, 1154, 1383, 1384,
     1158, 1158, 1385, 1386, 1161, 1161, 1162, 1162, 1387, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1397,
     1395, 1163, 1399, 1399, 1174, 1174, 1402, 1402, 1403, 1404,
     1404, 1178, 1178, 1398, 1406, 1406, 1407, 1400, 1408, 1175,
     1181, 1181, 1409, 1414, 1405, 1415, 1179, 1410, 1410, 1412,

     1412, 1416, 1416, 1418, 1401, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1411, 1426, 1413, 1427, 1417, 1202, 1202, 1428,
     1428, 1429, 1430, 1431, 1434, 1432, 1435, 1436, 1437, 1438,
     1441, 1442, 1203, 1433, 1443, 1444, 1216, 1216, 1445, 1439,
     1446, 1446, 1449, 1450, 1453, 1440, 1454, 1451, 1455, 1447,
     1457, 1459, 1456, 1452, 1460, 1448, 1458, 1462, 1465, 1466,
     1467, 1468, 1469, 1463, 1235, 1235, 1464, 1236, 1236, 1470,
     1238, 1238, 1461, 1471, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1239, 1482, 1483, 1252, 1252,
     1484, 1485, 1485, 1487, 1488, 1489, 1490, 1492, 1493, 1494,

     1262, 1262, 1491, 1495, 1496, 1496, 1486, 1265, 1265, 1263,
     1498, 1498, 1499, 1500, 1501, 1264, 1502, 1497, 1269, 1269,
     1503, 1504, 1266, 1505, 1506, 1507, 1508, 1509, 1509, 1280,
     1280, 1511, 1511, 1516, 1512, 1519, 1513, 1514, 1514, 1517,
     1517, 1510, 1520, 1281, 1521, 1288, 1288, 1522, 1522, 1525,
     1523, 1515, 1524, 1518, 1526, 1526, 1528, 1294, 1294, 1289,
     1540, 1540, 1543, 1541, 1544, 1542, 1297, 1297, 1527, 1529,
     1530, 1295, 1531, 1545, 1548, 1532, 1533, 1301, 1301, 1549,
     1534, 1535, 1536, 1537, 1538, 1298, 1298, 1539, 1299, 1550,
     1300, 1546, 1546, 1306, 1306, 1551, 1551, 1557, 1552, 1558,

     1553, 1310, 1310, 1554, 1554, 1547, 1555, 1307, 1556, 1312,
     1312, 1561, 1313, 1566, 1314, 1311, 1559, 1559, 1562, 1562,
     1564, 1564, 1567, 1321, 1321, 1322, 1322, 1323, 1323, 1568,
     1568, 1560, 1569, 1563, 1570, 1565, 1571, 1572, 1573, 1573,
     1575, 1576, 1324, 1577, 1333, 1333, 1578, 1578, 1579, 1580,
     1581, 1587, 1582, 1574, 1584, 1584, 1588, 1588, 1595, 1334,
     1583, 1590, 1591, 1592, 1596, 1597, 1598, 1347, 1347, 1585,
     1604, 1589, 1609, 1593, 1610, 1586, 1599, 1599, 1615, 1594,
     1349, 1349, 1348, 1600, 1600, 1602, 1602, 1353, 1353, 1605,
     1605, 1606, 1611, 1613, 1616, 1607, 1612, 1618, 1601, 1614,

     1603, 1608, 1354, 1619, 1621, 1624, 1620, 1622, 1622, 1625,
     1626, 1627, 1617, 1369, 1369, 1370, 1370, 1628, 1628, 1629,
     1630, 1632, 1623, 1374, 1374, 1631, 1631, 1633, 1634, 1635,
     1371, 1380, 1380, 1636, 1637, 1638, 1639, 1640, 1375, 1641,
     1387, 1387, 1642, 1642, 1645, 1645, 1647, 1648, 1649, 1654,
     1650, 1650, 1655, 1656, 1397, 1397, 1659, 1643, 1660, 1646,
     1657, 1657, 1399, 1399, 1662, 1651, 1658, 1658, 1665, 1398,
     1402, 1402, 1404, 1404, 1661, 1661, 1668, 1400, 1669, 1652,
     1406, 1406, 1663, 1663, 1644, 1653, 1671, 1405, 1410, 1410,
     1666, 1666, 1412, 1412, 1667, 1667, 1672, 1664, 1416, 1416,

     1670, 1670, 1673, 1411, 1674, 1675, 1676, 1413, 1677, 1678,
     1679, 1680, 1681, 1417, 1428, 1428, 1682, 1683, 1684, 1685,
     1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1696,
     1695, 1697, 1446, 1446, 1698, 1699, 1699, 1701, 1702, 1703,
     1704, 1447, 1705, 1706, 1707, 1708, 1709, 1448, 1700, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1722, 1471, 1471, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1730, 1731, 1732, 1485, 1485, 1733, 1733, 1734, 1735,
     1737, 1736, 1738, 1739, 1740, 1741, 1742, 1743, 1743, 1486,
     1496, 1496, 1744, 1498, 1498, 1745, 1746, 1747, 1748, 1749,

     1750, 1751, 1752, 1497, 1753, 1509, 1509, 1754, 1754, 1757,
     1755, 1758, 1756, 1511, 1511, 1760, 1512, 1764, 1513, 1510,
     1514, 1514, 1759, 1759, 1517, 1517, 1761, 1761, 1765, 1762,
     1766, 1763, 1522, 1522, 1515, 1523, 1767, 1524, 1518, 1768,
     1769, 1526, 1526, 1770, 1770, 1773, 1771, 1774, 1772, 1775,
     1776, 1778, 1777, 1779, 1780, 1527, 1781, 1785, 1783, 1786,
     1788, 1540, 1540, 1789, 1541, 1790, 1542, 1791, 1546, 1546,
     1795, 1796, 1797, 1798, 1782, 1784, 1799, 1800, 1801, 1802,
     1802, 1787, 1547, 1792, 1792, 1803, 1793, 1806, 1794, 1551,
     1551, 1807, 1552, 1808, 1553, 1554, 1554, 1809, 1555, 1810,

     1556, 1559, 1559, 1562, 1562, 1804, 1804, 1564, 1564, 1805,
     1805, 1568, 1568, 1811, 1573, 1573, 1560, 1813, 1563, 1812,
     1812, 1814, 1565, 1815, 1578, 1578, 1816, 1816, 1818, 1574,
     1819, 1820, 1821, 1584, 1584, 1822, 1822, 1823, 1824, 1588,
     1588, 1817, 1825, 1825, 1826, 1827, 1828, 1829, 1585, 1830,
     1831, 1832, 1835, 1833, 1589, 1834, 1599, 1599, 1600, 1600,
     1836, 1836, 1602, 1602, 1837, 1837, 1838, 1605, 1605, 1839,
     1840, 1841, 1842, 1601, 1843, 1844, 1845, 1603, 1846, 1847,
     1848, 1849, 1850, 1851, 1852, 1853, 1854, 1622, 1622, 1855,
     1855, 1856, 1857, 1858, 1859, 1628, 1628, 1860, 1861, 1861,

     1631, 1631, 1623, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
     1870, 1870, 1874, 1862, 1872, 1872, 1642, 1642, 1875, 1875,
     1876, 1645, 1645, 1877, 1877, 1871, 1878, 1881, 1879, 1873,
     1880, 1643, 1650, 1650, 1882, 1882, 1646, 1883, 1884, 1885,
     1886, 1887, 1657, 1657, 1658, 1658, 1888, 1651, 1889, 1661,
     1661, 1890, 1663, 1663, 1891, 1891, 1892, 1892, 1666, 1666,
     1667, 1667, 1894, 1895, 1895, 1670, 1670, 1664, 1898, 1899,
     1900, 1893, 1901, 1902, 1903, 1904, 1905, 1906, 1896, 1907,
     1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
     1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1925, 1699,

     1699, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1700, 1937, 1938, 1939, 1940, 1941, 1942, 1897,
     1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1943,
     1953, 1954, 1955, 1956, 1957, 1958, 1959, 1733, 1733, 1960,
     1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1743, 1743,
     1969, 1970, 1971, 1972, 1973, 1974, 1977, 1978, 1975, 1979,
     1754, 1754, 1980, 1755, 1981, 1756, 1982, 1976, 1759, 1759,
     1761, 1761, 1983, 1762, 1984, 1763, 1985, 1986, 1987, 1988,
     1770, 1770, 1989, 1771, 1990, 1772, 1991, 1995, 1992, 1993,
     1993, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,

     2005, 2006, 2008, 1994, 2009, 1792, 1792, 2007, 1793, 2010,
     1794, 2011, 2012, 2013, 1802, 1802, 2014, 1804, 1804, 1805,
     1805, 2015, 2016, 2017, 2018, 2019, 2020, 1812, 1812, 2021,
     2022, 2023, 1816, 1816, 2024, 2024, 2025, 2026, 2027, 2028,
     1822, 1822, 2029, 2030, 1825, 1825, 2031, 1817, 2032, 2033,
     2034, 2035, 2036, 2037, 2038, 2039, 2040, 1836, 1836, 1837,
     1837, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2058, 1855, 1855,
     2059, 2060, 2061, 2062, 2063, 1861, 1861, 2057, 2064, 2064,
     2065, 2066, 2067, 2068, 2069, 2070, 2071, 1870, 1870, 2074,

     1862, 2072, 2072, 1872, 1872, 2073, 2073, 1875, 1875, 2075,
     1877, 1877, 1871, 2076, 2077, 2078, 2079, 2080, 1873, 1882,
     1882, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 1891, 1891,
     1892, 1892, 2088, 2088, 2089, 1895, 1895, 2090, 2090, 2091,
     2091, 2093, 2094, 2095, 2096, 1893, 2097, 2098, 2099, 2100,
     1896, 2101, 2102, 2103, 2092, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 1925, 1925,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2126, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2127, 2141, 2142, 2143, 2144, 2145,

     2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
     2156, 2157, 2158, 2159, 2159, 2161, 2162, 2163, 2164, 2165,
     2166, 2167, 2167, 2169, 2169, 2171, 2171, 2175, 2160, 2173,
     2173, 2176, 2176, 2178, 2179, 2168, 2180, 2170, 2181, 2172,
     2182, 2182, 2186, 2174, 2187, 2177, 1993, 1993, 2185, 2185,
     2188, 2189, 2190, 2190, 2183, 2193, 2194, 2195, 2196, 2199,
     1994, 2197, 2197, 2200, 2201, 2201, 2191, 2205, 2206, 2207,
     2208, 2208, 2210, 2210, 2212, 2198, 2213, 2213, 2202, 2217,
     2215, 2215, 2218, 2219, 2209, 2220, 2221, 2211, 2203, 2222,
     2223, 2214, 2024, 2024, 2192, 2216, 2184, 2224, 2225, 2226,

     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
     2204, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245,
     2246, 2247, 2247, 2249, 2250, 2251, 2252, 2253, 2254, 2255,
     2256, 2257, 2258, 2259, 2260, 2261, 2248, 2262, 2064, 2064,
     2263, 2264, 2264, 2266, 2267, 2268, 2269, 2270, 2072, 2072,
     2073, 2073, 2271, 2272, 2273, 2274, 2265, 2275, 2276, 2276,
     2278, 2279, 2279, 2281, 2282, 2283, 2284, 2284, 2286, 2286,
     2288, 2088, 2088, 2277, 2289, 2291, 2280, 2090, 2090, 2091,
     2091, 2285, 2292, 2287, 2290, 2290, 2293, 2294, 2295, 2295,
     2298, 2299, 2299, 2302, 2092, 2303, 2304, 2296, 2305, 2306,

     2300, 2307, 2308, 2297, 2309, 2310, 2301, 2311, 2312, 2313,
     2314, 2315, 2315, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2324, 2126, 2126, 2326, 2326, 2316, 2327, 2328, 2329,
     2330, 2331, 2331, 2333, 2336, 2325, 2337, 2127, 2334, 2334,
     2338, 2339, 2340, 2341, 2341, 2343, 2332, 2344, 2345, 2346,
     2347, 2348, 2349, 2335, 2350, 2351, 2352, 2353, 2342, 2354,
     2355, 2356, 2357, 2358, 2159, 2159, 2359, 2359, 2360, 2361,
     2362, 2363, 2364, 2365, 2167, 2167, 2366, 2366, 2372, 2160,
     2169, 2169, 2367, 2367, 2171, 2171, 2368, 2368, 2168, 2369,
     2376, 2370, 2173, 2173, 2170, 2371, 2371, 2377, 2172, 2176,

     2176, 2373, 2373, 2374, 2374, 2378, 2174, 2182, 2182, 2379,
     2379, 2380, 2381, 2177, 2185, 2185, 2382, 2375, 2383, 2384,
     2386, 2183, 2190, 2190, 2385, 2385, 2387, 2388, 2390, 2391,
     2391, 2197, 2197, 2393, 2393, 2394, 2191, 2395, 2397, 2201,
     2201, 2396, 2396, 2392, 2398, 2198, 2399, 2400, 2401, 2208,
     2208, 2404, 2389, 2202, 2402, 2402, 2210, 2210, 2403, 2403,
     2213, 2213, 2407, 2209, 2405, 2405, 2215, 2215, 2406, 2406,
     2408, 2211, 2409, 2409, 2411, 2214, 2412, 2412, 2414, 2415,
     2415, 2216, 2417, 2417, 2419, 2420, 2420, 2410, 2422, 2423,
     2424, 2413, 2425, 2426, 2416, 2427, 2428, 2418, 2429, 2430,

     2421, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439,
     2440, 2440, 2442, 2442, 2247, 2247, 2444, 2444, 2445, 2446,
     2447, 2448, 2449, 2449, 2451, 2441, 2454, 2443, 2455, 2248,
     2452, 2452, 2456, 2457, 2457, 2459, 2460, 2450, 2461, 2462,
     2264, 2264, 2463, 2463, 2464, 2453, 2465, 2466, 2458, 2467,
     2468, 2469, 2470, 2471, 2472, 2265, 2473, 2276, 2276, 2474,
     2474, 2475, 2475, 2279, 2279, 2477, 2477, 2478, 2479, 2480,
     2284, 2284, 2277, 2481, 2481, 2483, 2476, 2484, 2280, 2286,
     2286, 2482, 2482, 2290, 2290, 2285, 2485, 2486, 2487, 2295,
     2295, 2488, 2489, 2489, 2287, 2491, 2492, 2495, 2296, 2299,

     2299, 2496, 2493, 2493, 2297, 2490, 2497, 2498, 2300, 2499,
     2500, 2501, 2502, 2503, 2301, 2494, 2504, 2505, 2506, 2315,
     2315, 2507, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514,
     2324, 2324, 2515, 2515, 2316, 2326, 2326, 2516, 2517, 2518,
     2519, 2331, 2331, 2520, 2520, 2325, 2521, 2334, 2334, 2522,
     2522, 2523, 2524, 2525, 2341, 2341, 2332, 2526, 2526, 2527,
     2528, 2529, 2335, 2530, 2531, 2532, 2533, 2534, 2535, 2342,
     2536, 2537, 2538, 2539, 2359, 2359, 2540, 2541, 2542, 2544,
     2544, 2546, 2547, 2547, 2366, 2366, 2367, 2367, 2549, 2368,
     2368, 2543, 2369, 2545, 2370, 2550, 2548, 2371, 2371, 2551,

     2373, 2373, 2374, 2374, 2552, 2552, 2555, 2553, 2556, 2554,
     2557, 2379, 2379, 2558, 2559, 2562, 2375, 2560, 2560, 2563,
     2385, 2385, 2564, 2565, 2568, 2569, 2569, 2571, 2391, 2391,
     2573, 2561, 2572, 2572, 2566, 2393, 2393, 2574, 2575, 2570,
     2567, 2576, 2392, 2396, 2396, 2577, 2578, 2579, 2579, 2402,
     2402, 2403, 2403, 2581, 2405, 2405, 2406, 2406, 2582, 2583,
     2588, 2580, 2409, 2409, 2584, 2584, 2585, 2585, 2412, 2412,
     2587, 2587, 2415, 2415, 2589, 2589, 2591, 2410, 2417, 2417,
     2593, 2586, 2594, 2413, 2590, 2590, 2595, 2416, 2420, 2420,
     2592, 2592, 2596, 2418, 2597, 2598, 2599, 2600, 2601, 2602,

     2603, 2603, 2605, 2421, 2606, 2607, 2608, 2609, 2610, 2611,
     2440, 2440, 2612, 2612, 2614, 2604, 2442, 2442, 2613, 2613,
     2444, 2444, 2615, 2616, 2617, 2441, 2449, 2449, 2618, 2618,
     2619, 2443, 2452, 2452, 2620, 2620, 2621, 2622, 2623, 2623,
     2628, 2450, 2457, 2457, 2625, 2625, 2629, 2453, 2626, 2626,
     2630, 2463, 2463, 2624, 2631, 2631, 2637, 2458, 2633, 2633,
     2635, 2635, 2638, 2627, 2639, 2640, 2641, 2642, 2643, 2632,
     2474, 2474, 2648, 2634, 2649, 2636, 2475, 2475, 2644, 2644,
     2477, 2477, 2645, 2645, 2481, 2481, 2482, 2482, 2650, 2651,
     2652, 2476, 2653, 2654, 2655, 2655, 2656, 2646, 2489, 2489,

     2657, 2659, 2659, 2493, 2493, 2660, 2661, 2662, 2658, 2663,
     2664, 2490, 2665, 2666, 2667, 2668, 2494, 2669, 2670, 2671,
     2507, 2507, 2672, 2673, 2674, 2675, 2676, 2677, 2677, 2679,
     2515, 2515, 2680, 2680, 2682, 2683, 2684, 2685, 2647, 2520,
     2520, 2686, 2678, 2522, 2522, 2687, 2688, 2681, 2526, 2526,
     2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698,
     2699, 2700, 2701, 2702, 2544, 2544, 2703, 2703, 2704, 2547,
     2547, 2705, 2705, 2708, 2706, 2709, 2707, 2712, 2545, 2552,
     2552, 2713, 2553, 2548, 2554, 2710, 2710, 2714, 2560, 2560,
     2715, 2715, 2716, 2716, 2718, 2719, 2720, 2721, 2723, 2711,

     2724, 2726, 2561, 2569, 2569, 2727, 2717, 2725, 2725, 2572,
     2572, 2722, 2728, 2728, 2730, 2730, 2732, 2570, 2733, 2734,
     2579, 2579, 2735, 2735, 2738, 2736, 2729, 2737, 2731, 2739,
     2740, 2584, 2584, 2742, 2580, 2585, 2585, 2741, 2741, 2587,
     2587, 2743, 2589, 2589, 2590, 2590, 2744, 2744, 2592, 2592,
     2586, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754,
     2755, 2745, 2603, 2603, 2756, 2756, 2757, 2758, 2759, 2760,
     2761, 2762, 2762, 2764, 2612, 2612, 2767, 2604, 2613, 2613,
     2765, 2765, 2768, 2769, 2618, 2618, 2763, 2770, 2620, 2620,
     2771, 2772, 2623, 2623, 2777, 2766, 2773, 2773, 2625, 2625,

     2626, 2626, 2774, 2774, 2775, 2775, 2778, 2624, 2631, 2631,
     2779, 2779, 2633, 2633, 2782, 2627, 2780, 2780, 2783, 2776,
     2635, 2635, 2784, 2632, 2781, 2781, 2785, 2634, 2786, 2787,
     2788, 2788, 2644, 2644, 2793, 2636, 2645, 2645, 2790, 2790,
     2791, 2791, 2794, 2795, 2796, 2789, 2797, 2798, 2799, 2655,
     2655, 2646, 2800, 2801, 2802, 2792, 2659, 2659, 2803, 2804,
     2805, 2805, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814,
     2815, 2816, 2817, 2818, 2818, 2806, 2820, 2820, 2677, 2677,
     2822, 2822, 2823, 2680, 2680, 2824, 2824, 2825, 2819, 2826,
     2827, 2821, 2830, 2678, 2828, 2828, 2831, 2832, 2681, 2833,

     2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2829,
     2843, 2844, 2703, 2703, 2845, 2705, 2705, 2847, 2706, 2848,
     2707, 2849, 2849, 2851, 2851, 2710, 2710, 2846, 2853, 2853,
     2854, 2854, 2856, 2857, 2859, 2850, 2860, 2852, 2861, 2711,
     2715, 2715, 2716, 2716, 2855, 2858, 2858, 2862, 2863, 2864,
     2865, 2725, 2725, 2866, 2867, 2870, 2717, 2728, 2728, 2868,
     2868, 2730, 2730, 2869, 2869, 2871, 2872, 2735, 2735, 2873,
     2736, 2729, 2737, 2874, 2875, 2731, 2741, 2741, 2876, 2877,
     2744, 2744, 2878, 2878, 2879, 2880, 2880, 2882, 2883, 2884,
     2885, 2886, 2887, 2888, 2889, 2745, 2756, 2756, 2890, 2893,

     2881, 2891, 2891, 2894, 2894, 2896, 2896, 2762, 2762, 2898,
     2898, 2899, 2765, 2765, 2900, 2900, 2892, 2901, 2895, 2902,
     2897, 2903, 2763, 2904, 2904, 2906, 2907, 2766, 2773, 2773,
     2774, 2774, 2775, 2775, 2908, 2908, 2909, 2910, 2905, 2779,
     2779, 2780, 2780, 2781, 2781, 2911, 2912, 2776, 2913, 2914,
     2915, 2916, 2788, 2788, 2917, 2917, 2790, 2790, 2791, 2791,
     2918, 2918, 2919, 2919, 2921, 2922, 2922, 2789, 2924, 2925,
     2926, 2927, 2928, 2792, 2929, 2930, 2931, 2920, 2805, 2805,
     2923, 2932, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
     2940, 2941, 2942, 2806, 2943, 2818, 2818, 2944, 2944, 2820,

     2820, 2945, 2945, 2822, 2822, 2946, 2824, 2824, 2947, 2948,
     2819, 2828, 2828, 2952, 2821, 2949, 2949, 2950, 2950, 2953,
     2954, 2955, 2956, 2957, 2958, 2959, 2829, 2960, 2960, 2962,
     2963, 2963, 2951, 2965, 2965, 2967, 2968, 2849, 2849, 2976,
     2969, 2969, 2961, 2970, 2964, 2971, 2977, 2966, 2851, 2851,
     2978, 2850, 2972, 2972, 2979, 2973, 2980, 2974, 2853, 2853,
     2854, 2854, 2852, 2975, 2975, 2858, 2858, 2981, 2982, 2983,
     2984, 2985, 2986, 2987, 2855, 2868, 2868, 2869, 2869, 2988,
     2988, 2990, 2991, 2992, 2993, 2994, 2995, 2878, 2878, 2996,
     2996, 2880, 2880, 2989, 2998, 2998, 2999, 3000, 3001, 3002,

     3003, 3004, 3005, 3006, 2997, 3007, 2881, 2891, 2891, 3008,
     3008, 3009, 2894, 2894, 3010, 3010, 2896, 2896, 3011, 3011,
     2898, 2898, 2892, 3012, 2900, 2900, 3015, 2895, 3013, 3013,
     3016, 2897, 2904, 2904, 3017, 3017, 3018, 3018, 3020, 2908,
     2908, 3021, 3022, 3014, 3023, 3024, 3029, 2905, 3025, 3025,
     3030, 3019, 3027, 3027, 2917, 2917, 2918, 2918, 2919, 2919,
     3031, 3031, 3032, 3026, 2922, 2922, 3034, 3028, 3033, 3033,
     3035, 3036, 3037, 2920, 3038, 3039, 2932, 2932, 3040, 2923,
     3041, 3042, 3043, 3045, 3046, 3047, 3048, 3049, 2944, 2944,
     2945, 2945, 3050, 3051, 3052, 2949, 2949, 2950, 2950, 3054,

     3044, 3053, 3053, 3055, 3056, 3057, 3058, 3059, 3060, 3061,
     2960, 2960, 2951, 3062, 3062, 3063, 2963, 2963, 3064, 3064,
     2965, 2965, 3065, 3065, 3066, 2961, 3067, 3068, 2969, 2969,
     2964, 2970, 3069, 2971, 2966, 2972, 2972, 3070, 2973, 3071,
     2974, 2975, 2975, 3072, 3073, 3074, 3075, 3076, 3077, 3078,
     3079, 3080, 3080, 3082, 3082, 3084, 3085, 3085, 2988, 2988,
     3087, 3087, 3088, 3090, 3090, 3081, 3092, 3083, 3093, 3093,
     3086, 3095, 2989, 3096, 3098, 3089, 2996, 2996, 3091, 3097,
     3097, 2998, 2998, 3094, 3099, 3100, 3101, 3103, 3104, 3109,
     3110, 2997, 3105, 3105, 3107, 3107, 3008, 3008, 3010, 3010,

     3011, 3011, 3111, 3113, 3102, 3013, 3013, 3106, 3114, 3108,
     3112, 3112, 3017, 3017, 3018, 3018, 3115, 3115, 3116, 3117,
     3014, 3118, 3119, 3120, 3025, 3025, 3121, 3121, 3123, 3019,
     3027, 3027, 3122, 3122, 3124, 3031, 3031, 3125, 3126, 3026,
     3033, 3033, 3127, 3128, 3129, 3028, 3130, 3131, 3132, 3133,
     3134, 3135, 3136, 3137, 3138, 3138, 3140, 3140, 3142, 3143,
     3143, 3145, 3145, 3053, 3053, 3147, 3148, 3149, 3150, 3139,
     3151, 3141, 3152, 3153, 3144, 3154, 3146, 3062, 3062, 3064,
     3064, 3065, 3065, 3155, 3155, 3157, 3157, 3159, 3160, 3161,
     3162, 3162, 3164, 3165, 3166, 3167, 3170, 3156, 3172, 3158,

     3080, 3080, 3168, 3168, 3163, 3082, 3082, 3169, 3169, 3085,
     3085, 3171, 3171, 3173, 3081, 3087, 3087, 3090, 3090, 3083,
     3174, 3174, 3175, 3086, 3093, 3093, 3176, 3176, 3177, 3178,
     3178, 3180, 3091, 3097, 3097, 3181, 3182, 3182, 3184, 3094,
     3185, 3186, 3187, 3190, 3179, 3105, 3105, 3188, 3188, 3107,
     3107, 3183, 3189, 3189, 3191, 3191, 3193, 3112, 3112, 3198,
     3106, 3194, 3194, 3199, 3108, 3196, 3196, 3115, 3115, 3192,
     3200, 3201, 3202, 3202, 3121, 3121, 3195, 3122, 3122, 3204,
     3197, 3205, 3206, 3207, 3208, 3209, 3210, 3203, 3211, 3212,
     3213, 3214, 3215, 3216, 3217, 3138, 3138, 3218, 3218, 3140,

     3140, 3219, 3219, 3220, 3143, 3143, 3221, 3221, 3145, 3145,
     3139, 3222, 3222, 3223, 3141, 3224, 3225, 3226, 3227, 3144,
     3228, 3229, 3234, 3146, 3155, 3155, 3230, 3230, 3157, 3157,
     3231, 3231, 3232, 3232, 3235, 3162, 3162, 3237, 3156, 3236,
     3236, 3238, 3158, 3239, 3240, 3241, 3233, 3168, 3168, 3163,
     3169, 3169, 3171, 3171, 3242, 3243, 3174, 3174, 3244, 3176,
     3176, 3245, 3178, 3178, 3246, 3246, 3247, 3247, 3249, 3182,
     3182, 3250, 3250, 3251, 3252, 3253, 3254, 3179, 3188, 3188,
     3255, 3248, 3189, 3189, 3183, 3191, 3191, 3256, 3256, 3257,
     3194, 3194, 3258, 3258, 3196, 3196, 3259, 3259, 3260, 3261,

     3192, 3262, 3263, 3202, 3202, 3195, 3264, 3264, 3267, 3197,
     3265, 3265, 3268, 3269, 3270, 3271, 3272, 3273, 3203, 3274,
     3275, 3276, 3277, 3278, 3279, 3266, 3218, 3218, 3219, 3219,
     3221, 3221, 3222, 3222, 3280, 3281, 3282, 3283, 3230, 3230,
     3231, 3231, 3232, 3232, 3284, 3284, 3285, 3285, 3287, 3236,
     3236, 3288, 3289, 3290, 3290, 3292, 3233, 3293, 3294, 3294,
     3286, 3296, 3296, 3298, 3299, 3299, 3302, 3291, 3246, 3246,
     3247, 3247, 3295, 3301, 3301, 3297, 3250, 3250, 3303, 3300,
     3304, 3305, 3306, 3307, 3312, 3248, 3256, 3256, 3308, 3308,
     3258, 3258, 3259, 3259, 3310, 3310, 3313, 3314, 3264, 3264,

     3265, 3265, 3318, 3309, 3315, 3315, 3316, 3316, 3319, 3311,
     3320, 3321, 3322, 3323, 3324, 3266, 3325, 3326, 3327, 3328,
     3329, 3317, 3284, 3284, 3285, 3285, 3330, 3330, 3331, 3332,
     3333, 3290, 3290, 3334, 3334, 3335, 3336, 3336, 3286, 3294,
     3294, 3338, 3338, 3296, 3296, 3291, 3339, 3339, 3340, 3340,
     3337, 3299, 3299, 3295, 3342, 3342, 3343, 3297, 3301, 3301,
     3344, 3345, 3346, 3341, 3347, 3348, 3300, 3308, 3308, 3349,
     3349, 3310, 3310, 3350, 3350, 3351, 3351, 3353, 3353, 3355,
     3315, 3315, 3309, 3316, 3316, 3357, 3311, 3356, 3356, 3360,
     3352, 3361, 3354, 3358, 3358, 3362, 3363, 3364, 3317, 3365,

     3366, 3367, 3368, 3369, 3330, 3330, 3370, 3371, 3359, 3372,
     3334, 3334, 3373, 3336, 3336, 3374, 3374, 3338, 3338, 3339,
     3339, 3340, 3340, 3375, 3375, 3342, 3342, 3337, 3376, 3377,
     3378, 3379, 3379, 3382, 3383, 3386, 3341, 3349, 3349, 3350,
     3350, 3351, 3351, 3384, 3384, 3387, 3380, 3353, 3353, 3385,
     3385, 3356, 3356, 3358, 3358, 3389, 3352, 3388, 3388, 3390,
     3391, 3392, 3354, 3393, 3381, 3394, 3395, 3396, 3359, 3397,
     3398, 3399, 3374, 3374, 3375, 3375, 3400, 3401, 3401, 3403,
     3403, 3379, 3379, 3405, 3405, 3406, 3407, 3407, 3409, 3384,
     3384, 3410, 3402, 3411, 3404, 3412, 3380, 3385, 3385, 3388,

     3388, 3408, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420,
     3421, 3421, 3401, 3401, 3423, 3423, 3403, 3403, 3424, 3424,
     3405, 3405, 3425, 3407, 3407, 3422, 3427, 3402, 3426, 3426,
     3430, 3404, 3428, 3428, 3431, 3432, 3433, 3434, 3408, 3435,
     3436, 3437, 3438, 3439, 3421, 3421, 3441, 3429, 3440, 3440,
     3423, 3423, 3424, 3424, 3426, 3426, 3442, 3428, 3428, 3422,
     3443, 3443, 3444, 3445, 3445, 3447, 3447, 3449, 3450, 3451,
     3452, 3453, 3429, 3454, 3455, 3440, 3440, 3456, 3446, 3457,
     3448, 3443, 3443, 3458, 3445, 3445, 3459, 3459, 3447, 3447,
     3460, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3446,

     3468, 3469, 3470, 3448, 3459, 3459, 3460, 3460, 3471, 3472,
     3472, 3474, 3475, 3476, 3476, 3478, 3478, 3480, 3481, 3481,
     3483, 3472, 3472, 3473, 3484, 3484, 3485, 3477, 3486, 3486,
     3479, 3476, 3476, 3482, 3490, 3473, 3488, 3488, 3478, 3478,
     3489, 3489, 3487, 3481, 3481, 3477, 3491, 3491, 3492, 3484,
     3484, 3493, 3493, 3479, 3486, 3486, 3495, 3495, 3482, 3488,
     3488, 3489, 3489, 3496, 3497, 3494, 3491, 3491, 3487, 3493,
     3493, 3498, 3498, 3495, 3495, 3499, 3498, 3498, 3500, 3500,
     3500, 3500, 1025, 3494, 3502, 3502, 3502, 3502, 1024, 1023,
     1022, 1021, 1020, 3501, 1019, 3501,   23,   23,   23,   23,

       23,   34,   34,   34,   34,   34,   36,   36,   36,   36,
       36,   37,   37,   37,   37,   37,   35,   35,   35,   35,
       35,   38,   38,   38,   38,   38,   39,   39,   39,   39,
       39,   42,   42,   42,   42,   42,  103,  103,  103,  103,
      104, 1018,  104,  104,  104,  105,  105, 1015,  105,  105,
      106,  106,  106, 1012,  106, 1011, 1010, 1009, 1008, 1007,
     1002, 1001, 1000,  999,  996,  995,  994,  993,  992,  991,
      990,  989,  988,  987,  986,  985,  984,  981,  980,  979,
      978,  977,  976,  975,  974,  973,  972,  971,  970,  968,
      967,  966,  963,  962,  961,  960,  958,  957,  956,  955,

      953,  951,  950,  947,  946,  945,  942,  938,  937,  936,
      931,  930,  928,  927,  926,  925,  922,  921,  920,  919,
      917,  915,  914,  913,  912,  908,  907,  906,  905,  904,
      903,  902,  901,  896,  895,  894,  893,  892,  891,  889,
      888,  887,  885,  884,  883,  880,  879,  878,  877,  875,
      874,  868,  867,  863,  862,  861,  860,  859,  858,  857,
      856,  855,  854,  849,  848,  847,  846,  844,  843,  839,
      838,  837,  836,  834,  831,  830,  829,  828,  827,  826,
      825,  824,  823,  822,  821,  820,  818,  817,  816,  815,
      814,  812,  811,  808,  807,  806,  803,  802,  801,  800,

      799,  794,  793,  792,  791,  790,  789,  785,  784,  783,
      782,  780,  778,  777,  776,  775,  771,  770,  769,  768,
      767,  766,  765,  764,  759,  758,  757,  756,  755,  754,
      752,  751,  750,  749,  748,  747,  744,  743,  742,  741,
      734,  733,  732,  731,  730,  729,  728,  727,  724,  723,
      722,  718,  715,  714,  713,  710,  709,  706,  705,  704,
      703,  702,  697,  693,  692,  682,  680,  679,  675,  674,
      673,  672,  671,  670,  669,  667,  666,  665,  660,  659,
      657,  656,  655,  654,  646,  645,  642,  641,  640,  639,
      635,  634,  633,  630,  629,  626,  625,  624,  623,  622,

      621,  620,  619,  618,  617,  612,  611,  610,  609,  606,
      604,  601,  600,  599,  598,  595,  594,  588,  587,  586,
      585,  584,  583,  582,  581,  578,  577,  576,  575,  574,
      571,  570,  569,  566,  565,  562,  561,  560,  559,  558,
      555,  552,  551,  541,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  528,  527,  526,  521,  520,  519,
      518,  517,  516,  510,  509,  506,  505,  504,  503,  498,
      497,  496,  495,  494,  493,  490,  489,  485,  484,  483,
      482,  481,  480,  479,  476,  475,  474,  473,  472,  471,
      470,  467,  466,  465,  458,  457,  456,  448,  447,  446,

      445,  444,  443,  432,  431,  427,  426,  422,  421,  420,
      419,  418,  417,  416,  415,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      392,  391,  390,  389,  386,  385,  384,  383,  380,  379,
      378,  377,  376,  375,  372,  371,  367,  366,  365,  364,
      363,  362,  361,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  342,  341,  340,  332,  331,  330,  329,
      328,  327,  326,  318,  317,  313,  312,  311,  278,  272,
      271,  264,  258,  255,  254,  251,  248,  247,  244,  243,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  229,

      228,  227,  226,  225,  224,  221,  220,  219,  218,  217,
      217,  216,  183,  177,  176,  169,  163,  141,  138,  137,
      126,  116,  115,  114,  113,  102,  101,   75,  108,  107,
      102,  101,   75,   71,   71, 3503,   35,   35,   35,   35,
       35,   35,   35,   35,   19, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503
    } ;

static yyconst flex_int16_t yy_chk[5612] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   16,    0,
       17,   15,   18,   51,   16,    1,   72,   72,  594,   25,
        1,   25,   25,   25,   76,   76,  799,   51,  354,   26,
       26,  594,   48,   48,   63,   25,   61,   56,  354,   26,
       26,   26,   48,   48,   48,   47,   61,   47,   47,   47,
       26,   56,   55,   48,   63,    1,    2,    2,    2,    2,
        2,   47,    2,   55,    2,    2,    2,    2,    2,    2,
        2,   26,    2,    2,   48,   64,  800,   28,   28,   64,
       83,    2,   50,   50,   62,   28,    2,   28,   28,   28,

       50,   83,   50,   50,   50,   64,   66,   62,   28,   68,
       74,   74,   66,   50,   74,   74,   74,   82,   66,   85,
       91,   68,   92,   85,  801,   91,  145,   82,   66,   28,
       92,    2,   21,   21,   50,   82,   21,  145,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,  802,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   67,  132,

      132,  198,  198,   23,   23,   23,   23,   23,   23,   23,
       93,   23,   67,  132,   93,   67,   89,   86,   89,   86,
       23,   93,   67,   86,   93,   23,   89,  129,  119,   86,
       93,   89,   89,   96,  129,   23,   23,   23,   23,   23,
       23,  803,   23,   96,  119,   23,   23,   23,   23,   73,
       73,   95,   23,   23,   23,   23,   23,   29,   98,   73,
       73,   73,   95,   94,   29,   95,  112,   98,   95,  135,
       73,   29,  807,   99,   98,  112,   29,   94,   99,  808,
       94,   94,   94,  137,  147,  135,   29,  153,  147,  137,
      158,   73,  153,   29,   29,   29,   29,   29,   29,   29,

      158,   29,   29,  216,   29,   29,   29,   29,   29,  216,
       29,   29,   29,   29,   29,   78,  139,  139,  139,  140,
      140,  161,  217,  217,  809,   78,  161,  142,  142,  140,
      140,  140,   78,   78,   78,   78,   78,   78,   78,  223,
       78,   78,  142,   78,   78,   78,   78,   78,  154,   78,
       78,   78,   78,   78,   97,  144,  154,  166,   97,  810,
      169,  223,  169,  166,   97,  144,   97,  169,  155,   97,
       97,  166,  155,  144,   97,  148,  151,  148,  151,  155,
      156,  148,  155,  558,  229,  558,  151,  148,  155,  157,
      229,  151,  151,  160,  156,  179,  179,  156,  156,  156,

      157,  159,  160,  157,  170,  159,  157,  170,  171,  160,
      179,  159,  171,  159,  180,  811,  159,  159,  206,  180,
      184,  159,  185,  185,  186,  206,  180,  206,  186,  180,
      180,  184,  209,  228,  228,  209,  812,  185,  245,  245,
      246,  246,  266,  246,  352,  246,  266,  228,  256,  256,
      257,  257,  245,  258,  258,  261,  281,  264,  352,  264,
      281,  261,  265,  256,  264,  265,  267,  267,  258,  261,
      274,  274,  275,  293,  293,  279,  317,  275,  280,  280,
      317,  267,  285,  285,  275,  274,  279,  275,  275,  301,
      360,  304,  320,  280,  304,  311,  301,  285,  301,  312,

      312,  311,  360,  321,  321,  328,  328,  383,  267,  329,
      329,  333,  333,  383,  312,  382,  320,  320,  321,  814,
      328,  334,  334,  382,  329,  526,  333,  345,  345,  346,
      346,  348,  348,  349,  349,  363,  363,  382,  815,  367,
      367,  431,  345,  373,  373,  431,  348,  569,  349,  386,
      386,  569,  349,  349,  367,  391,  391,  816,  373,  393,
      393,  349,  526,  386,  507,  348,  394,  394,  470,  391,
      396,  396,  817,  393,  401,  401,  402,  402,  412,  412,
      507,  412,  470,  412,  396,  416,  416,  702,  401,  702,
      402,  349,  419,  419,  423,  423,  424,  424,  820,  416,

      425,  425,  426,  426,  434,  434,  419,  435,  435,  440,
      440,  424,  441,  441,  444,  444,  665,  426,  821,  434,
      445,  445,  435,  643,  440,  449,  449,  450,  450,  444,
      458,  458,  461,  461,  478,  445,  434,  462,  462,  643,
      449,  464,  464,  465,  465,  458,  478,  461,  823,  468,
      468,  469,  469,  665,  458,  713,  464,  751,  465,  713,
      434,  434,  465,  465,  468,  472,  472,  481,  481,  485,
      485,  465,  487,  487,  751,  464,  491,  491,  500,  500,
      472,  501,  501,  824,  485,  502,  502,  487,  514,  514,
      768,  491,  768,  500,  515,  515,  501,  472,  522,  522,

      825,  465,  500,  514,  523,  523,  826,  472,  487,  776,
      500,  524,  524,  522,  525,  525,  529,  529,  536,  536,
      540,  540,  542,  542,  500,  776,  524,  536,  543,  543,
      545,  545,  827,  536,  546,  546,  828,  542,  551,  551,
      559,  559,  565,  565,  829,  545,  830,  551,  572,  572,
      573,  573,  831,  551,  832,  559,  833,  565,  579,  579,
      580,  580,  834,  572,  596,  596,  597,  597,  602,  602,
      836,  603,  603,  579,  603,  837,  603,  838,  596,  605,
      605,  839,  602,  607,  607,  608,  608,  613,  613,  614,
      614,  615,  615,  616,  616,  843,  616,  607,  616,  627,

      627,  613,  844,  628,  628,  615,  628,  846,  628,  631,
      631,  632,  632,  627,  632,  847,  632,  633,  633,  636,
      636,  637,  637,  631,  638,  638,  647,  647,  648,  648,
      848,  633,  652,  652,  653,  653,  637,  658,  658,  661,
      661,  647,  662,  662,  663,  663,  849,  652,  664,  664,
      668,  668,  675,  675,  661,  676,  676,  677,  677,  663,
      681,  681,  683,  683,  684,  684,  852,  675,  686,  686,
      676,  687,  687,  692,  692,  694,  694,  683,  698,  698,
      699,  699,  853,  686,  703,  703,  707,  707,  692,  709,
      709,  716,  716,  698,  717,  717,  719,  719,  854,  703,

      855,  707,  720,  720,  709,  856,  716,  725,  725,  726,
      726,  719,  731,  731,  735,  735,  857,  707,  736,  736,
      740,  740,  725,  753,  753,  760,  760,  731,  861,  735,
      761,  761,  772,  772,  862,  774,  774,  779,  779,  781,
      781,  772,  785,  785,  786,  786,  863,  772,  774,  788,
      788,  797,  797,  786,  804,  804,  865,  785,  866,  786,
      805,  805,  788,  806,  806,  867,  797,  813,  813,  804,
      819,  819,  822,  822,  835,  835,  840,  840,  806,  840,
      868,  840,  845,  845,  850,  850,  870,  822,  851,  851,
      871,  851,  874,  851,  858,  858,  859,  859,  860,  860,

      864,  864,  877,  864,  878,  864,  869,  869,  858,  869,
      859,  869,  860,  872,  872,  873,  873,  879,  873,  880,
      873,  875,  875,  876,  876,  881,  882,  872,  883,  883,
      884,  884,  885,  886,  886,  875,  887,  888,  889,  890,
      890,  891,  892,  883,  893,  884,  894,  895,  896,  897,
      897,  898,  898,  899,  888,  900,  901,  902,  903,  904,
      905,  906,  905,  907,  908,  909,  909,  910,  910,  911,
      911,  914,  912,  912,  913,  915,  916,  916,  917,  919,
      909,  918,  918,  920,  921,  925,  884,  912,  922,  922,
      913,  923,  923,  924,  924,  926,  927,  928,  929,  929,

      930,  931,  932,  922,  933,  937,  923,  934,  934,  935,
      935,  936,  936,  938,  939,  939,  940,  940,  941,  942,
      943,  943,  934,  944,  944,  946,  936,  945,  945,  939,
      947,  948,  949,  950,  951,  943,  952,  952,  953,  954,
      954,  936,  945,  955,  956,  957,  958,  958,  959,  959,
      960,  961,  962,  962,  963,  964,  964,  965,  965,  966,
      967,  958,  968,  969,  969,  970,  971,  962,  972,  973,
      964,  974,  975,  976,  977,  978,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1004,  988,

     1002, 1002, 1003, 1003, 1005, 1006, 1007, 1009, 1010, 1008,
     1011, 1012, 1010, 1008, 1017, 1003, 1008, 1008, 1013, 1013,
     1008, 1008, 1008, 1008, 1008, 1014, 1014, 1015, 1015, 1016,
     1016, 1018, 1018, 1013, 1019, 1020, 1022, 1023, 1024, 1025,
     1026, 1027, 1016, 1027, 1028, 1029, 1018, 1030, 1031, 1031,
     1032, 1032, 1033, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1042, 1040, 1032, 1043, 1043, 1044, 1046,
     1046, 1042, 1047, 1047, 1048, 1049, 1050, 1042, 1053, 1054,
     1055, 1043, 1056, 1057, 1046, 1058, 1059, 1060, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1067, 1068, 1043, 1069,

     1072, 1060, 1073, 1074, 1074, 1075, 1076, 1076, 1082, 1067,
     1077, 1077, 1078, 1078, 1080, 1080, 1083, 1074, 1079, 1079,
     1076, 1079, 1084, 1079, 1081, 1081, 1078, 1087, 1080, 1088,
     1088, 1091, 1091, 1092, 1091, 1093, 1091, 1094, 1094, 1095,
     1095, 1096, 1096, 1088, 1096, 1097, 1096, 1098, 1099, 1100,
     1101, 1094, 1102, 1095, 1103, 1103, 1104, 1104, 1105, 1105,
     1106, 1106, 1107, 1107, 1108, 1109, 1110, 1111, 1112, 1103,
     1113, 1114, 1115, 1105, 1116, 1116, 1117, 1107, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1116,
     1129, 1129, 1130, 1130, 1131, 1131, 1132, 1132, 1133, 1134,

     1135, 1137, 1138, 1139, 1140, 1129, 1138, 1141, 1141, 1131,
     1136, 1136, 1142, 1142, 1143, 1143, 1144, 1144, 1145, 1146,
     1147, 1147, 1141, 1148, 1149, 1136, 1150, 1151, 1152, 1152,
     1136, 1144, 1153, 1153, 1136, 1147, 1155, 1136, 1136, 1154,
     1154, 1136, 1136, 1136, 1136, 1136, 1156, 1153, 1156, 1157,
     1158, 1158, 1159, 1160, 1161, 1161, 1162, 1162, 1163, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1172,
     1170, 1162, 1173, 1173, 1174, 1174, 1175, 1175, 1176, 1177,
     1177, 1178, 1178, 1172, 1179, 1179, 1180, 1173, 1182, 1174,
     1181, 1181, 1183, 1186, 1177, 1187, 1178, 1184, 1184, 1185,

     1185, 1188, 1188, 1189, 1173, 1192, 1193, 1194, 1195, 1196,
     1197, 1199, 1184, 1200, 1185, 1201, 1188, 1202, 1202, 1203,
     1203, 1204, 1205, 1206, 1208, 1207, 1209, 1211, 1211, 1211,
     1212, 1213, 1202, 1207, 1214, 1215, 1216, 1216, 1217, 1211,
     1218, 1218, 1220, 1221, 1222, 1211, 1223, 1221, 1224, 1218,
     1225, 1226, 1224, 1221, 1227, 1218, 1225, 1228, 1229, 1231,
     1232, 1233, 1234, 1228, 1235, 1235, 1228, 1236, 1236, 1237,
     1238, 1238, 1227, 1239, 1239, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1238, 1250, 1251, 1252, 1252,
     1253, 1254, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,

     1262, 1262, 1258, 1263, 1264, 1264, 1254, 1265, 1265, 1262,
     1266, 1266, 1267, 1268, 1270, 1262, 1272, 1264, 1269, 1269,
     1273, 1274, 1265, 1275, 1276, 1277, 1278, 1279, 1279, 1280,
     1280, 1281, 1281, 1283, 1281, 1285, 1281, 1282, 1282, 1284,
     1284, 1279, 1286, 1280, 1287, 1288, 1288, 1289, 1289, 1290,
     1289, 1282, 1289, 1284, 1291, 1291, 1292, 1294, 1294, 1288,
     1295, 1295, 1296, 1295, 1299, 1295, 1297, 1297, 1291, 1293,
     1293, 1294, 1293, 1300, 1303, 1293, 1293, 1301, 1301, 1304,
     1293, 1293, 1293, 1293, 1293, 1298, 1298, 1293, 1298, 1305,
     1298, 1302, 1302, 1306, 1306, 1307, 1307, 1313, 1307, 1314,

     1307, 1310, 1310, 1311, 1311, 1302, 1311, 1306, 1311, 1312,
     1312, 1316, 1312, 1319, 1312, 1310, 1315, 1315, 1317, 1317,
     1318, 1318, 1320, 1321, 1321, 1322, 1322, 1323, 1323, 1324,
     1324, 1315, 1325, 1317, 1326, 1318, 1327, 1328, 1329, 1329,
     1330, 1331, 1323, 1332, 1333, 1333, 1334, 1334, 1335, 1336,
     1337, 1340, 1338, 1329, 1339, 1339, 1341, 1341, 1343, 1333,
     1338, 1342, 1342, 1342, 1344, 1345, 1346, 1347, 1347, 1339,
     1352, 1341, 1356, 1342, 1357, 1339, 1348, 1348, 1360, 1342,
     1349, 1349, 1347, 1350, 1350, 1351, 1351, 1353, 1353, 1354,
     1354, 1355, 1358, 1359, 1361, 1355, 1358, 1362, 1350, 1359,

     1351, 1355, 1353, 1362, 1363, 1365, 1362, 1364, 1364, 1366,
     1367, 1368, 1361, 1369, 1369, 1370, 1370, 1371, 1371, 1372,
     1373, 1376, 1364, 1374, 1374, 1375, 1375, 1377, 1378, 1379,
     1370, 1380, 1380, 1381, 1382, 1383, 1384, 1385, 1374, 1386,
     1387, 1387, 1388, 1388, 1389, 1389, 1390, 1391, 1392, 1394,
     1393, 1393, 1395, 1396, 1397, 1397, 1401, 1388, 1403, 1389,
     1398, 1398, 1399, 1399, 1407, 1393, 1400, 1400, 1409, 1397,
     1402, 1402, 1404, 1404, 1405, 1405, 1414, 1399, 1415, 1393,
     1406, 1406, 1408, 1408, 1388, 1393, 1418, 1404, 1410, 1410,
     1411, 1411, 1412, 1412, 1413, 1413, 1419, 1408, 1416, 1416,

     1417, 1417, 1420, 1410, 1421, 1422, 1423, 1412, 1424, 1425,
     1426, 1427, 1430, 1416, 1428, 1428, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1443, 1445, 1446, 1446, 1447, 1448, 1448, 1449, 1450, 1451,
     1452, 1446, 1453, 1454, 1455, 1456, 1457, 1446, 1448, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1470, 1471, 1471, 1472, 1474, 1475, 1476, 1477, 1478,
     1479, 1480, 1483, 1484, 1485, 1485, 1486, 1486, 1487, 1488,
     1489, 1488, 1490, 1491, 1492, 1493, 1494, 1495, 1495, 1485,
     1496, 1496, 1497, 1498, 1498, 1499, 1500, 1501, 1503, 1504,

     1505, 1506, 1507, 1496, 1508, 1509, 1509, 1510, 1510, 1512,
     1510, 1513, 1510, 1511, 1511, 1516, 1511, 1519, 1511, 1509,
     1514, 1514, 1515, 1515, 1517, 1517, 1518, 1518, 1520, 1518,
     1521, 1518, 1522, 1522, 1514, 1522, 1523, 1522, 1517, 1524,
     1525, 1526, 1526, 1527, 1527, 1528, 1527, 1529, 1527, 1530,
     1531, 1532, 1531, 1533, 1534, 1526, 1535, 1537, 1536, 1538,
     1539, 1540, 1540, 1541, 1540, 1542, 1540, 1543, 1546, 1546,
     1548, 1549, 1550, 1552, 1535, 1536, 1553, 1555, 1556, 1560,
     1560, 1538, 1546, 1547, 1547, 1561, 1547, 1566, 1547, 1551,
     1551, 1567, 1551, 1569, 1551, 1554, 1554, 1570, 1554, 1571,

     1554, 1559, 1559, 1562, 1562, 1563, 1563, 1564, 1564, 1565,
     1565, 1568, 1568, 1572, 1573, 1573, 1559, 1575, 1562, 1574,
     1574, 1576, 1564, 1577, 1578, 1578, 1579, 1579, 1580, 1573,
     1581, 1582, 1583, 1584, 1584, 1585, 1585, 1586, 1587, 1588,
     1588, 1579, 1589, 1589, 1590, 1591, 1592, 1593, 1584, 1594,
     1595, 1596, 1598, 1597, 1588, 1597, 1599, 1599, 1600, 1600,
     1601, 1601, 1602, 1602, 1603, 1603, 1604, 1605, 1605, 1606,
     1607, 1608, 1609, 1600, 1610, 1611, 1612, 1602, 1613, 1614,
     1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1622, 1623,
     1623, 1624, 1625, 1626, 1627, 1628, 1628, 1629, 1630, 1630,

     1631, 1631, 1622, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1639, 1641, 1630, 1640, 1640, 1642, 1642, 1643, 1643,
     1644, 1645, 1645, 1646, 1646, 1639, 1647, 1649, 1648, 1640,
     1648, 1642, 1650, 1650, 1651, 1651, 1645, 1652, 1653, 1654,
     1655, 1656, 1657, 1657, 1658, 1658, 1659, 1650, 1660, 1661,
     1661, 1662, 1663, 1663, 1664, 1664, 1665, 1665, 1666, 1666,
     1667, 1667, 1668, 1669, 1669, 1670, 1670, 1663, 1671, 1672,
     1673, 1665, 1674, 1675, 1676, 1677, 1678, 1679, 1669, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
     1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1698, 1699,

     1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
     1709, 1710, 1699, 1711, 1712, 1713, 1714, 1715, 1716, 1669,
     1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1716,
     1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1733, 1734,
     1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1743,
     1744, 1745, 1746, 1747, 1748, 1750, 1751, 1752, 1750, 1753,
     1754, 1754, 1755, 1754, 1756, 1754, 1760, 1750, 1759, 1759,
     1761, 1761, 1762, 1761, 1763, 1761, 1764, 1765, 1766, 1769,
     1770, 1770, 1773, 1770, 1774, 1770, 1775, 1777, 1775, 1776,
     1776, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,

     1787, 1788, 1791, 1776, 1793, 1792, 1792, 1788, 1792, 1794,
     1792, 1795, 1796, 1797, 1802, 1802, 1803, 1804, 1804, 1805,
     1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1812, 1813,
     1814, 1815, 1816, 1816, 1817, 1817, 1818, 1819, 1820, 1821,
     1822, 1822, 1823, 1824, 1825, 1825, 1826, 1816, 1827, 1828,
     1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1836, 1837,
     1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
     1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1855,
     1856, 1857, 1858, 1859, 1860, 1861, 1861, 1853, 1862, 1862,
     1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1870, 1874,

     1861, 1871, 1871, 1872, 1872, 1873, 1873, 1875, 1875, 1876,
     1877, 1877, 1870, 1878, 1879, 1880, 1881, 1883, 1872, 1882,
     1882, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1891,
     1892, 1892, 1893, 1893, 1894, 1895, 1895, 1896, 1896, 1897,
     1897, 1899, 1902, 1903, 1904, 1892, 1905, 1906, 1907, 1908,
     1895, 1909, 1910, 1911, 1897, 1912, 1913, 1914, 1915, 1916,
     1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1925,
     1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1935, 1949, 1950, 1951, 1953, 1954,

     1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1964, 1966,
     1967, 1968, 1969, 1970, 1970, 1972, 1973, 1974, 1975, 1976,
     1977, 1978, 1978, 1979, 1979, 1982, 1982, 1986, 1970, 1985,
     1985, 1987, 1987, 1988, 1989, 1978, 1990, 1979, 1991, 1982,
     1992, 1992, 1995, 1985, 1996, 1987, 1993, 1993, 1994, 1994,
     1997, 1998, 1999, 1999, 1992, 2000, 2001, 2002, 2003, 2005,
     1993, 2004, 2004, 2006, 2007, 2007, 1999, 2008, 2011, 2012,
     2013, 2013, 2014, 2014, 2015, 2004, 2016, 2016, 2007, 2018,
     2017, 2017, 2019, 2020, 2013, 2021, 2022, 2014, 2007, 2023,
     2025, 2016, 2024, 2024, 1999, 2017, 1992, 2026, 2027, 2028,

     2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
     2007, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
     2048, 2049, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
     2057, 2058, 2059, 2060, 2061, 2062, 2049, 2063, 2064, 2064,
     2065, 2066, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2072,
     2073, 2073, 2074, 2075, 2076, 2077, 2066, 2078, 2079, 2079,
     2080, 2081, 2081, 2082, 2083, 2084, 2085, 2085, 2086, 2086,
     2087, 2088, 2088, 2079, 2089, 2093, 2081, 2090, 2090, 2091,
     2091, 2085, 2094, 2086, 2092, 2092, 2095, 2097, 2098, 2098,
     2099, 2101, 2101, 2102, 2091, 2104, 2105, 2098, 2106, 2107,

     2101, 2108, 2109, 2098, 2110, 2111, 2101, 2112, 2113, 2114,
     2115, 2116, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
     2125, 2125, 2126, 2126, 2127, 2127, 2116, 2128, 2129, 2130,
     2131, 2132, 2132, 2133, 2135, 2125, 2136, 2126, 2134, 2134,
     2137, 2139, 2140, 2141, 2141, 2142, 2132, 2143, 2144, 2145,
     2146, 2147, 2148, 2134, 2149, 2150, 2151, 2152, 2141, 2153,
     2155, 2156, 2157, 2158, 2159, 2159, 2160, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2167, 2168, 2168, 2175, 2159,
     2169, 2169, 2170, 2170, 2171, 2171, 2172, 2172, 2167, 2172,
     2179, 2172, 2173, 2173, 2169, 2174, 2174, 2180, 2171, 2176,

     2176, 2177, 2177, 2178, 2178, 2181, 2173, 2182, 2182, 2183,
     2183, 2184, 2186, 2176, 2185, 2185, 2187, 2178, 2188, 2189,
     2192, 2182, 2190, 2190, 2191, 2191, 2193, 2194, 2195, 2196,
     2196, 2197, 2197, 2198, 2198, 2199, 2190, 2200, 2203, 2201,
     2201, 2202, 2202, 2196, 2204, 2197, 2205, 2206, 2207, 2208,
     2208, 2212, 2194, 2201, 2209, 2209, 2210, 2210, 2211, 2211,
     2213, 2213, 2217, 2208, 2214, 2214, 2215, 2215, 2216, 2216,
     2218, 2210, 2219, 2219, 2220, 2213, 2221, 2221, 2222, 2223,
     2223, 2215, 2224, 2224, 2225, 2226, 2226, 2219, 2227, 2228,
     2229, 2221, 2230, 2231, 2223, 2232, 2233, 2224, 2234, 2235,

     2226, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
     2245, 2245, 2246, 2246, 2247, 2247, 2248, 2248, 2249, 2250,
     2251, 2252, 2253, 2253, 2254, 2245, 2256, 2246, 2257, 2247,
     2255, 2255, 2258, 2259, 2259, 2260, 2261, 2253, 2262, 2263,
     2264, 2264, 2265, 2265, 2266, 2255, 2267, 2268, 2259, 2269,
     2270, 2271, 2272, 2273, 2274, 2264, 2275, 2276, 2276, 2277,
     2277, 2278, 2278, 2279, 2279, 2280, 2280, 2281, 2282, 2283,
     2284, 2284, 2276, 2285, 2285, 2288, 2278, 2289, 2279, 2286,
     2286, 2287, 2287, 2290, 2290, 2284, 2291, 2292, 2293, 2295,
     2295, 2296, 2297, 2297, 2286, 2298, 2300, 2302, 2295, 2299,

     2299, 2303, 2301, 2301, 2295, 2297, 2304, 2305, 2299, 2306,
     2307, 2308, 2309, 2310, 2299, 2301, 2311, 2312, 2314, 2315,
     2315, 2316, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2324, 2325, 2325, 2315, 2326, 2326, 2327, 2328, 2329,
     2330, 2331, 2331, 2332, 2332, 2324, 2333, 2334, 2334, 2335,
     2335, 2336, 2337, 2340, 2341, 2341, 2331, 2342, 2342, 2343,
     2344, 2348, 2334, 2349, 2350, 2351, 2352, 2353, 2354, 2341,
     2355, 2356, 2357, 2358, 2359, 2359, 2360, 2361, 2362, 2363,
     2363, 2364, 2365, 2365, 2366, 2366, 2367, 2367, 2369, 2368,
     2368, 2362, 2368, 2363, 2368, 2370, 2365, 2371, 2371, 2372,

     2373, 2373, 2374, 2374, 2375, 2375, 2376, 2375, 2377, 2375,
     2378, 2379, 2379, 2380, 2381, 2383, 2374, 2382, 2382, 2384,
     2385, 2385, 2386, 2387, 2388, 2389, 2389, 2390, 2391, 2391,
     2394, 2382, 2392, 2392, 2387, 2393, 2393, 2395, 2397, 2389,
     2387, 2398, 2391, 2396, 2396, 2399, 2400, 2401, 2401, 2402,
     2402, 2403, 2403, 2404, 2405, 2405, 2406, 2406, 2407, 2408,
     2414, 2401, 2409, 2409, 2410, 2410, 2411, 2411, 2412, 2412,
     2413, 2413, 2415, 2415, 2416, 2416, 2419, 2409, 2417, 2417,
     2422, 2411, 2423, 2412, 2418, 2418, 2424, 2415, 2420, 2420,
     2421, 2421, 2425, 2417, 2426, 2427, 2428, 2429, 2430, 2431,

     2432, 2432, 2433, 2420, 2434, 2435, 2436, 2437, 2438, 2439,
     2440, 2440, 2441, 2441, 2445, 2432, 2442, 2442, 2443, 2443,
     2444, 2444, 2446, 2447, 2448, 2440, 2449, 2449, 2450, 2450,
     2451, 2442, 2452, 2452, 2453, 2453, 2454, 2455, 2456, 2456,
     2460, 2449, 2457, 2457, 2458, 2458, 2461, 2452, 2459, 2459,
     2462, 2463, 2463, 2456, 2464, 2464, 2467, 2457, 2465, 2465,
     2466, 2466, 2468, 2459, 2469, 2470, 2471, 2472, 2473, 2464,
     2474, 2474, 2479, 2465, 2480, 2466, 2475, 2475, 2476, 2476,
     2477, 2477, 2478, 2478, 2481, 2481, 2482, 2482, 2483, 2484,
     2485, 2475, 2486, 2487, 2488, 2488, 2490, 2478, 2489, 2489,

     2491, 2492, 2492, 2493, 2493, 2494, 2496, 2497, 2491, 2498,
     2499, 2489, 2500, 2501, 2502, 2503, 2493, 2504, 2505, 2506,
     2507, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2513, 2514,
     2515, 2515, 2516, 2516, 2517, 2518, 2519, 2521, 2478, 2520,
     2520, 2523, 2513, 2522, 2522, 2524, 2527, 2516, 2526, 2526,
     2528, 2529, 2530, 2531, 2532, 2533, 2534, 2537, 2538, 2539,
     2540, 2541, 2542, 2543, 2544, 2544, 2545, 2545, 2546, 2547,
     2547, 2548, 2548, 2551, 2548, 2555, 2548, 2557, 2544, 2552,
     2552, 2558, 2552, 2547, 2552, 2556, 2556, 2559, 2560, 2560,
     2561, 2561, 2562, 2562, 2563, 2564, 2565, 2566, 2567, 2556,

     2568, 2571, 2560, 2569, 2569, 2573, 2562, 2570, 2570, 2572,
     2572, 2566, 2574, 2574, 2575, 2575, 2576, 2569, 2577, 2578,
     2579, 2579, 2580, 2580, 2581, 2580, 2574, 2580, 2575, 2582,
     2583, 2584, 2584, 2588, 2579, 2585, 2585, 2586, 2586, 2587,
     2587, 2588, 2589, 2589, 2590, 2590, 2591, 2591, 2592, 2592,
     2585, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601,
     2602, 2591, 2603, 2603, 2604, 2604, 2605, 2606, 2607, 2608,
     2609, 2610, 2610, 2611, 2612, 2612, 2615, 2603, 2613, 2613,
     2614, 2614, 2616, 2617, 2618, 2618, 2610, 2619, 2620, 2620,
     2621, 2622, 2623, 2623, 2629, 2614, 2624, 2624, 2625, 2625,

     2626, 2626, 2627, 2627, 2628, 2628, 2630, 2623, 2631, 2631,
     2632, 2632, 2633, 2633, 2637, 2626, 2634, 2634, 2638, 2628,
     2635, 2635, 2639, 2631, 2636, 2636, 2640, 2633, 2641, 2642,
     2643, 2643, 2644, 2644, 2648, 2635, 2645, 2645, 2646, 2646,
     2647, 2647, 2649, 2650, 2651, 2643, 2652, 2653, 2654, 2655,
     2655, 2645, 2656, 2657, 2658, 2647, 2659, 2659, 2660, 2661,
     2662, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670,
     2671, 2672, 2674, 2675, 2675, 2662, 2676, 2676, 2677, 2677,
     2678, 2678, 2679, 2680, 2680, 2681, 2681, 2682, 2675, 2683,
     2684, 2676, 2686, 2677, 2685, 2685, 2687, 2688, 2680, 2689,

     2690, 2691, 2692, 2693, 2694, 2695, 2697, 2698, 2700, 2685,
     2701, 2702, 2703, 2703, 2704, 2705, 2705, 2706, 2705, 2707,
     2705, 2708, 2708, 2709, 2709, 2710, 2710, 2704, 2711, 2711,
     2712, 2712, 2713, 2714, 2718, 2708, 2719, 2709, 2720, 2710,
     2715, 2715, 2716, 2716, 2712, 2717, 2717, 2721, 2722, 2723,
     2724, 2725, 2725, 2726, 2727, 2732, 2716, 2728, 2728, 2729,
     2729, 2730, 2730, 2731, 2731, 2733, 2734, 2735, 2735, 2738,
     2735, 2728, 2735, 2739, 2740, 2730, 2741, 2741, 2742, 2743,
     2744, 2744, 2745, 2745, 2746, 2747, 2747, 2748, 2749, 2750,
     2751, 2752, 2753, 2754, 2755, 2744, 2756, 2756, 2757, 2759,

     2747, 2758, 2758, 2760, 2760, 2761, 2761, 2762, 2762, 2763,
     2763, 2764, 2765, 2765, 2766, 2766, 2758, 2767, 2760, 2768,
     2761, 2769, 2762, 2770, 2770, 2771, 2772, 2765, 2773, 2773,
     2774, 2774, 2775, 2775, 2776, 2776, 2777, 2778, 2770, 2779,
     2779, 2780, 2780, 2781, 2781, 2782, 2783, 2775, 2784, 2785,
     2786, 2787, 2788, 2788, 2789, 2789, 2790, 2790, 2791, 2791,
     2792, 2792, 2793, 2793, 2794, 2795, 2795, 2788, 2796, 2797,
     2798, 2799, 2800, 2791, 2801, 2802, 2803, 2793, 2805, 2805,
     2795, 2806, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813,
     2814, 2815, 2816, 2805, 2817, 2818, 2818, 2819, 2819, 2820,

     2820, 2821, 2821, 2822, 2822, 2823, 2824, 2824, 2826, 2827,
     2818, 2828, 2828, 2831, 2820, 2829, 2829, 2830, 2830, 2832,
     2833, 2834, 2835, 2838, 2839, 2840, 2828, 2841, 2841, 2842,
     2843, 2843, 2830, 2844, 2844, 2845, 2846, 2849, 2849, 2856,
     2850, 2850, 2841, 2850, 2843, 2850, 2857, 2844, 2851, 2851,
     2859, 2849, 2852, 2852, 2860, 2852, 2861, 2852, 2853, 2853,
     2854, 2854, 2851, 2855, 2855, 2858, 2858, 2862, 2863, 2864,
     2865, 2866, 2867, 2870, 2854, 2868, 2868, 2869, 2869, 2871,
     2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2878, 2879,
     2879, 2880, 2880, 2871, 2881, 2881, 2882, 2883, 2884, 2885,

     2886, 2887, 2888, 2889, 2879, 2890, 2880, 2891, 2891, 2892,
     2892, 2893, 2894, 2894, 2895, 2895, 2896, 2896, 2897, 2897,
     2898, 2898, 2891, 2899, 2900, 2900, 2902, 2894, 2901, 2901,
     2903, 2896, 2904, 2904, 2905, 2905, 2906, 2906, 2907, 2908,
     2908, 2909, 2910, 2901, 2911, 2912, 2915, 2904, 2913, 2913,
     2916, 2906, 2914, 2914, 2917, 2917, 2918, 2918, 2919, 2919,
     2920, 2920, 2921, 2913, 2922, 2922, 2924, 2914, 2923, 2923,
     2926, 2928, 2929, 2919, 2930, 2931, 2932, 2932, 2933, 2922,
     2934, 2935, 2936, 2937, 2938, 2941, 2942, 2943, 2944, 2944,
     2945, 2945, 2946, 2947, 2948, 2949, 2949, 2950, 2950, 2952,

     2936, 2951, 2951, 2953, 2954, 2955, 2956, 2957, 2958, 2959,
     2960, 2960, 2950, 2961, 2961, 2962, 2963, 2963, 2964, 2964,
     2965, 2965, 2966, 2966, 2967, 2960, 2968, 2970, 2969, 2969,
     2963, 2969, 2971, 2969, 2965, 2972, 2972, 2973, 2972, 2974,
     2972, 2975, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982,
     2983, 2984, 2984, 2985, 2985, 2986, 2987, 2987, 2988, 2988,
     2989, 2989, 2990, 2991, 2991, 2984, 2992, 2985, 2993, 2993,
     2987, 2994, 2988, 2995, 2999, 2990, 2996, 2996, 2991, 2997,
     2997, 2998, 2998, 2993, 3000, 3001, 3002, 3003, 3004, 3007,
     3009, 2996, 3005, 3005, 3006, 3006, 3008, 3008, 3010, 3010,

     3011, 3011, 3012, 3015, 3002, 3013, 3013, 3005, 3016, 3006,
     3014, 3014, 3017, 3017, 3018, 3018, 3019, 3019, 3020, 3021,
     3013, 3022, 3023, 3024, 3025, 3025, 3026, 3026, 3029, 3018,
     3027, 3027, 3028, 3028, 3030, 3031, 3031, 3032, 3034, 3025,
     3033, 3033, 3035, 3036, 3037, 3027, 3039, 3040, 3041, 3043,
     3044, 3045, 3046, 3047, 3048, 3048, 3049, 3049, 3050, 3051,
     3051, 3052, 3052, 3053, 3053, 3054, 3055, 3056, 3057, 3048,
     3059, 3049, 3060, 3061, 3051, 3063, 3052, 3062, 3062, 3064,
     3064, 3065, 3065, 3066, 3066, 3067, 3067, 3072, 3073, 3074,
     3075, 3075, 3076, 3077, 3078, 3079, 3084, 3066, 3088, 3067,

     3080, 3080, 3081, 3081, 3075, 3082, 3082, 3083, 3083, 3085,
     3085, 3086, 3086, 3089, 3080, 3087, 3087, 3090, 3090, 3082,
     3091, 3091, 3092, 3085, 3093, 3093, 3094, 3094, 3095, 3096,
     3096, 3098, 3090, 3097, 3097, 3099, 3100, 3100, 3101, 3093,
     3102, 3103, 3104, 3109, 3096, 3105, 3105, 3106, 3106, 3107,
     3107, 3100, 3108, 3108, 3110, 3110, 3111, 3112, 3112, 3116,
     3105, 3113, 3113, 3117, 3107, 3114, 3114, 3115, 3115, 3110,
     3118, 3119, 3120, 3120, 3121, 3121, 3113, 3122, 3122, 3123,
     3114, 3124, 3125, 3126, 3127, 3128, 3129, 3120, 3130, 3132,
     3133, 3134, 3135, 3136, 3137, 3138, 3138, 3139, 3139, 3140,

     3140, 3141, 3141, 3142, 3143, 3143, 3144, 3144, 3145, 3145,
     3138, 3146, 3146, 3147, 3140, 3148, 3149, 3150, 3152, 3143,
     3153, 3154, 3160, 3145, 3155, 3155, 3156, 3156, 3157, 3157,
     3158, 3158, 3159, 3159, 3161, 3162, 3162, 3164, 3155, 3163,
     3163, 3165, 3157, 3166, 3167, 3170, 3159, 3168, 3168, 3162,
     3169, 3169, 3171, 3171, 3172, 3173, 3174, 3174, 3175, 3176,
     3176, 3177, 3178, 3178, 3179, 3179, 3180, 3180, 3181, 3182,
     3182, 3183, 3183, 3184, 3185, 3186, 3187, 3178, 3188, 3188,
     3190, 3180, 3189, 3189, 3182, 3191, 3191, 3192, 3192, 3193,
     3194, 3194, 3195, 3195, 3196, 3196, 3197, 3197, 3198, 3199,

     3191, 3200, 3201, 3202, 3202, 3194, 3203, 3203, 3205, 3196,
     3204, 3204, 3206, 3207, 3208, 3209, 3211, 3212, 3202, 3213,
     3214, 3215, 3216, 3217, 3224, 3204, 3218, 3218, 3219, 3219,
     3221, 3221, 3222, 3222, 3225, 3226, 3228, 3229, 3230, 3230,
     3231, 3231, 3232, 3232, 3233, 3233, 3234, 3234, 3235, 3236,
     3236, 3237, 3238, 3239, 3239, 3240, 3232, 3241, 3242, 3242,
     3234, 3243, 3243, 3244, 3245, 3245, 3249, 3239, 3246, 3246,
     3247, 3247, 3242, 3248, 3248, 3243, 3250, 3250, 3251, 3245,
     3252, 3253, 3254, 3255, 3261, 3247, 3256, 3256, 3257, 3257,
     3258, 3258, 3259, 3259, 3260, 3260, 3262, 3263, 3264, 3264,

     3265, 3265, 3268, 3257, 3266, 3266, 3267, 3267, 3269, 3260,
     3271, 3272, 3273, 3274, 3275, 3265, 3276, 3277, 3278, 3281,
     3282, 3267, 3284, 3284, 3285, 3285, 3286, 3286, 3287, 3288,
     3289, 3290, 3290, 3291, 3291, 3292, 3293, 3293, 3285, 3294,
     3294, 3295, 3295, 3296, 3296, 3290, 3297, 3297, 3298, 3298,
     3293, 3299, 3299, 3294, 3300, 3300, 3302, 3296, 3301, 3301,
     3303, 3304, 3305, 3298, 3306, 3307, 3299, 3308, 3308, 3309,
     3309, 3310, 3310, 3311, 3311, 3312, 3312, 3313, 3313, 3314,
     3315, 3315, 3308, 3316, 3316, 3318, 3310, 3317, 3317, 3320,
     3312, 3321, 3313, 3319, 3319, 3322, 3323, 3324, 3316, 3325,

     3326, 3327, 3328, 3329, 3330, 3330, 3331, 3332, 3319, 3333,
     3334, 3334, 3335, 3336, 3336, 3337, 3337, 3338, 3338, 3339,
     3339, 3340, 3340, 3341, 3341, 3342, 3342, 3336, 3343, 3344,
     3345, 3346, 3346, 3347, 3348, 3355, 3340, 3349, 3349, 3350,
     3350, 3351, 3351, 3352, 3352, 3357, 3346, 3353, 3353, 3354,
     3354, 3356, 3356, 3358, 3358, 3360, 3351, 3359, 3359, 3361,
     3362, 3365, 3353, 3367, 3346, 3368, 3369, 3370, 3358, 3371,
     3372, 3373, 3374, 3374, 3375, 3375, 3376, 3377, 3377, 3378,
     3378, 3379, 3379, 3380, 3380, 3381, 3382, 3382, 3383, 3384,
     3384, 3386, 3377, 3387, 3378, 3389, 3379, 3385, 3385, 3388,

     3388, 3382, 3390, 3392, 3393, 3395, 3396, 3397, 3398, 3399,
     3400, 3400, 3401, 3401, 3402, 3402, 3403, 3403, 3404, 3404,
     3405, 3405, 3406, 3407, 3407, 3400, 3409, 3401, 3408, 3408,
     3411, 3403, 3410, 3410, 3412, 3413, 3414, 3415, 3407, 3416,
     3417, 3418, 3419, 3420, 3421, 3421, 3425, 3410, 3422, 3422,
     3423, 3423, 3424, 3424, 3426, 3426, 3427, 3428, 3428, 3421,
     3429, 3429, 3430, 3431, 3431, 3432, 3432, 3433, 3434, 3435,
     3436, 3437, 3428, 3438, 3439, 3440, 3440, 3441, 3431, 3442,
     3432, 3443, 3443, 3444, 3445, 3445, 3446, 3446, 3447, 3447,
     3448, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3445,

     3456, 3457, 3458, 3447, 3459, 3459, 3460, 3460, 3462, 3464,
     3464, 3465, 3466, 3467, 3467, 3468, 3468, 3469, 3470, 3470,
     3471, 3472, 3472, 3464, 3473, 3473, 3474, 3467, 3475, 3475,
     3468, 3476, 3476, 3470, 3480, 3472, 3477, 3477, 3478, 3478,
     3479, 3479, 3475, 3481, 3481, 3476, 3482, 3482, 3483, 3484,
     3484, 3485, 3485, 3478, 3486, 3486, 3487, 3487, 3481, 3488,
     3488, 3489, 3489, 3490, 3492, 3485, 3491, 3491, 3486, 3493,
     3493, 3494, 3494, 3495, 3495, 3496, 3498, 3498, 3499, 3499,
     3500, 3500,  796, 3493, 3501, 3501, 3502, 3502,  795,  794,
      793,  792,  791, 3499,  790, 3500, 3504, 3504, 3504, 3504,

     3504, 3505, 3505, 3505, 3505, 3505, 3506, 3506, 3506, 3506,
     3506, 3507, 3507, 3507, 3507, 3507, 3508, 3508, 3508, 3508,
     3508, 3509, 3509, 3509, 3509, 3509, 3510, 3510, 3510, 3510,
     3510, 3511, 3511, 3511, 3511, 3511, 3512, 3512, 3512, 3512,
     3513,  789, 3513, 3513, 3513, 3514, 3514,  787, 3514, 3514,
     3515, 3515, 3515,  784, 3515,  783,  782,  780,  778,  777,
      773,  771,  770,  769,  767,  766,  765,  764,  763,  762,
      759,  758,  757,  756,  755,  754,  752,  750,  749,  748,
      746,  745,  744,  743,  742,  741,  739,  738,  737,  734,
      733,  732,  730,  729,  728,  727,  724,  723,  722,  721,

      718,  715,  714,  712,  711,  710,  708,  706,  705,  704,
      701,  700,  697,  696,  695,  693,  691,  690,  689,  688,
      685,  682,  680,  679,  678,  674,  673,  672,  671,  670,
      669,  667,  666,  660,  659,  657,  656,  655,  654,  651,
      650,  649,  646,  645,  644,  642,  641,  640,  639,  635,
      634,  630,  629,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  612,  611,  610,  609,  606,  604,  601,
      600,  599,  598,  595,  593,  592,  591,  590,  589,  588,
      587,  586,  584,  583,  582,  581,  578,  577,  576,  575,
      574,  571,  570,  568,  567,  566,  564,  563,  562,  561,

      560,  557,  556,  555,  554,  553,  552,  550,  549,  548,
      547,  544,  541,  539,  538,  537,  535,  534,  533,  532,
      531,  530,  528,  527,  521,  520,  519,  518,  517,  516,
      513,  512,  511,  510,  509,  508,  506,  505,  504,  503,
      499,  498,  497,  496,  495,  494,  493,  492,  490,  489,
      488,  486,  484,  483,  482,  480,  479,  477,  476,  475,
      474,  473,  471,  467,  466,  463,  460,  459,  457,  456,
      455,  454,  453,  452,  451,  448,  447,  446,  443,  442,
      439,  438,  437,  436,  433,  432,  430,  429,  428,  427,
      422,  421,  420,  418,  417,  415,  411,  410,  409,  408,

      407,  406,  405,  404,  403,  400,  399,  398,  397,  395,
      392,  390,  389,  388,  387,  385,  384,  381,  380,  379,
      378,  377,  376,  375,  374,  372,  371,  370,  369,  368,
      366,  365,  364,  362,  361,  359,  358,  357,  356,  355,
      353,  351,  350,  347,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  332,  331,  330,  327,  326,  325,
      324,  323,  322,  319,  318,  316,  315,  314,  313,  310,
      309,  308,  307,  306,  305,  303,  302,  300,  299,  298,
      297,  296,  295,  294,  292,  291,  290,  289,  288,  287,
      286,  284,  283,  282,  278,  277,  276,  273,  272,  271,

      270,  269,  268,  263,  262,  260,  259,  254,  253,  252,
      251,  250,  249,  248,  247,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      227,  226,  225,  224,  222,  221,  220,  219,  215,  214,
      213,  212,  211,  210,  208,  207,  205,  204,  203,  202,
      201,  200,  199,  197,  196,  195,  194,  193,  192,  191,
      189,  188,  187,  183,  182,  181,  178,  177,  176,  175,
      174,  173,  172,  168,  167,  165,  164,  162,  152,  150,
      149,  146,  143,  141,  138,  136,  134,  133,  131,  130,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  118,

      117,  116,  115,  114,  113,  111,  110,  109,  107,  102,
      101,  100,   90,   88,   87,   84,   81,   77,   70,   69,
       65,   60,   59,   58,   57,   54,   53,   49,   44,   41,
       32,   31,   27,   24,   22,   19,   14,   13,    8,    7,
        6,    5,    4,    3, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,

     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3503
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[442] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 
    1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file OSparseosol.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 * Like the grammar rules in OSParseosol.y, this file is maintained in several pieces 
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosol.l.   
 */
#line 18 "../../../../OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include <sstream>  

#include "OSConfig.h"
#include "OSDataStructures.h"
#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSoLParserData.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSGeneral.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
 
//#define OSOLPARSERDEBUG

#ifdef OSOLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT;
#endif









#line 113 "../../../../OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2980 "../../../../OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 123 "../../../../OS/src/OSParsers/OSParseosol.l"

 
#line 3235 "../../../../OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3504 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5545 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 129 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 131 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 132 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: \'";
		outStr <<  yytext << "\'";
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 238 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 250 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "../../../../OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFELATT);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFROWSATT);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCOLUMNSATT);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 445 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFBLOCKSATT);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVALUESATT);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNEGATIVEPATTERNATT);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NEGATIVEPATTERNATT);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSYMMETRYATT);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SYMMETRYATT);}
	YY_BREAK
/* tokens for the <matrix> element */
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONSTART);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(TRANSFORMATIONEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 538 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 541 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 542 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 547 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 552 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 554 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 557 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 558 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 562 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 563 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 564 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 566 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 567 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 568 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 569 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 570 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 571 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 572 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 573 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 574 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 575 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 576 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 577 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 578 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 579 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 580 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 387:
/* rule 387 can match eol */
YY_RULE_SETUP
#line 582 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDETERMINANTSTART);}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 583 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDETERMINANTEND);}
	YY_BREAK
case 389:
/* rule 389 can match eol */
YY_RULE_SETUP
#line 584 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACESTART);}
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 585 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRACEEND);}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 586 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALARSTART);}
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 587 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTOSCALAREND);}
	YY_BREAK
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 589 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(MATRIXREFERENCESTART);}
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 590 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXREFERENCEEND);}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 591 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDIAGONALSTART);}
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 592 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDIAGONALEND);}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 593 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDOTTIMESSTART);}
	YY_BREAK
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 594 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXDOTTIMESEND);}
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 595 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXINVERSESTART);}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 596 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXINVERSEEND);}
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 597 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLESTART);}
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 598 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXLOWERTRIANGLEEND);}
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 599 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLESTART);}
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 600 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXUPPERTRIANGLEEND);}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 601 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMERGESTART);}
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 602 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMERGEEND);}
	YY_BREAK
case 407:
/* rule 407 can match eol */
YY_RULE_SETUP
#line 603 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMINUSSTART);}
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 604 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXMINUSEND);}
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 605 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPLUSSTART);}
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 606 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPLUSEND);}
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 607 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTIMESSTART);}
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 608 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTIMESEND);}
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 609 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPRODUCTSTART);}
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 610 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXPRODUCTEND);}
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 611 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSCALARTIMESSTART);}
	YY_BREAK
case 416:
/* rule 416 can match eol */
YY_RULE_SETUP
#line 612 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSCALARTIMESEND);}
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 613 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSUBMATRIXATSTART);}
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 614 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXSUBMATRIXATEND);}
	YY_BREAK
case 419:
/* rule 419 can match eol */
YY_RULE_SETUP
#line 615 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRANSPOSESTART);}
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 616 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MATRIXTRANSPOSEEND);}
	YY_BREAK
case 421:
/* rule 421 can match eol */
YY_RULE_SETUP
#line 617 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDENTITYMATRIXSTART);}
	YY_BREAK
case 422:
/* rule 422 can match eol */
YY_RULE_SETUP
#line 618 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDENTITYMATRIXEND);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 423:
/* rule 423 can match eol */
YY_RULE_SETUP
#line 622 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 424:
/* rule 424 can match eol */
YY_RULE_SETUP
#line 623 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYINCLUDEDIAGONALATT);}
	YY_BREAK
case 425:
/* rule 425 can match eol */
YY_RULE_SETUP
#line 624 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
case 426:
/* rule 426 can match eol */
YY_RULE_SETUP
#line 625 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(INCLUDEDIAGONALATT);}
	YY_BREAK
/* last section of OSParseosol.l */
/* environments and comments */
case 427:
/* rule 427 can match eol */
YY_RULE_SETUP
#line 630 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 428:
/* rule 428 can match eol */
YY_RULE_SETUP
#line 631 "../../../../OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 633 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 430:
#line 635 "../../../../OS/src/OSParsers/OSParseosol.l"
case 431:
/* rule 431 can match eol */
YY_RULE_SETUP
#line 635 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 636 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 638 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 434:
#line 640 "../../../../OS/src/OSParsers/OSParseosol.l"
case 435:
/* rule 435 can match eol */
YY_RULE_SETUP
#line 640 "../../../../OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 641 "../../../../OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 437:
/* rule 437 can match eol */
YY_RULE_SETUP
#line 644 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 645 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 439:
/* rule 439 can match eol */
YY_RULE_SETUP
#line 646 "../../../../OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 440:
/* rule 440 can match eol */
YY_RULE_SETUP
#line 650 "../../../../OS/src/OSParsers/OSParseosol.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 662 "../../../../OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 6002 "../../../../OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3504 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3504 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3503);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 662 "../../../../OS/src/OSParsers/OSParseosol.l"





