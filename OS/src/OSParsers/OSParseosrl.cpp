#line 2 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 292
#define YY_END_OF_BUFFER 293
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2191] =
    {   0,
        1,    1,  290,  290,  288,  288,  289,  289,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  293,  291,
        1,    2,  278,    2,  278,    6,  278,    5,  291,    4,
      278,  278,  290,  292,  288,  289,  279,  281,  282,  281,
      285,  286,  285,    1,  278,  278,    6,  278,    5,    0,
        4,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,    3,    6,    6,
      278,    7,    5,    0,    0,  284,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,  278,  278,  290,  288,  289,

      279,    0,  287,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  146,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    6,  283,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  280,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
      156,    0,    0,    0,    0,  108,    0,    0,    0,    0,
        0,  164,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  228,
      278,  278,  278,  278,  278,  278,   28,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  147,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  204,    0,    0,    0,    0,    0,
        0,    0,  278,  278,  278,  278,  278,  278,   28,  278,
       29,  278,   30,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  137,    0,
        0,    0,    0,  147,    0,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,    0,  109,    0,    0,    0,
        0,    0,    0,    0,  165,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  229,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
        0,  240,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  255,  160,    0,    0,
        0,    0,    0,  259,    0,    0,    0,   98,   97,  170,
        0,    0,    0,    0,    0,    0,  246,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  278,  278,  278,  278,  278,  278,   29,   30,
      278,   59,   60,  278,  278,  278,  278,  278,  278,  278,
       79,   80,  278,   83,   84,  278,  278,  278,  278,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,  256,  109,    0,    0,    0,
        0,    0,  260,    0,  165,    0,    0,    0,   99,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  205,    0,    0,    0,    0,    0,    0,
        0,    0,  229,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  238,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  158,  257,  255,
        0,    0,  234,    0,  261,  259,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  194,    0,

        0,    0,  104,    0,    0,    0,    0,    0,    0,    0,
        0,  224,  232,    0,  278,  278,  278,  278,  278,  278,
       57,   58,  278,  278,  278,  278,  278,   31,  278,  278,
       77,   78,   81,   82,  278,   87,   88,  278,  278,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  131,    0,
        0,  241,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  256,    0,  161,    0,
        0,    0,  260,    0,    0,    0,   99,    0,  171,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  247,    0,
        0,    0,    0,    0,  205,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  116,  118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  148,    0,    0,  102,  250,    0,  257,    0,    0,
      162,  261,    0,    0,    0,    0,    0,    0,    0,    0,
      106,    0,    0,    0,    0,    0,  263,    0,    0,    0,
      104,    0,    0,    0,    0,    0,  214,    0,    0,    0,
        0,    0,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,   31,  278,  278,   85,   86,  278,
      278,  278,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,  241,    0,  239,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  159,  161,
        0,    0,  235,    0,    0,    0,    0,  171,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  264,  247,    0,
      195,    0,    0,    0,    0,  105,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  225,    0,    0,  233,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  242,    0,    0,  102,    0,    0,
        0,    0,    0,  275,    0,  248,    0,    0,    0,    0,
        0,    0,  106,    0,    0,  188,    0,    0,  265,  263,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  278,  278,  278,  278,  278,
       67,   68,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,   75,   76,  278,  278,  278,  278,  278,
      278,   91,   92,  278,    0,    0,    0,  117,    0,  119,
        0,    0,    0,    0,    0,  239,    0,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,  103,    0,
        0,  251,    0,  159,    0,  276,  235,    0,  163,    0,
        0,    0,    0,    0,    0,    0,    0,  107,    0,    0,
        0,    0,    0,  264,  195,    0,    0,    0,  105,    0,
        0,    0,    0,    0,    0,  215,    0,    0,    0,    0,

      225,    0,  233,    0,    0,    0,    0,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  277,  275,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  265,    0,
        0,  198,    0,    0,    0,  208,    0,    0,    0,    0,
        0,    0,    0,  230,  278,  278,  278,   51,   52,   65,
       66,  278,  278,   71,   72,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,   73,   74,  278,   43,
       44,  278,  278,  278,   89,   90,  278,    0,    0,  117,
      119,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  243,  149,    0,    0,  103,    0,  251,
        0,  276,  163,    0,  249,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,    0,    0,  189,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  215,    0,
        0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
        0,  236,    0,    0,    0,    0,    0,    0,  144,    0,
        0,    0,    0,    0,  277,    0,    0,  166,    0,    0,
        0,    0,    0,    0,    0,  184,    0,    0,    0,    0,
      196,  200,    0,    0,    0,    0,    0,    0,    0,  222,
        0,  278,  278,  278,  278,   49,   50,  278,   69,   70,

      278,  278,   10,  278,  278,  278,  278,  278,  278,  278,
      278,  278,   41,   42,  278,  278,  278,  278,    0,    0,
        0,    0,    0,    0,  135,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  243,    0,    0,    0,    0,  249,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      189,    0,    0,    0,    0,  199,    0,    0,    0,    0,
      209,    0,    0,    0,    0,    0,    0,    0,    0,  231,
        0,    0,    0,    0,    0,  132,    0,  138,    0,    0,
        0,  150,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  182,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  278,  278,  278,
      278,  278,  278,  278,    8,  278,   10,  278,  278,   12,
      278,  278,   14,  278,  278,  278,  278,  278,  278,  278,
       25,  278,  278,  278,  278,  278,  278,    0,    0,  115,
        0,    0,    0,  135,    0,    0,  237,    0,    0,    0,
        0,    0,    0,    0,  145,    0,    0,    0,    0,    0,
      167,    0,    0,    0,    0,    0,    0,    0,    0,  185,
        0,    0,    0,    0,  197,  199,    0,  201,    0,    0,
      209,    0,    0,    0,    0,    0,    0,  223,    0,  231,
        0,    0,    0,    0,    0,    0,    0,  142,    0,    0,

      267,    0,    0,  271,    0,  154,    0,  254,    0,    0,
      258,  110,  172,    0,    0,  100,    0,    0,    0,  192,
        0,    0,    0,    0,    0,    0,  218,    0,  226,  278,
      278,  278,  278,  278,   55,   56,    8,  278,  278,   12,
      278,   14,  278,  278,  278,  278,  278,  278,   25,  278,
      278,  278,  278,  278,  278,    0,  115,    0,    0,    0,
        0,  237,    0,  133,    0,    0,  139,    0,    0,    0,
      268,  145,    0,  151,    0,  272,    0,    0,  167,    0,
        0,    0,    0,    0,    0,    0,  183,  185,    0,    0,
        0,  197,  201,    0,    0,    0,    0,    0,    0,    0,

      223,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      269,  267,    0,  273,  271,    0,  152,  254,    0,  258,
        0,    0,    0,    0,    0,  190,    0,    0,    0,    0,
        0,  216,  220,  278,  278,  278,   33,  278,  278,  278,
       53,   54,  278,  278,  278,   13,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,   24,  278,  278,  278,
      278,  278,  278,    0,    0,    0,    0,    0,    0,  133,
        0,  139,    0,    0,  143,  268,  151,  272,    0,    0,
      155,    0,  111,    0,    0,  173,    0,    0,    0,  101,
        0,  183,    0,    0,    0,  193,    0,    0,    0,    0,

        0,    0,  219,    0,    0,  227,    0,    0,    0,    0,
        0,    0,    0,    0,  269,    0,  273,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  212,  278,
      278,   33,  278,  278,   47,   48,  278,  278,   13,  278,
      278,  278,  278,  278,  278,  278,  278,  278,   24,  278,
       27,  278,  278,  278,  278,  278,    0,    0,    0,    0,
        0,    0,    0,    0,  143,    0,  153,  155,  111,    0,
      173,    0,    0,  101,    0,    0,    0,  191,  193,    0,
        0,    0,    0,    0,  217,  219,    0,  221,  227,  112,
        0,    0,    0,  126,    0,    0,  140,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
      278,  278,  278,   45,   46,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,   27,  278,  278,  278,
      278,  278,  278,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,    0,    0,    0,    0,  191,    0,    0,
        0,    0,  213,  217,  221,    0,    0,    0,  128,  244,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
        0,    0,    0,  278,   39,  278,   38,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,   40,  278,  278,  278,  278,    0,  113,    0,

        0,    0,    0,  127,    0,    0,    0,  141,    0,    0,
        0,    0,    0,    0,    0,    0,  213,    0,  122,    0,
        0,    0,    0,    0,    0,  178,    0,    0,  262,  202,
        0,  210,   39,   38,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,   21,  278,  278,  278,   26,
       40,  278,  278,  278,  278,  278,  113,    0,    0,    0,
      127,    0,  129,    0,  245,  141,    0,    0,    0,    0,
        0,    0,    0,    0,  120,  124,    0,    0,    0,  274,
        0,    0,  180,  186,  206,  278,   37,  278,   36,  278,
      278,  278,   15,  278,  278,  278,  278,  278,   21,  278,

      278,   26,  278,  278,  278,   32,  278,  278,  278,    0,
        0,  123,    0,  129,  245,    0,    0,    0,  179,    0,
        0,    0,  203,    0,    0,  211,    0,    0,  274,    0,
      174,   37,   36,  278,    9,  278,   15,  278,  278,  278,
      278,  278,  278,  278,   23,  278,  278,   32,  278,  278,
      278,   95,   96,    0,  121,  123,    0,  125,    0,    0,
      179,    0,  181,    0,  187,  203,    0,  207,  211,    0,
        0,    0,  176,    9,  278,   11,  278,  278,  278,   18,
      278,  278,  278,   23,  278,   35,  278,   34,  278,   63,
       64,   93,   94,  121,  125,    0,    0,  175,    0,  181,

      187,  207,    0,    0,    0,   11,  278,  278,   18,  278,
      278,  278,   22,   35,   34,   61,   62,    0,  175,    0,
      177,    0,    0,    0,  278,  278,  278,  278,   22,    0,
      177,    0,    0,    0,  278,  278,  278,  278,    0,    0,
        0,    0,  278,  278,  278,  278,    0,    0,    0,    0,
      278,  278,  278,  278,    0,    0,  266,    0,  270,  168,
      278,  278,  278,  278,    0,  266,  270,  278,  278,  278,
      278,    0,  169,  278,  278,  278,   19,  278,   20,  169,
      278,  278,   17,   19,   20,  278,   16,   17,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[2203] =
    {   0,
        0,   29, 3434, 3433, 3444, 3443, 3440, 3439,    0,    0,
        0,    0, 3430, 3429,   13,   17,    3,    5, 3443, 3452,
       57, 3437,  118, 3434,   39,  138, 3423,  168,  206,   25,
     3410, 3401,    0, 3452,    0,    0,    0, 3452, 3452, 3428,
     3452, 3452, 3419,    0,    0,  112,  181, 3418,  186,   44,
       53, 3405, 3396, 3395,   24, 3390, 3380,   94, 3372,    0,
     3390, 3376,   97,  101, 3376, 3388, 3383, 3452,  143,  199,
      206, 3452,  146, 3414,  228, 3452,  148,  116,  104,   82,
      157, 3377, 3380,  176, 3369, 3374,  188,  186,  237, 3377,
      249,  140,  142, 3380,  163, 3393, 3386,    0,    0,    0,

        0, 3397, 3452, 3358, 3356, 3361, 3355, 3352, 3348, 3368,
     3358, 3356, 3355, 3357, 3343, 3364, 3338, 3345, 3346, 3352,
      180, 3351,  282,  295, 3386,  260,  193,  182,  201,  188,
     3349, 3352,  264, 3341, 3346,  250,  264,  273, 3349,  282,
      208,  262, 3352, 3332,  300, 3350, 3331, 3334, 3334, 3329,
     3327, 3344, 3339,  273, 3331, 3328, 3317,  195, 3353, 3334,
     3336, 3334, 3316, 3316, 3321, 3319, 3322, 3311, 3312, 3321,
     3309, 3319, 3308,  224, 3324,  288, 3305, 3310, 3302, 3310,
     3315,  283,  300, 3452, 3314, 3313, 3319, 3313, 3302,  339,
     3296, 3293, 3307, 3309, 3312, 3317, 3296, 3302, 3299, 3300,

     3284, 3282, 3304, 3294, 3452, 3280,  322, 3298, 3279, 3282,
     3282, 3277, 3275, 3292,  343,  294, 3280, 3277, 3266,  292,
     3302, 3283, 3285, 3283, 3265, 3265, 3270, 3268, 3271, 3260,
     3261, 3270, 3258, 3268, 3257,  302, 3273,  310, 3254, 3259,
     3251, 3259, 3264,  304, 3247, 3250, 3251, 3249, 3255,  320,
     3260, 3243, 3243, 3257, 3247, 3245, 3259, 3243, 3250, 3249,
     3452, 3248, 3232, 3233, 3237,  361, 3244, 3230, 3228, 3241,
     3219, 3239, 3234, 3230, 3236, 3219, 3234, 3216,  309, 3219,
      300,  319, 3231, 3215,  328, 3233, 3219, 3228, 3210,  345,
      343, 3223, 3204, 3210, 3229,  373,  376,  378,  380,  385,

     3221, 3200, 3223, 3222, 3228, 3216,  389,  395, 3215, 3194,
     3210, 3196, 3199, 3200, 3198, 3204,  362, 3209,  397, 3193,
     3207, 3197,  406,  410, 3195, 3209, 3193, 3200, 3199,  413,
     3198, 3182, 3183, 3187,  415, 3194, 3180, 3178, 3191, 3169,
      417, 3185, 3181, 3187, 3170, 3185, 3167,  364, 3170,  348,
      376, 3182, 3166,  365, 3184, 3170, 3179, 3161,  424, 3180,
     3159, 3156, 3162, 3165, 3156,  410,  389, 3164, 3154, 3168,
     3154, 3171, 3165, 3160, 3163, 3183, 3148, 3141, 3163, 3158,
      434,  440, 3177, 3147, 3151, 3158,  444, 3153, 3154, 3143,
      451, 3137, 3142, 3149, 3143, 3131, 3145, 3146, 3128, 3126,

     3137, 3125, 3126, 3138, 3145, 3127, 3128, 3124,  436, 3133,
     3133, 3135, 3134, 3116, 3118, 3116, 3122, 3105,  457,  460,
      463,  468,  470,  472,  475, 3111, 3112, 3117, 3108, 3119,
     3104,  483,  487,  493,  495,  501, 3107, 3102, 3120, 3099,
     3096, 3102, 3105, 3096,  453,  452, 3104,  503,  508, 3094,
     3108, 3094, 3111,  510, 3105, 3100, 3103, 3123, 3088,  512,
      516, 3081, 3103, 3098,  519,  521,  523, 3117, 3087, 3091,
     3098,  525, 3093,  528,  530, 3094, 3083,  532, 3077, 3082,
     3089, 3083, 3071, 3085, 3086, 3068, 3066, 3077, 3065, 3066,
     3078,  537, 3068, 3069, 3065,  523, 3074,  544,  550, 3074,

     3076, 3064, 3074, 3069, 3068, 3071, 3070, 3093, 3068, 3452,
     3071, 3048,  396, 3052, 3056, 3063, 3049, 3049, 3043, 3042,
     3058, 3053, 3043, 3051,  554, 3074,  557, 3452, 3051, 3029,
     3045,  564, 3070,  561, 3032, 3029, 3039,  566, 3452,  541,
     3027, 3025, 3042, 3035, 3025, 3037, 3452, 3022, 3020, 3038,
     3036, 3024,  452, 3029, 3045, 3011, 3038, 3023, 3026, 3011,
     3005, 3026, 3007, 3025, 3007, 3019, 3007, 3006,  575,  577,
      582, 3052, 3049, 3025, 3013, 3002, 3024,  588,  520,  590,
     3046, 3043,  596, 3044, 3041,  603,  605, 3006, 3005, 2997,
     3007, 3002, 3001, 3004, 3003, 3026, 3001,  611, 3004,  613,

      615,  504, 2986, 2990, 2997, 2983, 2983, 2977, 2976, 2992,
      618, 2987, 2977, 2985,  620,  622,  624,  629, 2986, 2964,
     2980,  631,  633, 2968,  636, 2965, 2975,  638,  640,  642,
     2963, 2961, 2978, 2971, 2961, 2973,  647, 2958, 2956, 2974,
     2972, 2960,  649,  651,  460, 2965, 2981, 2947, 2974, 2959,
     2962, 2947,  654, 2941, 2962, 2966, 2950, 2943, 2942, 2957,
     2938, 2974, 2936, 2935, 3452, 2940, 2952, 2932, 2935, 2938,
     2929, 2943, 2946, 2941, 2933, 2925, 2940, 3452,  658,  667,
     2967, 2936, 3452, 2935,  660,  669, 2964, 2923, 2928, 2910,
     2930, 2919, 2945, 2920, 2926, 2915,   20,  674, 3452, 2931,

     2908, 2926,  676, 2907, 2918, 2924, 2851, 2851, 2865, 2837,
     2832, 2840, 3452, 2815,  100,  136,  219,  678,  268,  295,
     3452, 3452,  330,  684,  331,  336,  686,  690,  392,  397,
     3452, 3452, 3452, 3452,  701,  434,  441,  693,  439,  450,
      439,  483,  501,  524,  526,  567,  532,  695,  708,  538,
      711,  713,  715,  546,  563,  546,  557,  563,  573,  606,
      621,  624,  619,  618,  644,  717,  719,  721,  723,  649,
      727,  658,  733,  654,  662,  665,  737,  739,  743,  690,
      682,  713,  695,  706,  697,  724,  748,  750,  755,  757,
      721,  705,  725,  761,  766,  712,  733,  746,  721,  723,

      740,  721,  728,  777,  779,  735,  728,  740, 3452, 3452,
      739,  731,  744,  736,  754,  736,  748,  769,  741,  741,
      744, 3452,  744,  764,  801, 3452,  764,  804,  763,  809,
     3452,  811,  759,  760,  758,  780,  763,  771,  780,  781,
      821,  775,  777,  771,  827,  814,  830,  790,  779,  782,
      837,  791,  784,  794,  796,  809, 3452,  819,  802,  800,
      797,  813,  810,  802,  856,  858,  860,  819,  866,  851,
      875,  887,  877,  818,  893,  814,  829, 3452, 3452,  895,
      897,  853,  830,  843,  903,  905,  853,  846,  864,  856,
      910,  877,  913,  915,  921,  863,  876,  900,  869,  870,

      873,  927,  875,  897,  933,  935,  898,  938,  940,  943,
      945,  951,  954,  956,  894,  893,  923,  961,  906,  917,
      926,  928,  968,  922,  924,  918,  974,  976,  978,  981,
      984,  937,  931,  934,  990,  992,  940,  938,  950,  950,
      963, 1002,  973,  961,  958, 1008, 1010,  958, 1013, 1015,
      979,  984,  966,  982,  969,  976,  982,  972, 1007,  981,
      981,  977,  989,  994, 3452,  991,  981, 1036,  984, 1012,
      986, 1041, 1028, 1044, 1011, 3452, 1008,  994,  994,  996,
     1018, 1016, 1058, 1020, 1030, 3452, 1005, 1008, 1063, 1065,
     1058, 1021, 1016, 1027, 1031, 1029, 1023, 1034, 1022, 1021,

     1027, 1048, 1028, 1029, 1029, 1025, 1035, 1086, 1088, 1094,
     1087, 1087, 1047, 1101, 1103, 1049, 1059, 1071, 1074, 1062,
     1069, 1078, 1118, 1111, 1111, 1126, 1129, 1066, 1070, 1085,
     1136, 1128, 1128, 1099, 1103, 1088, 1143, 1145, 1147, 1149,
     1112, 1099, 1105, 1111, 1101, 1156, 1139, 1112, 1112, 1109,
     1121, 1126, 1166, 1168, 1170, 1129, 1119, 1174, 1176, 1124,
     1179, 1184, 1155, 1186, 1190, 1192, 1195, 1197, 1199, 1201,
     1149, 1149, 1149, 1151, 1173, 1171, 1210, 1213, 1180, 1187,
     1218, 1164, 1167, 1222, 1226, 1177, 1175, 1186, 1230, 1192,
     1191, 1185, 1196, 1184, 1238, 1242, 1185, 1194, 1214, 1194,

     1247, 1197, 1250, 1199, 1202, 1196, 1238, 3452, 1223, 1201,
     1205, 1215, 1208, 1227, 1230, 1217, 1214, 1219, 1220, 1235,
     1236, 1233, 1273, 1275, 1268, 1231, 1226, 1237, 1235, 1228,
     1244, 1246, 1254, 1239, 1264, 1246, 1241, 1241, 1292, 1241,
     1256, 3452, 1259, 1248, 1261, 3452, 1250, 1269, 1254, 1263,
     1253, 1245, 1262, 3452, 1286, 1258, 1310, 1305, 1307, 3452,
     3452, 1266, 1318, 1313, 1315, 1274, 1324, 1271, 1269, 1289,
     1285, 1288, 1285, 1296, 1286, 1282, 3452, 3452, 1336, 1332,
     1335, 1299, 1300, 1307, 3452, 3452, 1301, 1294, 1288, 1348,
     1350, 1334, 1354, 1321, 1299, 1303, 1313, 1307, 1326, 1328,

     1315, 1312, 1366, 1370, 1372, 1319, 1325, 1375, 1342, 1378,
     1345, 1382, 1384, 1386, 1388, 1337, 1348, 1346, 1339, 1355,
     1357, 1365, 1397, 1352, 1377, 1359, 1403, 1405, 1358, 1358,
     1370, 1410, 1375, 1364, 1377, 1415, 1368, 1388, 1420, 1375,
     1384, 1374, 1367, 1384, 1428, 1377, 3452, 1403, 1390, 1395,
     1383, 3452, 1383, 1398, 1385, 1421, 1386, 1393, 3452, 1394,
     1392, 1391, 1399, 1400, 1448, 1404, 1412, 3452, 1403, 1399,
     1411, 1403, 1417, 1403, 1419, 3452, 1413, 1415, 1406, 1413,
     3452, 3452, 1411, 1425, 1413, 1417, 1431, 1429, 1434, 3452,
     1422, 1423, 1434, 1419, 1421, 3452, 3452, 1475, 3452, 3452,

     1477, 1479, 1481, 1436, 1484, 1439, 1487, 1451, 1439, 1439,
     1457, 1499, 3452, 3452, 1447, 1444, 1449, 1465, 1451, 1506,
     1479, 1466, 1471, 1514, 1511, 1464, 1517, 1466, 1481, 1470,
     1506, 1471, 1479, 1533, 1535, 1480, 1479, 1483, 1491, 1539,
     1543, 1492, 1491, 1503, 1495, 1510, 1496, 1512, 1552, 1508,
     1555, 1512, 1504, 1560, 1562, 1564, 1568, 1514, 1531, 1571,
     1573, 1524, 1529, 1543, 1541, 1546, 1584, 1534, 1587, 1589,
     1559, 1559, 1540, 1547, 1536, 3452, 1549, 3452, 1548, 1559,
     1600, 3452, 1603, 1550, 1567, 1607, 1567, 1613, 1563, 1563,
     1568, 1591, 1568, 1586, 3452, 1580, 1585, 1571, 1571, 1580,

     1598, 1583, 1610, 1593, 1595, 1597, 1594, 1598, 1579, 1603,
     1600, 1640, 1642, 1648, 1650, 1590, 1652, 1607, 1655, 1657,
     1606, 1660, 1663, 1628, 1614, 1613, 1629, 1616, 1618, 1672,
     1675, 1639, 1643, 1633, 1659, 1638, 1645, 1651, 1684, 1687,
     1656, 1637, 1644, 1692, 1635, 1695, 1697, 1700, 1655, 1703,
     1656, 1667, 1707, 1711, 1713, 1716, 1719, 1654, 1682, 1723,
     1727, 1677, 1676, 1681, 1704, 1681, 1700, 1736, 1739, 1741,
     1700, 1705, 1691, 1746, 1748, 1752, 1755, 1757, 1703, 1728,
     1762, 1713, 1743, 1726, 1728, 1730, 1768, 1771, 1732, 1774,
     1733, 1750, 1733, 1730, 1761, 1743, 1729, 3452, 1785, 1772,

     1788, 1790, 1777, 1795, 1740, 3452, 1797, 1802, 1767, 1806,
     1809, 1780, 3452, 1765, 1759, 3452, 1763, 1756, 1779, 3452,
     1766, 1784, 1766, 1787, 1788, 1772, 3452, 1786, 3452, 1808,
     1827, 1777, 1830, 1832, 1831, 1831, 1839, 1790, 1791, 1845,
     1847, 1849, 1797, 1834, 1810, 1802, 1820, 1856, 1858, 1802,
     1827, 1823, 1824, 1813, 1817, 1829, 1873, 1848, 1831, 1828,
     1859, 1880, 1882, 1884, 1847, 1887, 1889, 1836, 1892, 1894,
     1898, 1900, 1903, 1905, 1910, 1912, 1843, 1914, 1916, 1919,
     1921, 1860, 1868, 1926, 1872, 1930, 1932, 1937, 1868, 1897,
     1939, 1942, 1946, 1909, 1894, 1914, 1916, 1900, 1955, 1914,

     1957, 1959, 1914, 1907, 1913, 1933, 1913, 1931, 1919, 1920,
     1971, 1975, 1960, 1977, 1979, 1964, 3452, 1981, 1944, 1984,
     1937, 1957, 1935, 1936, 1956, 3452, 1956, 1940, 1960, 1942,
     1945, 3452, 3452, 1949, 1950, 2000, 2002, 1950, 2005, 2007,
     3452, 3452, 1974, 1976, 2015, 2017, 1970, 1971, 1985, 1983,
     1974, 1989, 1976, 1998, 1973, 2030, 2032, 2034, 1982, 1997,
     1985, 1999, 1996, 1993, 1986, 1992, 2012, 1993, 2011, 2049,
     1999, 2051, 2005, 2054, 2056, 2058, 2060, 2062, 2064, 2066,
     2070, 2072, 2074, 2019, 2076, 2082, 2048, 2026, 2084, 2088,
     2032, 2092, 2055, 2094, 2096, 2100, 2044, 2067, 2049, 2052,

     2105, 2107, 2112, 2114, 2116, 2118, 2071, 2074, 2084, 2074,
     2066, 2072, 2073, 2074, 2132, 2092, 2134, 2096, 2089, 2092,
     2100, 2090, 2109, 2088, 2104, 2101, 2093, 2103, 3452, 2101,
     2091, 2149, 2133, 2152, 2151, 2151, 2115, 2105, 2160, 2106,
     2116, 2121, 2113, 2121, 2116, 2121, 2115, 2116, 2172, 2174,
     2176, 2139, 2127, 2127, 2158, 2126, 2144, 2137, 2147, 2137,
     2130, 2136, 2137, 2138, 2193, 2195, 2197, 2199, 2201, 2157,
     2204, 2167, 2157, 2208, 2179, 2158, 2213, 2215, 2217, 2176,
     2168, 2178, 2222, 2224, 2226, 2229, 2231, 2233, 2235, 3452,
     2202, 2201, 2206, 3452, 2207, 2190, 3452, 2205, 2202, 2210,

     2193, 2196, 2195, 2208, 2209, 2253, 2206, 2202, 2208, 2258,
     2260, 2213, 2214, 3452, 3452, 2216, 2222, 2227, 2214, 2230,
     2215, 2216, 2230, 2222, 2222, 2224, 2278, 2227, 2281, 2229,
     2246, 2250, 2247, 2287, 2253, 2251, 2256, 2292, 2259, 2243,
     2297, 2299, 2246, 2250, 2249, 2262, 2263, 2308, 2261, 2257,
     2264, 2314, 2316, 2318, 2320, 2283, 2285, 2287, 3452, 3452,
     2272, 2280, 2288, 2274, 2275, 2277, 2285, 2284, 2334, 2336,
     2290, 2300, 2292, 2341, 2343, 2345, 2347, 2304, 2294, 2298,
     2304, 2301, 2302, 2320, 2312, 2306, 2326, 2362, 2314, 2326,
     2366, 2368, 2370, 2354, 2315, 2327, 2322, 2377, 2385, 2340,

     2343, 2346, 2387, 2389, 2393, 2395, 2397, 2399, 2337, 2346,
     2349, 2357, 2356, 2358, 2368, 2361, 2413, 2359, 3452, 2376,
     2379, 2378, 2418, 2377, 2375, 3452, 2383, 2375, 2424, 3452,
     2388, 3452, 2427, 2429, 2431, 2434, 2383, 2389, 2438, 2388,
     2387, 2388, 2400, 2408, 2446, 2449, 2396, 2400, 2454, 2456,
     2458, 2412, 2413, 2463, 2426, 2466, 2469, 2419, 2472, 2435,
     2475, 2478, 2481, 2483, 2485, 2488, 2447, 2445, 2494, 2453,
     2448, 2499, 2459, 2501, 3452, 3452, 2451, 2486, 2505, 2507,
     2461, 2457, 3452, 3452, 3452, 2512, 2517, 2521, 2523, 2527,
     2462, 2529, 2531, 2484, 2482, 2480, 2485, 2490, 2537, 2485,

     2544, 2546, 2494, 2485, 2548, 2550, 2552, 2554, 2556, 2563,
     2569, 2571, 2573, 2575, 2579, 2511, 2511, 2581, 2585, 2589,
     2591, 2593, 2597, 2599, 2601, 2609, 2524, 2525, 2611, 2535,
     2534, 2617, 2619, 2621, 2623, 2625, 2627, 2552, 2547, 2629,
     2557, 2568, 2560, 2631, 2633, 2636, 2640, 2646, 2648, 2652,
     2658, 2612, 2633, 2664, 2666, 2668, 2670, 2672, 2594, 2674,
     2676, 2680, 2682, 2686, 2690, 2692, 2696, 2698, 2702, 2594,
     2612, 2625, 3452, 2704, 2706, 2708, 2612, 2639, 2712, 2714,
     2654, 2658, 2716, 2718, 2721, 2723, 2728, 2731, 2733, 2691,
     2695, 3452, 3452, 2739, 2743, 2679, 2745, 2747, 2749, 2751,

     2753, 2755, 2671, 2702, 2687, 2757, 2705, 2731, 2762, 2726,
     2727, 2767, 2769, 2771, 2773, 3452, 3452, 2721, 2776, 2778,
     2782, 2737, 2730, 2750, 2756, 2748, 2735, 2736, 2790, 2757,
     2794, 2747, 2748, 2744, 2760, 2747, 2746, 2747, 2749, 2756,
     2753, 2751, 2754, 2753, 2763, 2764, 2756, 2812, 2814, 2763,
     2762, 2772, 2765, 2766, 2768, 2822, 2824, 2830, 2832, 3452,
     2780, 2774, 2781, 2782, 2838, 2840, 2842, 2782, 2791, 2846,
     2848, 2850, 2854, 2799, 2856, 2858, 2863, 2866, 2868, 2873,
     2875, 2877, 2881, 2883, 2885, 2887, 2892, 2894, 2896, 3452,
     2903, 2908, 2913, 2918, 2923, 2928, 2933, 2938, 2943, 2947,

     2952, 2957
    } ;

static yyconst flex_int16_t yy_def[2203] =
    {   0,
     2191, 2191, 2192, 2192, 2193, 2193, 2194, 2194, 2195, 2195,
     2195, 2195, 2196, 2196, 2197, 2197, 2198, 2198, 2190, 2190,
     2190, 2190,   21, 2190,   23,   23,   23,   23, 2190, 2190,
       23,   23, 2199, 2190, 2200, 2201, 2202, 2190, 2190, 2190,
     2190, 2190, 2190,   21,   23,   23,   23,   23,   23,   29,
     2190,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2190,   23,   23,
       23, 2190,   23, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190,   23,   23, 2199, 2200, 2201,

     2202, 2190, 2190,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190,   23, 2190,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2190, 2190,   23,   23,   23,   23,   23,   23,   23,
     2190, 2190,   23, 2190, 2190,   23,   23,   23,   23, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190,   23,   23,   23,   23,   23,   23,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
     2190, 2190, 2190, 2190,   23, 2190, 2190,   23,   23, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2190, 2190,   23,
       23,   23, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190,   23,   23,   23,   23,   23,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2190, 2190,   23,   23,   23,   23,   23,
       23, 2190, 2190,   23, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190,   23,   23,   23, 2190, 2190, 2190,
     2190,   23,   23, 2190, 2190,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2190, 2190,   23, 2190,
     2190,   23,   23,   23, 2190, 2190,   23, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190,   23,   23,   23,   23, 2190, 2190,   23, 2190, 2190,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2190, 2190,   23,   23,   23,   23, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,   23,
       23,   23,   23,   23, 2190, 2190,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190,   23,   23,   23,   23,   23,   23,   23,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,   23,
       23,   23,   23,   23, 2190, 2190,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,   23,
       23,   23,   23, 2190, 2190,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190,   23,   23,   23,   23,   23, 2190,
     2190, 2190, 2190, 2190,   23,   23,   23,   23, 2190, 2190,
     2190, 2190,   23,   23,   23,   23, 2190, 2190, 2190, 2190,
       23,   23,   23,   23, 2190, 2190, 2190, 2190, 2190, 2190,
       23,   23,   23,   23, 2190, 2190, 2190,   23,   23,   23,
       23, 2190, 2190,   23,   23,   23,   23,   23,   23, 2190,
       23,   23,   23,   23,   23,   23,   23,   23,   23,    0,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190
    } ;

static yyconst flex_int16_t yy_nxt[3515] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   42,   25,   26,
       27,   28,   28,   28,   29,   39,   30,   20, 2190,   39,
       43,   40,   43, 2190,   31,   40,   95,   95,   32,   20,
       21,   21,   20,   22, 2190,   24,  112,   25,   26,   27,
       28,   28,   28,   29,  843,   30,   20, 2190,   47,  844,
       49,   49,   49,   31,   95,   95,  113,   32,   44,   44,
      105, 2190,   45,   52,   45,   46,   47,   48,   49,   49,
       49,   50,   45,   51,  106,   45,   45,   45,   45,   45,
       45,   52,   45,   45,   45,   53,   45,   45,   45,   45,
       45,   45,   45,   45,   54,   55,   56,   57,   45,   45,

       45,   58,   45,   45,   45,   59,   60,   61,   45,   45,
       62,   63,   64,   65,   66,   67,   45,   45,   45,   45,
       45,   47,  151,   49,   49,   49,   45,   45,   45,   45,
       45,   45, 2190,  109, 2190,  116,   52,  118,  152,   69,
       69,  117,   45,  110,   69,   69,   45,   73,   73,   70,
       70,   70,  147,  863,  149,   45,   45,   45,   45,   71,
      150,  119,   45,  148,   95,   95,   45,   45,   45,   73,
       73,   45,   45,   45,   45,   45,   45,   47,   71,   49,
       49,   49,   69,   69,  178,  864,  144,   73,   73,   71,
      179,  180,   70,   70,   70,   47,  181,   49,   49,   49,

       69,   69,   71,  145,  153,  146,  154,   71,   71,   74,
       70,   70,   70,  123,  123,  157,   75,  124,  124,  124,
       71,   71,  165,   76,  163,  158,   71,  202,  164,  209,
      159,  160,  211,  203,  262,  215,  166,  216,  212,   71,
      210,  213,   77,   78,   79,   80,   81,   82,   83,  263,
       84,   85,  240,   86,   87,   88,   89,  214,  241,   90,
       91,   92,   93,   94,  126,  127,  128,  129,  130,  131,
      132,  279,  133,  134,  167,  135,  136,  137,  138,  865,
      280,  139,  140,  141,  142,  143,  225,  172,  168,  173,
      226,  169,  170,  124,  124,  124,   69,   69,  206,  174,

      227,   69,   69,  219,  175,  176,  124,  124,  124,  177,
      229,  242,  257,  220,  228,  207,  243,  208,  221,  222,
      234,  246,  235,  868,  230,  282,  247,  231,  232,  258,
      289,  331,  236,  326,  248,  869,  290,  237,  238,  283,
      296,  296,  239,  313,  323,  323,  332,  351,  314,  348,
      327,  358,  365,  399,  297,  400,  315,  359,  349,  324,
      366,  352,  382,  382,  367,  396,  397,  401,  405,  411,
      413,  870,  406,  402,  296,  296,  414,  419,  419,  420,
      420,  422,  422,  325,  873,  383,  424,  424,  297,  412,
      432,  432,  874,  421,  444,  423,  434,  434,  448,  448,

      425,  486,  445,  487,  433,  492,  446,  323,  323,  493,
      435,  454,  454,  449,  460,  460,  466,  466,  474,  474,
      483,  484,  324,  508,  488,  498,  498,  510,  876,  461,
      489,  467,  666,  475,  877,  525,  525,  509,  878,  468,
      499,  382,  382,  511,  526,  532,  532,  879,  500,  667,
      527,  450,  538,  538,  533,  557,  558,  476,  419,  419,
      534,  420,  420,  559,  569,  569,  596,  539,  501,  422,
      422,  570,  570,  424,  424,  421,  571,  571,  882,  572,
      597,  573,  883,  423,  432,  432,  884,  425,  580,  580,
      598,  581,  704,  582,  434,  434,  583,  583,  433,  584,

      796,  585,  586,  586,  448,  448,  599,  705,  435,  601,
      601,  454,  454,  460,  460,  797,  587,  611,  611,  449,
      615,  615,  466,  466,  617,  617,  622,  622,  461,  474,
      474,  625,  625,  628,  628,  616,  885,  467,  643,  643,
      754,  623,  649,  650,  475,  498,  498,  729,  629,  730,
      651,  653,  653,  644,  886,  525,  525,  755,  680,  680,
      499,  887,  686,  686,  526,  532,  532,  538,  538,  645,
      527,  681,  691,  692,  533,  687,  569,  569,  570,  570,
      534,  888,  539,  571,  571,  889,  572,  890,  573,  727,
      727,  580,  580,  892,  581,  896,  582,  583,  583,  897,

      584,  898,  585,  728,  586,  586,  735,  735,  899,  736,
      900,  737,  748,  748,  751,  751,  601,  601,  587,  611,
      611,  615,  615,  767,  767,  617,  617,  749,  901,  752,
      768,  768,  622,  622,  773,  773,  616,  625,  625,  628,
      628,  777,  777,  778,  778,  769,  902,  623,  788,  788,
      643,  643,  795,  795,  629,  653,  653,  903,  779,  828,
      828,  832,  832,  789,  904,  644,  905,  753,  680,  680,
      686,  686,  906,  780,  781,  845,  845,  851,  851,  866,
      866,  681,  907,  687,  846,  871,  871,  727,  727,  911,
      847,  875,  875,  867,  880,  880,  748,  748,  914,  872,

      852,  728,  735,  735,  915,  736,  916,  737,  881,  891,
      891,  749,  751,  751,  893,  893,  894,  894,  908,  908,
      767,  767,  768,  768,  910,  910,  917,  752,  912,  912,
      919,  895,  920,  909,  773,  773,  921,  769,  777,  777,
      778,  778,  922,  913,  918,  918,  923,  924,  925,  927,
      927,  788,  788,  926,  932,  779,  929,  929,  930,  930,
      933,  934,  935,  935,  928,  938,  789,  795,  795,  939,
      940,  941,  942,  931,  943,  944,  945,  936,  946,  946,
      949,  949,  951,  952,  953,  937,  954,  955,  956,  957,
      958,  959,  960,  947,  961,  950,  963,  964,  965,  966,

      967,  962,  968,  968,  970,  828,  828,  971,  975,  948,
      972,  972,  832,  832,  976,  977,  978,  979,  980,  973,
      981,  982,  983,  983,  986,  974,  987,  988,  845,  845,
      989,  990,  990,  969,  992,  993,  994,  846,  851,  851,
      995,  996,  997,  847,  991,  998,  999, 1000, 1002,  984,
     1003, 1001, 1004, 1005, 1006,  985, 1007, 1008, 1008,  866,
      866, 1010, 1010, 1013, 1011, 1028, 1012, 1014, 1014, 1029,
     1016, 1009, 1017,  867, 1030, 1018,  871,  871, 1026, 1026,
     1019, 1015, 1034, 1020, 1021, 1035, 1022, 1036, 1023, 1023,
      872, 1024, 1027, 1025,  875,  875,  880,  880, 1031, 1031,

     1041, 1032, 1042, 1033, 1037, 1037, 1039, 1039, 1043, 1044,
      881,  891,  891, 1045,  893,  893,  894,  894, 1047, 1038,
     1048, 1040, 1046, 1046, 1051, 1049, 1052, 1053, 1054, 1054,
     1056,  895, 1050, 1057, 1058, 1058, 1061, 1061, 1063,  908,
      908, 1064, 1064, 1055,  910,  910, 1065, 1065, 1070, 1059,
     1071, 1062,  912,  912,  909, 1067, 1067, 1068, 1068, 1072,
     1073, 1066,  918,  918, 1074, 1060, 1075,  913, 1076, 1077,
     1077, 1081, 1069, 1082, 1083,  927,  927, 1084, 1084,  929,
      929, 1086,  930,  930, 1078, 1085, 1085, 1087, 1088, 1090,
      928,  935,  935, 1089, 1089, 1091, 1079,  931, 1092, 1093,

     1094, 1097, 1080, 1095, 1095, 1098,  936, 1099, 1100,  946,
      946, 1101, 1101, 1102,  949,  949, 1103, 1103, 1096, 1104,
     1105, 1106, 1107, 1108,  947, 1109, 1110, 1111, 1112,  950,
     1113, 1114, 1115, 1116, 1117, 1118, 1119,  968,  968, 1120,
     1121, 1122,  972,  972, 1123, 1124, 1124, 1126, 1127, 1128,
     1129,  973, 1130, 1131, 1132, 1133, 1134,  974, 1125,  983,
      983, 1135, 1137, 1138, 1139, 1139,  990,  990, 1140, 1141,
     1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,  991,
     1151, 1152, 1153, 1154, 1155, 1136, 1156, 1008, 1008, 1157,
     1157, 1160, 1158, 1161, 1159, 1010, 1010, 1162, 1011, 1166,

     1012, 1009, 1014, 1014, 1163, 1163, 1167, 1164, 1168, 1165,
     1169, 1171, 1173, 1175, 1176, 1177, 1015, 1178, 1174, 1023,
     1023, 1182, 1024, 1183, 1025, 1184, 1170, 1026, 1026, 1172,
     1179, 1179, 1185, 1180, 1186, 1181, 1187, 1031, 1031, 1188,
     1032, 1027, 1033, 1189, 1037, 1037, 1190, 1190, 1039, 1039,
     1191, 1191, 1192, 1193, 1194, 1195, 1196, 1046, 1046, 1038,
     1197, 1198, 1199, 1040, 1200, 1201, 1202, 1203, 1203, 1054,
     1054, 1205, 1205, 1206, 1207, 1058, 1058, 1208, 1208, 1209,
     1061, 1061, 1204, 1211, 1055, 1210, 1210, 1064, 1064, 1216,
     1059, 1065, 1065, 1212, 1212, 1062, 1067, 1067, 1068, 1068,

     1213, 1213, 1214, 1214, 1217, 1218, 1066, 1219, 1220, 1221,
     1222, 1077, 1077, 1069, 1223, 1223, 1224, 1215, 1225, 1227,
     1227, 1229, 1230, 1084, 1084, 1231, 1078, 1085, 1085, 1232,
     1233, 1089, 1089, 1234, 1228, 1235, 1236, 1237, 1238, 1095,
     1095, 1240, 1226, 1239, 1239, 1241, 1242, 1243, 1101, 1101,
     1244, 1103, 1103, 1245, 1096, 1246, 1247, 1248, 1249, 1251,
     1252, 1253, 1254, 1255, 1256, 1250, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1264, 1265, 1265, 1124, 1124, 1266, 1267,
     1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1125,
     1277, 1278, 1279, 1139, 1139, 1280, 1281, 1282, 1283, 1284,

     1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296,
     1293, 1157, 1157, 1297, 1158, 1298, 1159, 1299, 1294, 1163,
     1163, 1300, 1164, 1301, 1165, 1302, 1302, 1304, 1305, 1306,
     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1179, 1179, 1303,
     1180, 1314, 1181, 1315, 1316, 1317, 1318, 1319, 1320, 1190,
     1190, 1191, 1191, 1321, 1322, 1324, 1324, 1326, 1327, 1328,
     1329, 1323, 1330, 1331, 1332, 1333, 1334, 1203, 1203, 1336,
     1325, 1335, 1335, 1205, 1205, 1337, 1208, 1208, 1338, 1210,
     1210, 1339, 1204, 1212, 1212, 1213, 1213, 1214, 1214, 1340,
     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1223, 1223,

     1348, 1349, 1215, 1350, 1227, 1227, 1351, 1351, 1352, 1353,
     1354, 1355, 1355, 1357, 1358, 1359, 1360, 1360, 1362, 1228,
     1363, 1239, 1239, 1364, 1365, 1366, 1356, 1367, 1368, 1369,
     1369, 1361, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1370, 1383, 1384, 1385, 1386, 1265,
     1265, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1412, 1414, 1414,
     1302, 1302, 1417, 1417, 1418, 1419, 1419, 1421, 1422, 1422,
     1413, 1425, 1415, 1428, 1303, 1426, 1427, 1429, 1434, 1420,

     1430, 1430, 1423, 1435, 1436, 1437, 1438, 1439, 1439, 1441,
     1442, 1443, 1444, 1444, 1431, 1324, 1324, 1445, 1446, 1446,
     1448, 1449, 1440, 1432, 1450, 1451, 1452, 1424, 1453, 1456,
     1325, 1416, 1457, 1447, 1454, 1454, 1335, 1335, 1458, 1459,
     1340, 1340, 1462, 1433, 1460, 1460, 1463, 1464, 1465, 1455,
     1466, 1467, 1468, 1469, 1469, 1471, 1351, 1351, 1472, 1461,
     1473, 1474, 1474, 1355, 1355, 1476, 1476, 1479, 1470, 1477,
     1477, 1480, 1360, 1360, 1481, 1481, 1475, 1482, 1356, 1483,
     1484, 1485, 1486, 1489, 1478, 1487, 1487, 1361, 1369, 1369,
     1490, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,

     1488, 1499, 1499, 1370, 1502, 1502, 1505, 1506, 1507, 1507,
     1500, 1509, 1512, 1503, 1510, 1510, 1501, 1513, 1514, 1504,
     1515, 1516, 1517, 1508, 1518, 1519, 1520, 1521, 1522, 1511,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1412, 1412, 1534, 1534, 1538, 1535, 1539, 1536, 1414,
     1414, 1537, 1537, 1417, 1417, 1413, 1419, 1419, 1540, 1540,
     1541, 1422, 1422, 1415, 1542, 1542, 1543, 1544, 1545, 1546,
     1420, 1547, 1548, 1430, 1430, 1423, 1549, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1439, 1439, 1431, 1557, 1557,
     1558, 1559, 1560, 1444, 1444, 1561, 1446, 1446, 1562, 1562,

     1440, 1563, 1563, 1565, 1566, 1566, 1568, 1569, 1570, 1570,
     1577, 1447, 1454, 1454, 1572, 1572, 1564, 1573, 1573, 1567,
     1575, 1575, 1578, 1571, 1460, 1460, 1580, 1455, 1579, 1579,
     1581, 1582, 1574, 1583, 1584, 1576, 1585, 1586, 1586, 1461,
     1469, 1469, 1588, 1588, 1589, 1590, 1591, 1474, 1474, 1592,
     1592, 1594, 1587, 1476, 1476, 1470, 1477, 1477, 1593, 1593,
     1595, 1596, 1475, 1481, 1481, 1597, 1598, 1599, 1600, 1487,
     1487, 1478, 1601, 1601, 1602, 1490, 1490, 1603, 1604, 1606,
     1607, 1608, 1605, 1609, 1488, 1610, 1499, 1499, 1611, 1612,
     1612, 1502, 1502, 1614, 1617, 1500, 1615, 1615, 1507, 1507,

     1503, 1501, 1613, 1618, 1618, 1619, 1504, 1510, 1510, 1616,
     1620, 1620, 1621, 1508, 1622, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1511, 1630, 1631, 1632, 1633, 1634, 1636, 1636,
     1638, 1639, 1639, 1534, 1534, 1641, 1535, 1642, 1536, 1635,
     1537, 1537, 1637, 1643, 1644, 1640, 1540, 1540, 1645, 1645,
     1542, 1542, 1647, 1648, 1653, 1654, 1655, 1656, 1656, 1549,
     1549, 1658, 1646, 1649, 1659, 1650, 1651, 1660, 1661, 1652,
     1662, 1657, 1663, 1664, 1557, 1557, 1665, 1667, 1668, 1669,
     1666, 1562, 1562, 1563, 1563, 1670, 1670, 1671, 1566, 1566,
     1672, 1672, 1673, 1674, 1674, 1570, 1570, 1679, 1564, 1676,

     1676, 1572, 1572, 1567, 1573, 1573, 1677, 1677, 1675, 1687,
     1571, 1575, 1575, 1678, 1678, 1680, 1680, 1579, 1579, 1574,
     1682, 1682, 1685, 1685, 1688, 1691, 1576, 1689, 1689, 1693,
     1681, 1586, 1586, 1692, 1692, 1683, 1694, 1686, 1588, 1588,
     1695, 1695, 1690, 1592, 1592, 1697, 1587, 1593, 1593, 1698,
     1699, 1684, 1700, 1701, 1704, 1696, 1702, 1702, 1601, 1601,
     1705, 1705, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
     1716, 1703, 1715, 1715, 1718, 1706, 1612, 1612, 1717, 1717,
     1615, 1615, 1618, 1618, 1719, 1620, 1620, 1720, 1721, 1613,
     1722, 1723, 1724, 1616, 1725, 1726, 1727, 1728, 1729, 1730,

     1731, 1636, 1636, 1732, 1732, 1733, 1639, 1639, 1734, 1734,
     1737, 1735, 1738, 1736, 1740, 1637, 1645, 1645, 1739, 1739,
     1640, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1752,
     1646, 1656, 1656, 1749, 1749, 1750, 1750, 1753, 1754, 1755,
     1756, 1757, 1758, 1759, 1760, 1657, 1761, 1762, 1763, 1751,
     1670, 1670, 1672, 1672, 1764, 1674, 1674, 1765, 1765, 1676,
     1676, 1677, 1677, 1678, 1678, 1766, 1766, 1680, 1680, 1770,
     1675, 1768, 1768, 1682, 1682, 1769, 1769, 1685, 1685, 1772,
     1767, 1773, 1681, 1771, 1771, 1689, 1689, 1775, 1683, 1774,
     1774, 1776, 1686, 1692, 1692, 1777, 1777, 1695, 1695, 1780,

     1690, 1779, 1779, 1781, 1782, 1783, 1784, 1784, 1702, 1702,
     1778, 1790, 1696, 1786, 1786, 1787, 1787, 1705, 1705, 1789,
     1789, 1785, 1791, 1703, 1792, 1793, 1794, 1795, 1796, 1797,
     1788, 1798, 1706, 1715, 1715, 1717, 1717, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1732, 1732, 1812, 1734, 1734, 1814, 1735, 1815, 1736, 1816,
     1817, 1739, 1739, 1818, 1813, 1819, 1820, 1821, 1822, 1823,
     1824, 1825, 1826, 1749, 1749, 1750, 1750, 1827, 1827, 1828,
     1829, 1830, 1831, 1833, 1834, 1835, 1832, 1836, 1837, 1751,
     1838, 1839, 1840, 1841, 1765, 1765, 1766, 1766, 1842, 1842,

     1768, 1768, 1769, 1769, 1843, 1771, 1771, 1844, 1845, 1774,
     1774, 1767, 1846, 1847, 1777, 1777, 1848, 1848, 1779, 1779,
     1849, 1850, 1851, 1852, 1852, 1784, 1784, 1854, 1854, 1778,
     1786, 1786, 1787, 1787, 1855, 1855, 1789, 1789, 1853, 1856,
     1785, 1857, 1858, 1859, 1860, 1861, 1862, 1788, 1863, 1864,
     1865, 1866, 1867, 1868, 1869, 1869, 1871, 1872, 1873, 1874,
     1874, 1876, 1876, 1878, 1879, 1880, 1881, 1882, 1883, 1870,
     1884, 1885, 1886, 1875, 1887, 1877, 1888, 1889, 1890, 1827,
     1827, 1891, 1892, 1892, 1894, 1895, 1896, 1897, 1898, 1898,
     1900, 1901, 1902, 1903, 1903, 1905, 1893, 1906, 1907, 1907,

     1842, 1842, 1909, 1899, 1910, 1911, 1912, 1913, 1904, 1848,
     1848, 1914, 1915, 1908, 1916, 1852, 1852, 1917, 1917, 1854,
     1854, 1855, 1855, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
     1853, 1925, 1926, 1927, 1928, 1869, 1869, 1929, 1929, 1930,
     1931, 1932, 1874, 1874, 1933, 1933, 1876, 1876, 1934, 1934,
     1870, 1935, 1936, 1937, 1938, 1939, 1875, 1940, 1941, 1942,
     1877, 1943, 1944, 1945, 1945, 1947, 1948, 1949, 1949, 1892,
     1892, 1951, 1951, 1952, 1954, 1955, 1956, 1946, 1898, 1898,
     1958, 1950, 1959, 1893, 1960, 1953, 1957, 1957, 1903, 1903,
     1961, 1961, 1967, 1899, 1962, 1962, 1964, 1964, 1907, 1907,

     1966, 1966, 1968, 1904, 1969, 1970, 1971, 1972, 1973, 1963,
     1974, 1965, 1975, 1908, 1917, 1917, 1976, 1977, 1978, 1979,
     1979, 1981, 1982, 1983, 1984, 1929, 1929, 1985, 1933, 1933,
     1934, 1934, 1986, 1986, 1980, 1988, 1988, 1990, 1991, 1992,
     1992, 1994, 1995, 1996, 1997, 1998, 1987, 1945, 1945, 1989,
     1999, 1999, 2000, 1993, 2001, 1949, 1949, 2002, 2002, 1951,
     1951, 1946, 2003, 2004, 2005, 2005, 2007, 2008, 2008, 1950,
     1957, 1957, 2010, 2011, 2011, 2013, 1961, 1961, 2006, 1962,
     1962, 2009, 2014, 2014, 1964, 1964, 2015, 2015, 2012, 1966,
     1966, 2016, 2017, 2020, 1963, 2018, 2018, 2021, 2024, 1965,

     2022, 2022, 2025, 2025, 2027, 2028, 1979, 1979, 2029, 2029,
     2019, 2030, 2031, 1986, 1986, 2023, 2036, 2026, 2032, 2032,
     2038, 1980, 1988, 1988, 2033, 2033, 2039, 1987, 2034, 2034,
     1992, 1992, 2037, 2037, 2040, 2041, 1989, 2042, 1999, 1999,
     2043, 2046, 2035, 2047, 1993, 2044, 2044, 2002, 2002, 2005,
     2005, 2048, 2048, 2049, 2049, 2008, 2008, 2051, 2051, 2045,
     2052, 2059, 2053, 2006, 2054, 2054, 2060, 2050, 2070, 2009,
     2011, 2011, 2056, 2056, 2057, 2057, 2014, 2014, 2071, 2055,
     2015, 2015, 2018, 2018, 2072, 2012, 2061, 2061, 2073, 2058,
     2062, 2062, 2064, 2064, 2022, 2022, 2077, 2019, 2066, 2066,

     2067, 2067, 2025, 2025, 2078, 2063, 2081, 2065, 2082, 2023,
     2069, 2069, 2029, 2029, 2083, 2068, 2092, 2026, 2032, 2032,
     2033, 2033, 2034, 2034, 2074, 2074, 2075, 2075, 2037, 2037,
     2079, 2079, 2044, 2044, 2084, 2084, 2035, 2085, 2085, 2093,
     2076, 2087, 2087, 2096, 2080, 2103, 2045, 2048, 2048, 2049,
     2049, 2086, 2104, 2089, 2089, 2088, 2090, 2105, 2091, 2051,
     2051, 2107, 2052, 2050, 2053, 2054, 2054, 2094, 2094, 2056,
     2056, 2057, 2057, 2095, 2095, 2097, 2097, 2061, 2061, 2108,
     2055, 2062, 2062, 2100, 2100, 2110, 2058, 2064, 2064, 2111,
     2098, 2101, 2101, 2066, 2066, 2116, 2063, 2067, 2067, 2102,

     2102, 2117, 2065, 2069, 2069, 2074, 2074, 2075, 2075, 2106,
     2106, 2118, 2068, 2079, 2079, 2109, 2109, 2112, 2112, 2084,
     2084, 2076, 2085, 2085, 2114, 2114, 2122, 2080, 2099, 2087,
     2087, 2113, 2115, 2115, 2089, 2089, 2086, 2090, 2123, 2091,
     2094, 2094, 2124, 2088, 2095, 2095, 2097, 2097, 2119, 2119,
     2120, 2120, 2100, 2100, 2101, 2101, 2102, 2102, 2106, 2106,
     2125, 2098, 2126, 2109, 2109, 2121, 2127, 2128, 2112, 2112,
     2129, 2129, 2114, 2114, 2115, 2115, 2130, 2119, 2119, 2120,
     2120, 2132, 2113, 2131, 2131, 2133, 2134, 2135, 2136, 2137,
     2138, 2129, 2129, 2139, 2121, 2131, 2131, 2140, 2141, 2142,

     2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2156, 2158, 2158, 2160, 2161, 2162,
     2163, 2164, 2165, 2156, 2156, 2166, 2166, 2168, 2157, 2169,
     2159, 2158, 2158, 2167, 2167, 2170, 2171, 2174, 2157, 2172,
     2172, 2166, 2166, 2167, 2167, 2175, 2159, 2176, 2176, 2178,
     2178, 2172, 2172, 2181, 2173, 2180, 2180, 2182, 2182, 2176,
     2176, 2177,  862, 2179, 2184, 2184, 2173, 2178, 2178, 2185,
     2185, 2183,  861, 2177, 2180, 2180, 2186, 2186, 2182, 2182,
      860, 2179, 2188, 2188, 2184, 2184, 2185, 2185, 2186, 2186,
     2187,  859, 2183, 2189, 2189, 2188, 2188, 2189, 2189,  858,

      857,  856, 2187,   23,   23,   23,   23,   23,   33,   33,
       33,   33,   33,   35,   35,   35,   35,   35,   36,   36,
       36,   36,   36,   34,   34,   34,   34,   34,   37,   37,
       37,   37,   37,   38,   38,   38,   38,   38,   41,   41,
       41,   41,   41,   98,   98,   98,   98,   99,  855,   99,
       99,   99,  100,  100,  854,  100,  100,  101,  101,  101,
      853,  101,  850,  849,  848,  842,  841,  840,  839,  838,
      837,  836,  835,  834,  833,  831,  830,  829,  827,  826,
      825,  824,  823,  822,  821,  820,  819,  818,  817,  816,
      815,  814,  813,  812,  811,  810,  809,  808,  807,  806,

      805,  804,  803,  802,  801,  800,  799,  798,  794,  793,
      792,  791,  790,  787,  786,  785,  784,  783,  782,  776,
      775,  774,  772,  771,  770,  766,  765,  764,  763,  762,
      761,  760,  759,  758,  757,  756,  750,  747,  746,  745,
      744,  743,  742,  741,  740,  739,  738,  734,  733,  732,
      731,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  690,  689,  688,  685,  684,  683,  682,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,

      669,  668,  665,  664,  663,  662,  661,  660,  659,  658,
      657,  656,  655,  654,  652,  648,  647,  646,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  627,  626,  624,  621,  620,  619,  618,  614,  613,
      612,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      600,  595,  594,  593,  592,  591,  590,  589,  588,  579,
      578,  577,  576,  575,  574,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  537,  536,  535,  531,  530,  529,  528,  524,  523,

      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  507,  506,  505,  504,  503,  502,  497,  496,  495,
      494,  491,  490,  485,  482,  481,  480,  479,  478,  477,
      473,  472,  471,  470,  469,  465,  464,  463,  462,  459,
      458,  457,  456,  455,  453,  452,  451,  447,  443,  442,
      441,  440,  439,  438,  437,  436,  431,  430,  429,  428,
      427,  426,  418,  417,  416,  415,  410,  409,  408,  407,
      404,  403,  398,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  364,

      363,  362,  361,  360,  357,  356,  355,  354,  353,  350,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  330,  329,  328,  322,  321,
      320,  319,  318,  317,  316,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      295,  294,  293,  292,  291,  288,  287,  286,  285,  284,
      281,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  261,  260,  259,  256,
      255,  254,  253,  252,  251,  250,  249,  245,  244,  233,
      224,  223,  218,  217,  205,  204,  201,  200,  199,  198,

      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  183,  182,  171,  162,  161,
      156,  155,  125,  122,  121,  120,  115,  114,  111,  108,
      107,  104,   97,   96,   72,  103,  102,   97,   96,   72,
       68,   68, 2190,   34,   34,   34,   34,   34,   34,   34,
       34,   19, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190
    } ;

static yyconst flex_int16_t yy_chk[3515] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,    1,    2,
        2,    2,    2,    2,    0,    2,   60,    2,    2,    2,
        2,    2,    2,    2,  697,    2,    2,   50,   25,  697,
       25,   25,   25,    2,   51,   51,   60,    2,   21,   21,
       55,   50,   21,   25,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   55,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,
       23,   46,   80,   46,   46,   46,   23,   23,   23,   23,
       23,   23,   23,   58,   23,   63,   46,   64,   80,   26,
       26,   63,   23,   58,   69,   69,   23,   73,   73,   26,
       26,   26,   78,  715,   79,   23,   23,   23,   23,   26,
       79,   64,   23,   78,   95,   95,   23,   23,   23,   28,
       28,   23,   23,   23,   23,   23,   23,   28,   26,   28,
       28,   28,   47,   47,   92,  716,   77,   49,   49,   28,
       92,   93,   47,   47,   47,   49,   93,   49,   49,   49,

       70,   70,   47,   77,   81,   77,   81,   49,   28,   29,
       70,   70,   70,   71,   71,   84,   29,   71,   71,   71,
       70,   47,   88,   29,   87,   84,   49,  121,   87,  127,
       84,   84,  128,  121,  158,  130,   88,  130,  128,   70,
      127,  129,   29,   29,   29,   29,   29,   29,   29,  158,
       29,   29,  141,   29,   29,   29,   29,  129,  141,   29,
       29,   29,   29,   29,   75,   75,   75,   75,   75,   75,
       75,  174,   75,   75,   89,   75,   75,   75,   75,  717,
      174,   75,   75,   75,   75,   75,  136,   91,   89,   91,
      136,   89,   89,  123,  123,  123,  124,  124,  126,   91,

      137,  183,  183,  133,   91,   91,  124,  124,  124,   91,
      138,  142,  154,  133,  137,  126,  142,  126,  133,  133,
      140,  145,  140,  719,  138,  176,  145,  138,  138,  154,
      182,  220,  140,  216,  145,  720,  182,  140,  140,  176,
      190,  190,  140,  207,  215,  215,  220,  238,  207,  236,
      216,  244,  250,  281,  190,  281,  207,  244,  236,  215,
      250,  238,  266,  266,  250,  279,  279,  282,  285,  290,
      291,  723,  285,  282,  296,  296,  291,  297,  297,  298,
      298,  299,  299,  215,  725,  266,  300,  300,  296,  290,
      307,  307,  726,  298,  317,  299,  308,  308,  319,  319,

      300,  350,  317,  350,  307,  354,  317,  323,  323,  354,
      308,  324,  324,  319,  330,  330,  335,  335,  341,  341,
      348,  348,  323,  366,  351,  359,  359,  367,  729,  330,
      351,  335,  513,  341,  730,  381,  381,  366,  736,  335,
      359,  382,  382,  367,  381,  387,  387,  737,  359,  513,
      381,  319,  391,  391,  387,  409,  409,  341,  419,  419,
      387,  420,  420,  409,  421,  421,  445,  391,  359,  422,
      422,  423,  423,  424,  424,  420,  425,  425,  739,  425,
      445,  425,  740,  422,  432,  432,  741,  424,  433,  433,
      446,  433,  553,  433,  434,  434,  435,  435,  432,  435,

      645,  435,  436,  436,  448,  448,  446,  553,  434,  449,
      449,  454,  454,  460,  460,  645,  436,  461,  461,  448,
      465,  465,  466,  466,  467,  467,  472,  472,  460,  474,
      474,  475,  475,  478,  478,  465,  742,  466,  492,  492,
      602,  472,  496,  496,  474,  498,  498,  579,  478,  579,
      496,  499,  499,  492,  743,  525,  525,  602,  527,  527,
      498,  744,  534,  534,  525,  532,  532,  538,  538,  492,
      525,  527,  540,  540,  532,  534,  569,  569,  570,  570,
      532,  745,  538,  571,  571,  746,  571,  747,  571,  578,
      578,  580,  580,  750,  580,  754,  580,  583,  583,  755,

      583,  756,  583,  578,  586,  586,  587,  587,  757,  587,
      758,  587,  598,  598,  600,  600,  601,  601,  586,  611,
      611,  615,  615,  616,  616,  617,  617,  598,  759,  600,
      618,  618,  622,  622,  623,  623,  615,  625,  625,  628,
      628,  629,  629,  630,  630,  618,  760,  622,  637,  637,
      643,  643,  644,  644,  628,  653,  653,  761,  630,  679,
      679,  685,  685,  637,  762,  643,  763,  600,  680,  680,
      686,  686,  764,  630,  630,  698,  698,  703,  703,  718,
      718,  680,  765,  686,  698,  724,  724,  727,  727,  770,
      698,  728,  728,  718,  738,  738,  748,  748,  772,  724,

      703,  727,  735,  735,  774,  735,  775,  735,  738,  749,
      749,  748,  751,  751,  752,  752,  753,  753,  766,  766,
      767,  767,  768,  768,  769,  769,  776,  751,  771,  771,
      780,  753,  781,  766,  773,  773,  782,  768,  777,  777,
      778,  778,  783,  771,  779,  779,  784,  785,  786,  787,
      787,  788,  788,  786,  791,  778,  789,  789,  790,  790,
      792,  793,  794,  794,  787,  796,  788,  795,  795,  797,
      798,  799,  800,  790,  801,  802,  803,  794,  804,  804,
      805,  805,  806,  807,  808,  794,  811,  812,  813,  814,
      815,  816,  817,  804,  818,  805,  819,  820,  821,  823,

      824,  818,  825,  825,  827,  828,  828,  829,  833,  804,
      830,  830,  832,  832,  834,  835,  836,  837,  838,  830,
      839,  840,  841,  841,  842,  830,  843,  844,  845,  845,
      846,  847,  847,  825,  848,  849,  850,  845,  851,  851,
      852,  853,  854,  845,  847,  855,  856,  858,  859,  841,
      860,  858,  861,  862,  863,  841,  864,  865,  865,  866,
      866,  867,  867,  868,  867,  874,  867,  869,  869,  876,
      870,  865,  870,  866,  877,  870,  871,  871,  873,  873,
      870,  869,  882,  870,  870,  883,  870,  884,  872,  872,
      871,  872,  873,  872,  875,  875,  880,  880,  881,  881,

      887,  881,  888,  881,  885,  885,  886,  886,  889,  890,
      880,  891,  891,  892,  893,  893,  894,  894,  896,  885,
      897,  886,  895,  895,  899,  898,  900,  901,  902,  902,
      903,  894,  898,  904,  905,  905,  906,  906,  907,  908,
      908,  909,  909,  902,  910,  910,  911,  911,  915,  905,
      916,  906,  912,  912,  908,  913,  913,  914,  914,  917,
      919,  911,  918,  918,  920,  905,  921,  912,  922,  923,
      923,  924,  914,  925,  926,  927,  927,  928,  928,  929,
      929,  932,  930,  930,  923,  931,  931,  933,  934,  937,
      927,  935,  935,  936,  936,  938,  923,  930,  939,  940,

      941,  943,  923,  942,  942,  943,  935,  944,  945,  946,
      946,  947,  947,  948,  949,  949,  950,  950,  942,  951,
      952,  953,  954,  955,  946,  956,  957,  958,  959,  949,
      960,  961,  962,  963,  964,  966,  967,  968,  968,  969,
      970,  971,  972,  972,  973,  974,  974,  975,  977,  978,
      979,  972,  980,  980,  981,  982,  984,  972,  974,  983,
      983,  985,  987,  988,  989,  989,  990,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001,  990,
     1002, 1003, 1004, 1005, 1006,  985, 1007, 1008, 1008, 1009,
     1009, 1011, 1009, 1012, 1009, 1010, 1010, 1013, 1010, 1016,

     1010, 1008, 1014, 1014, 1015, 1015, 1017, 1015, 1017, 1015,
     1018, 1019, 1020, 1021, 1022, 1024, 1014, 1025, 1020, 1023,
     1023, 1028, 1023, 1029, 1023, 1030, 1018, 1026, 1026, 1019,
     1027, 1027, 1032, 1027, 1033, 1027, 1034, 1031, 1031, 1035,
     1031, 1026, 1031, 1036, 1037, 1037, 1038, 1038, 1039, 1039,
     1040, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1046, 1037,
     1047, 1048, 1049, 1039, 1050, 1051, 1052, 1053, 1053, 1054,
     1054, 1055, 1055, 1056, 1057, 1058, 1058, 1059, 1059, 1060,
     1061, 1061, 1053, 1063, 1054, 1062, 1062, 1064, 1064, 1071,
     1058, 1065, 1065, 1066, 1066, 1061, 1067, 1067, 1068, 1068,

     1069, 1069, 1070, 1070, 1072, 1073, 1065, 1074, 1074, 1075,
     1076, 1077, 1077, 1068, 1078, 1078, 1079, 1070, 1080, 1081,
     1081, 1082, 1083, 1084, 1084, 1086, 1077, 1085, 1085, 1087,
     1088, 1089, 1089, 1090, 1081, 1091, 1092, 1093, 1094, 1095,
     1095, 1097, 1080, 1096, 1096, 1098, 1099, 1100, 1101, 1101,
     1102, 1103, 1103, 1104, 1095, 1105, 1106, 1107, 1107, 1109,
     1110, 1111, 1112, 1113, 1114, 1107, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1123, 1124, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1124,
     1136, 1137, 1138, 1139, 1139, 1140, 1141, 1143, 1144, 1145,

     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158,
     1155, 1157, 1157, 1159, 1157, 1162, 1157, 1164, 1155, 1163,
     1163, 1165, 1163, 1166, 1163, 1167, 1167, 1168, 1169, 1170,
     1171, 1172, 1173, 1174, 1175, 1176, 1180, 1179, 1179, 1167,
     1179, 1181, 1179, 1182, 1183, 1184, 1187, 1188, 1189, 1190,
     1190, 1191, 1191, 1192, 1192, 1193, 1193, 1194, 1195, 1196,
     1197, 1192, 1198, 1199, 1200, 1201, 1202, 1203, 1203, 1206,
     1193, 1204, 1204, 1205, 1205, 1207, 1208, 1208, 1209, 1210,
     1210, 1211, 1203, 1212, 1212, 1213, 1213, 1214, 1214, 1215,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1223,

     1224, 1225, 1214, 1226, 1227, 1227, 1228, 1228, 1229, 1230,
     1231, 1232, 1232, 1233, 1234, 1235, 1236, 1236, 1237, 1227,
     1238, 1239, 1239, 1240, 1241, 1242, 1232, 1243, 1244, 1245,
     1245, 1236, 1246, 1248, 1249, 1250, 1251, 1253, 1254, 1255,
     1256, 1257, 1258, 1260, 1245, 1261, 1262, 1263, 1264, 1265,
     1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1277, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1291, 1292, 1293, 1294, 1295, 1298, 1298, 1301, 1301,
     1302, 1302, 1303, 1303, 1304, 1305, 1305, 1306, 1307, 1307,
     1298, 1308, 1301, 1310, 1302, 1309, 1309, 1311, 1315, 1305,

     1312, 1312, 1307, 1316, 1317, 1318, 1319, 1320, 1320, 1321,
     1322, 1323, 1325, 1325, 1312, 1324, 1324, 1326, 1327, 1327,
     1328, 1329, 1320, 1312, 1330, 1331, 1332, 1307, 1333, 1336,
     1324, 1301, 1337, 1327, 1334, 1334, 1335, 1335, 1338, 1339,
     1340, 1340, 1342, 1312, 1341, 1341, 1343, 1344, 1345, 1334,
     1346, 1347, 1348, 1349, 1349, 1350, 1351, 1351, 1352, 1341,
     1353, 1354, 1354, 1355, 1355, 1356, 1356, 1358, 1349, 1357,
     1357, 1359, 1360, 1360, 1361, 1361, 1354, 1362, 1355, 1363,
     1364, 1365, 1366, 1368, 1357, 1367, 1367, 1360, 1369, 1369,
     1370, 1370, 1371, 1372, 1373, 1374, 1375, 1377, 1379, 1380,

     1367, 1381, 1381, 1369, 1383, 1383, 1384, 1385, 1386, 1386,
     1381, 1387, 1389, 1383, 1388, 1388, 1381, 1390, 1391, 1383,
     1392, 1393, 1394, 1386, 1396, 1397, 1398, 1399, 1400, 1388,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1412, 1413, 1413, 1416, 1413, 1418, 1413, 1414,
     1414, 1415, 1415, 1417, 1417, 1412, 1419, 1419, 1420, 1420,
     1421, 1422, 1422, 1414, 1423, 1423, 1424, 1425, 1426, 1427,
     1419, 1428, 1429, 1430, 1430, 1422, 1431, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1439, 1439, 1430, 1440, 1440,
     1441, 1442, 1443, 1444, 1444, 1445, 1446, 1446, 1447, 1447,

     1439, 1448, 1448, 1449, 1450, 1450, 1451, 1452, 1453, 1453,
     1458, 1446, 1454, 1454, 1455, 1455, 1448, 1456, 1456, 1450,
     1457, 1457, 1459, 1453, 1460, 1460, 1462, 1454, 1461, 1461,
     1463, 1464, 1456, 1465, 1466, 1457, 1467, 1468, 1468, 1460,
     1469, 1469, 1470, 1470, 1471, 1472, 1473, 1474, 1474, 1475,
     1475, 1479, 1468, 1476, 1476, 1469, 1477, 1477, 1478, 1478,
     1480, 1482, 1474, 1481, 1481, 1483, 1484, 1485, 1486, 1487,
     1487, 1477, 1488, 1488, 1489, 1490, 1490, 1491, 1492, 1493,
     1494, 1495, 1492, 1496, 1487, 1497, 1499, 1499, 1500, 1501,
     1501, 1502, 1502, 1503, 1505, 1499, 1504, 1504, 1507, 1507,

     1502, 1499, 1501, 1508, 1508, 1509, 1502, 1510, 1510, 1504,
     1511, 1511, 1512, 1507, 1514, 1515, 1517, 1518, 1519, 1521,
     1522, 1523, 1510, 1524, 1525, 1526, 1528, 1530, 1531, 1531,
     1532, 1533, 1533, 1534, 1534, 1535, 1534, 1536, 1534, 1530,
     1537, 1537, 1531, 1538, 1539, 1533, 1540, 1540, 1541, 1541,
     1542, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1548, 1549,
     1549, 1550, 1541, 1544, 1551, 1544, 1544, 1552, 1553, 1544,
     1554, 1548, 1555, 1556, 1557, 1557, 1558, 1559, 1560, 1561,
     1558, 1562, 1562, 1563, 1563, 1564, 1564, 1565, 1566, 1566,
     1567, 1567, 1568, 1569, 1569, 1570, 1570, 1577, 1563, 1571,

     1571, 1572, 1572, 1566, 1573, 1573, 1574, 1574, 1569, 1582,
     1570, 1575, 1575, 1576, 1576, 1578, 1578, 1579, 1579, 1573,
     1580, 1580, 1581, 1581, 1583, 1585, 1575, 1584, 1584, 1589,
     1578, 1586, 1586, 1587, 1587, 1580, 1590, 1581, 1588, 1588,
     1591, 1591, 1584, 1592, 1592, 1594, 1586, 1593, 1593, 1595,
     1596, 1580, 1597, 1598, 1600, 1591, 1599, 1599, 1601, 1601,
     1602, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
     1613, 1599, 1611, 1611, 1616, 1602, 1612, 1612, 1614, 1614,
     1615, 1615, 1618, 1618, 1619, 1620, 1620, 1621, 1622, 1612,
     1623, 1624, 1625, 1615, 1627, 1628, 1629, 1630, 1631, 1634,

     1635, 1636, 1636, 1637, 1637, 1638, 1639, 1639, 1640, 1640,
     1643, 1640, 1644, 1640, 1647, 1636, 1645, 1645, 1646, 1646,
     1639, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1659,
     1645, 1656, 1656, 1657, 1657, 1658, 1658, 1660, 1661, 1662,
     1663, 1664, 1665, 1666, 1667, 1656, 1668, 1669, 1671, 1658,
     1670, 1670, 1672, 1672, 1673, 1674, 1674, 1675, 1675, 1676,
     1676, 1677, 1677, 1678, 1678, 1679, 1679, 1680, 1680, 1684,
     1674, 1681, 1681, 1682, 1682, 1683, 1683, 1685, 1685, 1687,
     1679, 1688, 1680, 1686, 1686, 1689, 1689, 1691, 1682, 1690,
     1690, 1693, 1685, 1692, 1692, 1694, 1694, 1695, 1695, 1697,

     1689, 1696, 1696, 1698, 1699, 1700, 1701, 1701, 1702, 1702,
     1694, 1707, 1695, 1703, 1703, 1704, 1704, 1705, 1705, 1706,
     1706, 1701, 1708, 1702, 1709, 1710, 1711, 1712, 1713, 1714,
     1704, 1716, 1705, 1715, 1715, 1717, 1717, 1718, 1719, 1720,
     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1730, 1731,
     1732, 1732, 1733, 1734, 1734, 1735, 1734, 1736, 1734, 1737,
     1738, 1739, 1739, 1740, 1733, 1741, 1742, 1743, 1744, 1745,
     1746, 1747, 1748, 1749, 1749, 1750, 1750, 1751, 1751, 1752,
     1753, 1754, 1755, 1756, 1757, 1758, 1755, 1759, 1760, 1750,
     1761, 1762, 1763, 1764, 1765, 1765, 1766, 1766, 1767, 1767,

     1768, 1768, 1769, 1769, 1770, 1771, 1771, 1772, 1773, 1774,
     1774, 1766, 1775, 1776, 1777, 1777, 1778, 1778, 1779, 1779,
     1780, 1781, 1782, 1783, 1783, 1784, 1784, 1785, 1785, 1777,
     1786, 1786, 1787, 1787, 1788, 1788, 1789, 1789, 1783, 1791,
     1784, 1792, 1793, 1795, 1796, 1798, 1799, 1787, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1806, 1807, 1808, 1809, 1810,
     1810, 1811, 1811, 1812, 1813, 1816, 1817, 1818, 1819, 1806,
     1820, 1821, 1822, 1810, 1823, 1811, 1824, 1825, 1826, 1827,
     1827, 1828, 1829, 1829, 1830, 1831, 1832, 1833, 1834, 1834,
     1835, 1836, 1837, 1838, 1838, 1839, 1829, 1840, 1841, 1841,

     1842, 1842, 1843, 1834, 1844, 1845, 1846, 1847, 1838, 1848,
     1848, 1849, 1850, 1841, 1851, 1852, 1852, 1853, 1853, 1854,
     1854, 1855, 1855, 1856, 1857, 1858, 1861, 1862, 1863, 1864,
     1852, 1865, 1866, 1867, 1868, 1869, 1869, 1870, 1870, 1871,
     1872, 1873, 1874, 1874, 1875, 1875, 1876, 1876, 1877, 1877,
     1869, 1878, 1879, 1880, 1881, 1882, 1874, 1883, 1884, 1885,
     1876, 1886, 1887, 1888, 1888, 1889, 1890, 1891, 1891, 1892,
     1892, 1893, 1893, 1894, 1895, 1896, 1897, 1888, 1898, 1898,
     1900, 1891, 1901, 1892, 1902, 1894, 1899, 1899, 1903, 1903,
     1904, 1904, 1909, 1898, 1905, 1905, 1906, 1906, 1907, 1907,

     1908, 1908, 1910, 1903, 1911, 1912, 1913, 1914, 1915, 1905,
     1916, 1906, 1918, 1907, 1917, 1917, 1920, 1921, 1922, 1923,
     1923, 1924, 1925, 1927, 1928, 1929, 1929, 1931, 1933, 1933,
     1934, 1934, 1935, 1935, 1923, 1936, 1936, 1937, 1938, 1939,
     1939, 1940, 1941, 1942, 1943, 1944, 1935, 1945, 1945, 1936,
     1946, 1946, 1947, 1939, 1948, 1949, 1949, 1950, 1950, 1951,
     1951, 1945, 1952, 1953, 1954, 1954, 1955, 1956, 1956, 1949,
     1957, 1957, 1958, 1959, 1959, 1960, 1961, 1961, 1954, 1962,
     1962, 1956, 1963, 1963, 1964, 1964, 1965, 1965, 1959, 1966,
     1966, 1967, 1968, 1970, 1962, 1969, 1969, 1971, 1973, 1964,

     1972, 1972, 1974, 1974, 1977, 1978, 1979, 1979, 1980, 1980,
     1969, 1981, 1982, 1986, 1986, 1972, 1991, 1974, 1987, 1987,
     1994, 1979, 1988, 1988, 1989, 1989, 1995, 1986, 1990, 1990,
     1992, 1992, 1993, 1993, 1996, 1997, 1988, 1998, 1999, 1999,
     2000, 2003, 1990, 2004, 1992, 2001, 2001, 2002, 2002, 2005,
     2005, 2006, 2006, 2007, 2007, 2008, 2008, 2009, 2009, 2001,
     2009, 2016, 2009, 2005, 2010, 2010, 2017, 2007, 2027, 2008,
     2011, 2011, 2012, 2012, 2013, 2013, 2014, 2014, 2028, 2010,
     2015, 2015, 2018, 2018, 2030, 2011, 2019, 2019, 2031, 2013,
     2020, 2020, 2021, 2021, 2022, 2022, 2038, 2018, 2023, 2023,

     2024, 2024, 2025, 2025, 2039, 2020, 2041, 2021, 2042, 2022,
     2026, 2026, 2029, 2029, 2043, 2024, 2052, 2025, 2032, 2032,
     2033, 2033, 2034, 2034, 2035, 2035, 2036, 2036, 2037, 2037,
     2040, 2040, 2044, 2044, 2045, 2045, 2034, 2046, 2046, 2053,
     2036, 2047, 2047, 2059, 2040, 2070, 2044, 2048, 2048, 2049,
     2049, 2046, 2071, 2050, 2050, 2047, 2050, 2072, 2050, 2051,
     2051, 2077, 2051, 2049, 2051, 2054, 2054, 2055, 2055, 2056,
     2056, 2057, 2057, 2058, 2058, 2060, 2060, 2061, 2061, 2078,
     2054, 2062, 2062, 2063, 2063, 2081, 2057, 2064, 2064, 2082,
     2060, 2065, 2065, 2066, 2066, 2090, 2062, 2067, 2067, 2068,

     2068, 2091, 2064, 2069, 2069, 2074, 2074, 2075, 2075, 2076,
     2076, 2096, 2067, 2079, 2079, 2080, 2080, 2083, 2083, 2084,
     2084, 2075, 2085, 2085, 2086, 2086, 2103, 2079, 2060, 2087,
     2087, 2083, 2088, 2088, 2089, 2089, 2085, 2089, 2104, 2089,
     2094, 2094, 2105, 2087, 2095, 2095, 2097, 2097, 2098, 2098,
     2099, 2099, 2100, 2100, 2101, 2101, 2102, 2102, 2106, 2106,
     2107, 2097, 2108, 2109, 2109, 2099, 2110, 2111, 2112, 2112,
     2113, 2113, 2114, 2114, 2115, 2115, 2118, 2119, 2119, 2120,
     2120, 2122, 2112, 2121, 2121, 2123, 2124, 2125, 2126, 2127,
     2128, 2129, 2129, 2130, 2120, 2131, 2131, 2132, 2133, 2134,

     2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
     2145, 2146, 2147, 2148, 2148, 2149, 2149, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2156, 2157, 2157, 2161, 2148, 2162,
     2149, 2158, 2158, 2159, 2159, 2163, 2164, 2168, 2156, 2165,
     2165, 2166, 2166, 2167, 2167, 2169, 2158, 2170, 2170, 2171,
     2171, 2172, 2172, 2174, 2165, 2173, 2173, 2175, 2175, 2176,
     2176, 2170,  714, 2171, 2177, 2177, 2172, 2178, 2178, 2179,
     2179, 2175,  712, 2176, 2180, 2180, 2181, 2181, 2182, 2182,
      711, 2178, 2183, 2183, 2184, 2184, 2185, 2185, 2186, 2186,
     2181,  710, 2182, 2187, 2187, 2188, 2188, 2189, 2189,  709,

      708,  707, 2186, 2191, 2191, 2191, 2191, 2191, 2192, 2192,
     2192, 2192, 2192, 2193, 2193, 2193, 2193, 2193, 2194, 2194,
     2194, 2194, 2194, 2195, 2195, 2195, 2195, 2195, 2196, 2196,
     2196, 2196, 2196, 2197, 2197, 2197, 2197, 2197, 2198, 2198,
     2198, 2198, 2198, 2199, 2199, 2199, 2199, 2200,  706, 2200,
     2200, 2200, 2201, 2201,  705, 2201, 2201, 2202, 2202, 2202,
      704, 2202,  702,  701,  700,  696,  695,  694,  693,  692,
      691,  690,  689,  688,  687,  684,  682,  681,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,

      654,  652,  651,  650,  649,  648,  647,  646,  642,  641,
      640,  639,  638,  636,  635,  634,  633,  632,  631,  627,
      626,  624,  621,  620,  619,  614,  613,  612,  610,  609,
      608,  607,  606,  605,  604,  603,  599,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  585,  584,  582,
      581,  577,  576,  575,  574,  573,  572,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  552,  551,  550,  549,  548,  546,  545,  544,
      543,  542,  541,  537,  536,  535,  533,  531,  530,  529,
      526,  524,  523,  522,  521,  520,  519,  518,  517,  516,

      515,  514,  512,  511,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  497,  495,  494,  493,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  477,  476,  473,  471,  470,  469,  468,  464,  463,
      462,  459,  458,  457,  456,  455,  453,  452,  451,  450,
      447,  444,  443,  442,  441,  440,  439,  438,  437,  431,
      430,  429,  428,  427,  426,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  390,  389,  388,  386,  385,  384,  383,  380,  379,

      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  365,  364,  363,  362,  361,  360,  358,  357,  356,
      355,  353,  352,  349,  347,  346,  345,  344,  343,  342,
      340,  339,  338,  337,  336,  334,  333,  332,  331,  329,
      328,  327,  326,  325,  322,  321,  320,  318,  316,  315,
      314,  313,  312,  311,  310,  309,  306,  305,  304,  303,
      302,  301,  295,  294,  293,  292,  289,  288,  287,  286,
      284,  283,  280,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  265,  264,  263,  262,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  249,

      248,  247,  246,  245,  243,  242,  241,  240,  239,  237,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  219,  218,  217,  214,  213,
      212,  211,  210,  209,  208,  206,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      189,  188,  187,  186,  185,  181,  180,  179,  178,  177,
      175,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  157,  156,  155,  153,
      152,  151,  150,  149,  148,  147,  146,  144,  143,  139,
      135,  134,  132,  131,  125,  122,  120,  119,  118,  117,

      116,  115,  114,  113,  112,  111,  110,  109,  108,  107,
      106,  105,  104,  102,   97,   96,   94,   90,   86,   85,
       83,   82,   74,   67,   66,   65,   62,   61,   59,   57,
       56,   54,   53,   52,   48,   43,   40,   32,   31,   27,
       24,   22,   19,   14,   13,    8,    7,    6,    5,    4,
        3, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[293] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2013, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "../../../../OS/src/OSParsers/OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define OSRLPARSERDEBUG

#ifdef OSRLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "../../../../OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2064 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "../../../../OS/src/OSParsers/OSParseosrl.l"



#line 2320 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2191 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3452 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "../../../../OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 232 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 233 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 234 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 241 "../../../../OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 382 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 383 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 384 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 385 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* These elements are part of the OSgL schema and are used in both OSoL and OSrL parsers */
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 281:
#line 451 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 285:
#line 456 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 461 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 4189 "../../../../OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2191 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2191 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2190);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 478 "../../../../OS/src/OSParsers/OSParseosrl.l"





