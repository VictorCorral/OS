#line 2 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 372
#define YY_END_OF_BUFFER 373
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2684] =
    {   0,
        1,    1,  370,  370,  368,  368,  369,  369,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  373,  371,
        1,    2,  358,    2,  358,    6,  358,    5,  371,    4,
      358,  358,  370,  372,  368,  369,  359,  361,  362,  361,
      365,  366,  365,    1,  358,  358,    6,  358,    5,    0,
        4,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,    3,    6,    6,
      358,    7,    5,    0,    0,  364,  352,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,  358,  358,

      370,  368,  369,  359,    0,  367,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      354,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  138,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  308,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    6,  363,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  360,    0,  353,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  148,    0,  338,    0,    0,    0,
        0,  100,    0,    0,    0,  322,    0,    0,    0,    0,
        0,    0,    0,    0,  156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
      358,  358,  358,  358,  358,  358,  358,  358,  358,   28,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  353,    0,  355,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  339,    0,    0,    0,    0,    0,
        0,    0,    0,  323,    0,    0,    0,    0,    0,    0,
        0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  334,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  330,    0,    0,    0,    0,
        0,    0,    0,    0,  336,    0,  332,    0,    0,  338,
        0,    0,    0,    0,  100,    0,    0,    0,  322,    0,

        0,  340,    0,    0,  342,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  328,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  344,    0,    0,  196,    0,    0,    0,
        0,    0,    0,    0,    0,  358,  358,  358,  358,  305,
      358,  358,  358,  358,  358,   28,  358,   29,  358,   30,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  355,    0,  335,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      129,    0,    0,  331,    0,    0,    0,    0,  139,    0,

        0,    0,    0,  337,    0,  333,    0,    0,    0,  149,
      339,    0,    0,    0,    0,    0,  101,    0,    0,    0,
      323,    0,    0,  341,    0,    0,  343,    0,    0,    0,
      309,    0,    0,    0,    0,  157,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  329,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  345,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  221,    0,
        0,    0,  334,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  122,    0,  248,    0,    0,  330,    0,    0,
        0,    0,    0,    0,    0,  336,  332,    0,    0,    0,

        0,    0,    0,    0,  281,  152,    0,    0,    0,  340,
        0,  342,    0,    0,    0,  285,    0,    0,    0,    0,
        0,    0,   90,   89,  162,    0,  314,    0,    0,    0,
        0,    0,    0,  328,    0,    0,    0,    0,  266,    0,
        0,    0,  344,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  358,  358,  358,
      305,  358,  358,  358,  358,  358,   29,   30,  358,   51,
       52,  358,  358,  358,  358,  358,  358,  358,   71,   72,
      358,   75,   76,  358,  358,  358,  358,  335,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  129,    0,  331,    0,    0,    0,    0,    0,    0,
        0,  337,  333,    0,    0,  149,    0,    0,    0,    0,
      282,  101,    0,    0,    0,    0,  341,    0,  343,    0,
        0,  286,    0,    0,    0,    0,  157,    0,    0,    0,
       91,    0,    0,  315,    0,    0,    0,    0,    0,    0,
      329,    0,    0,    0,    0,    0,    0,    0,    0,  345,
        0,    0,    0,  197,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  221,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  246,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  150,  283,  281,    0,    0,    0,  242,
        0,    0,  316,  287,  285,    0,    0,    0,    0,  350,
        0,    0,    0,    0,  314,    0,  320,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  186,    0,    0,    0,
       96,    0,    0,    0,  310,    0,    0,    0,    0,    0,
        0,  216,  224,    0,    0,  358,  358,  358,  358,  358,
      358,  358,  358,   49,   50,  358,  358,  358,  358,  358,
       31,  358,  358,   69,   70,   73,   74,  358,   79,   80,
      358,  358,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,    0,    0,  249,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  282,    0,  153,    0,    0,    0,    0,    0,
      317,  286,    0,    0,    0,    0,    0,    0,   91,    0,
      163,    0,    0,  315,    0,  321,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  267,    0,    0,    0,
        0,    0,  197,    0,    0,    0,  311,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  108,  110,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  312,    0,    0,  140,    0,    0,
       94,  270,    0,  283,    0,    0,    0,  154,  316,  287,

        0,    0,  318,    0,    0,    0,    0,    0,    0,  320,
        0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
      289,    0,  326,    0,    0,    0,    0,   96,    0,    0,
        0,  310,    0,    0,  206,    0,    0,    0,    0,    0,
        0,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,   31,  358,  358,   77,   78,
      358,  358,  358,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,    0,  249,    0,  247,    0,    0,    0,
        0,    0,    0,  313,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  151,  153,    0,    0,    0,  243,    0,

      317,    0,  319,    0,    0,    0,  351,    0,    0,  163,
        0,    0,  321,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  290,    0,  327,    0,  267,    0,  187,    0,
        0,    0,    0,   97,    0,    0,    0,  311,    0,    0,
        0,    0,    0,    0,    0,  217,    0,    0,  279,    0,
      225,    0,    0,    0,    0,  346,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  312,    0,
      250,    0,    0,   94,    0,    0,    0,    0,    0,    0,
      301,    0,    0,  318,    0,  268,    0,    0,    0,    0,
        0,  348,    0,    0,    0,   98,    0,    0,  180,    0,

        0,  291,  289,    0,  326,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      356,  358,  358,  358,  358,  358,   59,   60,  358,  237,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,   67,   68,  358,  358,  358,  358,  358,
      358,   83,   84,  358,    0,    0,  347,    0,    0,  109,
        0,  111,    0,    0,    0,    0,    0,  247,    0,    0,
        0,    0,    0,    0,  313,    0,    0,    0,  141,    0,
        0,    0,   95,    0,    0,    0,  271,    0,  151,    0,
      302,    0,  243,    0,  155,  319,    0,    0,  351,    0,

        0,    0,    0,    0,  349,    0,    0,    0,    0,   99,
        0,    0,    0,    0,    0,  290,  327,    0,  187,    0,
        0,    0,   97,    0,    0,    0,    0,    0,    0,  207,
        0,    0,    0,    0,  217,    0,  279,  225,    0,    0,
        0,  346,    0,    0,  126,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  303,  301,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  348,    0,    0,    0,    0,    0,    0,    0,
        0,  291,    0,    0,    0,  190,    0,    0,    0,  200,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  358,

      358,  358,   43,   44,   57,   58,  237,  358,  358,   63,
       64,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,   65,   66,  358,   35,   36,  358,
      358,  358,   81,   82,  358,    0,  347,    0,  109,  111,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  251,  141,    0,    0,   95,    0,    0,
      271,    0,  302,    0,  155,    0,    0,  269,    0,    0,
        0,    0,    0,  349,    0,    0,    0,   99,    0,    0,
        0,    0,  181,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  207,    0,    0,    0,    0,    0,

        0,    0,  357,    0,    0,  106,    0,    0,    0,    0,
      244,    0,  274,    0,    0,    0,    0,    0,  136,    0,
        0,    0,    0,    0,    0,  303,    0,    0,    0,    0,
      158,    0,    0,    0,    0,    0,  276,    0,    0,  176,
        0,    0,    0,    0,    0,  188,  192,    0,    0,    0,
        0,    0,    0,    0,  214,    0,    0,  358,  358,  358,
      358,   41,   42,  358,   61,   62,  358,  358,  358,   10,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
       33,   34,  358,  358,  358,  358,    0,    0,    0,    0,
        0,    0,  127,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  251,    0,    0,    0,    0,    0,    0,
        0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  181,    0,    0,    0,    0,    0,  191,
        0,    0,    0,    0,  201,    0,    0,    0,    0,    0,
        0,    0,    0,  357,    0,  223,    0,    0,    0,    0,
        0,  124,    0,  130,    0,    0,    0,  142,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  174,    0,    0,    0,    0,    0,  324,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  358,
      358,  358,  358,  358,  358,  358,  358,    8,  358,   10,

      358,  358,   12,  358,  358,  358,   14,  358,  358,  358,
      358,  358,  358,  358,   25,  358,  358,  358,  358,  358,
      358,    0,    0,  107,    0,    0,    0,  127,    0,    0,
      245,    0,    0,  275,    0,    0,    0,    0,    0,    0,
      137,    0,    0,    0,    0,    0,    0,    0,    0,  159,
        0,    0,    0,    0,    0,    0,  277,    0,    0,    0,
      177,    0,    0,    0,    0,  325,    0,  189,  191,    0,
      193,    0,    0,  201,    0,    0,    0,    0,    0,    0,
      215,    0,    0,  223,    0,    0,    0,    0,    0,    0,
        0,  134,    0,    0,  293,    0,    0,  297,    0,    0,

      146,    0,  280,    0,    0,    0,  284,    0,  102,  164,
        0,    0,   92,    0,    0,    0,  184,    0,  324,    0,
        0,    0,    0,    0,  210,    0,  218,    0,  358,  358,
      358,  358,  358,   47,   48,  358,    8,  358,  358,   12,
      358,  358,   14,  358,  358,  358,  358,  358,  358,   25,
      358,  358,  358,  358,  358,  358,    0,  107,    0,    0,
        0,    0,  245,    0,  125,  275,    0,    0,  131,    0,
        0,    0,  294,  137,    0,  143,    0,  298,    0,    0,
        0,    0,    0,  159,    0,    0,    0,    0,    0,  277,
        0,    0,  175,  177,    0,    0,    0,  325,  189,  193,

        0,    0,    0,    0,    0,    0,    0,  215,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  295,  293,
        0,  299,  297,    0,    0,  144,  280,    0,    0,  284,
        0,    0,    0,    0,    0,    0,  182,    0,    0,    0,
        0,    0,  208,  212,    0,  358,  358,  358,  226,  358,
      358,  358,   45,   46,  358,  358,  358,  358,   13,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
       24,  358,  358,  358,  358,  358,  358,    0,    0,    0,
        0,    0,    0,  125,    0,  131,    0,    0,  135,  294,
      143,  298,    0,    0,    0,  147,    0,    0,    0,  103,

        0,    0,  165,    0,    0,    0,   93,    0,  175,    0,
        0,    0,  185,    0,    0,    0,    0,    0,    0,  211,
        0,    0,  219,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  295,    0,  299,    0,    0,    0,  260,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
        0,  358,  358,  226,  358,  358,   39,   40,  358,  358,
      358,   13,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,   24,  358,   27,  358,  358,  358,  358,  358,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
        0,  145,  147,    0,    0,  103,    0,  165,    0,    0,

       93,    0,    0,    0,  183,  185,    0,    0,    0,    0,
        0,  209,  211,    0,  213,  219,    0,  104,    0,    0,
        0,  118,    0,    0,  132,    0,    0,  262,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      358,  358,  358,  358,   37,   38,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,   27,
      358,  358,  358,  358,  358,  358,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  145,    0,  261,    0,    0,
        0,    0,    0,    0,  183,    0,    0,    0,    0,  205,
      209,  213,    0,    0,    0,    0,  120,  252,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  288,    0,
        0,    0,    0,  358,  232,  358,  231,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  233,  358,  358,  358,  358,    0,
      105,    0,    0,    0,    0,  119,    0,    0,    0,  133,
        0,  263,  261,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  205,    0,    0,  114,    0,    0,    0,    0,
        0,    0,    0,  170,    0,    0,  288,  194,    0,  202,
        0,  232,  231,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,   21,  358,  358,  358,

       26,  233,  358,  358,  358,  358,  358,  105,    0,    0,
        0,  119,    0,  121,    0,  253,  133,  263,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  112,  116,
        0,    0,    0,  300,    0,    0,    0,  172,  178,  198,
        0,  358,  230,  358,  229,  358,  358,  358,  358,  358,
       15,  358,  358,  358,  358,  358,   21,  358,  358,   26,
      358,  358,  358,   32,  358,  358,  358,    0,    0,  115,
        0,  121,  253,    0,    0,    0,    0,  171,    0,    0,
        0,  195,    0,    0,  203,    0,    0,    0,  300,    0,
        0,  166,    0,  230,  229,  358,  358,  358,    9,  358,

      358,   15,  358,  358,  358,  358,  358,  358,  358,   23,
      358,  358,   32,  358,  358,  358,   87,   88,    0,  113,
      115,    0,  117,    0,    0,    0,  171,    0,  173,    0,
      179,  195,    0,  199,  203,    0,    0,    0,  306,    0,
      168,  254,  358,  240,  241,    9,  358,   11,  358,  358,
      358,  358,   18,  358,  358,  358,   23,  358,  228,  358,
      227,  358,   55,   56,   85,   86,  113,  117,    0,    0,
        0,  167,    0,  173,  179,  199,    0,    0,    0,    0,
      238,  239,   11,  358,  358,  358,   18,  358,  358,  358,
       22,  228,  227,   53,   54,    0,  307,    0,  167,    0,

      169,    0,  255,    0,    0,    0,  358,  358,  358,  358,
      358,   22,  307,    0,  169,  255,    0,    0,    0,  358,
      358,  358,  358,  358,    0,    0,    0,    0,  358,  358,
      358,  358,  358,    0,    0,    0,    0,  358,  358,  358,
      358,  358,    0,    0,  292,    0,  296,  160,  358,  358,
      358,  358,  358,    0,  292,  296,  358,  358,  358,  358,
      358,    0,  161,  358,  304,  358,  358,  358,   19,  358,
       20,  161,  304,  358,  358,   17,   19,   20,  358,   16,
       17,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,   37,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2696] =
    {   0,
        0,   29, 4323, 4322, 4333, 4332, 4329, 4328,    0,    0,
        0,    0, 4319, 4318,   13,   17,    3,    5, 4332, 4341,
       57, 4326,  119, 4323,   39,  140, 4312,  178,  217,   25,
     4299, 4289,    0, 4341,    0,    0,    0, 4341, 4341, 4317,
     4341, 4341, 4308,    0,    0,  113,  181, 4307,  194,   44,
       53, 4294, 4284, 4283,   23, 4278,   84,   96, 4261,  108,
     4279, 4265,  109,  101, 4265, 4277, 4272, 4341,  138,  212,
      229, 4341,  148, 4304,  255, 4341, 4341, 4287,  170,  118,
      147,  143,  229, 4265, 4268,  189, 4257,  122,  241,  277,
      194,  233,  160,  276,  165,  162, 4270,  184, 4284, 4277,

        0,    0,    0,    0, 4288, 4341, 4248, 4246,  180, 4246,
     4243, 4260, 4238, 4258, 4248, 4246, 4245, 4247, 4233, 4254,
     4228, 4235, 4236, 4242,  216, 4241,  311,  329, 4277,  334,
     4260,  300,  243,  251,  302,  301, 4238, 4241,  312, 4230,
      198,  328,  323,  332,  324,  210,  338,  275,  326, 4243,
     4341, 4224, 4222, 4229,  364, 4239, 4220, 4223,  352, 4219,
     4217, 4213, 4233, 4228,  259, 4226, 4215, 4218, 4215, 4204,
      395,  116, 4241, 4221, 4223,  307,  402,  326, 4205, 4209,
     4209, 4214, 4341, 4206, 4206, 4208, 4197, 4198, 4207, 4193,
     4190, 4197, 4192, 4187, 4201, 4190, 4193,  296, 4185, 4204,

      363, 4185, 4190, 4182, 4190, 4195,  360,  391, 4341, 4194,
     4193, 4191,    1, 4193, 4182, 4182,  404, 4175, 4172, 4186,
     4188, 4192, 4197, 4175, 4181, 4178, 4179, 4163, 4161, 4184,
     4173, 4341,  408,  415,  419, 4160, 4158, 4165,  402, 4175,
     4156, 4159,  377, 4155, 4153, 4149, 4169,  428,  382, 4163,
     4152, 4155, 4152, 4141,  432,  386, 4178, 4158, 4160,  392,
      436,  387, 4142, 4146, 4146, 4151,  444, 4143, 4143, 4145,
     4134, 4135, 4144, 4130, 4127, 4134, 4129, 4124, 4138, 4127,
     4130,  392, 4122, 4141,  412, 4122, 4127, 4119, 4127, 4132,
      403,  452, 4115, 4151, 4117, 4118, 4116, 4122,  426, 4127,

     4136, 4109,  454, 4109, 4123, 4116, 4112, 4110, 4125, 4108,
      461,  464, 4115, 4114, 4341,  471,  473, 4113, 4097, 4098,
     4102,  477, 4109, 4108,  480,  482, 4094,  484, 4092,  487,
     4105, 4108,  428, 4106, 4102, 4097, 4093, 4099, 4084, 4097,
     4097, 4079, 4106, 4093, 4075,  490,  436, 4078, 4094,  234,
      449,  506, 4089, 4073,  454, 4091, 4077, 4086, 4068,  478,
      478, 4081,  511, 4062, 4066, 4067, 4087, 4062,  513,  515,
      517,  519,  523, 4077, 4056, 4079, 4078, 4085, 4072,  528,
      534, 4071, 4050, 4066,  538,  540,  544,  546, 4052, 4088,
     4054, 4055, 4053, 4059,  518, 4064, 4073,  550,  552, 4047,

     4061, 4054, 4050,  556,  559, 4048, 4063, 4046,  563,  568,
     4053, 4052,  572,  574,  576, 4051, 4035, 4036, 4040,  579,
     4047, 4046,  581,  584, 4032,  590, 4030,  592, 4043, 4046,
      597,  599,  548, 4044,  610, 4036, 4032, 4038, 4023, 4036,
     4036, 4018, 4045, 4032, 4014,  613,  559, 4017, 4033,  477,
      569,  618, 4028, 4012,  526, 4030, 4016, 4025, 4007,  621,
      626,  629, 4026, 4017, 4004, 4001, 4007, 4010, 4001,  594,
      570, 4009, 4013, 3998,  631,  634, 4012, 3998, 4011, 4015,
     4008, 4003, 4006,  637,  639,  642,  653, 4027, 3991,  655,
     3984, 4006, 4001,  658,  660, 4021, 3990, 4002,  662, 3993,

      668,  670, 4000,  674,  676, 3981,  678, 3979, 3989, 3992,
     3991, 3992, 3981,  680, 3975,  684, 3974, 3970, 3978, 3983,
     3984, 3978,  690,  696, 3966, 3980, 3981, 3965, 3962, 3960,
     3971, 3959,  700,  702, 3960, 3972,  618, 3962, 3963, 3959,
      688, 3968, 3968, 3966, 3969, 3968, 3950, 3952,  708,  710,
     3950, 3964, 3955, 3938, 3958,  712,  716,  718,  720,  723,
      725,  728, 3943, 3944, 3949, 3940, 3951, 3936,  735,  737,
      743,  745,  751, 3939, 3934,  753,  755,  758, 3952, 3943,
     3930, 3927, 3933, 3936, 3927,  715,  628, 3935, 3939,  760,
      762, 3924,  766,  768, 3938, 3924, 3937, 3941,  771, 3934,

     3929, 3932,  773,  776,  778,  782, 3953, 3917,  784,  786,
      789, 3910, 3932, 3927,  791,  794,  796, 3947, 3916, 3928,
      800, 3919,  802,  804, 3926,  807,  810, 3907,  812, 3905,
      814, 3915, 3918, 3917,  818,  820, 3918, 3907,  823, 3901,
      825, 3900, 3896, 3904, 3909, 3910, 3904,  828,  830, 3892,
     3906, 3907, 3891, 3888, 3886, 3897, 3885,  834,  836, 3886,
     3898,  841, 3888, 3889, 3885,  826, 3894,  846,  850,  820,
     3893, 3896,  853, 3884, 3889, 3893, 3888, 3887, 3890, 3889,
     3913, 3887, 4341, 3891, 3867, 3879,  473,  857, 3870, 3874,
     3877, 3880, 3866, 3866, 3860,  862,  864, 3859, 3875, 3870,

     3860, 3868,  866, 3892,  869, 4341, 3868, 3852, 3845,  873,
     3861,  876,  878,  883, 3887,  886, 3861, 3851, 3846, 3845,
     3842, 3852,  888, 4341,  860,  896,  900,  904, 3857, 3839,
     3852, 3836, 3853,  906, 3846, 3836, 3848, 3847, 4341, 3832,
     3830, 3848,  908, 3846, 3834,  546,  912, 3839, 3856, 3821,
     3849, 3833, 3836, 3821, 3815, 3832, 3835, 3816, 3834, 3816,
      914, 3828, 3818, 3815, 3814, 3824,  916,  920,  923, 3860,
     3857, 3833, 3820, 3809, 3832,  929,  619,  931, 3854, 3851,
      937, 3852, 3849,  944,  946, 3813, 3812,  952, 3803, 3803,
     3802, 3751, 3750, 3753, 3744, 3752, 3725,  954, 3715,  956,

     3701,  959,  711,  961, 3691,    4,   82,  126,  147,  203,
      265,  963,  965,  291,  326,  967,  325,  363,  418,  972,
      974,  976,  978,  458,  483,  495,  980,  546,  982,  984,
      988,  990,  563,  615,  633,  635,  994,  637,  650,  996,
     1000, 1004, 1006, 1008, 1012,  660,  649,  691,  724,  760,
     1014,  772,  779,  808,  815, 1016,  806,  813,  835, 1022,
      843,  837, 1024, 1028,  870, 1032,  852,  878,  860,  893,
      889,  895,  885, 1036,  906,  889,  909,  933,  955,  951,
      951,  949,  965,  983,  971, 1013,  983,  985, 4341,  987,
      993, 1007,  989,  994, 1048,  999,  995, 1011, 1016, 1013,

     1007, 1001, 1018, 4341, 1057, 1059, 1052, 1022, 1044, 4341,
     1025, 1066, 1068, 1070, 1073, 1066, 1076, 1038, 1029, 4341,
     1036, 1021, 1043, 1034, 1087, 1089, 1092, 1030, 1072, 1041,
     1049, 1057, 1048, 1077, 1101, 1106, 4341, 1067, 1048, 1072,
     1111, 1056, 1077, 1114, 1117, 1096, 1070, 1073, 1090, 1070,
     1077, 1095, 4341, 1087, 1081, 1077, 1082, 1072, 1137, 1078,
     1080, 1099, 1120, 4341, 4341, 1100, 1142, 1091, 1089, 1146,
     1148, 1114, 1115, 4341, 4341, 4341, 4341, 1154, 1150, 1153,
     1161, 1124, 1133, 1124, 1119, 1114, 1115, 1132, 1115, 1154,
     1117, 1173, 1176, 1123, 1179, 1181, 1183, 1131, 1137, 1151,

     1134, 1139, 1191, 1146, 1140, 1156, 1161, 1159, 1153, 1147,
     1164, 1203, 1207, 1209, 1211, 1165, 1193, 1214, 1176, 1219,
     1221, 1225, 1227, 1177, 1173, 1230, 1188, 1172, 1235, 1237,
     1239, 1201, 1193, 1246, 1248, 1250, 1189, 1231, 1200, 1208,
     1216, 1207, 1236, 1260, 1265, 1267, 1269, 1271, 1226, 1207,
     1237, 1276, 1278, 1221, 1245, 1283, 1287, 1262, 1239, 1241,
     1259, 1239, 1246, 1296, 1300, 1302, 1264, 1258, 1251, 1307,
     1265, 4341, 4341, 1263, 1256, 1269, 1261, 1280, 1278, 1264,
     1276, 1297, 1268, 1324, 1329, 1270, 1277, 4341, 1277, 1297,
     1334, 4341, 1296, 1337, 1296, 1341, 1296, 4341, 1344, 1346,

     1299, 1351, 1357, 1313, 1299, 1298, 1323, 1306, 1314, 1362,
     1367, 1324, 1329, 1330, 1371, 1324, 1325, 1319, 1376, 1363,
     1379, 1386, 1383, 1331, 1344, 1333, 1336, 1393, 1346, 1339,
     1349, 1399, 1353, 1366, 4341, 1378, 1360, 1357, 1353, 1357,
     1371, 1368, 1359, 1414, 1416, 1418, 1424, 1376, 1426, 1375,
     1414, 1435, 1450, 1443, 1382, 1458, 1376, 1388, 4341, 4341,
     1460, 1462, 1411, 1392, 1468, 1408, 1470, 1472, 1407, 1400,
     1420, 1413, 1475, 1441, 1478, 1480, 1488, 1442, 1429, 1442,
     1466, 1436, 1492, 1498, 1438, 1442, 1500, 1447, 1467, 1504,
     1508, 1466, 1510, 1512, 1516, 1521, 1467, 1526, 1528, 1530,

     1532, 1537, 1539, 1482, 1466, 1542, 1546, 1477, 1508, 1548,
     1496, 1504, 1553, 1555, 1518, 1519, 1520, 1561, 1514, 1515,
     1509, 1566, 1568, 1571, 1573, 1525, 1577, 1582, 1579, 1540,
     1529, 1533, 1589, 1591, 1544, 1538, 1548, 1598, 1551, 1564,
     1602, 1578, 1560, 1557, 1610, 1612, 1553, 1614, 1618, 1620,
     1622, 1563, 1584, 1590, 1627, 1630, 1577, 1593, 1580, 1587,
     1593, 1583, 1584, 1620, 1592, 1593, 1589, 1601, 1646, 1608,
     4341, 1605, 1595, 1651, 1606, 1599, 1628, 1601, 1657, 1644,
     1660, 1622, 1627, 1664, 1614, 4341, 1628, 1614, 1614, 1618,
     1676, 1678, 1635, 1625, 1642, 1682, 1648, 1655, 4341, 1629,

     1632, 1688, 1692, 1681, 1694, 1646, 1649, 1644, 1655, 1659,
     1657, 1651, 1662, 1650, 1650, 1656, 1677, 1656, 1658, 1672,
     1659, 1655, 1664, 1716, 1718, 1724, 1717, 1717, 1731, 1733,
     1676, 1735, 1737, 1688, 1689, 1694, 1705, 1696, 1710, 1698,
     1706, 1715, 1752, 1753, 1753, 1761, 1763, 1704, 1714, 1729,
     1771, 1767, 1768, 1740, 1742, 1779, 1781, 1728, 1784, 1786,
     1788, 1790, 1752, 1739, 1746, 1752, 1742, 1800, 1743, 1782,
     1755, 1755, 1751, 1763, 1808, 1770, 1811, 1813, 1815, 1773,
     1763, 1819, 1821, 1776, 1769, 1829, 1831, 1798, 1835, 1837,
     1839, 1787, 1841, 1845, 1847, 1849, 1780, 1853, 1855, 1803,

     1796, 1801, 1802, 1861, 1863, 1829, 1811, 1828, 1869, 1871,
     1837, 1844, 1877, 1818, 1824, 1880, 1882, 1835, 1886, 1840,
     1835, 1846, 1893, 1850, 1851, 1845, 1856, 1844, 1900, 1902,
     1848, 1854, 1875, 1854, 1908, 1857, 1911, 1913, 1876, 1917,
     1866, 1920, 1862, 1905, 4341, 1889, 1867, 1871, 1874, 1882,
     1875, 1896, 1898, 1885, 1882, 1887, 1888, 1899, 1904, 1905,
     1902, 1943, 1945, 1938, 1900, 1901, 1930, 1897, 1908, 1906,
     1899, 1915, 1956, 1920, 1906, 1930, 1914, 1940, 1920, 1915,
     1915, 1967, 1915, 1915, 1932, 4341, 1935, 1924, 1937, 4341,
     1926, 1946, 1930, 1939, 1929, 1921, 1938, 1934, 4341, 1964,

     1935, 1988, 1983, 1985, 4341, 4341, 1996, 1943, 1998, 1991,
     1995, 1954, 1955, 2005, 1951, 1949, 1969, 1961, 1966, 1969,
     1966, 1977, 1967, 1963, 4341, 4341, 2017, 2018, 2018, 1980,
     1981, 1988, 4341, 4341, 1982, 1975, 2029, 1971, 2032, 2034,
     2018, 2038, 2004, 1982, 1986, 1989, 1998, 1991, 2010, 2012,
     1999, 1996, 2051, 2054, 2056, 2008, 2009, 2060, 2022, 2027,
     2064, 2031, 2068, 2022, 2071, 2053, 2074, 2076, 2024, 2035,
     2033, 2026, 2042, 2083, 2046, 2032, 2056, 2090, 2040, 2069,
     2049, 2094, 2096, 2048, 2048, 2045, 2061, 2102, 2066, 2055,
     2068, 2107, 2060, 2080, 2112, 2066, 2075, 2065, 2058, 2075,

     2071, 2123, 2125, 2127, 2066, 4341, 2100, 2086, 2091, 2079,
     4341, 2079, 4341, 2094, 2081, 2118, 2082, 2090, 4341, 2091,
     2088, 2095, 2089, 2097, 2098, 2147, 2102, 2110, 2111, 2093,
     4341, 2103, 2099, 2111, 2103, 2117, 4341, 2103, 2119, 4341,
     2113, 2115, 2106, 2113, 2164, 4341, 4341, 2113, 2127, 2115,
     2119, 2133, 2131, 2136, 4341, 2124, 2136, 2126, 2137, 2122,
     2124, 4341, 4341, 2180, 4341, 4341, 2142, 2183, 2185, 2187,
     2141, 2190, 2144, 2146, 2195, 2158, 2144, 2148, 2163, 2205,
     4341, 4341, 2156, 2149, 2155, 2171, 2157, 2214, 2184, 2172,
     2177, 2221, 2223, 2165, 2225, 2166, 2230, 2187, 2178, 2215,

     2179, 2189, 2241, 2243, 2190, 2193, 2199, 2193, 2202, 2211,
     2193, 2253, 2257, 2205, 2204, 2216, 2208, 2222, 2263, 2210,
     2226, 2267, 2222, 2270, 2227, 2218, 2275, 2279, 2283, 2285,
     2287, 2224, 2241, 2291, 2295, 2236, 2243, 2260, 2259, 2264,
     2303, 2252, 2267, 2307, 2309, 2311, 2281, 2281, 2261, 2268,
     2257, 4341, 2271, 4341, 2270, 2281, 2322, 4341, 2325, 2287,
     2272, 2289, 2332, 2286, 2286, 2338, 2285, 2292, 2288, 2293,
     2316, 2292, 2310, 4341, 2304, 2309, 2295, 2295, 2354, 2356,
     2304, 2327, 2311, 2339, 2321, 2323, 2325, 2322, 2325, 2327,
     2308, 2332, 2330, 2371, 2373, 2326, 2379, 2381, 2322, 2383,

     2346, 2387, 2389, 2337, 2348, 2394, 2396, 2360, 2346, 2345,
     2362, 2348, 2350, 2405, 2409, 2368, 2375, 2365, 2392, 2370,
     2377, 2384, 2417, 2420, 2389, 2369, 2376, 2425, 2367, 2428,
     2430, 2433, 2435, 2437, 2391, 2440, 2392, 2404, 2445, 2451,
     2453, 2456, 2458, 2407, 2393, 2421, 2413, 2412, 2464, 2467,
     2420, 2416, 2422, 2446, 2422, 2476, 2480, 2442, 2482, 2484,
     2486, 2444, 2449, 2435, 2492, 2494, 2500, 2502, 2504, 2508,
     2510, 2448, 2467, 2512, 2458, 2493, 2476, 2478, 2480, 2519,
     2521, 2482, 2485, 2526, 2484, 2502, 2484, 2481, 2513, 2495,
     2480, 4341, 2537, 2524, 2540, 2542, 2529, 2547, 2496, 2495,

     4341, 2554, 2558, 2512, 2501, 2561, 2563, 2512, 2535, 4341,
     2518, 2512, 4341, 2517, 2510, 2533, 4341, 2520, 2574, 2541,
     2523, 2543, 2544, 2528, 4341, 2542, 4341, 2563, 2566, 2585,
     2534, 2588, 2590, 2589, 2589, 2542, 2600, 2545, 2550, 2604,
     2606, 2559, 2609, 2556, 2594, 2569, 2561, 2579, 2616, 2618,
     2562, 2586, 2582, 2583, 2572, 2576, 2588, 2633, 2608, 2590,
     2587, 2619, 2640, 2642, 2644, 2646, 2608, 2649, 2651, 2597,
     2654, 2658, 2660, 2662, 2665, 2667, 2670, 2674, 2607, 2618,
     2676, 2623, 2626, 2681, 2683, 2686, 2639, 2633, 2692, 2694,
     2637, 2696, 2699, 2702, 2643, 2666, 2708, 2712, 2715, 2717,

     2670, 2655, 2683, 2684, 2668, 2724, 2682, 2726, 2728, 2710,
     2683, 2676, 2682, 2703, 2682, 2700, 2688, 2689, 2740, 2744,
     2733, 2746, 2748, 2741, 2696, 4341, 2752, 2714, 2701, 2758,
     2716, 2710, 2732, 2708, 2709, 2729, 4341, 2728, 2712, 2732,
     2714, 2717, 4341, 4341, 2724, 2722, 2723, 2774, 2776, 2723,
     2779, 2781, 4341, 4341, 2760, 2749, 2751, 2789, 2791, 2754,
     2751, 2746, 2760, 2758, 2749, 2764, 2751, 2774, 2749, 2805,
     2807, 2809, 2764, 2772, 2760, 2774, 2771, 2768, 2761, 2767,
     2789, 2768, 2786, 2824, 2777, 2827, 2780, 2830, 2832, 2834,
     2836, 2838, 2785, 2841, 2843, 2846, 2794, 2809, 2850, 2852,

     2804, 2859, 2861, 2825, 2802, 2863, 2866, 2813, 2869, 2835,
     2872, 2875, 2879, 2822, 2845, 2827, 2830, 2884, 2888, 2891,
     2893, 2895, 2897, 2839, 2860, 2853, 2862, 2853, 2845, 2851,
     2852, 2854, 2911, 2874, 2914, 2875, 2863, 2869, 4341, 2865,
     2873, 2881, 2871, 2891, 2869, 2885, 2882, 2874, 2884, 4341,
     2889, 2883, 2873, 2932, 2916, 2935, 2934, 2934, 2900, 2898,
     2888, 2944, 2911, 2891, 2900, 2905, 2897, 2905, 2900, 2905,
     2899, 2900, 2957, 2959, 2961, 2923, 2911, 2911, 2943, 2910,
     2928, 2921, 2931, 2921, 2914, 2920, 2921, 2922, 2978, 2926,
     2981, 2983, 2985, 2987, 2935, 2990, 2945, 2993, 2955, 2946,

     2998, 2968, 2946, 3003, 3005, 3007, 2965, 2957, 2967, 3012,
     3014, 3016, 3019, 3021, 3023, 3025, 2988, 4341, 2993, 2991,
     2996, 4341, 2997, 2980, 4341, 2995, 2993, 4341, 3000, 2985,
     2984, 2987, 2986, 2999, 3000, 3045, 2997, 2993, 2999, 3002,
     3051, 3053, 3005, 3006, 4341, 4341, 3026, 3009, 3015, 3008,
     3022, 3009, 3024, 3010, 3012, 3025, 3016, 3016, 3018, 3073,
     3021, 3076, 3023, 3040, 3044, 3041, 3082, 3047, 3045, 3050,
     3087, 3053, 3037, 3092, 3094, 3098, 3100, 3103, 3042, 3049,
     3052, 3052, 3066, 3067, 3112, 3064, 3061, 3067, 3118, 3120,
     3122, 3124, 3078, 3087, 3089, 3091, 4341, 4341, 3076, 3084,

     3092, 3090, 3080, 3080, 3082, 3090, 3089, 3140, 3142, 3095,
     3105, 3097, 3107, 3148, 3150, 3152, 3156, 3107, 3100, 3119,
     3105, 3111, 3143, 3110, 3110, 3129, 3121, 3114, 3134, 3171,
     3122, 3134, 3175, 3177, 3179, 3163, 3123, 3135, 3130, 3186,
     3194, 3148, 3151, 3154, 3196, 3198, 3202, 3204, 3206, 3208,
     3212, 3214, 3222, 3156, 3155, 3160, 3163, 3172, 3174, 3176,
     3186, 3179, 3229, 3191, 3179, 4341, 3193, 3196, 3195, 3236,
     3188, 3195, 3193, 4341, 3201, 3193, 3243, 4341, 3206, 4341,
     3197, 3247, 3249, 3252, 3254, 3201, 3203, 3209, 3200, 3260,
     3209, 3208, 3209, 3221, 3230, 3269, 3271, 3217, 3221, 3276,

     3278, 3280, 3232, 3234, 3285, 3247, 3288, 3291, 3240, 3294,
     3256, 3297, 3300, 3303, 3305, 3307, 3310, 3312, 3264, 3272,
     3270, 3318, 3281, 3273, 3323, 3286, 3326, 3279, 4341, 4341,
     3276, 3312, 3331, 3334, 3287, 3287, 3284, 4341, 4341, 4341,
     3285, 3342, 3344, 3347, 3349, 3351, 3353, 3301, 3306, 3358,
     3362, 3324, 3320, 3312, 3318, 3322, 3370, 3318, 3374, 3376,
     3331, 3321, 3380, 3382, 3384, 3386, 3390, 3396, 3401, 3403,
     3405, 3407, 3409, 3340, 3342, 3344, 3412, 3414, 3417, 3421,
     3423, 3425, 3428, 3430, 3433, 3364, 3391, 3384, 3439, 3387,
     3393, 3390, 3392, 3447, 3449, 3451, 3453, 3459, 3461, 3463,

     3402, 3466, 3413, 3411, 3469, 3422, 3432, 3420, 3475, 3478,
     3480, 3484, 3486, 3490, 3492, 3500, 3479, 3483, 3506, 3508,
     3510, 3512, 3514, 3442, 3450, 3516, 3518, 3522, 3524, 3528,
     3532, 3534, 3538, 3540, 3544, 3448, 3469, 3486, 4341, 3499,
     4341, 4341, 3546, 3533, 3537, 3554, 3557, 3559, 3508, 3501,
     3512, 3561, 3563, 3526, 3535, 3566, 3568, 3572, 3576, 3578,
     3581, 3584, 3571, 3578, 4341, 4341, 3590, 3593, 3595, 3557,
     3597, 3599, 3601, 3603, 3605, 3607, 3613, 3554, 3575, 3560,
     4341, 4341, 3617, 3565, 3565, 3591, 3622, 3584, 3585, 3626,
     3629, 3631, 3633, 4341, 4341, 3635, 3637, 3584, 3641, 3643,

     3645, 3647, 3651, 3605, 3598, 3618, 3601, 3626, 3617, 3605,
     3606, 3663, 3665, 3625, 3667, 3669, 3621, 3622, 3618, 3630,
     3635, 3622, 3621, 3622, 3624, 3631, 3628, 3626, 3633, 3630,
     3629, 3639, 3640, 3632, 3689, 3691, 3639, 3645, 3639, 3649,
     3642, 3643, 3645, 3700, 3702, 3707, 3709, 4341, 3651, 3664,
     3657, 3659, 3660, 3716, 3718, 3720, 3723, 3670, 3672, 3727,
     3729, 3732, 3734, 3738, 3744, 3682, 3748, 3750, 3753, 3755,
     3757, 3759, 3765, 3767, 3770, 3772, 3774, 3776, 3778, 3782,
     3785, 3787, 4341, 3794, 3799, 3804, 3809, 3814, 3819, 3824,
     3829, 3834, 3838, 3843, 3848

    } ;

static yyconst flex_int16_t yy_def[2696] =
    {   0,
     2684, 2684, 2685, 2685, 2686, 2686, 2687, 2687, 2688, 2688,
     2688, 2688, 2689, 2689, 2690, 2690, 2691, 2691, 2683, 2683,
     2683, 2683,   21, 2683,   23,   23,   23,   23, 2683, 2683,
       23,   23, 2692, 2683, 2693, 2694, 2695, 2683, 2683, 2683,
     2683, 2683, 2683,   21,   23,   23,   23,   23,   23,   29,
     2683,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2683,   23,   23,
       23, 2683,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,   23,

     2692, 2693, 2694, 2695, 2683, 2683,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683,   23, 2683,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2683,
     2683,   23,   23,   23,   23,   23,   23,   23, 2683, 2683,
       23, 2683, 2683,   23,   23,   23,   23, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23,   23, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23,   23, 2683, 2683, 2683, 2683,   23, 2683, 2683,
       23,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2683, 2683,
       23,   23,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683,   23,   23,   23,   23,   23, 2683, 2683,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2683, 2683,   23,   23,   23,   23,   23,
       23, 2683, 2683,   23, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,

       23,   23, 2683, 2683, 2683, 2683,   23,   23,   23, 2683,
     2683,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2683, 2683,   23, 2683, 2683,   23,
       23,   23, 2683, 2683,   23, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,   23,   23,
       23, 2683, 2683,   23, 2683, 2683,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2683, 2683,   23,   23,   23,   23, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,   23,
       23,   23,   23, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23, 2683, 2683,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683,   23,   23,   23,   23,   23, 2683, 2683,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
       23,   23,   23,   23, 2683, 2683,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683,   23, 2683, 2683,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683,   23,   23,   23,   23,
       23,   23, 2683, 2683, 2683, 2683, 2683, 2683, 2683,   23,
       23,   23,   23,   23, 2683, 2683, 2683, 2683,   23,   23,
       23,   23,   23, 2683, 2683, 2683, 2683,   23,   23,   23,
       23,   23, 2683, 2683, 2683, 2683, 2683, 2683,   23,   23,
       23,   23,   23, 2683, 2683, 2683,   23,   23,   23,   23,
       23, 2683, 2683,   23,   23,   23,   23,   23,   23,   23,
       23, 2683,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,    0, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683

    } ;

static yyconst flex_int16_t yy_nxt[4405] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   42,   25,   26,
       27,   28,   28,   28,   29,   39,   30,   20, 2683,   39,
       43,   40,   43, 2683,   31,   40,   98,   98,   32,   20,
       21,   21,   20,   22,  364,   24, 2683,   25,   26,   27,
       28,   28,   28,   29, 2683,   30,   20, 2683,   47, 1002,
       49,   49,   49,   31,   98,   98,  365,   32,   44,   44,
      108, 2683,   45,   52,   45,   46,   47,   48,   49,   49,
       49,   50,   45,   51,  109,   45,   45,   45,   45,   45,
       45,   52,   45,   45,   45,   53,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   54,   55,   56,   57,   45,

       45,   45,   58,   45,   45,   45,   59,   60,   61,   45,
       45,   62,   63,   64,   65,   66,   67,   45,   45,   45,
       45,   45,   47, 1003,   49,   49,   49,   45,   45,   45,
       45,   45,   45, 2683,  111, 2683,  113,   52,  122,   69,
       69,   69,   69,   45,  112,  116,  114,   45,  120,   73,
       73,   70,   70,   70,  121,  157,  318,   45,   45,   45,
       45,   71,  123, 1004,   45,  117,  158,  176,   45,   45,
       45,  319,  177,   45,   45,   45,   45,   45,   45,   73,
       73,   71,   69,   69,  161,   98,   98,   47,  162,   49,
       49,   49,   70,   70,   70,   73,   73, 1005,  159,   71,

      163,  193,   71,   47,  160,   49,   49,   49,  152,  153,
      203,  194,  205,   69,   69,   71,  204,  206,  154,   71,
       74,  212,   71,   70,   70,   70,  155,   75,  156,  170,
      213,  171,  186,   71,   76,   71,  127,  127,   77,  172,
      128,  128,  128,  260,  173,  174,  187,   78,  261,  188,
      189,  277, 1006,   71,   79,   80,   81,   82,   83,   84,
       85,  278,   86,   87,  229,   88,   89,   90,   91,   92,
      230,   93,   94,   95,   96,   97,  130,  164,  178,  165,
      241,  190,  179,  166,  191,  131,  180,  192,  529,  167,
      530,  242,  132,  133,  134,  135,  136,  137,  138,  309,

      139,  140,  243,  141,  142,  143,  144,  145,  244,  146,
      147,  148,  149,  150,  181,  195,  310,  196,  182, 1007,
      287,  197,  128,  128,  128,  183,  288,  198,  184,  199,
       69,   69,  200,  201,  185,  233,  233,  202,  236,  237,
      128,  128,  128,  245,  347, 1008,  323,  246,  238,  248,
      234,  249,  254,  348,  255,  250,  239,  324,  240,  247,
      265,  251,  256, 1009,  266,  262, 1010,  257,  258,  263,
      270,  267,  274,  264,  268,  275,  289,  279,  276,  280,
      269,  290,  327,  281,  271,  295,  328,  272,  273,  282,
      296,  283,   69,   69,  284,  285,  316,  316,  297,  286,

      301,  351,  302,  325,  325,  369,  369,  303,  359,  233,
      233,  317,  352, 1011,  360,  353,  385,  385,  326,  370,
      386,  386,  407,  391,  234,  397,  416,  398,  392,  404,
      404,  421,  399,  414,  414,  387,  393,  423,  423,  408,
      447,  417,  422,  425,  405,  431,  431,  426,  415,  448,
      451,  459,  424,  461,  461,  475,  475,  460,  469, 1012,
      432,  452,  484,  484,  453,  486,  486,  470,  462,  406,
      476,  471,  316,  316,  490,  490,  509,  485,  495,  495,
      487,  325,  325,  499,  499,  501,  501,  317,  504,  504,
      510,  523,  523,  525,  526,  537,  326, 1016,  531,  538,

      502,  496,  543,  505,  532,  546,  524,  533,  533,  544,
      891,  547,  549,  549,  369,  369,  556,  556,  557,  557,
      559,  559,  534,  545,  561,  561,  550,  892,  370,  569,
      569,  654,  558,  655,  560,  571,  571, 1017,  562,  385,
      385,  386,  386,  570,  506,  576,  576,  577,  577,  572,
      585,  590,  590,  593,  593, 1018,  387,  404,  404,  586,
      599,  599,  578,  587,  603,  603,  591,  662,  594,  605,
      605,  663,  405,  609,  609,  414,  414,  611,  611,  604,
      616,  616,  423,  423,  606,  621,  621,  942,  610, 1019,
      415,  623,  623,  626,  626,  617,  632,  424,  431,  431,

      631,  631,  943,  618, 1023,  592,  624,  681,  627,  683,
      633,  635,  635,  432,  648,  648,  650,  651,  656,  658,
      658,  682,  668,  668,  657,  684,  636,  461,  461,  649,
      673,  673,  475,  475,  659,  688,  688,  669,  484,  484,
      696,  696,  462,  486,  486,  670,  972,  476,  973,  628,
      746,  637,  671,  485,  697,  697,  490,  490,  487,  703,
      703,  495,  495,  499,  499, 1024,  672,  798,  704,  501,
      501,  710,  710,  747,  705,  504,  504,  712,  712,  714,
      714,  723,  723,  799,  502,  726,  726, 1025,  715, 1026,
      505,  523,  523, 1027,  716, 1028,  724,  734,  734, 1037,

      727,  533,  533,  743,  743, 1038,  524,  751,  752,  549,
      549,  761,  761,  556,  556,  753,  534,  557,  557,  767,
      767,  559,  559,  550,  768,  768,  561,  561,  796,  769,
      769,  558,  770, 1039,  771,  560,  569,  569,  778,  778,
      562,  779,  797,  780,  571,  571,  781,  781,  999,  782,
      570,  783,  784,  784,  576,  576,  577,  577,  572,  788,
      788,  590,  590,  802,  802, 1000,  785,  593,  593,  804,
      804,  578,  599,  599,  603,  603,  591,  812,  812,  605,
      605, 1040,  594,  813,  813,  609,  609,  816,  816,  604,
      611,  611,  820,  820,  606,  616,  616,  822,  822, 1041,

      610,  621,  621,  623,  623,  827,  827,  821,  626,  626,
      617,  829,  829,  831,  831,  631,  631, 1042,  624,  635,
      635,  837,  837,  627,  840,  840,  843,  843,  832,  648,
      648,  851,  851, 1043,  636,  658,  658,  860,  860,  841,
      875,  844,  863,  863,  649,  870,  871,  668,  668, 1044,
      659,  874,  874,  872,  673,  673, 1045,  864,  688,  688,
      876, 1048,  669,  696,  696,  697,  697,  703,  703, 1049,
      906,  906, 1050,  865,  710,  710,  704,  712,  712,  912,
      912, 1051,  705,  907,  714,  714, 1052,  915,  915,  723,
      723,  923,  924,  715,  913, 1058,  866,  726,  726,  716,

      916,  925,  925, 1059,  724,  926,  926,  734,  734,  743,
      743, 1054,  727,  944,  944,  761,  761,  767,  767, 1060,
      927,  768,  768, 1061,  769,  769, 1055,  770,  945,  771,
      970,  970,  778,  778, 1062,  779, 1063,  780,  781,  781,
     1064,  782, 1065,  783,  971,  784,  784,  978,  978, 1066,
      979, 1067,  980,  788,  788,  992,  992,  995,  995,  785,
      802,  802,  804,  804,  812,  812,  813,  813,  816,  816,
      993, 1068,  996,  820,  820, 1013, 1013,  822,  822, 1014,
     1014,  827,  827,  829,  829, 1020, 1020, 1069,  821,  831,
      831, 1022, 1022, 1070, 1015,  837,  837,  840,  840, 1071,

     1021, 1029, 1029, 1072,  832, 1030, 1030,  843,  843, 1034,
     1034,  997,  841, 1035, 1035,  851,  851, 1046, 1046, 1073,
     1031, 1074,  844,  860,  860,  863,  863, 1075, 1036, 1053,
     1053, 1076, 1047, 1056, 1056, 1032, 1033,  874,  874, 1077,
      864, 1078, 1079, 1080, 1081, 1082, 1083, 1086, 1057, 1084,
     1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1094,
      906,  906, 1095, 1096, 1085, 1097, 1098,  912,  912, 1099,
     1099, 1100, 1100,  907,  915,  915, 1101, 1102, 1102, 1104,
     1105, 1106,  913, 1107, 1108, 1109, 1111,  916,  925,  925,
      926,  926, 1103, 1110, 1110, 1112, 1113, 1114, 1115, 1116,

     1125, 1117, 1119, 1119, 1126,  927, 1118, 1122, 1122, 1127,
     1130, 1120, 1128, 1128, 1131,  944,  944, 1121, 1132, 1132,
     1133, 1134, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
      945, 1142, 1143, 1144, 1147, 1129, 1148, 1124, 1145, 1145,
     1149, 1150, 1151, 1152, 1152, 1154, 1155,  970,  970, 1156,
     1156, 1157, 1146, 1158, 1159,  978,  978, 1153,  979, 1160,
      980,  971, 1161, 1161, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172,  992,  992, 1162, 1173, 1173, 1174,
      995,  995, 1175, 1175, 1176, 1176, 1178, 1179, 1180,  993,
     1181, 1182, 1183, 1183, 1185,  996, 1186, 1187, 1188, 1177,

     1189, 1190, 1191, 1192, 1193, 1193, 1196, 1184, 1013, 1013,
     1014, 1014, 1195, 1195, 1197, 1198, 1198, 1200, 1204, 1194,
     1020, 1020, 1201, 1201, 1205, 1015, 1022, 1022, 1202, 1202,
     1199, 1206, 1206, 1208, 1209, 1021, 1029, 1029, 1030, 1030,
     1210, 1210, 1211, 1203, 1212, 1214, 1207, 1034, 1034, 1035,
     1035, 1213, 1213, 1031, 1215, 1216, 1217, 1218, 1219, 1230,
     1220, 1222, 1222, 1231, 1036, 1221, 1224, 1224, 1046, 1046,
     1227, 1227, 1228, 1228, 1232, 1236, 1223, 1233, 1233, 1053,
     1053, 1225, 1237, 1047, 1056, 1056, 1239, 1229, 1238, 1238,
     1240, 1241, 1234, 1242, 1243, 1244, 1226, 1245, 1245, 1057,

     1235, 1248, 1248, 1250, 1250, 1252, 1253, 1254, 1255, 1255,
     1257, 1258, 1246, 1259, 1260, 1261, 1249, 1262, 1251, 1263,
     1264, 1265, 1266, 1256, 1268, 1084, 1084, 1270, 1247, 1267,
     1269, 1269, 1271, 1272, 1273, 1274, 1274, 1277, 1094, 1094,
     1085, 1278, 1279, 1279, 1282, 1099, 1099, 1100, 1100, 1283,
     1285, 1280, 1102, 1102, 1286, 1275, 1287, 1281, 1284, 1284,
     1288, 1289, 1290, 1110, 1110, 1293, 1276, 1103, 1291, 1291,
     1294, 1295, 1296, 1296, 1299, 1300, 1301, 1119, 1119, 1302,
     1303, 1303, 1306, 1292, 1305, 1305, 1120, 1122, 1122, 1307,
     1308, 1309, 1121, 1304, 1128, 1128, 1310, 1311, 1312, 1297,

     1132, 1132, 1123, 1313, 1314, 1298, 1315, 1317, 1318, 1319,
     1316, 1320, 1321, 1322, 1323, 1324, 1324, 1145, 1145, 1326,
     1326, 1331, 1327, 1334, 1328, 1329, 1329, 1332, 1332, 1325,
     1348, 1146, 1349, 1335, 1350, 1336, 1152, 1152, 1337, 1330,
     1354, 1333, 1338, 1339, 1346, 1346, 1340, 1341, 1355, 1342,
     1153, 1343, 1343, 1358, 1344, 1363, 1345, 1364, 1347, 1156,
     1156, 1161, 1161, 1351, 1351, 1365, 1352, 1366, 1353, 1356,
     1356, 1359, 1359, 1361, 1361, 1162, 1173, 1173, 1367, 1175,
     1175, 1176, 1176, 1369, 1357, 1370, 1360, 1371, 1362, 1368,
     1368, 1372, 1374, 1183, 1183, 1376, 1177, 1377, 1373, 1375,

     1375, 1378, 1378, 1380, 1381, 1382, 1382, 1388, 1184, 1386,
     1386, 1193, 1193, 1389, 1389, 1392, 1379, 1195, 1195, 1397,
     1383, 1398, 1390, 1390, 1387, 1384, 1194, 1198, 1198, 1393,
     1393, 1394, 1394, 1201, 1201, 1400, 1385, 1391, 1202, 1202,
     1396, 1396, 1199, 1206, 1206, 1401, 1395, 1399, 1399, 1210,
     1210, 1402, 1403, 1203, 1213, 1213, 1404, 1404, 1207, 1406,
     1407, 1408, 1409, 1409, 1413, 1414, 1415, 1222, 1222, 1416,
     1416, 1405, 1224, 1224, 1417, 1417, 1418, 1410, 1227, 1227,
     1419, 1419, 1223, 1228, 1228, 1420, 1421, 1225, 1422, 1411,
     1233, 1233, 1423, 1423, 1424, 1412, 1425, 1426, 1229, 1238,

     1238, 1427, 1428, 1429, 1429, 1234, 1431, 1433, 1434, 1436,
     1432, 1245, 1245, 1435, 1435, 1248, 1248, 1439, 1430, 1437,
     1437, 1250, 1250, 1438, 1438, 1440, 1246, 1441, 1255, 1255,
     1249, 1442, 1442, 1443, 1444, 1445, 1251, 1446, 1447, 1448,
     1449, 1450, 1451, 1256, 1452, 1453, 1454, 1269, 1269, 1455,
     1456, 1457, 1274, 1274, 1458, 1459, 1460, 1461, 1279, 1279,
     1462, 1463, 1463, 1465, 1466, 1284, 1284, 1280, 1467, 1468,
     1469, 1470, 1474, 1281, 1464, 1471, 1472, 1291, 1291, 1473,
     1473, 1475, 1476, 1296, 1296, 1477, 1478, 1480, 1481, 1482,
     1482, 1483, 1292, 1303, 1303, 1305, 1305, 1484, 1485, 1486,

     1487, 1488, 1489, 1490, 1491, 1492, 1304, 1493, 1494, 1495,
     1496, 1479, 1497, 1498, 1499, 1500, 1501, 1324, 1324, 1502,
     1502, 1505, 1503, 1506, 1504, 1326, 1326, 1508, 1327, 1512,
     1328, 1325, 1329, 1329, 1507, 1507, 1332, 1332, 1509, 1509,
     1513, 1510, 1514, 1511, 1515, 1516, 1330, 1518, 1519, 1521,
     1333, 1523, 1524, 1343, 1343, 1522, 1344, 1525, 1345, 1526,
     1530, 1517, 1346, 1346, 1527, 1527, 1520, 1528, 1531, 1529,
     1532, 1533, 1351, 1351, 1534, 1352, 1347, 1353, 1535, 1536,
     1356, 1356, 1537, 1537, 1538, 1359, 1359, 1539, 1539, 1361,
     1361, 1540, 1540, 1541, 1542, 1357, 1543, 1544, 1545, 1546,

     1360, 1368, 1368, 1547, 1362, 1548, 1549, 1550, 1551, 1375,
     1375, 1552, 1553, 1553, 1378, 1378, 1555, 1555, 1556, 1557,
     1382, 1382, 1558, 1558, 1559, 1560, 1562, 1554, 1564, 1379,
     1386, 1386, 1561, 1561, 1566, 1383, 1389, 1389, 1390, 1390,
     1563, 1563, 1393, 1393, 1569, 1387, 1394, 1394, 1565, 1565,
     1396, 1396, 1570, 1391, 1567, 1567, 1399, 1399, 1571, 1572,
     1573, 1395, 1404, 1404, 1574, 1574, 1575, 1576, 1577, 1568,
     1409, 1409, 1578, 1578, 1579, 1580, 1584, 1405, 1582, 1582,
     1585, 1416, 1416, 1417, 1417, 1410, 1586, 1419, 1419, 1587,
     1588, 1589, 1590, 1583, 1423, 1423, 1591, 1592, 1593, 1594,

     1581, 1429, 1429, 1595, 1595, 1596, 1597, 1598, 1599, 1435,
     1435, 1600, 1437, 1437, 1438, 1438, 1430, 1601, 1602, 1602,
     1605, 1442, 1442, 1606, 1607, 1608, 1610, 1611, 1612, 1613,
     1614, 1615, 1609, 1603, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1625, 1626, 1626, 1463, 1463, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1634, 1635, 1473, 1473, 1464,
     1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1482, 1482,
     1644, 1645, 1604, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1653, 1654, 1655, 1656, 1657, 1658, 1661, 1662, 1659, 1502,
     1502, 1663, 1503, 1664, 1504, 1665, 1660, 1507, 1507, 1509,

     1509, 1666, 1510, 1667, 1511, 1668, 1669, 1669, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1527, 1527,
     1670, 1528, 1681, 1529, 1682, 1683, 1684, 1685, 1686, 1687,
     1537, 1537, 1688, 1539, 1539, 1540, 1540, 1689, 1690, 1692,
     1692, 1694, 1695, 1696, 1697, 1691, 1698, 1699, 1700, 1701,
     1702, 1703, 1553, 1553, 1693, 1704, 1704, 1555, 1555, 1705,
     1706, 1558, 1558, 1707, 1708, 1561, 1561, 1554, 1709, 1563,
     1563, 1710, 1565, 1565, 1711, 1567, 1567, 1712, 1712, 1713,
     1714, 1715, 1716, 1717, 1574, 1574, 1718, 1719, 1720, 1721,
     1568, 1578, 1578, 1722, 1723, 1582, 1582, 1724, 1724, 1725,

     1726, 1727, 1728, 1729, 1729, 1731, 1732, 1733, 1734, 1734,
     1583, 1736, 1737, 1595, 1595, 1738, 1739, 1740, 1730, 1741,
     1742, 1743, 1747, 1735, 1602, 1602, 1744, 1744, 1745, 1745,
     1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1603,
     1757, 1758, 1759, 1746, 1760, 1761, 1762, 1763, 1626, 1626,
     1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
     1774, 1775, 1776, 1777, 1778, 1779, 1779, 1781, 1782, 1783,
     1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
     1780, 1794, 1794, 1796, 1797, 1797, 1669, 1669, 1800, 1800,
     1801, 1802, 1802, 1804, 1805, 1795, 1806, 1806, 1798, 1809,

     1670, 1810, 1811, 1812, 1813, 1803, 1814, 1814, 1818, 1819,
     1807, 1820, 1821, 1822, 1825, 1823, 1823, 1826, 1827, 1829,
     1815, 1832, 1692, 1692, 1828, 1828, 1830, 1830, 1835, 1816,
     1824, 1833, 1833, 1836, 1837, 1838, 1808, 1693, 1799, 1839,
     1842, 1831, 1840, 1840, 1704, 1704, 1834, 1843, 1844, 1845,
     1817, 1846, 1847, 1848, 1712, 1712, 1851, 1841, 1849, 1849,
     1852, 1853, 1854, 1855, 1856, 1856, 1858, 1859, 1860, 1860,
     1862, 1724, 1724, 1850, 1863, 1864, 1865, 1865, 1872, 1857,
     1867, 1867, 1873, 1861, 1729, 1729, 1869, 1869, 1870, 1870,
     1875, 1866, 1734, 1734, 1876, 1868, 1874, 1874, 1877, 1730,

     1878, 1879, 1882, 1871, 1880, 1880, 1883, 1735, 1744, 1744,
     1745, 1745, 1884, 1884, 1885, 1886, 1887, 1888, 1889, 1881,
     1890, 1891, 1892, 1893, 1893, 1746, 1896, 1896, 1899, 1900,
     1901, 1904, 1894, 1902, 1902, 1897, 1905, 1908, 1895, 1906,
     1906, 1898, 1909, 1910, 1911, 1912, 1913, 1914, 1903, 1915,
     1916, 1917, 1918, 1920, 1907, 1779, 1779, 1919, 1919, 1921,
     1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
     1780, 1932, 1794, 1794, 1933, 1933, 1936, 1934, 1938, 1935,
     1797, 1797, 1937, 1937, 1800, 1800, 1795, 1939, 1802, 1802,
     1940, 1940, 1941, 1942, 1798, 1806, 1806, 1943, 1943, 1944,

     1945, 1946, 1803, 1947, 1948, 1949, 1814, 1814, 1951, 1807,
     1950, 1950, 1952, 1953, 1954, 1955, 1956, 1957, 1823, 1823,
     1815, 1958, 1958, 1959, 1960, 1961, 1828, 1828, 1962, 1830,
     1830, 1963, 1963, 1824, 1964, 1964, 1833, 1833, 1966, 1966,
     1967, 1968, 1968, 1970, 1831, 1971, 1972, 1972, 1979, 1965,
     1980, 1834, 1840, 1840, 1974, 1974, 1969, 1975, 1975, 1977,
     1977, 1973, 1981, 1982, 1983, 1849, 1849, 1841, 1984, 1984,
     1985, 1986, 1976, 1987, 1978, 1988, 1989, 1856, 1856, 1991,
     1850, 1990, 1990, 1992, 1992, 1860, 1860, 1994, 1994, 1995,
     1996, 1997, 1857, 1865, 1865, 1998, 1998, 2001, 1993, 2002,

     1861, 1867, 1867, 1999, 1999, 1869, 1869, 2003, 1866, 1870,
     1870, 2000, 2000, 1874, 1874, 2004, 1868, 2005, 2006, 2007,
     1880, 1880, 2008, 2008, 1871, 2009, 2010, 1884, 1884, 2011,
     2012, 2014, 2015, 2016, 2013, 1881, 2017, 2018, 1893, 1893,
     2019, 2020, 2020, 1896, 1896, 2022, 2025, 1894, 2023, 2023,
     2026, 2028, 1897, 1895, 2021, 1902, 1902, 2029, 1898, 2027,
     2027, 2024, 1906, 1906, 2030, 2030, 2031, 2032, 2033, 2034,
     1903, 2035, 2036, 2037, 2038, 1919, 1919, 1907, 2039, 2040,
     2041, 2042, 2043, 2044, 2045, 2046, 2048, 2048, 2050, 2051,
     2051, 1933, 1933, 2053, 1934, 2054, 1935, 2047, 2055, 2056,

     2049, 1937, 1937, 2052, 2057, 1940, 1940, 2058, 2058, 2060,
     1943, 1943, 2061, 2062, 2067, 2068, 2069, 2070, 2070, 1950,
     1950, 2059, 2072, 2063, 2073, 2064, 2065, 2074, 2075, 2066,
     2076, 2071, 2077, 2078, 1958, 1958, 2079, 2081, 2082, 2083,
     2080, 1963, 1963, 1964, 1964, 2084, 2084, 1966, 1966, 2085,
     1968, 1968, 2086, 2086, 2087, 2088, 2088, 2093, 1965, 1972,
     1972, 2090, 2090, 1974, 1974, 1969, 1975, 1975, 2091, 2091,
     2089, 1977, 1977, 2094, 1973, 2092, 2092, 2095, 2095, 2097,
     2098, 1976, 1984, 1984, 2099, 2099, 1978, 2102, 2102, 2104,
     2105, 2108, 2096, 2106, 2106, 1990, 1990, 1992, 1992, 2100,

     2109, 2109, 2103, 1994, 1994, 2110, 2111, 2114, 2107, 2112,
     2112, 2115, 1993, 1998, 1998, 2101, 1999, 1999, 2000, 2000,
     2116, 2117, 2118, 2121, 2113, 2119, 2119, 2008, 2008, 2122,
     2122, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
     2120, 2133, 2133, 2134, 2123, 2020, 2020, 2135, 2135, 2023,
     2023, 2136, 2137, 2027, 2027, 2138, 2139, 2140, 2021, 2030,
     2030, 2141, 2024, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
     2149, 2150, 2151, 2152, 2153, 2048, 2048, 2154, 2154, 2155,
     2051, 2051, 2156, 2156, 2159, 2157, 2160, 2158, 2161, 2049,
     2058, 2058, 2162, 2162, 2052, 2163, 2164, 2165, 2166, 2167,

     2168, 2169, 2170, 2171, 2059, 2172, 2070, 2070, 2173, 2173,
     2174, 2174, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2071, 2184, 2185, 2186, 2175, 2084, 2084, 2187, 2086, 2086,
     2188, 2088, 2088, 2189, 2189, 2090, 2090, 2091, 2091, 2092,
     2092, 2190, 2191, 2191, 2095, 2095, 2089, 2193, 2193, 2194,
     2195, 2099, 2099, 2196, 2196, 2197, 2199, 2192, 2200, 2096,
     2102, 2102, 2198, 2198, 2106, 2106, 2100, 2201, 2201, 2202,
     2109, 2109, 2203, 2204, 2204, 2103, 2112, 2112, 2207, 2107,
     2206, 2206, 2208, 2209, 2210, 2211, 2211, 2217, 2205, 2119,
     2119, 2113, 2213, 2213, 2214, 2214, 2122, 2122, 2216, 2216,

     2212, 2218, 2219, 2220, 2120, 2221, 2222, 2223, 2224, 2215,
     2225, 2123, 2133, 2133, 2226, 2135, 2135, 2227, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2241, 2242, 2154, 2154, 2243, 2156, 2156, 2245, 2157,
     2246, 2158, 2247, 2248, 2249, 2162, 2162, 2244, 2250, 2251,
     2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2173, 2173,
     2174, 2174, 2260, 2260, 2261, 2262, 2263, 2264, 2266, 2267,
     2268, 2265, 2269, 2270, 2175, 2271, 2272, 2273, 2274, 2189,
     2189, 2275, 2191, 2191, 2276, 2276, 2193, 2193, 2277, 2277,
     2279, 2196, 2196, 2280, 2198, 2198, 2281, 2192, 2282, 2201,

     2201, 2283, 2284, 2278, 2204, 2204, 2285, 2285, 2206, 2206,
     2286, 2287, 2288, 2289, 2289, 2211, 2211, 2291, 2291, 2205,
     2213, 2213, 2214, 2214, 2292, 2292, 2216, 2216, 2290, 2293,
     2212, 2294, 2295, 2296, 2297, 2298, 2299, 2215, 2300, 2301,
     2302, 2303, 2304, 2305, 2306, 2307, 2308, 2308, 2310, 2311,
     2312, 2313, 2314, 2314, 2316, 2316, 2318, 2319, 2320, 2321,
     2322, 2309, 2323, 2324, 2325, 2326, 2315, 2327, 2317, 2328,
     2329, 2330, 2331, 2332, 2260, 2260, 2333, 2334, 2334, 2336,
     2337, 2338, 2339, 2340, 2340, 2342, 2343, 2344, 2345, 2345,
     2347, 2335, 2348, 2349, 2349, 2351, 2351, 2354, 2341, 2276,

     2276, 2277, 2277, 2346, 2353, 2353, 2355, 2356, 2350, 2357,
     2352, 2358, 2359, 2285, 2285, 2360, 2278, 2361, 2362, 2289,
     2289, 2363, 2363, 2291, 2291, 2292, 2292, 2364, 2365, 2366,
     2367, 2368, 2369, 2370, 2290, 2371, 2372, 2373, 2374, 2375,
     2376, 2308, 2308, 2377, 2377, 2378, 2379, 2380, 2381, 2314,
     2314, 2382, 2382, 2316, 2316, 2384, 2309, 2383, 2383, 2385,
     2386, 2387, 2388, 2315, 2389, 2390, 2391, 2317, 2392, 2393,
     2394, 2395, 2396, 2396, 2398, 2399, 2400, 2400, 2334, 2334,
     2402, 2402, 2403, 2405, 2406, 2407, 2397, 2340, 2340, 2409,
     2401, 2410, 2335, 2411, 2404, 2408, 2408, 2345, 2345, 2412,

     2412, 2419, 2341, 2413, 2413, 2415, 2415, 2349, 2349, 2417,
     2417, 2420, 2346, 2351, 2351, 2418, 2418, 2421, 2414, 2422,
     2416, 2423, 2350, 2353, 2353, 2424, 2425, 2426, 2352, 2427,
     2363, 2363, 2428, 2429, 2430, 2431, 2432, 2433, 2433, 2435,
     2436, 2437, 2438, 2439, 2377, 2377, 2440, 2441, 2382, 2382,
     2383, 2383, 2434, 2442, 2442, 2444, 2444, 2446, 2447, 2448,
     2449, 2450, 2450, 2452, 2453, 2454, 2455, 2443, 2456, 2445,
     2396, 2396, 2457, 2457, 2458, 2451, 2459, 2400, 2400, 2460,
     2460, 2402, 2402, 2461, 2397, 2462, 2463, 2463, 2465, 2466,
     2466, 2401, 2408, 2408, 2468, 2469, 2469, 2471, 2412, 2412,

     2464, 2413, 2413, 2467, 2472, 2472, 2415, 2415, 2473, 2473,
     2470, 2417, 2417, 2418, 2418, 2474, 2414, 2475, 2476, 2477,
     2477, 2416, 2479, 2480, 2481, 2481, 2483, 2484, 2484, 2486,
     2487, 2488, 2433, 2433, 2478, 2489, 2489, 2490, 2491, 2482,
     2492, 2493, 2485, 2442, 2442, 2494, 2494, 2434, 2444, 2444,
     2495, 2495, 2496, 2496, 2498, 2498, 2500, 2443, 2501, 2450,
     2450, 2503, 2445, 2502, 2502, 2504, 2497, 2505, 2499, 2506,
     2507, 2457, 2457, 2451, 2508, 2509, 2509, 2460, 2460, 2511,
     2512, 2463, 2463, 2513, 2513, 2514, 2514, 2466, 2466, 2510,
     2524, 2516, 2516, 2525, 2517, 2464, 2518, 2519, 2519, 2515,

     2526, 2467, 2469, 2469, 2521, 2521, 2522, 2522, 2472, 2472,
     2473, 2473, 2520, 2477, 2477, 2527, 2527, 2470, 2528, 2528,
     2536, 2523, 2530, 2530, 2481, 2481, 2532, 2532, 2478, 2533,
     2533, 2484, 2484, 2529, 2535, 2535, 2537, 2531, 2538, 2482,
     2489, 2489, 2539, 2540, 2534, 2541, 2485, 2542, 2494, 2494,
     2495, 2495, 2496, 2496, 2543, 2543, 2549, 2544, 2550, 2545,
     2498, 2498, 2546, 2546, 2547, 2547, 2497, 2502, 2502, 2551,
     2552, 2552, 2554, 2555, 2499, 2556, 2509, 2509, 2548, 2557,
     2557, 2558, 2558, 2565, 2553, 2560, 2560, 2513, 2513, 2566,
     2510, 2514, 2514, 2562, 2562, 2559, 2563, 2569, 2564, 2561,

     2570, 2516, 2516, 2577, 2517, 2515, 2518, 2519, 2519, 2567,
     2567, 2521, 2521, 2522, 2522, 2568, 2568, 2571, 2571, 2527,
     2527, 2578, 2520, 2528, 2528, 2574, 2574, 2579, 2523, 2530,
     2530, 2580, 2572, 2575, 2575, 2532, 2532, 2581, 2529, 2533,
     2533, 2576, 2576, 2582, 2531, 2535, 2535, 2543, 2543, 2584,
     2544, 2585, 2545, 2586, 2534, 2546, 2546, 2588, 2547, 2547,
     2583, 2583, 2552, 2552, 2587, 2587, 2589, 2590, 2590, 2557,
     2557, 2573, 2548, 2558, 2558, 2594, 2553, 2592, 2592, 2560,
     2560, 2591, 2593, 2593, 2595, 2562, 2562, 2559, 2563, 2598,
     2564, 2567, 2567, 2561, 2568, 2568, 2596, 2596, 2571, 2571,

     2599, 2599, 2600, 2600, 2574, 2574, 2575, 2575, 2576, 2576,
     2604, 2597, 2605, 2572, 2602, 2602, 2606, 2601, 2583, 2583,
     2607, 2608, 2609, 2587, 2587, 2610, 2611, 2590, 2590, 2603,
     2612, 2612, 2592, 2592, 2593, 2593, 2596, 2596, 2613, 2613,
     2614, 2591, 2599, 2599, 2600, 2600, 2615, 2615, 2602, 2602,
     2617, 2597, 2616, 2616, 2618, 2619, 2620, 2621, 2622, 2601,
     2623, 2624, 2625, 2603, 2612, 2612, 2613, 2613, 2615, 2615,
     2616, 2616, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633,
     2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643,
     2644, 2644, 2646, 2646, 2648, 2649, 2650, 2651, 2652, 2653,

     2654, 2644, 2644, 2655, 2655, 2645, 2657, 2647, 2646, 2646,
     2656, 2656, 2658, 2659, 2660, 2661, 2645, 2662, 2662, 2655,
     2655, 2656, 2656, 2647, 2664, 2664, 2666, 2667, 2668, 2668,
     2670, 2670, 2663, 2662, 2662, 2672, 2672, 2674, 2665, 2664,
     2664, 1001, 2669,  998, 2671, 2673, 2673,  994, 2663, 2675,
     2675, 2668, 2668, 2665, 2677, 2677, 2670, 2670, 2678, 2678,
     2672, 2672,  991, 2676,  990, 2669, 2673, 2673, 2679, 2679,
     2671, 2675, 2675, 2681, 2681, 2677, 2677, 2678, 2678, 2679,
     2679,  989, 2680, 2682, 2682, 2676, 2681, 2681, 2682, 2682,
      988,  987,  986, 2680,   23,   23,   23,   23,   23,   33,

       33,   33,   33,   33,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   34,   34,   34,   34,   34,   37,
       37,   37,   37,   37,   38,   38,   38,   38,   38,   41,
       41,   41,   41,   41,  101,  101,  101,  101,  102,  985,
      102,  102,  102,  103,  103,  984,  103,  103,  104,  104,
      104,  983,  104,  982,  981,  977,  976,  975,  974,  969,
      968,  967,  966,  965,  964,  963,  962,  961,  960,  959,
      958,  957,  956,  955,  954,  953,  952,  951,  950,  949,
      948,  947,  946,  941,  940,  939,  938,  937,  936,  935,
      934,  933,  932,  931,  930,  929,  928,  922,  921,  920,

      919,  918,  917,  914,  911,  910,  909,  908,  905,  904,
      903,  902,  901,  900,  899,  898,  897,  896,  895,  894,
      893,  890,  889,  888,  887,  886,  885,  884,  883,  882,
      881,  880,  879,  878,  877,  873,  869,  868,  867,  862,
      861,  859,  858,  857,  856,  855,  854,  853,  852,  850,
      849,  848,  847,  846,  845,  842,  839,  838,  836,  835,
      834,  833,  830,  828,  826,  825,  824,  823,  819,  818,
      817,  815,  814,  811,  810,  809,  808,  807,  806,  805,
      803,  801,  800,  795,  794,  793,  792,  791,  790,  789,
      787,  786,  777,  776,  775,  774,  773,  772,  766,  765,

      764,  763,  762,  760,  759,  758,  757,  756,  755,  754,
      750,  749,  748,  745,  744,  742,  741,  740,  739,  738,
      737,  736,  735,  733,  732,  731,  730,  729,  728,  725,
      722,  721,  720,  719,  718,  717,  713,  711,  709,  708,
      707,  706,  702,  701,  700,  699,  698,  695,  694,  693,
      692,  691,  690,  689,  687,  686,  685,  680,  679,  678,
      677,  676,  675,  674,  667,  666,  665,  664,  661,  660,
      653,  652,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  634,  630,  629,  625,  622,  620,  619,  615,
      614,  613,  612,  608,  607,  602,  601,  600,  598,  597,

      596,  595,  589,  588,  584,  583,  582,  581,  580,  579,
      575,  574,  573,  568,  567,  566,  565,  564,  563,  555,
      554,  553,  552,  551,  548,  542,  541,  540,  539,  536,
      535,  528,  527,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  508,  507,  503,  500,  498,
      497,  494,  493,  492,  491,  489,  488,  483,  482,  481,
      480,  479,  478,  477,  474,  473,  472,  468,  467,  466,
      465,  464,  463,  458,  457,  456,  455,  454,  450,  449,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  430,  429,  428,  427,  420,  419,

      418,  413,  412,  411,  410,  409,  403,  402,  401,  400,
      396,  395,  394,  390,  389,  388,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      368,  367,  366,  363,  362,  361,  358,  357,  356,  355,
      354,  350,  349,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  322,  321,  320,  315,  314,  313,  312,  311,  308,
      307,  306,  305,  304,  300,  299,  298,  294,  293,  292,
      291,  259,  253,  252,  235,  232,  231,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,

      215,  214,  211,  210,  209,  208,  208,  207,  175,  169,
      168,  151,  129,  126,  125,  124,  119,  118,  115,  110,
      107,  100,   99,   72,  106,  105,  100,   99,   72,   68,
       68, 2683,   34,   34,   34,   34,   34,   34,   34,   34,
       19, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683
    } ;

static yyconst flex_int16_t yy_chk[4405] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,    1,    2,
        2,    2,    2,    2,  213,    2,    0,    2,    2,    2,
        2,    2,    2,    2,    0,    2,    2,   50,   25,  806,
       25,   25,   25,    2,   51,   51,  213,    2,   21,   21,
       55,   50,   21,   25,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   55,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   23,   46,  807,   46,   46,   46,   23,   23,   23,
       23,   23,   23,   23,   57,   23,   58,   46,   64,   69,
       69,   26,   26,   23,   57,   60,   58,   23,   63,   73,
       73,   26,   26,   26,   63,   80,  172,   23,   23,   23,
       23,   26,   64,  808,   23,   60,   80,   88,   23,   23,
       23,  172,   88,   23,   23,   23,   23,   23,   23,   28,
       28,   26,   47,   47,   82,   98,   98,   28,   82,   28,
       28,   28,   47,   47,   47,   49,   49,  809,   81,   28,

       82,   93,   47,   49,   81,   49,   49,   49,   79,   79,
       95,   93,   96,   70,   70,   49,   95,   96,   79,   28,
       29,  109,   47,   70,   70,   70,   79,   29,   79,   86,
      109,   86,   91,   70,   29,   49,   71,   71,   29,   86,
       71,   71,   71,  141,   86,   86,   91,   29,  141,   91,
       91,  146,  810,   70,   29,   29,   29,   29,   29,   29,
       29,  146,   29,   29,  125,   29,   29,   29,   29,   29,
      125,   29,   29,   29,   29,   29,   75,   83,   89,   83,
      133,   92,   89,   83,   92,   75,   89,   92,  350,   83,
      350,  133,   75,   75,   75,   75,   75,   75,   75,  165,

       75,   75,  134,   75,   75,   75,   75,   75,  134,   75,
       75,   75,   75,   75,   90,   94,  165,   94,   90,  811,
      148,   94,  127,  127,  127,   90,  148,   94,   90,   94,
      128,  128,   94,   94,   90,  130,  130,   94,  132,  132,
      128,  128,  128,  135,  198,  814,  176,  135,  132,  136,
      130,  136,  139,  198,  139,  136,  132,  176,  132,  135,
      143,  136,  139,  815,  143,  142,  817,  139,  139,  142,
      144,  143,  145,  142,  143,  145,  149,  147,  145,  147,
      143,  149,  178,  147,  144,  155,  178,  144,  144,  147,
      155,  147,  208,  208,  147,  147,  171,  171,  155,  147,

      159,  201,  159,  177,  177,  217,  217,  159,  207,  233,
      233,  171,  201,  818,  207,  201,  234,  234,  177,  217,
      235,  235,  249,  239,  233,  243,  256,  243,  239,  248,
      248,  260,  243,  255,  255,  235,  239,  261,  261,  249,
      282,  256,  260,  262,  248,  267,  267,  262,  255,  282,
      285,  291,  261,  292,  292,  303,  303,  291,  299,  819,
      267,  285,  311,  311,  285,  312,  312,  299,  292,  248,
      303,  299,  316,  316,  317,  317,  333,  311,  322,  322,
      312,  325,  325,  326,  326,  328,  328,  316,  330,  330,
      333,  346,  346,  347,  347,  355,  325,  824,  351,  355,

      328,  322,  360,  330,  351,  361,  346,  352,  352,  360,
      687,  361,  363,  363,  369,  369,  370,  370,  371,  371,
      372,  372,  352,  360,  373,  373,  363,  687,  369,  380,
      380,  450,  371,  450,  372,  381,  381,  825,  373,  385,
      385,  386,  386,  380,  330,  387,  387,  388,  388,  381,
      395,  398,  398,  399,  399,  826,  386,  404,  404,  395,
      405,  405,  388,  395,  409,  409,  398,  455,  399,  410,
      410,  455,  404,  413,  413,  414,  414,  415,  415,  409,
      420,  420,  423,  423,  410,  424,  424,  746,  413,  828,
      414,  426,  426,  428,  428,  420,  433,  423,  431,  431,

      432,  432,  746,  420,  833,  398,  426,  470,  428,  471,
      433,  435,  435,  431,  446,  446,  447,  447,  451,  452,
      452,  470,  460,  460,  451,  471,  435,  461,  461,  446,
      462,  462,  475,  475,  452,  476,  476,  460,  484,  484,
      485,  485,  461,  486,  486,  460,  777,  475,  777,  428,
      537,  435,  460,  484,  487,  487,  490,  490,  486,  494,
      494,  495,  495,  499,  499,  834,  460,  587,  494,  501,
      501,  502,  502,  537,  494,  504,  504,  505,  505,  507,
      507,  514,  514,  587,  501,  516,  516,  835,  507,  836,
      504,  523,  523,  838,  507,  839,  514,  524,  524,  846,

      516,  533,  533,  534,  534,  847,  523,  541,  541,  549,
      549,  550,  550,  556,  556,  541,  533,  557,  557,  558,
      558,  559,  559,  549,  560,  560,  561,  561,  586,  562,
      562,  557,  562,  848,  562,  559,  569,  569,  570,  570,
      561,  570,  586,  570,  571,  571,  572,  572,  803,  572,
      569,  572,  573,  573,  576,  576,  577,  577,  571,  578,
      578,  590,  590,  591,  591,  803,  573,  593,  593,  594,
      594,  577,  599,  599,  603,  603,  590,  604,  604,  605,
      605,  849,  593,  606,  606,  609,  609,  610,  610,  603,
      611,  611,  615,  615,  605,  616,  616,  617,  617,  850,

      609,  621,  621,  623,  623,  624,  624,  615,  626,  626,
      616,  627,  627,  629,  629,  631,  631,  852,  623,  635,
      635,  636,  636,  626,  639,  639,  641,  641,  629,  648,
      648,  649,  649,  853,  635,  658,  658,  659,  659,  639,
      670,  641,  662,  662,  648,  666,  666,  668,  668,  854,
      658,  669,  669,  666,  673,  673,  855,  662,  688,  688,
      670,  857,  668,  696,  696,  697,  697,  703,  703,  858,
      705,  705,  859,  662,  710,  710,  703,  712,  712,  713,
      713,  861,  703,  705,  714,  714,  862,  716,  716,  723,
      723,  725,  725,  714,  713,  867,  662,  726,  726,  714,

      716,  727,  727,  868,  723,  728,  728,  734,  734,  743,
      743,  865,  726,  747,  747,  761,  761,  767,  767,  869,
      728,  768,  768,  870,  769,  769,  865,  769,  747,  769,
      776,  776,  778,  778,  871,  778,  872,  778,  781,  781,
      873,  781,  875,  781,  776,  784,  784,  785,  785,  876,
      785,  877,  785,  788,  788,  798,  798,  800,  800,  784,
      802,  802,  804,  804,  812,  812,  813,  813,  816,  816,
      798,  878,  800,  820,  820,  821,  821,  822,  822,  823,
      823,  827,  827,  829,  829,  830,  830,  879,  820,  831,
      831,  832,  832,  880,  823,  837,  837,  840,  840,  881,

      830,  841,  841,  882,  831,  842,  842,  843,  843,  844,
      844,  800,  840,  845,  845,  851,  851,  856,  856,  883,
      842,  884,  843,  860,  860,  863,  863,  885,  845,  864,
      864,  886,  856,  866,  866,  842,  842,  874,  874,  887,
      863,  888,  890,  891,  892,  893,  894,  896,  866,  895,
      895,  897,  898,  899,  900,  901,  902,  903,  905,  905,
      906,  906,  907,  908,  895,  909,  911,  912,  912,  913,
      913,  914,  914,  906,  915,  915,  916,  917,  917,  918,
      919,  921,  912,  922,  923,  924,  928,  915,  925,  925,
      926,  926,  917,  927,  927,  929,  930,  931,  932,  933,

      938,  934,  935,  935,  939,  926,  934,  936,  936,  940,
      942,  935,  941,  941,  943,  944,  944,  935,  945,  945,
      946,  947,  936,  948,  949,  950,  951,  952,  954,  955,
      944,  956,  957,  958,  960,  941,  961,  936,  959,  959,
      962,  963,  966,  967,  967,  968,  969,  970,  970,  971,
      971,  972,  959,  973,  979,  978,  978,  967,  978,  980,
      978,  970,  981,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  992,  981,  993,  993,  994,
      995,  995,  996,  996,  997,  997,  998,  999, 1000,  992,
     1001, 1002, 1003, 1003, 1004,  995, 1005, 1006, 1007,  997,

     1008, 1009, 1010, 1011, 1012, 1012, 1016, 1003, 1013, 1013,
     1014, 1014, 1015, 1015, 1017, 1018, 1018, 1019, 1024, 1012,
     1020, 1020, 1021, 1021, 1025, 1014, 1022, 1022, 1023, 1023,
     1018, 1026, 1026, 1027, 1028, 1020, 1029, 1029, 1030, 1030,
     1031, 1031, 1032, 1023, 1033, 1037, 1026, 1034, 1034, 1035,
     1035, 1036, 1036, 1030, 1038, 1039, 1040, 1041, 1042, 1049,
     1043, 1044, 1044, 1050, 1035, 1043, 1045, 1045, 1046, 1046,
     1047, 1047, 1048, 1048, 1051, 1054, 1044, 1052, 1052, 1053,
     1053, 1045, 1055, 1046, 1056, 1056, 1058, 1048, 1057, 1057,
     1059, 1060, 1052, 1061, 1062, 1063, 1045, 1064, 1064, 1056,

     1052, 1065, 1065, 1066, 1066, 1067, 1068, 1069, 1070, 1070,
     1071, 1074, 1064, 1075, 1076, 1077, 1065, 1078, 1066, 1079,
     1080, 1081, 1082, 1070, 1083, 1084, 1084, 1086, 1064, 1082,
     1085, 1085, 1087, 1089, 1090, 1091, 1091, 1093, 1094, 1094,
     1084, 1095, 1096, 1096, 1097, 1099, 1099, 1100, 1100, 1101,
     1104, 1096, 1102, 1102, 1105, 1091, 1106, 1096, 1103, 1103,
     1107, 1108, 1109, 1110, 1110, 1112, 1091, 1102, 1111, 1111,
     1113, 1114, 1115, 1115, 1116, 1117, 1118, 1119, 1119, 1120,
     1121, 1121, 1124, 1111, 1123, 1123, 1119, 1122, 1122, 1125,
     1126, 1127, 1119, 1121, 1128, 1128, 1129, 1130, 1131, 1115,

     1132, 1132, 1122, 1133, 1134, 1115, 1136, 1137, 1138, 1139,
     1136, 1140, 1141, 1142, 1143, 1144, 1144, 1145, 1145, 1146,
     1146, 1148, 1146, 1150, 1146, 1147, 1147, 1149, 1149, 1144,
     1155, 1145, 1157, 1151, 1158, 1151, 1152, 1152, 1151, 1147,
     1163, 1149, 1151, 1151, 1154, 1154, 1151, 1151, 1164, 1151,
     1152, 1153, 1153, 1166, 1153, 1169, 1153, 1170, 1154, 1156,
     1156, 1161, 1161, 1162, 1162, 1171, 1162, 1172, 1162, 1165,
     1165, 1167, 1167, 1168, 1168, 1161, 1173, 1173, 1174, 1175,
     1175, 1176, 1176, 1178, 1165, 1179, 1167, 1180, 1168, 1177,
     1177, 1181, 1182, 1183, 1183, 1185, 1176, 1186, 1181, 1184,

     1184, 1187, 1187, 1188, 1189, 1190, 1190, 1192, 1183, 1191,
     1191, 1193, 1193, 1194, 1194, 1197, 1187, 1195, 1195, 1204,
     1190, 1205, 1196, 1196, 1191, 1190, 1193, 1198, 1198, 1199,
     1199, 1200, 1200, 1201, 1201, 1208, 1190, 1196, 1202, 1202,
     1203, 1203, 1198, 1206, 1206, 1209, 1200, 1207, 1207, 1210,
     1210, 1211, 1212, 1202, 1213, 1213, 1214, 1214, 1206, 1215,
     1216, 1217, 1218, 1218, 1219, 1220, 1221, 1222, 1222, 1223,
     1223, 1214, 1224, 1224, 1225, 1225, 1226, 1218, 1227, 1227,
     1229, 1229, 1222, 1228, 1228, 1230, 1231, 1224, 1232, 1218,
     1233, 1233, 1234, 1234, 1235, 1218, 1236, 1237, 1228, 1238,

     1238, 1239, 1240, 1241, 1241, 1233, 1242, 1243, 1244, 1247,
     1242, 1245, 1245, 1246, 1246, 1248, 1248, 1252, 1241, 1249,
     1249, 1250, 1250, 1251, 1251, 1253, 1245, 1254, 1255, 1255,
     1248, 1256, 1256, 1257, 1258, 1259, 1250, 1260, 1261, 1262,
     1263, 1264, 1265, 1255, 1266, 1267, 1268, 1269, 1269, 1270,
     1272, 1273, 1274, 1274, 1275, 1276, 1277, 1278, 1279, 1279,
     1280, 1281, 1281, 1282, 1283, 1284, 1284, 1279, 1285, 1287,
     1288, 1289, 1293, 1279, 1281, 1290, 1290, 1291, 1291, 1292,
     1292, 1294, 1295, 1296, 1296, 1297, 1298, 1300, 1301, 1302,
     1302, 1304, 1291, 1303, 1303, 1305, 1305, 1306, 1307, 1308,

     1309, 1310, 1311, 1312, 1313, 1314, 1303, 1315, 1316, 1317,
     1318, 1298, 1319, 1320, 1321, 1322, 1323, 1324, 1324, 1325,
     1325, 1327, 1325, 1328, 1325, 1326, 1326, 1331, 1326, 1334,
     1326, 1324, 1329, 1329, 1330, 1330, 1332, 1332, 1333, 1333,
     1335, 1333, 1336, 1333, 1336, 1337, 1329, 1338, 1339, 1340,
     1332, 1341, 1342, 1343, 1343, 1340, 1343, 1344, 1343, 1345,
     1348, 1337, 1346, 1346, 1347, 1347, 1339, 1347, 1349, 1347,
     1350, 1352, 1351, 1351, 1353, 1351, 1346, 1351, 1354, 1355,
     1356, 1356, 1357, 1357, 1358, 1359, 1359, 1360, 1360, 1361,
     1361, 1362, 1362, 1363, 1364, 1356, 1365, 1366, 1367, 1369,

     1359, 1368, 1368, 1370, 1361, 1371, 1372, 1373, 1374, 1375,
     1375, 1376, 1377, 1377, 1378, 1378, 1379, 1379, 1380, 1381,
     1382, 1382, 1383, 1383, 1384, 1385, 1388, 1377, 1392, 1378,
     1386, 1386, 1387, 1387, 1397, 1382, 1389, 1389, 1390, 1390,
     1391, 1391, 1393, 1393, 1400, 1386, 1394, 1394, 1395, 1395,
     1396, 1396, 1401, 1390, 1398, 1398, 1399, 1399, 1402, 1403,
     1403, 1394, 1404, 1404, 1405, 1405, 1406, 1407, 1408, 1398,
     1409, 1409, 1410, 1410, 1411, 1412, 1414, 1404, 1413, 1413,
     1415, 1416, 1416, 1417, 1417, 1409, 1418, 1419, 1419, 1420,
     1421, 1422, 1424, 1413, 1423, 1423, 1425, 1426, 1427, 1428,

     1412, 1429, 1429, 1430, 1430, 1431, 1432, 1433, 1434, 1435,
     1435, 1436, 1437, 1437, 1438, 1438, 1429, 1439, 1440, 1440,
     1441, 1442, 1442, 1443, 1444, 1444, 1446, 1447, 1448, 1449,
     1450, 1451, 1444, 1440, 1452, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1462, 1463, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473, 1463,
     1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1482,
     1483, 1484, 1440, 1485, 1487, 1488, 1489, 1491, 1492, 1493,
     1494, 1495, 1496, 1497, 1498, 1500, 1501, 1503, 1500, 1502,
     1502, 1504, 1502, 1508, 1502, 1510, 1500, 1507, 1507, 1509,

     1509, 1511, 1509, 1512, 1509, 1513, 1514, 1514, 1515, 1516,
     1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1527, 1527,
     1514, 1527, 1528, 1527, 1529, 1530, 1531, 1532, 1535, 1536,
     1537, 1537, 1538, 1539, 1539, 1540, 1540, 1541, 1541, 1542,
     1542, 1543, 1544, 1545, 1546, 1541, 1547, 1548, 1549, 1550,
     1551, 1552, 1553, 1553, 1542, 1554, 1554, 1555, 1555, 1556,
     1557, 1558, 1558, 1559, 1560, 1561, 1561, 1553, 1562, 1563,
     1563, 1564, 1565, 1565, 1566, 1567, 1567, 1568, 1568, 1569,
     1570, 1571, 1572, 1573, 1574, 1574, 1575, 1576, 1577, 1579,
     1567, 1578, 1578, 1580, 1581, 1582, 1582, 1583, 1583, 1584,

     1585, 1586, 1587, 1588, 1588, 1589, 1590, 1591, 1592, 1592,
     1582, 1593, 1594, 1595, 1595, 1596, 1597, 1598, 1588, 1599,
     1600, 1601, 1605, 1592, 1602, 1602, 1603, 1603, 1604, 1604,
     1607, 1608, 1609, 1610, 1612, 1614, 1615, 1616, 1617, 1602,
     1618, 1620, 1621, 1604, 1622, 1623, 1624, 1625, 1626, 1626,
     1627, 1628, 1629, 1630, 1632, 1633, 1634, 1635, 1636, 1638,
     1639, 1641, 1642, 1643, 1644, 1645, 1645, 1648, 1649, 1650,
     1651, 1652, 1653, 1654, 1656, 1657, 1658, 1659, 1660, 1661,
     1645, 1664, 1664, 1667, 1668, 1668, 1669, 1669, 1670, 1670,
     1671, 1672, 1672, 1673, 1674, 1664, 1675, 1675, 1668, 1676,

     1669, 1677, 1677, 1678, 1679, 1672, 1680, 1680, 1683, 1684,
     1675, 1685, 1686, 1687, 1689, 1688, 1688, 1690, 1691, 1694,
     1680, 1696, 1692, 1692, 1693, 1693, 1695, 1695, 1698, 1680,
     1688, 1697, 1697, 1699, 1700, 1701, 1675, 1692, 1668, 1702,
     1705, 1695, 1703, 1703, 1704, 1704, 1697, 1706, 1707, 1708,
     1680, 1709, 1710, 1711, 1712, 1712, 1714, 1703, 1713, 1713,
     1715, 1716, 1717, 1718, 1719, 1719, 1720, 1721, 1722, 1722,
     1723, 1724, 1724, 1713, 1725, 1726, 1727, 1727, 1732, 1719,
     1728, 1728, 1733, 1722, 1729, 1729, 1730, 1730, 1731, 1731,
     1736, 1727, 1734, 1734, 1737, 1728, 1735, 1735, 1738, 1729,

     1739, 1740, 1742, 1731, 1741, 1741, 1743, 1734, 1744, 1744,
     1745, 1745, 1746, 1746, 1747, 1748, 1749, 1750, 1751, 1741,
     1753, 1755, 1756, 1757, 1757, 1745, 1759, 1759, 1760, 1761,
     1762, 1764, 1757, 1763, 1763, 1759, 1765, 1767, 1757, 1766,
     1766, 1759, 1768, 1769, 1770, 1771, 1772, 1773, 1763, 1775,
     1776, 1777, 1778, 1781, 1766, 1779, 1779, 1780, 1780, 1782,
     1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
     1779, 1793, 1794, 1794, 1795, 1795, 1796, 1795, 1799, 1795,
     1797, 1797, 1798, 1798, 1800, 1800, 1794, 1801, 1802, 1802,
     1803, 1803, 1804, 1805, 1797, 1806, 1806, 1807, 1807, 1808,

     1809, 1810, 1802, 1811, 1812, 1813, 1814, 1814, 1816, 1806,
     1815, 1815, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1823,
     1814, 1824, 1824, 1825, 1826, 1827, 1828, 1828, 1829, 1830,
     1830, 1831, 1831, 1823, 1832, 1832, 1833, 1833, 1834, 1834,
     1835, 1836, 1836, 1837, 1830, 1838, 1839, 1839, 1844, 1832,
     1845, 1833, 1840, 1840, 1841, 1841, 1836, 1842, 1842, 1843,
     1843, 1839, 1846, 1847, 1848, 1849, 1849, 1840, 1850, 1850,
     1851, 1852, 1842, 1853, 1843, 1854, 1855, 1856, 1856, 1858,
     1849, 1857, 1857, 1859, 1859, 1860, 1860, 1861, 1861, 1862,
     1863, 1864, 1856, 1865, 1865, 1866, 1866, 1872, 1859, 1873,

     1860, 1867, 1867, 1868, 1868, 1869, 1869, 1875, 1865, 1870,
     1870, 1871, 1871, 1874, 1874, 1876, 1867, 1877, 1878, 1879,
     1880, 1880, 1881, 1881, 1870, 1882, 1883, 1884, 1884, 1885,
     1886, 1887, 1888, 1889, 1886, 1880, 1890, 1891, 1893, 1893,
     1894, 1895, 1895, 1896, 1896, 1897, 1899, 1893, 1898, 1898,
     1900, 1904, 1896, 1893, 1895, 1902, 1902, 1905, 1896, 1903,
     1903, 1898, 1906, 1906, 1907, 1907, 1908, 1909, 1911, 1912,
     1902, 1914, 1915, 1916, 1918, 1919, 1919, 1906, 1920, 1921,
     1922, 1923, 1924, 1926, 1928, 1929, 1930, 1930, 1931, 1932,
     1932, 1933, 1933, 1934, 1933, 1935, 1933, 1929, 1936, 1938,

     1930, 1937, 1937, 1932, 1939, 1940, 1940, 1941, 1941, 1942,
     1943, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1949, 1950,
     1950, 1941, 1951, 1945, 1952, 1945, 1945, 1953, 1954, 1945,
     1955, 1949, 1956, 1957, 1958, 1958, 1959, 1960, 1961, 1962,
     1959, 1963, 1963, 1964, 1964, 1965, 1965, 1966, 1966, 1967,
     1968, 1968, 1969, 1969, 1970, 1971, 1971, 1979, 1964, 1972,
     1972, 1973, 1973, 1974, 1974, 1968, 1975, 1975, 1976, 1976,
     1971, 1977, 1977, 1980, 1972, 1978, 1978, 1981, 1981, 1982,
     1983, 1975, 1984, 1984, 1985, 1985, 1977, 1986, 1986, 1987,
     1988, 1991, 1981, 1989, 1989, 1990, 1990, 1992, 1992, 1985,

     1993, 1993, 1986, 1994, 1994, 1995, 1996, 2001, 1989, 1997,
     1997, 2002, 1992, 1998, 1998, 1985, 1999, 1999, 2000, 2000,
     2003, 2004, 2005, 2007, 1997, 2006, 2006, 2008, 2008, 2009,
     2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
     2006, 2019, 2019, 2021, 2009, 2020, 2020, 2022, 2022, 2023,
     2023, 2024, 2025, 2027, 2027, 2028, 2029, 2031, 2020, 2030,
     2030, 2032, 2023, 2033, 2034, 2035, 2036, 2038, 2039, 2040,
     2041, 2042, 2045, 2046, 2047, 2048, 2048, 2049, 2049, 2050,
     2051, 2051, 2052, 2052, 2055, 2052, 2056, 2052, 2057, 2048,
     2058, 2058, 2059, 2059, 2051, 2060, 2061, 2062, 2063, 2064,

     2065, 2066, 2067, 2068, 2058, 2069, 2070, 2070, 2071, 2071,
     2072, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
     2070, 2081, 2082, 2083, 2072, 2084, 2084, 2085, 2086, 2086,
     2087, 2088, 2088, 2089, 2089, 2090, 2090, 2091, 2091, 2092,
     2092, 2093, 2094, 2094, 2095, 2095, 2088, 2096, 2096, 2097,
     2098, 2099, 2099, 2100, 2100, 2101, 2104, 2094, 2105, 2095,
     2102, 2102, 2103, 2103, 2106, 2106, 2099, 2107, 2107, 2108,
     2109, 2109, 2110, 2111, 2111, 2102, 2112, 2112, 2114, 2106,
     2113, 2113, 2115, 2116, 2117, 2118, 2118, 2124, 2111, 2119,
     2119, 2112, 2120, 2120, 2121, 2121, 2122, 2122, 2123, 2123,

     2118, 2125, 2126, 2127, 2119, 2128, 2129, 2130, 2131, 2121,
     2132, 2122, 2133, 2133, 2134, 2135, 2135, 2136, 2137, 2138,
     2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
     2151, 2152, 2153, 2154, 2154, 2155, 2156, 2156, 2157, 2156,
     2158, 2156, 2159, 2160, 2161, 2162, 2162, 2155, 2163, 2164,
     2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2173,
     2174, 2174, 2175, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2179, 2183, 2184, 2174, 2185, 2186, 2187, 2188, 2189,
     2189, 2190, 2191, 2191, 2192, 2192, 2193, 2193, 2194, 2194,
     2195, 2196, 2196, 2197, 2198, 2198, 2199, 2191, 2200, 2201,

     2201, 2202, 2203, 2194, 2204, 2204, 2205, 2205, 2206, 2206,
     2207, 2208, 2209, 2210, 2210, 2211, 2211, 2212, 2212, 2204,
     2213, 2213, 2214, 2214, 2215, 2215, 2216, 2216, 2210, 2217,
     2211, 2219, 2220, 2221, 2223, 2224, 2226, 2214, 2227, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2236, 2237, 2238,
     2239, 2240, 2241, 2241, 2242, 2242, 2243, 2244, 2247, 2248,
     2249, 2236, 2250, 2251, 2252, 2253, 2241, 2254, 2242, 2255,
     2256, 2257, 2258, 2259, 2260, 2260, 2261, 2262, 2262, 2263,
     2264, 2265, 2266, 2267, 2267, 2268, 2269, 2270, 2271, 2271,
     2272, 2262, 2273, 2274, 2274, 2275, 2275, 2279, 2267, 2276,

     2276, 2277, 2277, 2271, 2278, 2278, 2280, 2281, 2274, 2282,
     2275, 2283, 2284, 2285, 2285, 2286, 2277, 2287, 2288, 2289,
     2289, 2290, 2290, 2291, 2291, 2292, 2292, 2293, 2294, 2295,
     2296, 2299, 2300, 2301, 2289, 2302, 2303, 2304, 2305, 2306,
     2307, 2308, 2308, 2309, 2309, 2310, 2311, 2312, 2313, 2314,
     2314, 2315, 2315, 2316, 2316, 2318, 2308, 2317, 2317, 2319,
     2320, 2321, 2322, 2314, 2323, 2324, 2325, 2316, 2326, 2327,
     2328, 2329, 2330, 2330, 2331, 2332, 2333, 2333, 2334, 2334,
     2335, 2335, 2336, 2337, 2338, 2339, 2330, 2340, 2340, 2342,
     2333, 2343, 2334, 2344, 2336, 2341, 2341, 2345, 2345, 2346,

     2346, 2354, 2340, 2347, 2347, 2348, 2348, 2349, 2349, 2350,
     2350, 2355, 2345, 2351, 2351, 2352, 2352, 2356, 2347, 2357,
     2348, 2358, 2349, 2353, 2353, 2359, 2360, 2361, 2351, 2362,
     2363, 2363, 2364, 2365, 2367, 2368, 2369, 2370, 2370, 2371,
     2372, 2373, 2375, 2376, 2377, 2377, 2379, 2381, 2382, 2382,
     2383, 2383, 2370, 2384, 2384, 2385, 2385, 2386, 2387, 2388,
     2389, 2390, 2390, 2391, 2392, 2393, 2394, 2384, 2395, 2385,
     2396, 2396, 2397, 2397, 2398, 2390, 2399, 2400, 2400, 2401,
     2401, 2402, 2402, 2403, 2396, 2404, 2405, 2405, 2406, 2407,
     2407, 2400, 2408, 2408, 2409, 2410, 2410, 2411, 2412, 2412,

     2405, 2413, 2413, 2407, 2414, 2414, 2415, 2415, 2416, 2416,
     2410, 2417, 2417, 2418, 2418, 2419, 2413, 2420, 2421, 2422,
     2422, 2415, 2423, 2424, 2425, 2425, 2426, 2427, 2427, 2428,
     2431, 2432, 2433, 2433, 2422, 2434, 2434, 2435, 2436, 2425,
     2437, 2441, 2427, 2442, 2442, 2443, 2443, 2433, 2444, 2444,
     2445, 2445, 2446, 2446, 2447, 2447, 2448, 2442, 2449, 2450,
     2450, 2452, 2444, 2451, 2451, 2453, 2446, 2454, 2447, 2455,
     2456, 2457, 2457, 2450, 2458, 2459, 2459, 2460, 2460, 2461,
     2462, 2463, 2463, 2464, 2464, 2465, 2465, 2466, 2466, 2459,
     2474, 2467, 2467, 2475, 2467, 2463, 2467, 2468, 2468, 2465,

     2476, 2466, 2469, 2469, 2470, 2470, 2471, 2471, 2472, 2472,
     2473, 2473, 2468, 2477, 2477, 2478, 2478, 2469, 2479, 2479,
     2486, 2471, 2480, 2480, 2481, 2481, 2482, 2482, 2477, 2483,
     2483, 2484, 2484, 2479, 2485, 2485, 2487, 2480, 2488, 2481,
     2489, 2489, 2490, 2491, 2483, 2492, 2484, 2493, 2494, 2494,
     2495, 2495, 2496, 2496, 2497, 2497, 2501, 2497, 2503, 2497,
     2498, 2498, 2499, 2499, 2500, 2500, 2496, 2502, 2502, 2504,
     2505, 2505, 2506, 2507, 2498, 2508, 2509, 2509, 2500, 2510,
     2510, 2511, 2511, 2517, 2505, 2512, 2512, 2513, 2513, 2518,
     2509, 2514, 2514, 2515, 2515, 2511, 2515, 2524, 2515, 2512,

     2525, 2516, 2516, 2536, 2516, 2514, 2516, 2519, 2519, 2520,
     2520, 2521, 2521, 2522, 2522, 2523, 2523, 2526, 2526, 2527,
     2527, 2537, 2519, 2528, 2528, 2529, 2529, 2538, 2522, 2530,
     2530, 2540, 2526, 2531, 2531, 2532, 2532, 2544, 2528, 2533,
     2533, 2534, 2534, 2545, 2530, 2535, 2535, 2543, 2543, 2549,
     2543, 2550, 2543, 2551, 2533, 2546, 2546, 2554, 2547, 2547,
     2548, 2548, 2552, 2552, 2553, 2553, 2555, 2556, 2556, 2557,
     2557, 2526, 2547, 2558, 2558, 2563, 2552, 2559, 2559, 2560,
     2560, 2556, 2561, 2561, 2564, 2562, 2562, 2558, 2562, 2570,
     2562, 2567, 2567, 2560, 2568, 2568, 2569, 2569, 2571, 2571,

     2572, 2572, 2573, 2573, 2574, 2574, 2575, 2575, 2576, 2576,
     2578, 2569, 2579, 2571, 2577, 2577, 2580, 2573, 2583, 2583,
     2584, 2585, 2586, 2587, 2587, 2588, 2589, 2590, 2590, 2577,
     2591, 2591, 2592, 2592, 2593, 2593, 2596, 2596, 2597, 2597,
     2598, 2590, 2599, 2599, 2600, 2600, 2601, 2601, 2602, 2602,
     2604, 2596, 2603, 2603, 2605, 2606, 2607, 2608, 2609, 2600,
     2610, 2611, 2614, 2602, 2612, 2612, 2613, 2613, 2615, 2615,
     2616, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624,
     2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634,
     2635, 2635, 2636, 2636, 2637, 2638, 2639, 2640, 2641, 2642,

     2643, 2644, 2644, 2645, 2645, 2635, 2649, 2636, 2646, 2646,
     2647, 2647, 2650, 2651, 2652, 2653, 2644, 2654, 2654, 2655,
     2655, 2656, 2656, 2646, 2657, 2657, 2658, 2659, 2660, 2660,
     2661, 2661, 2654, 2662, 2662, 2663, 2663, 2666, 2657, 2664,
     2664,  805, 2660,  801, 2661, 2665, 2665,  799, 2662, 2667,
     2667, 2668, 2668, 2664, 2669, 2669, 2670, 2670, 2671, 2671,
     2672, 2672,  797, 2667,  796, 2668, 2673, 2673, 2674, 2674,
     2670, 2675, 2675, 2676, 2676, 2677, 2677, 2678, 2678, 2679,
     2679,  795, 2674, 2680, 2680, 2675, 2681, 2681, 2682, 2682,
      794,  793,  792, 2679, 2684, 2684, 2684, 2684, 2684, 2685,

     2685, 2685, 2685, 2685, 2686, 2686, 2686, 2686, 2686, 2687,
     2687, 2687, 2687, 2687, 2688, 2688, 2688, 2688, 2688, 2689,
     2689, 2689, 2689, 2689, 2690, 2690, 2690, 2690, 2690, 2691,
     2691, 2691, 2691, 2691, 2692, 2692, 2692, 2692, 2693,  791,
     2693, 2693, 2693, 2694, 2694,  790, 2694, 2694, 2695, 2695,
     2695,  789, 2695,  787,  786,  783,  782,  780,  779,  775,
      774,  773,  772,  771,  770,  766,  765,  764,  763,  762,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  748,  745,  744,  742,  741,  740,  738,  737,
      736,  735,  733,  732,  731,  730,  729,  722,  721,  720,

      719,  718,  717,  715,  711,  709,  708,  707,  704,  702,
      701,  700,  699,  698,  695,  694,  693,  692,  691,  690,
      689,  686,  685,  684,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  672,  671,  667,  665,  664,  663,  661,
      660,  657,  656,  655,  654,  653,  652,  651,  650,  647,
      646,  645,  644,  643,  642,  640,  638,  637,  634,  633,
      632,  630,  628,  625,  622,  620,  619,  618,  614,  613,
      612,  608,  607,  602,  601,  600,  598,  597,  596,  595,
      592,  589,  588,  585,  584,  583,  582,  581,  580,  579,
      575,  574,  568,  567,  566,  565,  564,  563,  555,  554,

      553,  552,  551,  548,  547,  546,  545,  544,  543,  542,
      540,  539,  538,  536,  535,  532,  531,  530,  529,  528,
      527,  526,  525,  522,  521,  520,  519,  518,  517,  515,
      513,  512,  511,  510,  509,  508,  506,  503,  500,  498,
      497,  496,  493,  492,  491,  489,  488,  483,  482,  481,
      480,  479,  478,  477,  474,  473,  472,  469,  468,  467,
      466,  465,  464,  463,  459,  458,  457,  456,  454,  453,
      449,  448,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  434,  430,  429,  427,  425,  422,  421,  419,
      418,  417,  416,  412,  411,  408,  407,  406,  403,  402,

      401,  400,  397,  396,  394,  393,  392,  391,  390,  389,
      384,  383,  382,  379,  378,  377,  376,  375,  374,  368,
      367,  366,  365,  364,  362,  359,  358,  357,  356,  354,
      353,  349,  348,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  332,  331,  329,  327,  324,
      323,  321,  320,  319,  318,  314,  313,  310,  309,  308,
      307,  306,  305,  304,  302,  301,  300,  298,  297,  296,
      295,  294,  293,  290,  289,  288,  287,  286,  284,  283,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  266,  265,  264,  263,  259,  258,

      257,  254,  253,  252,  251,  250,  247,  246,  245,  244,
      242,  241,  240,  238,  237,  236,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      216,  215,  214,  212,  211,  210,  206,  205,  204,  203,
      202,  200,  199,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  182,  181,  180,
      179,  175,  174,  173,  170,  169,  168,  167,  166,  164,
      163,  162,  161,  160,  158,  157,  156,  154,  153,  152,
      150,  140,  138,  137,  131,  129,  126,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  113,  112,

      111,  110,  108,  107,  105,  100,   99,   97,   87,   85,
       84,   78,   74,   67,   66,   65,   62,   61,   59,   56,
       54,   53,   52,   48,   43,   40,   32,   31,   27,   24,
       22,   19,   14,   13,    8,    7,    6,    5,    4,    3,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683, 2683,

     2683, 2683, 2683, 2683
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[373] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file OSparseosrl.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2014, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 *
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosrl.l.   
 */
#line 17 "../../../../OS/src/OSParsers/OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define OSRLPARSERDEBUG

#ifdef OSRLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 105 "../../../../OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2429 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 115 "../../../../OS/src/OSParsers/OSParseosrl.l"



#line 2685 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2684 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4341 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 118 "../../../../OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 127 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 143 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 396 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 397 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTANTATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYEXCLUDEATT);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(EXCLUDEATT);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OBJREFERENCEELEMENTSEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONREFERENCEELEMENTSEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 428 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(PATTERNELEMENTSSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 429 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(PATTERNELEMENTSEND);}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 430 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 435 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 440 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARIDXSTART);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARIDXEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 450 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 455 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 460 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 462 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 463 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 464 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 465 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 467 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 469 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 522 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 523 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 524 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 525 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 526 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 527 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 528 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 531 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 533 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 536 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* last section of OSParseosrl.l */
/* environments and comments */
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 546 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 548 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 361:
#line 550 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 550 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 551 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 553 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 365:
#line 555 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 555 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 556 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 559 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 560 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 565 "../../../../OS/src/OSParsers/OSParseosrl.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 577 "../../../../OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 5038 "../../../../OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2684 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2684 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2683);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 577 "../../../../OS/src/OSParsers/OSParseosrl.l"





