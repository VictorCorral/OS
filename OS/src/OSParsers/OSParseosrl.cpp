#line 2 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 358
#define YY_END_OF_BUFFER 359
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2646] =
    {   0,
        1,    1,  356,  356,  354,  354,  355,  355,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  359,  357,
        1,    2,  344,    2,  344,    6,  344,    5,  357,    4,
      344,  344,  356,  358,  354,  355,  345,  347,  348,  347,
      351,  352,  351,    1,  344,  344,    6,  344,    5,    0,
        4,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,    3,    6,    6,
      344,    7,    5,    0,    0,  350,  338,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,  344,  344,

      356,  354,  355,  345,    0,  353,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  340,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  138,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  294,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    6,  349,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  346,
        0,  339,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  128,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  148,    0,  324,    0,    0,    0,    0,  100,
        0,    0,    0,  308,    0,    0,    0,    0,    0,    0,
        0,    0,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  220,  344,  344,
      344,  344,  344,  344,  344,   28,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      339,    0,  341,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      325,    0,    0,    0,    0,    0,    0,    0,    0,  309,
        0,    0,    0,    0,    0,    0,    0,  295,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  316,    0,    0,    0,    0,    0,    0,    0,    0,
      322,    0,  318,    0,    0,  324,    0,    0,    0,    0,
      100,    0,    0,    0,  308,    0,    0,  326,    0,    0,

      328,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  314,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  330,
        0,    0,  196,    0,    0,    0,    0,    0,    0,    0,
        0,  344,  344,  344,  344,  291,  344,  344,  344,   28,
      344,   29,  344,   30,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  341,
        0,  321,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,    0,    0,  317,    0,    0,
        0,    0,  139,    0,    0,    0,    0,  323,    0,  319,

        0,    0,    0,  149,  325,    0,    0,    0,    0,    0,
      101,    0,    0,    0,  309,    0,    0,  327,    0,    0,
      329,    0,    0,    0,  295,    0,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  315,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  331,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  221,    0,    0,    0,  320,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  122,    0,  242,    0,
        0,  316,    0,    0,    0,    0,    0,    0,    0,  322,
      318,    0,    0,    0,    0,    0,    0,    0,  267,  152,

        0,    0,    0,  326,    0,  328,    0,    0,    0,  271,
        0,    0,    0,    0,    0,    0,   90,   89,  162,    0,
      300,    0,    0,    0,    0,    0,    0,  314,    0,    0,
        0,    0,  254,    0,    0,    0,  330,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  344,  344,  344,  291,  344,  344,  344,   29,   30,
      344,   51,   52,  344,  344,  344,  344,  344,  344,  344,
       71,   72,  344,   75,   76,  344,  344,  344,  344,  321,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  129,    0,  317,    0,    0,    0,    0,

        0,    0,    0,  323,  319,    0,    0,  149,    0,    0,
        0,    0,  268,  101,    0,    0,    0,    0,  327,    0,
      329,    0,    0,  272,    0,    0,    0,    0,  157,    0,
        0,    0,   91,    0,    0,  301,    0,    0,    0,    0,
        0,    0,  315,    0,    0,    0,    0,    0,    0,    0,
        0,  331,    0,    0,    0,  197,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  221,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  150,  269,  267,    0,    0,    0,

      236,    0,    0,  302,  273,  271,    0,    0,    0,    0,
      336,    0,    0,    0,    0,  300,    0,  306,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  186,    0,    0,
        0,   96,    0,    0,    0,  296,    0,    0,    0,    0,
        0,    0,  216,  224,    0,    0,  344,  344,  344,  344,
      344,  344,   49,   50,  344,  344,  344,  344,  344,   31,
      344,  344,   69,   70,   73,   74,  344,   79,   80,  344,
      344,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  123,    0,    0,  243,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  268,    0,  153,    0,    0,    0,    0,    0,  303,
      272,    0,    0,    0,    0,    0,    0,   91,    0,  163,
        0,    0,  301,    0,  307,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  255,    0,    0,    0,    0,
        0,  197,    0,    0,    0,  297,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
      110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  298,    0,    0,  140,    0,    0,   94,  258,
        0,  269,    0,    0,    0,  154,  302,  273,    0,    0,
      304,    0,    0,    0,    0,    0,    0,  306,    0,    0,

        0,    0,   98,    0,    0,    0,    0,    0,  275,    0,
      312,    0,    0,    0,    0,   96,    0,    0,    0,  296,
        0,    0,  206,    0,    0,    0,    0,    0,    0,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,   31,  344,  344,   77,   78,  344,  344,  344,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
      243,    0,  241,    0,    0,    0,    0,    0,    0,  299,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
      153,    0,    0,    0,  237,    0,  303,    0,  305,    0,
        0,    0,  337,    0,    0,  163,    0,    0,  307,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  276,    0,
      313,    0,  255,    0,  187,    0,    0,    0,    0,   97,
        0,    0,    0,  297,    0,    0,    0,    0,    0,    0,
        0,  217,    0,    0,  225,    0,    0,    0,    0,  332,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  298,    0,  244,    0,    0,   94,    0,    0,
        0,    0,    0,    0,  287,    0,    0,  304,    0,  256,
        0,    0,    0,    0,    0,  334,    0,    0,    0,   98,
        0,    0,  180,    0,    0,  277,  275,    0,  312,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  342,  344,  344,  344,  344,  344,
       59,   60,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   67,   68,  344,  344,  344,  344,
      344,  344,   83,   84,  344,    0,    0,  333,    0,    0,
      109,    0,  111,    0,    0,    0,    0,    0,  241,    0,
        0,    0,    0,    0,    0,  299,    0,    0,    0,  141,
        0,    0,    0,   95,    0,    0,    0,  259,    0,  151,
        0,  288,    0,  237,    0,  155,  305,    0,    0,  337,
        0,    0,    0,    0,    0,  335,    0,    0,    0,    0,
       99,    0,    0,    0,    0,    0,  276,  313,    0,  187,

        0,    0,    0,   97,    0,    0,    0,    0,    0,    0,
      207,    0,    0,    0,    0,  217,    0,  225,    0,    0,
        0,  332,    0,    0,  126,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  289,  287,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  334,    0,    0,    0,    0,    0,    0,    0,
        0,  277,    0,    0,    0,  190,    0,    0,    0,  200,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  344,
      344,  344,   43,   44,   57,   58,  344,  344,   63,   64,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,   65,   66,  344,   35,   36,  344,  344,  344,
       81,   82,  344,    0,  333,    0,  109,  111,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  245,  141,    0,    0,   95,    0,    0,  259,    0,
      288,    0,  155,    0,    0,  257,    0,    0,    0,    0,
        0,  335,    0,    0,    0,   99,    0,    0,    0,    0,
      181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  207,    0,    0,    0,    0,    0,    0,    0,
      343,    0,    0,  106,    0,    0,    0,    0,  238,    0,
      262,    0,    0,    0,    0,    0,  136,    0,    0,    0,

        0,    0,    0,  289,    0,    0,    0,    0,  158,    0,
        0,    0,    0,    0,  264,    0,    0,  176,    0,    0,
        0,    0,    0,  188,  192,    0,    0,    0,    0,    0,
        0,    0,  214,    0,    0,  344,  344,  344,  344,   41,
       42,  344,   61,   62,  344,  344,   10,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,   33,   34,  344,
      344,  344,  344,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      245,    0,    0,    0,    0,    0,    0,    0,  257,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      181,    0,    0,    0,    0,    0,  191,    0,    0,    0,
        0,  201,    0,    0,    0,    0,    0,    0,    0,    0,
      343,    0,  223,    0,    0,    0,    0,    0,  124,    0,
      130,    0,    0,    0,  142,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      174,    0,    0,    0,    0,    0,  310,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  344,  344,  344,  344,
      344,  344,  344,    8,  344,   10,  344,  344,   12,  344,
      344,  344,   14,  344,  344,  344,  344,  344,  344,  344,
       25,  344,  344,  344,  344,  344,  344,    0,    0,  107,

        0,    0,    0,  127,    0,    0,  239,    0,    0,  263,
        0,    0,    0,    0,    0,    0,  137,    0,    0,    0,
        0,    0,    0,    0,    0,  159,    0,    0,    0,    0,
        0,    0,  265,    0,    0,    0,  177,    0,    0,    0,
        0,  311,    0,  189,  191,    0,  193,    0,    0,  201,
        0,    0,    0,    0,    0,    0,  215,    0,    0,  223,
        0,    0,    0,    0,    0,    0,    0,  134,    0,    0,
      279,    0,    0,  283,    0,    0,  146,    0,  266,    0,
        0,    0,  270,    0,  102,  164,    0,    0,   92,    0,
        0,    0,  184,    0,  310,    0,    0,    0,    0,    0,

      210,    0,  218,    0,  344,  344,  344,  344,  344,   47,
       48,    8,  344,  344,   12,  344,  344,   14,  344,  344,
      344,  344,  344,  344,   25,  344,  344,  344,  344,  344,
      344,    0,  107,    0,    0,    0,    0,  239,    0,  125,
      263,    0,    0,  131,    0,    0,    0,  280,  137,    0,
      143,    0,  284,    0,    0,    0,    0,    0,  159,    0,
        0,    0,    0,    0,  265,    0,    0,  175,  177,    0,
        0,    0,  311,  189,  193,    0,    0,    0,    0,    0,
        0,    0,  215,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  281,  279,    0,  285,  283,    0,    0,

      144,  266,    0,    0,  270,    0,    0,    0,    0,    0,
        0,  182,    0,    0,    0,    0,    0,  208,  212,    0,
      344,  344,  344,  226,  344,  344,  344,   45,   46,  344,
      344,  344,   13,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   24,  344,  344,  344,  344,  344,
      344,    0,    0,    0,    0,    0,    0,  125,    0,  131,
        0,    0,  135,  280,  143,  284,    0,    0,    0,  147,
        0,    0,    0,  103,    0,    0,  165,    0,    0,    0,
       93,    0,  175,    0,    0,    0,  185,    0,    0,    0,
        0,    0,    0,  211,    0,    0,  219,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  281,    0,  285,    0,
        0,    0,  250,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  204,    0,  344,  344,  226,  344,  344,
       39,   40,  344,  344,   13,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,   24,  344,   27,  344,  344,
      344,  344,  344,    0,    0,    0,    0,    0,    0,    0,
        0,  135,    0,    0,  145,  147,    0,    0,  103,    0,
      165,    0,    0,   93,    0,    0,    0,  183,  185,    0,
        0,    0,    0,    0,  209,  211,    0,  213,  219,    0,
      104,    0,    0,    0,  118,    0,    0,  132,    0,    0,

      252,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  344,  344,  344,  344,   37,   38,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,   27,  344,  344,  344,  344,  344,  344,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  145,    0,  251,
        0,    0,    0,    0,    0,    0,  183,    0,    0,    0,
        0,  205,  209,  213,    0,    0,    0,    0,  120,  246,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      274,    0,    0,    0,    0,  344,  232,  344,  231,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  233,  344,  344,  344,  344,
        0,  105,    0,    0,    0,    0,  119,    0,    0,    0,
      133,    0,  253,  251,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  205,    0,    0,  114,    0,    0,    0,
        0,    0,    0,    0,  170,    0,    0,  274,  194,    0,
      202,    0,  232,  231,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,   21,  344,  344,  344,
       26,  233,  344,  344,  344,  344,  344,  105,    0,    0,
        0,  119,    0,  121,    0,  247,  133,  253,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  112,  116,

        0,    0,    0,  286,    0,    0,    0,  172,  178,  198,
        0,  344,  230,  344,  229,  344,  344,  344,  344,   15,
      344,  344,  344,  344,  344,   21,  344,  344,   26,  344,
      344,  344,   32,  344,  344,  344,    0,    0,  115,    0,
      121,  247,    0,    0,    0,    0,  171,    0,    0,    0,
      195,    0,    0,  203,    0,    0,    0,  286,    0,    0,
      166,    0,  230,  229,  344,    9,  344,  344,   15,  344,
      344,  344,  344,  344,  344,  344,   23,  344,  344,   32,
      344,  344,  344,   87,   88,    0,  113,  115,    0,  117,
        0,    0,    0,  171,    0,  173,    0,  179,  195,    0,

      199,  203,    0,    0,    0,  292,    0,  168,  248,    9,
      344,   11,  344,  344,  344,  344,   18,  344,  344,  344,
       23,  344,  228,  344,  227,  344,   55,   56,   85,   86,
      113,  117,    0,    0,    0,  167,    0,  173,  179,  199,
        0,    0,    0,    0,   11,  344,  344,  344,   18,  344,
      344,  344,   22,  228,  227,   53,   54,    0,  293,    0,
      167,    0,  169,    0,  249,    0,    0,    0,  344,  344,
      344,  344,  344,   22,  293,    0,  169,  249,    0,    0,
        0,  344,  344,  344,  344,  344,    0,    0,    0,    0,
      344,  344,  344,  344,  344,    0,    0,    0,    0,  344,

      344,  344,  344,  344,    0,    0,  278,    0,  282,  160,
      344,  344,  344,  344,  344,    0,  278,  282,  344,  344,
      344,  344,  344,    0,  161,  344,  290,  344,  344,  344,
       19,  344,   20,  161,  290,  344,  344,   17,   19,   20,
      344,   16,   17,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[2658] =
    {   0,
        0,   29, 4260, 4259, 4270, 4269, 4266, 4265,    0,    0,
        0,    0, 4256, 4255,   13,   17,    3,    5, 4269, 4278,
       57, 4263,  118, 4260,   39,  138, 4249,  168,  206,   25,
     4236, 4227,    0, 4278,    0,    0,    0, 4278, 4278, 4254,
     4278, 4278, 4245,    0,    0,  112,  181, 4244,  186,   44,
       53, 4231, 4222, 4221,   24, 4216, 4206,   94, 4198,    0,
     4216, 4202,   97,  101, 4202, 4214, 4209, 4278,  143,  199,
      206, 4278,  146, 4240,  243, 4278, 4278, 4223,  264,  116,
      104,  184,  137, 4202, 4205,  268, 4194,    0,  189,  268,
      215,  184,  165,  276,  141,  181, 4207,  163, 4220, 4213,

        0,    0,    0,    0, 4224, 4278, 4185, 4183,  192, 4183,
     4180, 4176, 4196, 4186, 4184, 4183, 4185, 4171, 4192, 4166,
     4173, 4174, 4180,  218, 4179,  263,  328, 4214,  311, 4197,
      296,  202,  222,  298,  297, 4176, 4179,  306, 4168,  261,
      322,  323,  320,  330,  218,  338,  245,  315, 4181, 4278,
     4162, 4160, 4167,  363, 4177, 4158, 4161,  318, 4157, 4155,
     4151, 4171, 4166,  247, 4164, 4153, 4156, 4153, 4142,  384,
       99, 4178, 4159, 4161,  299,  390,  340, 4143, 4147, 4147,
     4152, 4278, 4144, 4144, 4146, 4135, 4136, 4145, 4131, 4128,
     4135, 4130, 4125, 4139, 4128, 4131,  340, 4123, 4142,  364,

     4123, 4128, 4120, 4128, 4133,  355,  202, 4278, 4132, 4131,
     4129, 4136, 4130, 4119,  402, 4113, 4110, 4124, 4126, 4129,
     4134, 4113, 4119, 4116, 4117, 4101, 4099, 4121, 4111, 4278,
      408,  412,  417, 4098, 4096, 4103,  395, 4113, 4094, 4097,
      373, 4093, 4091, 4087, 4107,  424,  296, 4101, 4090, 4093,
     4090, 4079,  429,  384, 4115, 4096, 4098,  390,  433,  352,
     4080, 4084, 4084, 4089,  435, 4081, 4081, 4083, 4072, 4073,
     4082, 4068, 4065, 4072, 4067, 4062, 4076, 4065, 4068,  385,
     4060, 4079,  405, 4060, 4065, 4057, 4065, 4070,  397,  445,
     4053, 4088, 4055, 4056, 4054, 4060,  422, 4065, 4073, 4047,

      456, 4047, 4061, 4054, 4050, 4048, 4062, 4046,  458,  466,
     4053, 4052, 4278,  468,  474, 4051, 4035, 4036, 4040,  476,
     4047, 4046,  478,  484, 4032,  486, 4030,  488, 4043, 4046,
      434, 4044, 4040, 4035, 4031, 4037, 4022, 4035, 4035, 4017,
     4043, 4031, 4013,  490,  440, 4016, 4032,  410,  445,  506,
     4027, 4011,  408, 4029, 4015, 4024, 4006,  474,  476, 4019,
      509, 4000, 4006, 4025,  511,  513,  515,  518,  526, 4017,
     3996, 4019, 4018, 4024, 4012,  530,  533, 4011, 3990, 4006,
      535,  537,  541,  545, 3992, 4027, 3994, 3995, 3993, 3999,
      518, 4004, 4012,  550,  553, 3987, 4001, 3994, 3990,  555,

      558, 3988, 4002, 3986,  562,  566, 3993, 3992,  571,  573,
      575, 3991, 3975, 3976, 3980,  578, 3987, 3986,  582,  584,
     3972,  589, 3970,  591, 3983, 3986,  594,  598,  550, 3984,
      611, 3976, 3972, 3978, 3963, 3976, 3976, 3958, 3984, 3972,
     3954,  607,  558, 3957, 3973,  418,  475,  615, 3968, 3952,
      481, 3970, 3956, 3965, 3947,  617,  619,  623, 3966, 3957,
     3944, 3941, 3947, 3950, 3941,  609,  168, 3949, 3953, 3938,
      627,  636, 3952, 3938, 3951, 3954, 3948, 3943, 3946,  638,
      643,  648,  651, 3966, 3931,  654, 3924, 3946, 3941,  656,
      658, 3960, 3930, 3942,  661, 3933,  666,  668, 3940,  672,

      674, 3921,  676, 3919, 3929, 3932, 3931, 3932, 3921,  678,
     3915,  682, 3914, 3910, 3918, 3923, 3924, 3918,  688,  694,
     3906, 3920, 3921, 3905, 3902, 3900, 3911, 3899,  698,  700,
     3900, 3912,  549, 3902, 3903, 3899,  686, 3908, 3908, 3906,
     3909, 3908, 3890, 3892,  706,  708, 3890, 3896, 3879,  710,
      714,  716,  718,  721,  723,  726, 3885, 3886, 3891, 3882,
     3893, 3878,  733,  735,  741,  743,  749, 3881, 3876,  751,
      753,  756, 3894, 3885, 3872, 3869, 3875, 3878, 3869,  619,
      511, 3877, 3881,  758,  760, 3866,  764,  766, 3880, 3866,
     3879, 3882,  769, 3876, 3871, 3874,  771,  774,  776,  780,

     3894, 3859,  782,  784,  787, 3852, 3874, 3869,  789,  792,
      794, 3888, 3858, 3870,  798, 3861,  800,  802, 3868,  805,
      808, 3849,  810, 3847,  812, 3857, 3860, 3859,  816,  818,
     3860, 3849,  821, 3843,  823, 3842, 3838, 3846, 3851, 3852,
     3846,  826,  828, 3834, 3848, 3849, 3833, 3830, 3828, 3839,
     3827,  832,  834, 3828, 3840,  839, 3830, 3831, 3827,  824,
     3836,  844,  848, 3836, 3834, 3837,  851, 3825, 3830, 3834,
     3829, 3828, 3831, 3830, 3853, 3828, 4278, 3831, 3808, 3820,
      710,  855, 3811, 3815, 3818, 3821, 3807, 3807, 3801,  857,
      860, 3800, 3816, 3811, 3801, 3809,  862, 3832,  865, 4278,

     3809, 3793, 3786,  867, 3802,  872,  874,  879, 3827,  882,
     3802, 3792, 3787, 3786, 3783, 3793,  884, 4278,  856,  890,
      896,  900, 3798, 3780, 3793, 3777, 3794,  902, 3787, 3777,
     3789, 3788, 4278, 3773, 3771, 3789,  906, 3787, 3775,  854,
      909, 3780, 3796, 3762, 3789, 3774, 3777, 3762, 3756, 3773,
     3776, 3757, 3775, 3757,  911, 3769, 3757, 3756,  913,  916,
      918, 3802, 3799, 3775, 3763, 3752, 3774,  925,  658,  927,
     3796, 3793,  933, 3794, 3791,  940,  942, 3756, 3755,  948,
     3747, 3752, 3756, 3751, 3750, 3752, 3746, 3764, 3693,  950,
     3696,  952, 3686,  955,  829,  957, 3669, 3657, 3659, 3648,

     3631, 3630,   69,  959,  961,  214,  241,  963,  266,  276,
      309,  968,  970,  972,  974,  330,  328,  346,  976,  401,
      978,  980,  984,  986,  415,  434,  448,  487,  990,  515,
      544,  992,  996, 1000, 1002, 1008, 1010,  563,  551,  585,
      574,  596, 1012,  598,  612,  631,  641, 1018,  637,  638,
      661, 1020,  666,  678, 1022, 1026,  881, 1028,  689,  715,
      721,  767,  771,  791,  784, 1034,  788,  813,  833,  845,
      858,  858,  870,  877,  895,  883,  927,  892,  912, 4278,
      929,  940,  959,  944,  954, 1038,  960,  960,  977,  989,
      993,  990,  987, 1004, 4278, 1044, 1046, 1033, 1009, 1029,

     4278, 1011, 1051, 1054, 1056, 1060, 1049, 1062, 1025, 1016,
     4278, 1024, 1008, 1030, 1021, 1071, 1074, 1078, 1022, 1058,
     1028, 1036, 1044, 1035, 1062, 1086, 1091, 4278, 1056, 1039,
     1059, 1096, 1046, 1064, 1102, 1104, 1077, 1058, 1060, 1076,
     1057, 1064, 1081, 4278, 1074, 1068, 1063, 1068, 1059, 1122,
     1066, 1085, 4278, 4278, 1085, 1126, 1076, 1074, 1130, 1132,
     1099, 1099, 4278, 4278, 4278, 4278, 1138, 1134, 1137, 1145,
     1109, 1117, 1109, 1104, 1099, 1100, 1117, 1100, 1138, 1102,
     1157, 1160, 1108, 1163, 1165, 1167, 1116, 1122, 1136, 1119,
     1124, 1175, 1131, 1125, 1141, 1146, 1144, 1138, 1132, 1149,

     1187, 1191, 1193, 1195, 1150, 1177, 1198, 1161, 1203, 1205,
     1209, 1211, 1162, 1158, 1214, 1173, 1157, 1219, 1221, 1223,
     1186, 1178, 1230, 1232, 1234, 1174, 1215, 1185, 1193, 1201,
     1192, 1220, 1244, 1249, 1251, 1253, 1255, 1210, 1192, 1222,
     1260, 1262, 1206, 1230, 1267, 1271, 1246, 1224, 1226, 1243,
     1224, 1231, 1280, 1284, 1247, 1241, 1234, 1289, 1248, 4278,
     4278, 1246, 1238, 1251, 1244, 1262, 1259, 1246, 1258, 1278,
     1249, 1305, 1307, 1255, 1259, 4278, 1259, 1279, 1315, 4278,
     1278, 1318, 1278, 1322, 1278, 4278, 1325, 1327, 1281, 1332,
     1338, 1295, 1281, 1280, 1305, 1288, 1296, 1343, 1348, 1306,

     1311, 1312, 1352, 1306, 1307, 1301, 1357, 1344, 1360, 1367,
     1364, 1313, 1326, 1315, 1318, 1374, 1328, 1321, 1331, 1380,
     1335, 1348, 4278, 1359, 1342, 1339, 1335, 1339, 1353, 1350,
     1341, 1395, 1397, 1399, 1358, 1405, 1390, 1414, 1426, 1432,
     1357, 1434, 1353, 1368, 4278, 4278, 1436, 1438, 1388, 1366,
     1444, 1380, 1447, 1451, 1379, 1375, 1397, 1390, 1453, 1414,
     1455, 1457, 1460, 1424, 1410, 1422, 1443, 1414, 1469, 1475,
     1416, 1420, 1477, 1425, 1445, 1481, 1485, 1444, 1487, 1489,
     1493, 1498, 1445, 1503, 1505, 1507, 1509, 1514, 1516, 1460,
     1444, 1519, 1523, 1455, 1486, 1525, 1474, 1482, 1530, 1532,

     1496, 1497, 1498, 1538, 1492, 1493, 1487, 1543, 1545, 1548,
     1550, 1503, 1554, 1559, 1556, 1518, 1507, 1511, 1566, 1568,
     1522, 1516, 1526, 1575, 1529, 1542, 1579, 1555, 1538, 1535,
     1587, 1589, 1531, 1591, 1595, 1541, 1558, 1563, 1599, 1603,
     1547, 1566, 1554, 1560, 1566, 1556, 1557, 1592, 1565, 1566,
     1562, 1574, 1618, 1581, 4278, 1578, 1568, 1623, 1579, 1572,
     1600, 1574, 1629, 1616, 1632, 1595, 1600, 1636, 1587, 4278,
     1601, 1587, 1587, 1591, 1648, 1650, 1608, 1598, 1615, 1654,
     1621, 1627, 4278, 1602, 1605, 1660, 1664, 1653, 1666, 1619,
     1622, 1617, 1628, 1632, 1630, 1624, 1635, 1623, 1623, 1629,

     1649, 1630, 1631, 1645, 1632, 1628, 1637, 1688, 1690, 1696,
     1689, 1689, 1649, 1703, 1705, 1651, 1661, 1673, 1663, 1677,
     1665, 1672, 1681, 1718, 1719, 1719, 1725, 1729, 1674, 1681,
     1696, 1737, 1733, 1736, 1707, 1709, 1745, 1747, 1695, 1750,
     1752, 1754, 1756, 1719, 1706, 1713, 1719, 1709, 1766, 1710,
     1748, 1722, 1722, 1718, 1730, 1774, 1737, 1777, 1779, 1781,
     1740, 1730, 1785, 1787, 1743, 1736, 1795, 1797, 1764, 1801,
     1803, 1805, 1754, 1807, 1811, 1813, 1815, 1747, 1819, 1821,
     1770, 1763, 1768, 1769, 1827, 1829, 1796, 1778, 1795, 1835,
     1837, 1804, 1810, 1843, 1785, 1791, 1846, 1848, 1802, 1852,

     1807, 1802, 1813, 1859, 1817, 1818, 1812, 1823, 1812, 1866,
     1868, 1815, 1821, 1841, 1821, 1874, 1824, 1877, 1840, 1882,
     1828, 1884, 1827, 1869, 4278, 1854, 1832, 1836, 1839, 1847,
     1840, 1860, 1863, 1850, 1847, 1852, 1853, 1864, 1869, 1870,
     1867, 1907, 1909, 1902, 1865, 1866, 1894, 1862, 1873, 1871,
     1864, 1880, 1920, 1885, 1871, 1894, 1879, 1904, 1885, 1880,
     1880, 1931, 1880, 1880, 1897, 4278, 1900, 1889, 1902, 4278,
     1891, 1910, 1895, 1904, 1894, 1886, 1903, 1899, 4278, 1928,
     1900, 1952, 1947, 1949, 4278, 4278, 1908, 1960, 1955, 1957,
     1916, 1966, 1913, 1911, 1931, 1923, 1928, 1931, 1928, 1939,

     1929, 1925, 4278, 4278, 1978, 1979, 1979, 1942, 1943, 1950,
     4278, 4278, 1944, 1937, 1990, 1933, 1993, 1995, 1979, 1999,
     1966, 1944, 1948, 1951, 1960, 1953, 1972, 1974, 1961, 1958,
     2012, 2015, 2017, 1970, 1971, 2021, 1984, 1989, 2025, 1993,
     2029, 1984, 2032, 2014, 2035, 2037, 1986, 1997, 1995, 1988,
     2004, 2044, 2008, 1994, 2017, 2051, 2002, 2030, 2011, 2055,
     2057, 2010, 2010, 2007, 2023, 2063, 2028, 2017, 2030, 2068,
     2022, 2041, 2073, 2028, 2037, 2027, 2020, 2037, 2033, 2084,
     2086, 2088, 2028, 4278, 2061, 2048, 2053, 2041, 4278, 2041,
     4278, 2056, 2043, 2079, 2044, 2052, 4278, 2053, 2050, 2057,

     2051, 2059, 2060, 2108, 2064, 2072, 2073, 2055, 4278, 2065,
     2061, 2073, 2065, 2079, 4278, 2065, 2081, 4278, 2075, 2077,
     2068, 2075, 2125, 4278, 4278, 2075, 2089, 2077, 2081, 2095,
     2093, 2098, 4278, 2086, 2098, 2088, 2099, 2084, 2086, 4278,
     4278, 2141, 4278, 4278, 2143, 2145, 2147, 2102, 2150, 2105,
     2107, 2160, 2115, 2107, 2103, 2119, 2165, 4278, 4278, 2117,
     2110, 2115, 2131, 2117, 2172, 2146, 2133, 2138, 2180, 2182,
     2126, 2185, 2131, 2189, 2152, 2139, 2175, 2140, 2149, 2201,
     2205, 2150, 2151, 2160, 2155, 2163, 2172, 2154, 2213, 2217,
     2166, 2165, 2177, 2169, 2183, 2223, 2171, 2187, 2227, 2183,

     2230, 2188, 2179, 2235, 2239, 2243, 2245, 2247, 2185, 2202,
     2251, 2255, 2197, 2204, 2221, 2220, 2225, 2263, 2213, 2228,
     2267, 2269, 2271, 2241, 2241, 2222, 2229, 2218, 4278, 2232,
     4278, 2231, 2242, 2282, 4278, 2285, 2248, 2233, 2250, 2292,
     2247, 2247, 2298, 2246, 2253, 2249, 2254, 2276, 2253, 2271,
     4278, 2265, 2270, 2256, 2256, 2314, 2316, 2265, 2287, 2272,
     2299, 2282, 2284, 2286, 2283, 2286, 2288, 2269, 2293, 2291,
     2331, 2333, 2339, 2341, 2281, 2343, 2298, 2346, 2348, 2297,
     2308, 2354, 2356, 2315, 2306, 2305, 2322, 2308, 2310, 2364,
     2366, 2331, 2335, 2325, 2351, 2330, 2337, 2343, 2376, 2379,

     2348, 2329, 2336, 2384, 2327, 2387, 2389, 2392, 2394, 2396,
     2351, 2399, 2352, 2364, 2404, 2410, 2412, 2415, 2417, 2367,
     2353, 2381, 2373, 2372, 2423, 2426, 2380, 2376, 2382, 2405,
     2382, 2435, 2439, 2402, 2441, 2443, 2445, 2404, 2409, 2395,
     2451, 2453, 2459, 2461, 2463, 2467, 2469, 2408, 2426, 2471,
     2418, 2452, 2436, 2438, 2440, 2478, 2480, 2442, 2445, 2485,
     2444, 2461, 2444, 2441, 2472, 2455, 2440, 4278, 2496, 2483,
     2499, 2501, 2488, 2506, 2456, 2455, 4278, 2513, 2517, 2472,
     2461, 2520, 2522, 2472, 2494, 4278, 2478, 2472, 4278, 2477,
     2470, 2493, 4278, 2480, 2533, 2501, 2483, 2503, 2504, 2488,

     4278, 2502, 4278, 2522, 2525, 2544, 2494, 2547, 2549, 2548,
     2548, 2556, 2507, 2508, 2562, 2564, 2518, 2567, 2515, 2552,
     2528, 2520, 2538, 2574, 2576, 2521, 2545, 2541, 2542, 2531,
     2535, 2547, 2591, 2566, 2549, 2546, 2577, 2598, 2600, 2602,
     2604, 2567, 2607, 2609, 2556, 2612, 2616, 2618, 2620, 2623,
     2625, 2628, 2632, 2566, 2577, 2634, 2582, 2585, 2639, 2641,
     2644, 2598, 2592, 2650, 2652, 2596, 2654, 2657, 2660, 2602,
     2625, 2666, 2670, 2673, 2675, 2629, 2614, 2642, 2643, 2627,
     2682, 2641, 2684, 2686, 2668, 2642, 2635, 2641, 2661, 2641,
     2659, 2647, 2648, 2698, 2702, 2691, 2704, 2706, 2699, 2655,

     4278, 2710, 2673, 2660, 2716, 2675, 2669, 2690, 2667, 2668,
     2688, 4278, 2687, 2671, 2691, 2673, 2676, 4278, 4278, 2683,
     2681, 2682, 2732, 2734, 2682, 2737, 2739, 4278, 4278, 2706,
     2708, 2747, 2749, 2706, 2709, 2704, 2718, 2716, 2707, 2722,
     2709, 2731, 2706, 2762, 2764, 2766, 2722, 2730, 2718, 2732,
     2729, 2726, 2719, 2725, 2746, 2726, 2744, 2781, 2735, 2784,
     2738, 2787, 2789, 2791, 2793, 2795, 2743, 2798, 2800, 2803,
     2752, 2767, 2807, 2809, 2762, 2816, 2818, 2782, 2760, 2820,
     2823, 2771, 2826, 2793, 2829, 2832, 2836, 2780, 2803, 2785,
     2788, 2841, 2845, 2848, 2850, 2852, 2854, 2797, 2818, 2811,

     2820, 2811, 2803, 2809, 2810, 2812, 2868, 2832, 2871, 2833,
     2821, 2827, 4278, 2823, 2831, 2839, 2829, 2848, 2827, 2843,
     2840, 2832, 2842, 4278, 2847, 2841, 2831, 2889, 2873, 2892,
     2891, 2891, 2855, 2845, 2900, 2867, 2848, 2857, 2862, 2854,
     2862, 2857, 2862, 2856, 2857, 2913, 2915, 2917, 2880, 2868,
     2868, 2899, 2867, 2885, 2878, 2888, 2878, 2871, 2877, 2878,
     2879, 2934, 2883, 2937, 2939, 2941, 2943, 2892, 2946, 2902,
     2949, 2912, 2903, 2954, 2924, 2903, 2959, 2961, 2963, 2922,
     2914, 2924, 2968, 2970, 2972, 2975, 2977, 2979, 2981, 2945,
     4278, 2950, 2948, 2953, 4278, 2954, 2937, 4278, 2952, 2950,

     4278, 2957, 2942, 2941, 2944, 2943, 2956, 2957, 3001, 2954,
     2950, 2956, 2959, 3007, 3009, 2962, 2963, 4278, 4278, 2965,
     2971, 2963, 2978, 2965, 2980, 2965, 2967, 2981, 2972, 2972,
     2974, 3028, 2977, 3031, 2979, 2996, 3000, 2997, 3037, 3003,
     3001, 3006, 3042, 3009, 2993, 3047, 3049, 3053, 3055, 3058,
     2998, 3005, 3008, 3008, 3022, 3023, 3067, 3020, 3017, 3023,
     3073, 3075, 3077, 3079, 3034, 3043, 3045, 3047, 4278, 4278,
     3032, 3040, 3048, 3046, 3036, 3036, 3038, 3046, 3045, 3095,
     3097, 3051, 3061, 3053, 3063, 3103, 3105, 3107, 3111, 3063,
     3056, 3060, 3066, 3096, 3065, 3065, 3083, 3076, 3069, 3089,

     3125, 3077, 3089, 3129, 3131, 3133, 3117, 3078, 3090, 3085,
     3140, 3148, 3103, 3106, 3109, 3150, 3152, 3156, 3158, 3160,
     3162, 3166, 3168, 3176, 3111, 3110, 3115, 3118, 3127, 3129,
     3131, 3141, 3134, 3183, 3146, 3134, 4278, 3148, 3151, 3150,
     3190, 3143, 3150, 3148, 4278, 3156, 3148, 3197, 4278, 3161,
     4278, 3152, 3201, 3203, 3206, 3208, 3157, 3163, 3154, 3213,
     3163, 3162, 3163, 3175, 3183, 3223, 3225, 3166, 3175, 3229,
     3231, 3233, 3186, 3187, 3238, 3201, 3241, 3244, 3194, 3247,
     3210, 3250, 3253, 3256, 3258, 3260, 3263, 3265, 3218, 3226,
     3224, 3271, 3235, 3227, 3276, 3240, 3279, 3233, 4278, 4278,

     3230, 3265, 3284, 3287, 3241, 3241, 3238, 4278, 4278, 4278,
     3239, 3295, 3297, 3300, 3302, 3304, 3253, 3257, 3310, 3312,
     3273, 3272, 3263, 3268, 3273, 3320, 3268, 3325, 3327, 3277,
     3272, 3330, 3332, 3334, 3336, 3340, 3346, 3351, 3353, 3355,
     3357, 3359, 3290, 3293, 3295, 3362, 3364, 3367, 3371, 3373,
     3375, 3378, 3380, 3383, 3315, 3342, 3335, 3389, 3338, 3344,
     3341, 3343, 3397, 3399, 3401, 3403, 3405, 3355, 3408, 3367,
     3355, 3412, 3366, 3377, 3364, 3420, 3422, 3424, 3427, 3429,
     3431, 3439, 3446, 3415, 3428, 3435, 3452, 3454, 3456, 3458,
     3384, 3395, 3460, 3462, 3464, 3466, 3468, 3472, 3476, 3480,

     3484, 3486, 3395, 3420, 3435, 4278, 3447, 4278, 4278, 3488,
     3490, 3492, 3443, 3446, 3457, 3497, 3499, 3471, 3472, 3505,
     3507, 3509, 3514, 3516, 3520, 3524, 3500, 3507, 4278, 4278,
     3531, 3533, 3535, 3487, 3537, 3539, 3541, 3543, 3545, 3547,
     3553, 3468, 3491, 3474, 3557, 3496, 3497, 3525, 3559, 3522,
     3523, 3563, 3565, 3569, 3571, 4278, 4278, 3573, 3575, 3513,
     3578, 3580, 3582, 3584, 3586, 3546, 3536, 3556, 3539, 3563,
     3555, 3543, 3544, 3600, 3602, 3563, 3604, 3606, 3559, 3560,
     3556, 3568, 3573, 3560, 3559, 3560, 3562, 3569, 3566, 3564,
     3571, 3568, 3567, 3577, 3578, 3570, 3626, 3628, 3577, 3583,

     3577, 3587, 3580, 3581, 3583, 3637, 3639, 3644, 3646, 4278,
     3589, 3602, 3595, 3597, 3598, 3653, 3655, 3657, 3660, 3608,
     3610, 3664, 3666, 3669, 3671, 3675, 3681, 3620, 3685, 3687,
     3690, 3692, 3694, 3696, 3702, 3704, 3707, 3709, 3711, 3713,
     3715, 3719, 3722, 3724, 4278, 3731, 3736, 3741, 3746, 3751,
     3756, 3761, 3766, 3771, 3775, 3780, 3785
    } ;

static yyconst flex_int16_t yy_def[2658] =
    {   0,
     2646, 2646, 2647, 2647, 2648, 2648, 2649, 2649, 2650, 2650,
     2650, 2650, 2651, 2651, 2652, 2652, 2653, 2653, 2645, 2645,
     2645, 2645,   21, 2645,   23,   23,   23,   23, 2645, 2645,
       23,   23, 2654, 2645, 2655, 2656, 2657, 2645, 2645, 2645,
     2645, 2645, 2645,   21,   23,   23,   23,   23,   23,   29,
     2645,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2645,   23,   23,
       23, 2645,   23, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,   23,

     2654, 2655, 2656, 2657, 2645, 2645,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645,   23, 2645,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2645, 2645,   23,   23,   23,   23,   23,   23,   23,
     2645, 2645,   23, 2645, 2645,   23,   23,   23,   23, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23,
       23,   23, 2645, 2645,   23,   23,   23,   23,   23,   23,
       23,   23, 2645, 2645, 2645, 2645,   23, 2645, 2645,   23,
       23, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2645, 2645,   23,   23,   23, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23,   23,
     2645, 2645,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2645, 2645,   23,   23,   23,   23,
       23,   23, 2645, 2645,   23, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,
       23,   23, 2645, 2645, 2645, 2645,   23,   23, 2645, 2645,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23, 2645, 2645,   23, 2645, 2645,   23,   23,   23,
     2645, 2645,   23, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23, 2645,
     2645,   23, 2645, 2645,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2645, 2645,   23,
       23,   23,   23, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645,   23,   23,   23,   23,   23, 2645,
     2645,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
       23,   23,   23,   23,   23,   23,   23, 2645, 2645,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23,   23,
     2645, 2645,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645,   23,   23,   23,   23, 2645, 2645,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,   23,   23,
       23,   23,   23,   23, 2645, 2645, 2645, 2645, 2645, 2645,
     2645,   23,   23,   23,   23,   23, 2645, 2645, 2645, 2645,
       23,   23,   23,   23,   23, 2645, 2645, 2645, 2645,   23,

       23,   23,   23,   23, 2645, 2645, 2645, 2645, 2645, 2645,
       23,   23,   23,   23,   23, 2645, 2645, 2645,   23,   23,
       23,   23,   23, 2645, 2645,   23,   23,   23,   23,   23,
       23,   23,   23, 2645,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,    0, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645
    } ;

static yyconst flex_int16_t yy_nxt[4341] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   42,   25,   26,
       27,   28,   28,   28,   29,   39,   30,   20, 2645,   39,
       43,   40,   43, 2645,   31,   40,   98,   98,   32,   20,
       21,   21,   20,   22, 2645,   24,  115,   25,   26,   27,
       28,   28,   28,   29,  175,   30,   20, 2645,   47,  176,
       49,   49,   49,   31,   98,   98,  116,   32,   44,   44,
      108, 2645,   45,   52,   45,   46,   47,   48,   49,   49,
       49,   50,   45,   51,  109,   45,   45,   45,   45,   45,
       45,   52,   45,   45,   45,   53,   45,   45,   45,   45,
       45,   45,   45,   45,   54,   55,   56,   57,   45,   45,

       45,   58,   45,   45,   45,   59,   60,   61,   45,   45,
       62,   63,   64,   65,   66,   67,   45,   45,   45,   45,
       45,   47,  996,   49,   49,   49,   45,   45,   45,   45,
       45,   45, 2645,  112, 2645,  119,   52,  121,  316,   69,
       69,  120,   45,  113,   69,   69,   45,   73,   73,   70,
       70,   70,  156,  317,  158,   45,   45,   45,   45,   71,
      159,  122,   45,  157,   98,   98,   45,   45,   45,   73,
       73,   45,   45,   45,   45,   45,   45,   47,   71,   49,
       49,   49,   69,   69,  163,  202,  164,   73,   73,   71,
      165,  203,   70,   70,   70,   47,  166,   49,   49,   49,

       69,   69,   71,   69,   69,  192,  677,   71,   71,   74,
       70,   70,   70,  126,  126,  193,   75,  127,  127,  127,
       71,   71,  678,   76,  160,  177,   71,   77,  161,  178,
      204,  189,  211,  179,  190,  205,   78,  191,  239,   71,
      162,  212,   79,   80,   81,   82,   83,   84,   85,  240,
       86,   87,  185,   88,   89,   90,   91,   92,  275,   93,
       94,   95,   96,   97,  129,  227,  186,  997,  276,  187,
      188,  228,  241,  130,  127,  127,  127,  998,  242,  131,
      132,  133,  134,  135,  136,  137,  307,  138,  139,  285,
      140,  141,  142,  143,  144,  286,  145,  146,  147,  148,

      149,  151,  152,  308,  180,  258,  999,  169,  181,  170,
      259,  153,  231,  231,  194,  182,  195,  171,  183,  154,
      196,  155,  172,  173,  184, 1000,  197,  232,  198,   69,
       69,  199,  200,  234,  235,  403,  201,  321,  243,  127,
      127,  127,  244,  236,  246,  252,  247,  253,  322, 1001,
      248,  237,  404,  238,  245,  254,  249,  268,  260,  263,
      255,  256,  261,  264,  287,  299,  262,  300, 1005,  288,
      265,  269,  301,  266,  270,  271,  277,  272,  278,  267,
      273, 1006,  279,  274,  293,  314,  314,  345,  280,  294,
      281,  323,  323,  282,  283,  325,  346,  295,  284,  326,

      315,  349,  357,  365,  365, 1007,  324,  421,  358,  231,
      231,  422,  350,  381,  381,  351,  387,  366,  382,  382,
      393,  388,  394,  412,  232,  400,  400,  395,  417,  389,
      410,  410,  443,  383,  419,  419,  427,  427,  413,  418,
      401,  444,  447, 1008,  455,  411,  457,  457,  533,  420,
      456,  428,  534,  448,  465, 1012,  449,  471,  471,  480,
      480,  458,  466,  525,  402,  526,  467,  482,  482,  314,
      314,  648,  472,  649,  481,  486,  486,  491,  491,  323,
      323,  505,  483, 1013,  315,  495,  495,  497,  497,  500,
      500,  519,  519,  527,  324,  506,  521,  522,  539,  528,

      492, 1014,  498,  542,  501,  540,  520,  529,  529,  543,
      545,  545,  365,  365,  550,  550,  551,  551,  541,  553,
      553,  656,  530,  650,  546,  657,  366,  555,  555,  651,
      552,  563,  563,  554,  565,  565,  381,  381,  382,  382,
     1015,  556,  570,  570,  502,  564,  571,  571,  566,  790,
      579,  584,  584,  383,  587,  587,  400,  400,  580,  593,
      593,  572,  581,  597,  597,  791,  585,  599,  599,  588,
     1016,  401,  603,  603,  410,  410,  605,  605,  598,  610,
      610,  740,  600,  419,  419,  615,  615,  604, 1017,  411,
      617,  617,  620,  620,  611,  427,  427,  626,  420,  625,

      625, 1026,  612,  741,  586,  618, 1027,  621,  642,  642,
      428,  627,  629,  629,  644,  645,  652,  652,  662,  662,
      457,  457,  675,  643,  667,  667, 1028,  630,  471,  471,
     1029,  653,  788,  663, 1030,  458,  676,  682,  682,  480,
      480,  664, 1031,  472,  690,  690,  789,  622,  665,  482,
      482,  631,  691,  691,  481,  486,  486,  697,  697,  491,
      491,  666,  495,  495,  483, 1032,  698,  497,  497,  704,
      704, 1033,  699,  500,  500,  706,  706,  708,  708,  717,
      717, 1034,  498,  720,  720,  961,  709,  962,  501,  519,
      519, 1037,  710, 1038,  718,  728,  728, 1039,  721,  529,

      529,  737,  737, 1040,  520,  745,  746,  545,  545,  755,
      755,  550,  550,  747,  530,  551,  551,  759,  759,  553,
      553,  546,  760,  760,  555,  555, 1041,  761,  761,  552,
      762, 1047,  763,  554,  563,  563,  770,  770,  556,  771,
     1048,  772,  565,  565,  773,  773,  882,  774,  564,  775,
      776,  776,  570,  570,  571,  571,  566,  780,  780,  584,
      584,  794,  794,  883,  777,  587,  587,  796,  796,  572,
      593,  593,  597,  597,  585,  804,  804,  599,  599, 1049,
      588,  805,  805,  603,  603,  808,  808,  598,  605,  605,
      812,  812,  600,  610,  610,  814,  814, 1050,  604,  615,

      615,  617,  617,  819,  819,  813,  620,  620,  611,  821,
      821,  823,  823,  625,  625, 1051,  618,  629,  629,  829,
      829,  621,  832,  832,  835,  835,  824,  642,  642,  843,
      843, 1052,  630,  652,  652,  852,  852,  833, 1053,  836,
      855,  855,  643,  862,  863,  662,  662, 1054,  653,  866,
      866,  864,  667,  667, 1055,  856,  682,  682,  690,  690,
      663,  691,  691,  697,  697,  988,  897,  897,  704,  704,
     1056,  857,  698,  706,  706,  903,  903, 1057,  699,  898,
      708,  708,  989,  906,  906,  717,  717,  914,  915,  709,
      904,  720,  720,  858,  933,  710,  907,  916,  916, 1058,

      718,  917,  917,  728,  728, 1059,  721,  737,  737,  934,
      935,  935,  755,  755,  759,  759,  918,  760,  760,  761,
      761, 1043,  762, 1060,  763,  936,  959,  959,  770,  770,
     1061,  771, 1062,  772,  773,  773, 1044,  774, 1063,  775,
      960,  776,  776,  967,  967, 1064,  968, 1065,  969,  780,
      780,  981,  981,  984,  984,  777,  794,  794,  796,  796,
      804,  804,  805,  805,  808,  808,  982, 1066,  985,  812,
      812, 1002, 1002,  814,  814, 1003, 1003,  819,  819,  821,
      821, 1009, 1009, 1067,  813,  823,  823, 1011, 1011, 1068,
     1004,  829,  829,  832,  832, 1069, 1010, 1018, 1018, 1070,

      824, 1019, 1019,  835,  835, 1071,  986, 1074,  833, 1023,
     1023, 1024, 1024,  843,  843, 1075, 1020, 1076,  836, 1035,
     1035,  852,  852,  855,  855, 1077, 1025, 1042, 1042, 1045,
     1045, 1021, 1022, 1078, 1036,  866,  866, 1079,  856, 1072,
     1072, 1080, 1081, 1083, 1046, 1082, 1082,  897,  897, 1084,
     1085, 1086,  903,  903, 1073, 1087, 1087, 1088, 1088, 1089,
      898,  906,  906, 1090, 1090, 1092, 1093,  904, 1094, 1095,
     1096, 1097,  916,  916,  907,  917,  917, 1099, 1091, 1098,
     1098, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1107, 1113,
      918, 1106, 1110, 1110, 1114, 1115, 1108, 1116, 1116, 1118,

     1119, 1121, 1109,  935,  935, 1120, 1120, 1111, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,  936, 1132,
     1117, 1135, 1112, 1133, 1133, 1136, 1137, 1138, 1138, 1140,
     1141,  959,  959, 1142, 1142, 1143, 1144, 1134, 1145,  967,
      967, 1139,  968, 1146,  969,  960, 1147, 1147, 1149, 1150,
     1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,  981,  981,
     1148, 1159, 1159, 1160,  984,  984, 1161, 1161, 1162, 1162,
     1164, 1165, 1166,  982, 1167, 1168, 1169, 1169, 1171,  985,
     1172, 1173, 1174, 1163, 1175, 1176, 1177, 1178, 1179, 1179,
     1182, 1170, 1002, 1002, 1003, 1003, 1181, 1181, 1183, 1184,

     1184, 1186, 1190, 1180, 1009, 1009, 1187, 1187, 1191, 1004,
     1011, 1011, 1188, 1188, 1185, 1192, 1192, 1194, 1195, 1010,
     1018, 1018, 1019, 1019, 1196, 1196, 1197, 1189, 1198, 1200,
     1193, 1023, 1023, 1024, 1024, 1199, 1199, 1020, 1201, 1202,
     1203, 1204, 1205, 1216, 1206, 1208, 1208, 1217, 1025, 1207,
     1210, 1210, 1035, 1035, 1213, 1213, 1214, 1214, 1218, 1222,
     1209, 1219, 1219, 1042, 1042, 1211, 1223, 1036, 1045, 1045,
     1225, 1215, 1224, 1224, 1226, 1227, 1220, 1228, 1229, 1230,
     1212, 1231, 1231, 1046, 1221, 1234, 1234, 1236, 1237, 1238,
     1239, 1239, 1241, 1242, 1243, 1244, 1232, 1245, 1246, 1247,

     1235, 1248, 1249, 1250, 1252, 1240, 1072, 1072, 1253, 1253,
     1251, 1254, 1233, 1255, 1256, 1257, 1258, 1258, 1261, 1082,
     1082, 1073, 1262, 1263, 1263, 1266, 1087, 1087, 1088, 1088,
     1267, 1269, 1264, 1090, 1090, 1270, 1259, 1271, 1265, 1268,
     1268, 1272, 1273, 1274, 1098, 1098, 1277, 1260, 1091, 1275,
     1275, 1278, 1279, 1280, 1280, 1283, 1284, 1285, 1107, 1107,
     1286, 1287, 1287, 1290, 1276, 1289, 1289, 1108, 1110, 1110,
     1291, 1292, 1293, 1109, 1288, 1116, 1116, 1294, 1295, 1296,
     1281, 1120, 1120, 1111, 1297, 1298, 1282, 1299, 1301, 1302,
     1303, 1300, 1304, 1305, 1306, 1307, 1308, 1308, 1133, 1133,

     1310, 1310, 1313, 1311, 1329, 1312, 1314, 1314, 1330, 1316,
     1309, 1317, 1134, 1331, 1318, 1138, 1138, 1335, 1319, 1320,
     1315, 1336, 1321, 1322, 1339, 1323, 1344, 1324, 1324, 1139,
     1325, 1345, 1326, 1327, 1327, 1142, 1142, 1147, 1147, 1332,
     1332, 1346, 1333, 1347, 1334, 1337, 1337, 1328, 1340, 1340,
     1348, 1148, 1342, 1342, 1159, 1159, 1161, 1161, 1162, 1162,
     1338, 1349, 1349, 1341, 1350, 1351, 1352, 1343, 1353, 1355,
     1169, 1169, 1357, 1163, 1358, 1354, 1356, 1356, 1359, 1359,
     1361, 1362, 1363, 1363, 1369, 1170, 1367, 1367, 1179, 1179,
     1370, 1370, 1373, 1360, 1181, 1181, 1378, 1364, 1379, 1371,

     1371, 1368, 1365, 1180, 1184, 1184, 1374, 1374, 1375, 1375,
     1187, 1187, 1381, 1366, 1372, 1188, 1188, 1377, 1377, 1185,
     1192, 1192, 1382, 1376, 1380, 1380, 1196, 1196, 1383, 1384,
     1189, 1199, 1199, 1385, 1385, 1193, 1387, 1388, 1389, 1390,
     1390, 1394, 1395, 1396, 1208, 1208, 1397, 1397, 1386, 1210,
     1210, 1398, 1398, 1399, 1391, 1213, 1213, 1400, 1400, 1209,
     1214, 1214, 1401, 1402, 1211, 1403, 1392, 1219, 1219, 1404,
     1404, 1405, 1393, 1406, 1407, 1215, 1224, 1224, 1408, 1409,
     1410, 1410, 1220, 1412, 1414, 1415, 1417, 1413, 1231, 1231,
     1416, 1416, 1234, 1234, 1419, 1411, 1418, 1418, 1420, 1421,

     1239, 1239, 1423, 1232, 1422, 1422, 1424, 1235, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1240, 1432, 1433, 1434, 1253,
     1253, 1435, 1436, 1437, 1258, 1258, 1438, 1439, 1440, 1441,
     1263, 1263, 1442, 1443, 1443, 1445, 1446, 1268, 1268, 1264,
     1447, 1448, 1449, 1450, 1454, 1265, 1444, 1451, 1452, 1275,
     1275, 1453, 1453, 1455, 1456, 1280, 1280, 1457, 1458, 1460,
     1461, 1462, 1462, 1463, 1276, 1287, 1287, 1289, 1289, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1288, 1473,
     1474, 1475, 1459, 1476, 1477, 1478, 1479, 1480, 1481, 1308,
     1308, 1482, 1482, 1485, 1483, 1486, 1484, 1310, 1310, 1487,

     1311, 1491, 1312, 1309, 1314, 1314, 1488, 1488, 1492, 1489,
     1493, 1490, 1494, 1496, 1497, 1499, 1501, 1502, 1315, 1324,
     1324, 1500, 1325, 1503, 1326, 1504, 1327, 1327, 1495, 1508,
     1505, 1505, 1498, 1506, 1509, 1507, 1510, 1511, 1332, 1332,
     1328, 1333, 1512, 1334, 1513, 1514, 1337, 1337, 1515, 1515,
     1516, 1340, 1340, 1517, 1517, 1342, 1342, 1518, 1518, 1519,
     1520, 1338, 1521, 1522, 1523, 1524, 1341, 1349, 1349, 1525,
     1343, 1526, 1527, 1528, 1529, 1356, 1356, 1530, 1531, 1531,
     1359, 1359, 1533, 1533, 1534, 1535, 1363, 1363, 1536, 1536,
     1537, 1538, 1540, 1532, 1542, 1360, 1367, 1367, 1539, 1539,

     1544, 1364, 1370, 1370, 1371, 1371, 1541, 1541, 1374, 1374,
     1547, 1368, 1375, 1375, 1543, 1543, 1377, 1377, 1548, 1372,
     1545, 1545, 1380, 1380, 1549, 1550, 1551, 1376, 1385, 1385,
     1552, 1552, 1553, 1554, 1555, 1546, 1390, 1390, 1556, 1556,
     1557, 1558, 1562, 1386, 1560, 1560, 1563, 1397, 1397, 1398,
     1398, 1391, 1564, 1400, 1400, 1565, 1566, 1567, 1568, 1561,
     1404, 1404, 1569, 1570, 1571, 1559, 1572, 1410, 1410, 1573,
     1573, 1574, 1575, 1576, 1577, 1416, 1416, 1578, 1418, 1418,
     1579, 1583, 1411, 1580, 1580, 1422, 1422, 1584, 1585, 1586,
     1588, 1589, 1590, 1591, 1592, 1593, 1587, 1594, 1581, 1595,

     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1604,
     1443, 1443, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1453, 1453, 1444, 1614, 1615, 1616, 1617, 1618, 1619,
     1620, 1621, 1462, 1462, 1622, 1623, 1582, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1639, 1640, 1637, 1482, 1482, 1641, 1483, 1642, 1484, 1643,
     1638, 1488, 1488, 1644, 1489, 1645, 1490, 1646, 1646, 1648,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1505,
     1505, 1647, 1506, 1658, 1507, 1659, 1660, 1661, 1662, 1663,
     1664, 1515, 1515, 1665, 1517, 1517, 1518, 1518, 1666, 1667,

     1669, 1669, 1671, 1672, 1673, 1674, 1668, 1675, 1676, 1677,
     1678, 1679, 1680, 1531, 1531, 1670, 1681, 1681, 1533, 1533,
     1682, 1683, 1536, 1536, 1684, 1685, 1539, 1539, 1532, 1686,
     1541, 1541, 1687, 1543, 1543, 1688, 1545, 1545, 1689, 1689,
     1690, 1691, 1692, 1693, 1694, 1552, 1552, 1695, 1696, 1697,
     1698, 1546, 1556, 1556, 1699, 1700, 1560, 1560, 1701, 1701,
     1702, 1703, 1704, 1705, 1706, 1706, 1708, 1709, 1710, 1711,
     1711, 1561, 1713, 1714, 1573, 1573, 1715, 1716, 1717, 1707,
     1718, 1719, 1720, 1724, 1712, 1580, 1580, 1721, 1721, 1722,
     1722, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,

     1581, 1734, 1735, 1736, 1723, 1737, 1738, 1739, 1740, 1604,
     1604, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1754, 1755, 1756, 1756, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1770, 1757, 1771, 1771, 1773, 1773, 1646, 1646, 1776, 1776,
     1777, 1778, 1778, 1780, 1781, 1785, 1772, 1788, 1774, 1789,
     1647, 1782, 1782, 1786, 1787, 1779, 1790, 1790, 1794, 1795,
     1796, 1797, 1798, 1799, 1799, 1783, 1801, 1802, 1803, 1805,
     1791, 1669, 1669, 1804, 1804, 1808, 1806, 1806, 1800, 1792,
     1809, 1809, 1811, 1812, 1813, 1814, 1670, 1775, 1815, 1818,

     1784, 1807, 1816, 1816, 1819, 1810, 1681, 1681, 1820, 1793,
     1821, 1822, 1823, 1824, 1689, 1689, 1827, 1817, 1825, 1825,
     1828, 1829, 1830, 1831, 1832, 1832, 1834, 1835, 1836, 1836,
     1838, 1701, 1701, 1826, 1839, 1840, 1841, 1841, 1848, 1833,
     1843, 1843, 1849, 1837, 1706, 1706, 1845, 1845, 1846, 1846,
     1851, 1842, 1711, 1711, 1852, 1844, 1850, 1850, 1853, 1707,
     1854, 1855, 1858, 1847, 1856, 1856, 1859, 1712, 1721, 1721,
     1722, 1722, 1860, 1860, 1861, 1862, 1863, 1864, 1865, 1857,
     1866, 1867, 1868, 1869, 1869, 1723, 1872, 1872, 1875, 1876,
     1877, 1880, 1870, 1878, 1878, 1873, 1881, 1884, 1871, 1882,

     1882, 1874, 1885, 1886, 1887, 1888, 1889, 1890, 1879, 1891,
     1892, 1893, 1894, 1896, 1883, 1756, 1756, 1895, 1895, 1897,
     1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
     1757, 1908, 1771, 1771, 1909, 1909, 1913, 1910, 1914, 1911,
     1773, 1773, 1912, 1912, 1776, 1776, 1772, 1778, 1778, 1915,
     1915, 1916, 1917, 1919, 1774, 1782, 1782, 1918, 1918, 1920,
     1921, 1779, 1922, 1923, 1924, 1790, 1790, 1925, 1925, 1783,
     1926, 1927, 1928, 1929, 1930, 1931, 1932, 1799, 1799, 1791,
     1933, 1933, 1934, 1935, 1936, 1804, 1804, 1937, 1806, 1806,
     1938, 1938, 1800, 1939, 1939, 1809, 1809, 1941, 1941, 1942,

     1943, 1943, 1945, 1807, 1946, 1947, 1947, 1954, 1940, 1955,
     1810, 1816, 1816, 1949, 1949, 1944, 1950, 1950, 1952, 1952,
     1948, 1956, 1957, 1958, 1825, 1825, 1817, 1959, 1959, 1960,
     1961, 1951, 1962, 1953, 1963, 1964, 1832, 1832, 1966, 1826,
     1965, 1965, 1967, 1967, 1836, 1836, 1969, 1969, 1970, 1971,
     1972, 1833, 1841, 1841, 1973, 1973, 1976, 1968, 1977, 1837,
     1843, 1843, 1974, 1974, 1845, 1845, 1978, 1842, 1846, 1846,
     1975, 1975, 1850, 1850, 1979, 1844, 1980, 1981, 1982, 1856,
     1856, 1983, 1983, 1847, 1984, 1985, 1860, 1860, 1986, 1987,
     1989, 1990, 1991, 1988, 1857, 1992, 1993, 1869, 1869, 1994,

     1995, 1995, 1872, 1872, 1997, 2000, 1870, 1998, 1998, 2001,
     2003, 1873, 1871, 1996, 1878, 1878, 2004, 1874, 2002, 2002,
     1999, 1882, 1882, 2005, 2005, 2006, 2007, 2008, 2009, 1879,
     2010, 2011, 2012, 2013, 1895, 1895, 1883, 2014, 2015, 2016,
     2017, 2018, 2019, 2020, 2021, 2023, 2023, 2025, 2026, 2026,
     1909, 1909, 2028, 1910, 2029, 1911, 2022, 1912, 1912, 2024,
     2030, 2031, 2027, 1915, 1915, 2032, 2032, 2034, 1918, 1918,
     2035, 2036, 2041, 2042, 2043, 2044, 2044, 1925, 1925, 2033,
     2046, 2037, 2047, 2038, 2039, 2048, 2049, 2040, 2050, 2045,
     2051, 2052, 1933, 1933, 2053, 2055, 2056, 2057, 2054, 1938,

     1938, 1939, 1939, 2058, 2058, 1941, 1941, 2059, 1943, 1943,
     2060, 2060, 2061, 2062, 2062, 2067, 1940, 1947, 1947, 2064,
     2064, 1949, 1949, 1944, 1950, 1950, 2065, 2065, 2063, 1952,
     1952, 2068, 1948, 2066, 2066, 2069, 2069, 2071, 2072, 1951,
     1959, 1959, 2073, 2073, 1953, 2076, 2076, 2078, 2079, 2082,
     2070, 2080, 2080, 1965, 1965, 1967, 1967, 2074, 2083, 2083,
     2077, 1969, 1969, 2084, 2085, 2088, 2081, 2086, 2086, 2089,
     1968, 1973, 1973, 2075, 1974, 1974, 1975, 1975, 2090, 2091,
     2092, 2095, 2087, 2093, 2093, 1983, 1983, 2096, 2096, 2098,
     2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2094, 2107,

     2107, 2108, 2097, 1995, 1995, 2109, 2109, 1998, 1998, 2110,
     2111, 2002, 2002, 2112, 2113, 2114, 1996, 2005, 2005, 2115,
     1999, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
     2125, 2126, 2127, 2023, 2023, 2128, 2128, 2129, 2026, 2026,
     2130, 2130, 2133, 2131, 2134, 2132, 2136, 2024, 2032, 2032,
     2135, 2135, 2027, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
     2144, 2145, 2033, 2044, 2044, 2146, 2146, 2147, 2147, 2149,
     2150, 2151, 2152, 2153, 2154, 2155, 2156, 2045, 2157, 2158,
     2159, 2148, 2058, 2058, 2160, 2060, 2060, 2161, 2062, 2062,
     2162, 2162, 2064, 2064, 2065, 2065, 2066, 2066, 2163, 2164,

     2164, 2069, 2069, 2063, 2166, 2166, 2167, 2168, 2073, 2073,
     2169, 2169, 2170, 2172, 2165, 2173, 2070, 2076, 2076, 2171,
     2171, 2080, 2080, 2074, 2174, 2174, 2175, 2083, 2083, 2176,
     2177, 2177, 2077, 2086, 2086, 2180, 2081, 2179, 2179, 2181,
     2182, 2183, 2184, 2184, 2190, 2178, 2093, 2093, 2087, 2186,
     2186, 2187, 2187, 2096, 2096, 2189, 2189, 2185, 2191, 2192,
     2193, 2094, 2194, 2195, 2196, 2197, 2188, 2198, 2097, 2107,
     2107, 2199, 2109, 2109, 2200, 2201, 2202, 2203, 2204, 2205,
     2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215,
     2128, 2128, 2216, 2130, 2130, 2218, 2131, 2219, 2132, 2220,

     2221, 2135, 2135, 2222, 2217, 2223, 2224, 2225, 2226, 2227,
     2228, 2229, 2230, 2231, 2146, 2146, 2147, 2147, 2232, 2232,
     2233, 2234, 2235, 2236, 2238, 2239, 2240, 2237, 2241, 2242,
     2148, 2243, 2244, 2245, 2246, 2162, 2162, 2247, 2164, 2164,
     2248, 2248, 2166, 2166, 2249, 2249, 2251, 2169, 2169, 2252,
     2171, 2171, 2253, 2165, 2254, 2174, 2174, 2255, 2256, 2250,
     2177, 2177, 2257, 2257, 2179, 2179, 2258, 2259, 2260, 2261,
     2261, 2184, 2184, 2263, 2263, 2178, 2186, 2186, 2187, 2187,
     2264, 2264, 2189, 2189, 2262, 2265, 2185, 2266, 2267, 2268,
     2269, 2270, 2271, 2188, 2272, 2273, 2274, 2275, 2276, 2277,

     2278, 2279, 2280, 2280, 2282, 2283, 2284, 2285, 2286, 2286,
     2288, 2288, 2290, 2291, 2292, 2293, 2294, 2281, 2295, 2296,
     2297, 2298, 2287, 2299, 2289, 2300, 2301, 2302, 2303, 2232,
     2232, 2304, 2305, 2305, 2307, 2308, 2309, 2310, 2311, 2311,
     2313, 2314, 2315, 2316, 2316, 2318, 2306, 2319, 2320, 2320,
     2322, 2322, 2325, 2312, 2248, 2248, 2249, 2249, 2317, 2324,
     2324, 2326, 2327, 2321, 2328, 2323, 2329, 2330, 2257, 2257,
     2331, 2250, 2332, 2333, 2261, 2261, 2334, 2334, 2263, 2263,
     2264, 2264, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2262,
     2342, 2343, 2344, 2345, 2346, 2347, 2280, 2280, 2348, 2348,

     2349, 2350, 2351, 2352, 2286, 2286, 2353, 2353, 2288, 2288,
     2355, 2281, 2354, 2354, 2356, 2357, 2358, 2359, 2287, 2360,
     2361, 2362, 2289, 2363, 2364, 2365, 2366, 2366, 2368, 2369,
     2370, 2370, 2305, 2305, 2372, 2372, 2373, 2375, 2376, 2377,
     2367, 2311, 2311, 2379, 2371, 2380, 2306, 2381, 2374, 2378,
     2378, 2316, 2316, 2382, 2382, 2389, 2312, 2383, 2383, 2385,
     2385, 2320, 2320, 2387, 2387, 2390, 2317, 2322, 2322, 2388,
     2388, 2391, 2384, 2392, 2386, 2393, 2321, 2324, 2324, 2394,
     2395, 2396, 2323, 2397, 2334, 2334, 2398, 2399, 2400, 2401,
     2402, 2403, 2403, 2405, 2406, 2407, 2408, 2409, 2348, 2348,

     2410, 2411, 2353, 2353, 2354, 2354, 2404, 2412, 2412, 2414,
     2414, 2416, 2417, 2418, 2419, 2419, 2421, 2422, 2423, 2424,
     2425, 2413, 2427, 2415, 2366, 2366, 2426, 2426, 2420, 2428,
     2370, 2370, 2429, 2429, 2372, 2372, 2430, 2431, 2367, 2432,
     2432, 2434, 2435, 2435, 2371, 2378, 2378, 2437, 2438, 2438,
     2440, 2382, 2382, 2433, 2383, 2383, 2436, 2441, 2441, 2385,
     2385, 2442, 2442, 2439, 2387, 2387, 2388, 2388, 2443, 2384,
     2444, 2445, 2446, 2446, 2386, 2448, 2449, 2450, 2450, 2452,
     2453, 2453, 2455, 2456, 2457, 2403, 2403, 2447, 2458, 2458,
     2459, 2460, 2451, 2461, 2462, 2454, 2412, 2412, 2463, 2463,

     2404, 2414, 2414, 2464, 2464, 2465, 2465, 2467, 2468, 2470,
     2413, 2419, 2419, 2469, 2469, 2415, 2471, 2472, 2473, 2466,
     2474, 2426, 2426, 2475, 2478, 2420, 2476, 2476, 2429, 2429,
     2479, 2432, 2432, 2480, 2480, 2481, 2481, 2435, 2435, 2491,
     2477, 2483, 2483, 2492, 2484, 2433, 2485, 2486, 2486, 2482,
     2493, 2436, 2438, 2438, 2488, 2488, 2489, 2489, 2441, 2441,
     2442, 2442, 2487, 2446, 2446, 2494, 2494, 2439, 2495, 2495,
     2503, 2490, 2497, 2497, 2450, 2450, 2499, 2499, 2447, 2500,
     2500, 2453, 2453, 2496, 2502, 2502, 2504, 2498, 2505, 2451,
     2458, 2458, 2506, 2507, 2501, 2508, 2454, 2509, 2463, 2463,

     2464, 2464, 2465, 2465, 2510, 2510, 2511, 2511, 2513, 2469,
     2469, 2514, 2515, 2516, 2516, 2518, 2466, 2519, 2520, 2529,
     2512, 2476, 2476, 2521, 2521, 2522, 2522, 2517, 2524, 2524,
     2480, 2480, 2481, 2481, 2530, 2477, 2486, 2486, 2533, 2523,
     2526, 2526, 2525, 2527, 2534, 2528, 2482, 2483, 2483, 2541,
     2484, 2487, 2485, 2531, 2531, 2488, 2488, 2489, 2489, 2532,
     2532, 2535, 2535, 2494, 2494, 2495, 2495, 2538, 2538, 2497,
     2497, 2542, 2490, 2539, 2539, 2543, 2536, 2499, 2499, 2544,
     2496, 2500, 2500, 2546, 2498, 2540, 2540, 2502, 2502, 2510,
     2510, 2511, 2511, 2545, 2545, 2547, 2501, 2548, 2516, 2516,

     2549, 2549, 2550, 2551, 2556, 2512, 2552, 2552, 2521, 2521,
     2522, 2522, 2517, 2557, 2537, 2554, 2554, 2524, 2524, 2560,
     2553, 2555, 2555, 2566, 2523, 2526, 2526, 2567, 2527, 2568,
     2528, 2525, 2531, 2531, 2532, 2532, 2558, 2558, 2535, 2535,
     2561, 2561, 2562, 2562, 2538, 2538, 2539, 2539, 2540, 2540,
     2569, 2559, 2570, 2536, 2564, 2564, 2571, 2563, 2545, 2545,
     2549, 2549, 2572, 2573, 2552, 2552, 2574, 2574, 2576, 2565,
     2554, 2554, 2555, 2555, 2558, 2558, 2575, 2575, 2553, 2561,
     2561, 2562, 2562, 2577, 2577, 2564, 2564, 2578, 2578, 2559,
     2579, 2580, 2581, 2582, 2583, 2584, 2563, 2585, 2586, 2587,

     2565, 2574, 2574, 2575, 2575, 2577, 2577, 2578, 2578, 2588,
     2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598,
     2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2606, 2608,
     2608, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2606, 2606,
     2617, 2617, 2607, 2619, 2609, 2608, 2608, 2618, 2618, 2620,
     2621, 2622, 2623, 2607, 2624, 2624, 2617, 2617, 2618, 2618,
     2609, 2626, 2626, 2628, 2629, 2630, 2630, 2632, 2632, 2625,
     2624, 2624, 2634, 2634, 2636, 2627, 2626, 2626,  995, 2631,
      994, 2633, 2635, 2635,  993, 2625, 2637, 2637, 2630, 2630,
     2627, 2639, 2639, 2632, 2632, 2640, 2640, 2634, 2634,  992,

     2638,  991, 2631, 2635, 2635, 2641, 2641, 2633, 2637, 2637,
     2643, 2643, 2639, 2639, 2640, 2640, 2641, 2641,  990, 2642,
     2644, 2644, 2638, 2643, 2643, 2644, 2644,  987,  983,  980,
     2642,   23,   23,   23,   23,   23,   33,   33,   33,   33,
       33,   35,   35,   35,   35,   35,   36,   36,   36,   36,
       36,   34,   34,   34,   34,   34,   37,   37,   37,   37,
       37,   38,   38,   38,   38,   38,   41,   41,   41,   41,
       41,  101,  101,  101,  101,  102,  979,  102,  102,  102,
      103,  103,  978,  103,  103,  104,  104,  104,  977,  104,
      976,  975,  974,  973,  972,  971,  970,  966,  965,  964,

      963,  958,  957,  956,  955,  954,  953,  952,  951,  950,
      949,  948,  947,  946,  945,  944,  943,  942,  941,  940,
      939,  938,  937,  932,  931,  930,  929,  928,  927,  926,
      925,  924,  923,  922,  921,  920,  919,  913,  912,  911,
      910,  909,  908,  905,  902,  901,  900,  899,  896,  895,
      894,  893,  892,  891,  890,  889,  888,  887,  886,  885,
      884,  881,  880,  879,  878,  877,  876,  875,  874,  873,
      872,  871,  870,  869,  868,  867,  865,  861,  860,  859,
      854,  853,  851,  850,  849,  848,  847,  846,  845,  844,
      842,  841,  840,  839,  838,  837,  834,  831,  830,  828,

      827,  826,  825,  822,  820,  818,  817,  816,  815,  811,
      810,  809,  807,  806,  803,  802,  801,  800,  799,  798,
      797,  795,  793,  792,  787,  786,  785,  784,  783,  782,
      781,  779,  778,  769,  768,  767,  766,  765,  764,  758,
      757,  756,  754,  753,  752,  751,  750,  749,  748,  744,
      743,  742,  739,  738,  736,  735,  734,  733,  732,  731,
      730,  729,  727,  726,  725,  724,  723,  722,  719,  716,
      715,  714,  713,  712,  711,  707,  705,  703,  702,  701,
      700,  696,  695,  694,  693,  692,  689,  688,  687,  686,
      685,  684,  683,  681,  680,  679,  674,  673,  672,  671,

      670,  669,  668,  661,  660,  659,  658,  655,  654,  647,
      646,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  628,  624,  623,  619,  616,  614,  613,  609,  608,
      607,  606,  602,  601,  596,  595,  594,  592,  591,  590,
      589,  583,  582,  578,  577,  576,  575,  574,  573,  569,
      568,  567,  562,  561,  560,  559,  558,  557,  549,  548,
      547,  544,  538,  537,  536,  535,  532,  531,  524,  523,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  504,  503,  499,  496,  494,  493,  490,  489,
      488,  487,  485,  484,  479,  478,  477,  476,  475,  474,

      473,  470,  469,  468,  464,  463,  462,  461,  460,  459,
      454,  453,  452,  451,  450,  446,  445,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  426,  425,  424,  423,  416,  415,  414,  409,  408,
      407,  406,  405,  399,  398,  397,  396,  392,  391,  390,
      386,  385,  384,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  364,  363,  362,
      361,  360,  359,  356,  355,  354,  353,  352,  348,  347,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  320,  319,

      318,  313,  312,  311,  310,  309,  306,  305,  304,  303,
      302,  298,  297,  296,  292,  291,  290,  289,  257,  251,
      250,  233,  230,  229,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  210,  209,
      208,  207,  207,  206,  174,  168,  167,  150,  128,  125,
      124,  123,  118,  117,  114,  111,  110,  107,  100,   99,
       72,  106,  105,  100,   99,   72,   68,   68, 2645,   34,
       34,   34,   34,   34,   34,   34,   34,   19, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645
    } ;

static yyconst flex_int16_t yy_chk[4341] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,    1,    2,
        2,    2,    2,    2,    0,    2,   60,    2,    2,    2,
        2,    2,    2,    2,   88,    2,    2,   50,   25,   88,
       25,   25,   25,    2,   51,   51,   60,    2,   21,   21,
       55,   50,   21,   25,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   55,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,
       23,   46,  803,   46,   46,   46,   23,   23,   23,   23,
       23,   23,   23,   58,   23,   63,   46,   64,  171,   26,
       26,   63,   23,   58,   69,   69,   23,   73,   73,   26,
       26,   26,   80,  171,   81,   23,   23,   23,   23,   26,
       81,   64,   23,   80,   98,   98,   23,   23,   23,   28,
       28,   23,   23,   23,   23,   23,   23,   28,   26,   28,
       28,   28,   47,   47,   83,   95,   83,   49,   49,   28,
       83,   95,   47,   47,   47,   49,   83,   49,   49,   49,

       70,   70,   47,  207,  207,   93,  467,   49,   28,   29,
       70,   70,   70,   71,   71,   93,   29,   71,   71,   71,
       70,   47,  467,   29,   82,   89,   49,   29,   82,   89,
       96,   92,  109,   89,   92,   96,   29,   92,  132,   70,
       82,  109,   29,   29,   29,   29,   29,   29,   29,  132,
       29,   29,   91,   29,   29,   29,   29,   29,  145,   29,
       29,   29,   29,   29,   75,  124,   91,  806,  145,   91,
       91,  124,  133,   75,  126,  126,  126,  807,  133,   75,
       75,   75,   75,   75,   75,   75,  164,   75,   75,  147,
       75,   75,   75,   75,   75,  147,   75,   75,   75,   75,

       75,   79,   79,  164,   90,  140,  809,   86,   90,   86,
      140,   79,  129,  129,   94,   90,   94,   86,   90,   79,
       94,   79,   86,   86,   90,  810,   94,  129,   94,  127,
      127,   94,   94,  131,  131,  247,   94,  175,  134,  127,
      127,  127,  134,  131,  135,  138,  135,  138,  175,  811,
      135,  131,  247,  131,  134,  138,  135,  143,  141,  142,
      138,  138,  141,  142,  148,  158,  141,  158,  816,  148,
      142,  143,  158,  142,  143,  143,  146,  144,  146,  142,
      144,  817,  146,  144,  154,  170,  170,  197,  146,  154,
      146,  176,  176,  146,  146,  177,  197,  154,  146,  177,

      170,  200,  206,  215,  215,  818,  176,  260,  206,  231,
      231,  260,  200,  232,  232,  200,  237,  215,  233,  233,
      241,  237,  241,  254,  231,  246,  246,  241,  258,  237,
      253,  253,  280,  233,  259,  259,  265,  265,  254,  258,
      246,  280,  283,  820,  289,  253,  290,  290,  353,  259,
      289,  265,  353,  283,  297,  825,  283,  301,  301,  309,
      309,  290,  297,  348,  246,  348,  297,  310,  310,  314,
      314,  446,  301,  446,  309,  315,  315,  320,  320,  323,
      323,  331,  310,  826,  314,  324,  324,  326,  326,  328,
      328,  344,  344,  349,  323,  331,  345,  345,  358,  349,

      320,  827,  326,  359,  328,  358,  344,  350,  350,  359,
      361,  361,  365,  365,  366,  366,  367,  367,  358,  368,
      368,  451,  350,  447,  361,  451,  365,  369,  369,  447,
      367,  376,  376,  368,  377,  377,  381,  381,  382,  382,
      828,  369,  383,  383,  328,  376,  384,  384,  377,  581,
      391,  394,  394,  382,  395,  395,  400,  400,  391,  401,
      401,  384,  391,  405,  405,  581,  394,  406,  406,  395,
      830,  400,  409,  409,  410,  410,  411,  411,  405,  416,
      416,  533,  406,  419,  419,  420,  420,  409,  831,  410,
      422,  422,  424,  424,  416,  427,  427,  429,  419,  428,

      428,  838,  416,  533,  394,  422,  839,  424,  442,  442,
      427,  429,  431,  431,  443,  443,  448,  448,  456,  456,
      457,  457,  466,  442,  458,  458,  840,  431,  471,  471,
      841,  448,  580,  456,  842,  457,  466,  472,  472,  480,
      480,  456,  844,  471,  481,  481,  580,  424,  456,  482,
      482,  431,  483,  483,  480,  486,  486,  490,  490,  491,
      491,  456,  495,  495,  482,  845,  490,  497,  497,  498,
      498,  846,  490,  500,  500,  501,  501,  503,  503,  510,
      510,  847,  497,  512,  512,  769,  503,  769,  500,  519,
      519,  849,  503,  850,  510,  520,  520,  851,  512,  529,

      529,  530,  530,  853,  519,  537,  537,  545,  545,  546,
      546,  550,  550,  537,  529,  551,  551,  552,  552,  553,
      553,  545,  554,  554,  555,  555,  854,  556,  556,  551,
      556,  859,  556,  553,  563,  563,  564,  564,  555,  564,
      860,  564,  565,  565,  566,  566,  681,  566,  563,  566,
      567,  567,  570,  570,  571,  571,  565,  572,  572,  584,
      584,  585,  585,  681,  567,  587,  587,  588,  588,  571,
      593,  593,  597,  597,  584,  598,  598,  599,  599,  861,
      587,  600,  600,  603,  603,  604,  604,  597,  605,  605,
      609,  609,  599,  610,  610,  611,  611,  862,  603,  615,

      615,  617,  617,  618,  618,  609,  620,  620,  610,  621,
      621,  623,  623,  625,  625,  863,  617,  629,  629,  630,
      630,  620,  633,  633,  635,  635,  623,  642,  642,  643,
      643,  864,  629,  652,  652,  653,  653,  633,  865,  635,
      656,  656,  642,  660,  660,  662,  662,  867,  652,  663,
      663,  660,  667,  667,  868,  656,  682,  682,  690,  690,
      662,  691,  691,  697,  697,  795,  699,  699,  704,  704,
      869,  656,  697,  706,  706,  707,  707,  870,  697,  699,
      708,  708,  795,  710,  710,  717,  717,  719,  719,  708,
      707,  720,  720,  656,  740,  708,  710,  721,  721,  871,

      717,  722,  722,  728,  728,  872,  720,  737,  737,  740,
      741,  741,  755,  755,  759,  759,  722,  760,  760,  761,
      761,  857,  761,  873,  761,  741,  768,  768,  770,  770,
      874,  770,  875,  770,  773,  773,  857,  773,  876,  773,
      768,  776,  776,  777,  777,  877,  777,  878,  777,  780,
      780,  790,  790,  792,  792,  776,  794,  794,  796,  796,
      804,  804,  805,  805,  808,  808,  790,  879,  792,  812,
      812,  813,  813,  814,  814,  815,  815,  819,  819,  821,
      821,  822,  822,  881,  812,  823,  823,  824,  824,  882,
      815,  829,  829,  832,  832,  883,  822,  833,  833,  884,

      823,  834,  834,  835,  835,  885,  792,  887,  832,  836,
      836,  837,  837,  843,  843,  888,  834,  889,  835,  848,
      848,  852,  852,  855,  855,  890,  837,  856,  856,  858,
      858,  834,  834,  891,  848,  866,  866,  892,  855,  886,
      886,  893,  894,  898,  858,  896,  896,  897,  897,  899,
      900,  902,  903,  903,  886,  904,  904,  905,  905,  907,
      897,  906,  906,  908,  908,  909,  910,  903,  912,  913,
      914,  915,  916,  916,  906,  917,  917,  919,  908,  918,
      918,  920,  921,  922,  923,  924,  925,  926,  926,  929,
      917,  925,  927,  927,  930,  931,  926,  932,  932,  933,

      934,  937,  926,  935,  935,  936,  936,  927,  938,  939,
      940,  941,  942,  943,  945,  946,  947,  948,  935,  949,
      932,  951,  927,  950,  950,  952,  955,  956,  956,  957,
      958,  959,  959,  960,  960,  961,  962,  950,  968,  967,
      967,  956,  967,  969,  967,  959,  970,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  981,
      970,  982,  982,  983,  984,  984,  985,  985,  986,  986,
      987,  988,  989,  981,  990,  991,  992,  992,  993,  984,
      994,  995,  996,  986,  997,  998,  999, 1000, 1001, 1001,
     1005,  992, 1002, 1002, 1003, 1003, 1004, 1004, 1006, 1007,

     1007, 1008, 1013, 1001, 1009, 1009, 1010, 1010, 1014, 1003,
     1011, 1011, 1012, 1012, 1007, 1015, 1015, 1016, 1017, 1009,
     1018, 1018, 1019, 1019, 1020, 1020, 1021, 1012, 1022, 1026,
     1015, 1023, 1023, 1024, 1024, 1025, 1025, 1019, 1027, 1028,
     1029, 1030, 1031, 1038, 1032, 1033, 1033, 1039, 1024, 1032,
     1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037, 1040, 1043,
     1033, 1041, 1041, 1042, 1042, 1034, 1044, 1035, 1045, 1045,
     1047, 1037, 1046, 1046, 1048, 1049, 1041, 1050, 1051, 1052,
     1034, 1053, 1053, 1045, 1041, 1054, 1054, 1055, 1056, 1057,
     1058, 1058, 1059, 1062, 1063, 1064, 1053, 1065, 1066, 1067,

     1054, 1068, 1069, 1070, 1071, 1058, 1072, 1072, 1073, 1073,
     1070, 1074, 1053, 1075, 1077, 1078, 1079, 1079, 1081, 1082,
     1082, 1072, 1083, 1084, 1084, 1085, 1087, 1087, 1088, 1088,
     1089, 1092, 1084, 1090, 1090, 1093, 1079, 1094, 1084, 1091,
     1091, 1095, 1096, 1097, 1098, 1098, 1100, 1079, 1090, 1099,
     1099, 1101, 1102, 1103, 1103, 1104, 1105, 1106, 1107, 1107,
     1108, 1109, 1109, 1112, 1099, 1111, 1111, 1107, 1110, 1110,
     1113, 1114, 1115, 1107, 1109, 1116, 1116, 1117, 1118, 1119,
     1103, 1120, 1120, 1110, 1121, 1122, 1103, 1124, 1125, 1126,
     1127, 1124, 1128, 1129, 1130, 1131, 1132, 1132, 1133, 1133,

     1134, 1134, 1135, 1134, 1141, 1134, 1136, 1136, 1143, 1137,
     1132, 1137, 1133, 1144, 1137, 1138, 1138, 1149, 1137, 1137,
     1136, 1150, 1137, 1137, 1152, 1137, 1155, 1139, 1139, 1138,
     1139, 1156, 1139, 1140, 1140, 1142, 1142, 1147, 1147, 1148,
     1148, 1157, 1148, 1158, 1148, 1151, 1151, 1140, 1153, 1153,
     1160, 1147, 1154, 1154, 1159, 1159, 1161, 1161, 1162, 1162,
     1151, 1163, 1163, 1153, 1164, 1165, 1166, 1154, 1167, 1168,
     1169, 1169, 1171, 1162, 1172, 1167, 1170, 1170, 1173, 1173,
     1174, 1175, 1176, 1176, 1178, 1169, 1177, 1177, 1179, 1179,
     1180, 1180, 1183, 1173, 1181, 1181, 1190, 1176, 1191, 1182,

     1182, 1177, 1176, 1179, 1184, 1184, 1185, 1185, 1186, 1186,
     1187, 1187, 1194, 1176, 1182, 1188, 1188, 1189, 1189, 1184,
     1192, 1192, 1195, 1186, 1193, 1193, 1196, 1196, 1197, 1198,
     1188, 1199, 1199, 1200, 1200, 1192, 1201, 1202, 1203, 1204,
     1204, 1205, 1206, 1207, 1208, 1208, 1209, 1209, 1200, 1210,
     1210, 1211, 1211, 1212, 1204, 1213, 1213, 1215, 1215, 1208,
     1214, 1214, 1216, 1217, 1210, 1218, 1204, 1219, 1219, 1220,
     1220, 1221, 1204, 1222, 1223, 1214, 1224, 1224, 1225, 1226,
     1227, 1227, 1219, 1228, 1229, 1230, 1233, 1228, 1231, 1231,
     1232, 1232, 1234, 1234, 1236, 1227, 1235, 1235, 1237, 1238,

     1239, 1239, 1241, 1231, 1240, 1240, 1242, 1234, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1239, 1250, 1251, 1252, 1253,
     1253, 1254, 1256, 1257, 1258, 1258, 1259, 1260, 1261, 1262,
     1263, 1263, 1264, 1265, 1265, 1266, 1267, 1268, 1268, 1263,
     1269, 1271, 1272, 1273, 1277, 1263, 1265, 1274, 1274, 1275,
     1275, 1276, 1276, 1278, 1279, 1280, 1280, 1281, 1282, 1284,
     1285, 1286, 1286, 1288, 1275, 1287, 1287, 1289, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1287, 1299,
     1300, 1301, 1282, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1308, 1309, 1309, 1311, 1309, 1312, 1309, 1310, 1310, 1313,

     1310, 1316, 1310, 1308, 1314, 1314, 1315, 1315, 1317, 1315,
     1317, 1315, 1318, 1319, 1320, 1321, 1322, 1323, 1314, 1324,
     1324, 1321, 1324, 1325, 1324, 1326, 1327, 1327, 1318, 1329,
     1328, 1328, 1320, 1328, 1330, 1328, 1331, 1333, 1332, 1332,
     1327, 1332, 1334, 1332, 1335, 1336, 1337, 1337, 1338, 1338,
     1339, 1340, 1340, 1341, 1341, 1342, 1342, 1343, 1343, 1344,
     1345, 1337, 1346, 1347, 1348, 1350, 1340, 1349, 1349, 1351,
     1342, 1352, 1353, 1354, 1355, 1356, 1356, 1357, 1358, 1358,
     1359, 1359, 1360, 1360, 1361, 1362, 1363, 1363, 1364, 1364,
     1365, 1366, 1369, 1358, 1373, 1359, 1367, 1367, 1368, 1368,

     1378, 1363, 1370, 1370, 1371, 1371, 1372, 1372, 1374, 1374,
     1381, 1367, 1375, 1375, 1376, 1376, 1377, 1377, 1382, 1371,
     1379, 1379, 1380, 1380, 1383, 1384, 1384, 1375, 1385, 1385,
     1386, 1386, 1387, 1388, 1389, 1379, 1390, 1390, 1391, 1391,
     1392, 1393, 1395, 1385, 1394, 1394, 1396, 1397, 1397, 1398,
     1398, 1390, 1399, 1400, 1400, 1401, 1402, 1403, 1405, 1394,
     1404, 1404, 1406, 1407, 1408, 1393, 1409, 1410, 1410, 1411,
     1411, 1412, 1413, 1414, 1415, 1416, 1416, 1417, 1418, 1418,
     1419, 1421, 1410, 1420, 1420, 1422, 1422, 1423, 1424, 1424,
     1426, 1427, 1428, 1429, 1430, 1431, 1424, 1432, 1420, 1433,

     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1442,
     1443, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1453, 1453, 1443, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1462, 1463, 1464, 1420, 1465, 1467, 1468,
     1469, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1480,
     1481, 1483, 1480, 1482, 1482, 1484, 1482, 1487, 1482, 1489,
     1480, 1488, 1488, 1490, 1488, 1491, 1488, 1492, 1492, 1493,
     1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1505,
     1505, 1492, 1505, 1506, 1505, 1507, 1508, 1509, 1510, 1513,
     1514, 1515, 1515, 1516, 1517, 1517, 1518, 1518, 1519, 1519,

     1520, 1520, 1521, 1522, 1523, 1524, 1519, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1531, 1520, 1532, 1532, 1533, 1533,
     1534, 1535, 1536, 1536, 1537, 1538, 1539, 1539, 1531, 1540,
     1541, 1541, 1542, 1543, 1543, 1544, 1545, 1545, 1546, 1546,
     1547, 1548, 1549, 1550, 1551, 1552, 1552, 1553, 1554, 1555,
     1557, 1545, 1556, 1556, 1558, 1559, 1560, 1560, 1561, 1561,
     1562, 1563, 1564, 1565, 1566, 1566, 1567, 1568, 1569, 1570,
     1570, 1560, 1571, 1572, 1573, 1573, 1574, 1575, 1576, 1566,
     1577, 1578, 1579, 1583, 1570, 1580, 1580, 1581, 1581, 1582,
     1582, 1585, 1586, 1587, 1588, 1590, 1592, 1593, 1594, 1595,

     1580, 1596, 1598, 1599, 1582, 1600, 1601, 1602, 1603, 1604,
     1604, 1605, 1606, 1607, 1608, 1610, 1611, 1612, 1613, 1614,
     1616, 1617, 1619, 1620, 1621, 1622, 1623, 1623, 1626, 1627,
     1628, 1629, 1630, 1631, 1632, 1634, 1635, 1636, 1637, 1638,
     1639, 1623, 1642, 1642, 1645, 1645, 1646, 1646, 1647, 1647,
     1648, 1649, 1649, 1650, 1651, 1653, 1642, 1655, 1645, 1656,
     1646, 1652, 1652, 1654, 1654, 1649, 1657, 1657, 1660, 1661,
     1662, 1663, 1664, 1665, 1665, 1652, 1666, 1667, 1668, 1671,
     1657, 1669, 1669, 1670, 1670, 1673, 1672, 1672, 1665, 1657,
     1674, 1674, 1675, 1676, 1677, 1678, 1669, 1645, 1679, 1682,

     1652, 1672, 1680, 1680, 1683, 1674, 1681, 1681, 1684, 1657,
     1685, 1686, 1687, 1688, 1689, 1689, 1691, 1680, 1690, 1690,
     1692, 1693, 1694, 1695, 1696, 1696, 1697, 1698, 1699, 1699,
     1700, 1701, 1701, 1690, 1702, 1703, 1704, 1704, 1709, 1696,
     1705, 1705, 1710, 1699, 1706, 1706, 1707, 1707, 1708, 1708,
     1713, 1704, 1711, 1711, 1714, 1705, 1712, 1712, 1715, 1706,
     1716, 1717, 1719, 1708, 1718, 1718, 1720, 1711, 1721, 1721,
     1722, 1722, 1723, 1723, 1724, 1725, 1726, 1727, 1728, 1718,
     1730, 1732, 1733, 1734, 1734, 1722, 1736, 1736, 1737, 1738,
     1739, 1741, 1734, 1740, 1740, 1736, 1742, 1744, 1734, 1743,

     1743, 1736, 1745, 1746, 1747, 1748, 1749, 1750, 1740, 1752,
     1753, 1754, 1755, 1758, 1743, 1756, 1756, 1757, 1757, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1756, 1770, 1771, 1771, 1772, 1772, 1775, 1772, 1777, 1772,
     1773, 1773, 1774, 1774, 1776, 1776, 1771, 1778, 1778, 1779,
     1779, 1780, 1781, 1784, 1773, 1782, 1782, 1783, 1783, 1785,
     1786, 1778, 1787, 1788, 1789, 1790, 1790, 1791, 1791, 1782,
     1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1799, 1790,
     1800, 1800, 1801, 1802, 1803, 1804, 1804, 1805, 1806, 1806,
     1807, 1807, 1799, 1808, 1808, 1809, 1809, 1810, 1810, 1811,

     1812, 1812, 1813, 1806, 1814, 1815, 1815, 1820, 1808, 1821,
     1809, 1816, 1816, 1817, 1817, 1812, 1818, 1818, 1819, 1819,
     1815, 1822, 1823, 1824, 1825, 1825, 1816, 1826, 1826, 1827,
     1828, 1818, 1829, 1819, 1830, 1831, 1832, 1832, 1834, 1825,
     1833, 1833, 1835, 1835, 1836, 1836, 1837, 1837, 1838, 1839,
     1840, 1832, 1841, 1841, 1842, 1842, 1848, 1835, 1849, 1836,
     1843, 1843, 1844, 1844, 1845, 1845, 1851, 1841, 1846, 1846,
     1847, 1847, 1850, 1850, 1852, 1843, 1853, 1854, 1855, 1856,
     1856, 1857, 1857, 1846, 1858, 1859, 1860, 1860, 1861, 1862,
     1863, 1864, 1865, 1862, 1856, 1866, 1867, 1869, 1869, 1870,

     1871, 1871, 1872, 1872, 1873, 1875, 1869, 1874, 1874, 1876,
     1880, 1872, 1869, 1871, 1878, 1878, 1881, 1872, 1879, 1879,
     1874, 1882, 1882, 1883, 1883, 1884, 1885, 1887, 1888, 1878,
     1890, 1891, 1892, 1894, 1895, 1895, 1882, 1896, 1897, 1898,
     1899, 1900, 1902, 1904, 1905, 1906, 1906, 1907, 1908, 1908,
     1909, 1909, 1910, 1909, 1911, 1909, 1905, 1912, 1912, 1906,
     1913, 1914, 1908, 1915, 1915, 1916, 1916, 1917, 1918, 1918,
     1919, 1920, 1921, 1922, 1923, 1924, 1924, 1925, 1925, 1916,
     1926, 1920, 1927, 1920, 1920, 1928, 1929, 1920, 1930, 1924,
     1931, 1932, 1933, 1933, 1934, 1935, 1936, 1937, 1934, 1938,

     1938, 1939, 1939, 1940, 1940, 1941, 1941, 1942, 1943, 1943,
     1944, 1944, 1945, 1946, 1946, 1954, 1939, 1947, 1947, 1948,
     1948, 1949, 1949, 1943, 1950, 1950, 1951, 1951, 1946, 1952,
     1952, 1955, 1947, 1953, 1953, 1956, 1956, 1957, 1958, 1950,
     1959, 1959, 1960, 1960, 1952, 1961, 1961, 1962, 1963, 1966,
     1956, 1964, 1964, 1965, 1965, 1967, 1967, 1960, 1968, 1968,
     1961, 1969, 1969, 1970, 1971, 1976, 1964, 1972, 1972, 1977,
     1967, 1973, 1973, 1960, 1974, 1974, 1975, 1975, 1978, 1979,
     1980, 1982, 1972, 1981, 1981, 1983, 1983, 1984, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1981, 1994,

     1994, 1996, 1984, 1995, 1995, 1997, 1997, 1998, 1998, 1999,
     2000, 2002, 2002, 2003, 2004, 2006, 1995, 2005, 2005, 2007,
     1998, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017,
     2020, 2021, 2022, 2023, 2023, 2024, 2024, 2025, 2026, 2026,
     2027, 2027, 2030, 2027, 2031, 2027, 2034, 2023, 2032, 2032,
     2033, 2033, 2026, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2043, 2032, 2044, 2044, 2045, 2045, 2046, 2046, 2047,
     2048, 2049, 2050, 2051, 2052, 2053, 2054, 2044, 2055, 2056,
     2057, 2046, 2058, 2058, 2059, 2060, 2060, 2061, 2062, 2062,
     2063, 2063, 2064, 2064, 2065, 2065, 2066, 2066, 2067, 2068,

     2068, 2069, 2069, 2062, 2070, 2070, 2071, 2072, 2073, 2073,
     2074, 2074, 2075, 2078, 2068, 2079, 2069, 2076, 2076, 2077,
     2077, 2080, 2080, 2073, 2081, 2081, 2082, 2083, 2083, 2084,
     2085, 2085, 2076, 2086, 2086, 2088, 2080, 2087, 2087, 2089,
     2090, 2091, 2092, 2092, 2098, 2085, 2093, 2093, 2086, 2094,
     2094, 2095, 2095, 2096, 2096, 2097, 2097, 2092, 2099, 2100,
     2101, 2093, 2102, 2103, 2104, 2105, 2095, 2106, 2096, 2107,
     2107, 2108, 2109, 2109, 2110, 2111, 2112, 2114, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2125, 2126, 2127,
     2128, 2128, 2129, 2130, 2130, 2131, 2130, 2132, 2130, 2133,

     2134, 2135, 2135, 2136, 2129, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2146, 2147, 2147, 2148, 2148,
     2149, 2150, 2151, 2152, 2153, 2154, 2155, 2152, 2156, 2157,
     2147, 2158, 2159, 2160, 2161, 2162, 2162, 2163, 2164, 2164,
     2165, 2165, 2166, 2166, 2167, 2167, 2168, 2169, 2169, 2170,
     2171, 2171, 2172, 2164, 2173, 2174, 2174, 2175, 2176, 2167,
     2177, 2177, 2178, 2178, 2179, 2179, 2180, 2181, 2182, 2183,
     2183, 2184, 2184, 2185, 2185, 2177, 2186, 2186, 2187, 2187,
     2188, 2188, 2189, 2189, 2183, 2190, 2184, 2192, 2193, 2194,
     2196, 2197, 2199, 2187, 2200, 2202, 2203, 2204, 2205, 2206,

     2207, 2208, 2209, 2209, 2210, 2211, 2212, 2213, 2214, 2214,
     2215, 2215, 2216, 2217, 2220, 2221, 2222, 2209, 2223, 2224,
     2225, 2226, 2214, 2227, 2215, 2228, 2229, 2230, 2231, 2232,
     2232, 2233, 2234, 2234, 2235, 2236, 2237, 2238, 2239, 2239,
     2240, 2241, 2242, 2243, 2243, 2244, 2234, 2245, 2246, 2246,
     2247, 2247, 2251, 2239, 2248, 2248, 2249, 2249, 2243, 2250,
     2250, 2252, 2253, 2246, 2254, 2247, 2255, 2256, 2257, 2257,
     2258, 2249, 2259, 2260, 2261, 2261, 2262, 2262, 2263, 2263,
     2264, 2264, 2265, 2266, 2267, 2268, 2271, 2272, 2273, 2261,
     2274, 2275, 2276, 2277, 2278, 2279, 2280, 2280, 2281, 2281,

     2282, 2283, 2284, 2285, 2286, 2286, 2287, 2287, 2288, 2288,
     2290, 2280, 2289, 2289, 2291, 2292, 2293, 2294, 2286, 2295,
     2296, 2297, 2288, 2298, 2299, 2300, 2301, 2301, 2302, 2303,
     2304, 2304, 2305, 2305, 2306, 2306, 2307, 2308, 2309, 2310,
     2301, 2311, 2311, 2313, 2304, 2314, 2305, 2315, 2307, 2312,
     2312, 2316, 2316, 2317, 2317, 2325, 2311, 2318, 2318, 2319,
     2319, 2320, 2320, 2321, 2321, 2326, 2316, 2322, 2322, 2323,
     2323, 2327, 2318, 2328, 2319, 2329, 2320, 2324, 2324, 2330,
     2331, 2332, 2322, 2333, 2334, 2334, 2335, 2336, 2338, 2339,
     2340, 2341, 2341, 2342, 2343, 2344, 2346, 2347, 2348, 2348,

     2350, 2352, 2353, 2353, 2354, 2354, 2341, 2355, 2355, 2356,
     2356, 2357, 2358, 2359, 2360, 2360, 2361, 2362, 2363, 2364,
     2365, 2355, 2368, 2356, 2366, 2366, 2367, 2367, 2360, 2369,
     2370, 2370, 2371, 2371, 2372, 2372, 2373, 2374, 2366, 2375,
     2375, 2376, 2377, 2377, 2370, 2378, 2378, 2379, 2380, 2380,
     2381, 2382, 2382, 2375, 2383, 2383, 2377, 2384, 2384, 2385,
     2385, 2386, 2386, 2380, 2387, 2387, 2388, 2388, 2389, 2383,
     2390, 2391, 2392, 2392, 2385, 2393, 2394, 2395, 2395, 2396,
     2397, 2397, 2398, 2401, 2402, 2403, 2403, 2392, 2404, 2404,
     2405, 2406, 2395, 2407, 2411, 2397, 2412, 2412, 2413, 2413,

     2403, 2414, 2414, 2415, 2415, 2416, 2416, 2417, 2418, 2421,
     2412, 2419, 2419, 2420, 2420, 2414, 2422, 2423, 2424, 2416,
     2425, 2426, 2426, 2427, 2430, 2419, 2428, 2428, 2429, 2429,
     2431, 2432, 2432, 2433, 2433, 2434, 2434, 2435, 2435, 2443,
     2428, 2436, 2436, 2444, 2436, 2432, 2436, 2437, 2437, 2434,
     2445, 2435, 2438, 2438, 2439, 2439, 2440, 2440, 2441, 2441,
     2442, 2442, 2437, 2446, 2446, 2447, 2447, 2438, 2448, 2448,
     2455, 2440, 2449, 2449, 2450, 2450, 2451, 2451, 2446, 2452,
     2452, 2453, 2453, 2448, 2454, 2454, 2456, 2449, 2457, 2450,
     2458, 2458, 2459, 2460, 2452, 2461, 2453, 2462, 2463, 2463,

     2464, 2464, 2465, 2465, 2466, 2466, 2467, 2467, 2468, 2469,
     2469, 2470, 2471, 2472, 2472, 2473, 2465, 2474, 2475, 2484,
     2467, 2476, 2476, 2477, 2477, 2478, 2478, 2472, 2479, 2479,
     2480, 2480, 2481, 2481, 2485, 2476, 2486, 2486, 2491, 2478,
     2482, 2482, 2479, 2482, 2492, 2482, 2481, 2483, 2483, 2503,
     2483, 2486, 2483, 2487, 2487, 2488, 2488, 2489, 2489, 2490,
     2490, 2493, 2493, 2494, 2494, 2495, 2495, 2496, 2496, 2497,
     2497, 2504, 2489, 2498, 2498, 2505, 2493, 2499, 2499, 2507,
     2495, 2500, 2500, 2513, 2497, 2501, 2501, 2502, 2502, 2510,
     2510, 2511, 2511, 2512, 2512, 2514, 2500, 2515, 2516, 2516,

     2517, 2517, 2518, 2519, 2527, 2511, 2520, 2520, 2521, 2521,
     2522, 2522, 2516, 2528, 2493, 2523, 2523, 2524, 2524, 2534,
     2520, 2525, 2525, 2542, 2522, 2526, 2526, 2543, 2526, 2544,
     2526, 2524, 2531, 2531, 2532, 2532, 2533, 2533, 2535, 2535,
     2536, 2536, 2537, 2537, 2538, 2538, 2539, 2539, 2540, 2540,
     2546, 2533, 2547, 2535, 2541, 2541, 2548, 2537, 2545, 2545,
     2549, 2549, 2550, 2551, 2552, 2552, 2553, 2553, 2560, 2541,
     2554, 2554, 2555, 2555, 2558, 2558, 2559, 2559, 2552, 2561,
     2561, 2562, 2562, 2563, 2563, 2564, 2564, 2565, 2565, 2558,
     2566, 2567, 2568, 2569, 2570, 2571, 2562, 2572, 2573, 2576,

     2564, 2574, 2574, 2575, 2575, 2577, 2577, 2578, 2578, 2579,
     2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589,
     2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2597, 2598,
     2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2606,
     2607, 2607, 2597, 2611, 2598, 2608, 2608, 2609, 2609, 2612,
     2613, 2614, 2615, 2606, 2616, 2616, 2617, 2617, 2618, 2618,
     2608, 2619, 2619, 2620, 2621, 2622, 2622, 2623, 2623, 2616,
     2624, 2624, 2625, 2625, 2628, 2619, 2626, 2626,  802, 2622,
      801, 2623, 2627, 2627,  800, 2624, 2629, 2629, 2630, 2630,
     2626, 2631, 2631, 2632, 2632, 2633, 2633, 2634, 2634,  799,

     2629,  798, 2630, 2635, 2635, 2636, 2636, 2632, 2637, 2637,
     2638, 2638, 2639, 2639, 2640, 2640, 2641, 2641,  797, 2636,
     2642, 2642, 2637, 2643, 2643, 2644, 2644,  793,  791,  789,
     2641, 2646, 2646, 2646, 2646, 2646, 2647, 2647, 2647, 2647,
     2647, 2648, 2648, 2648, 2648, 2648, 2649, 2649, 2649, 2649,
     2649, 2650, 2650, 2650, 2650, 2650, 2651, 2651, 2651, 2651,
     2651, 2652, 2652, 2652, 2652, 2652, 2653, 2653, 2653, 2653,
     2653, 2654, 2654, 2654, 2654, 2655,  788, 2655, 2655, 2655,
     2656, 2656,  787, 2656, 2656, 2657, 2657, 2657,  786, 2657,
      785,  784,  783,  782,  781,  779,  778,  775,  774,  772,

      771,  767,  766,  765,  764,  763,  762,  758,  757,  756,
      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
      744,  743,  742,  739,  738,  736,  735,  734,  732,  731,
      730,  729,  727,  726,  725,  724,  723,  716,  715,  714,
      713,  712,  711,  709,  705,  703,  702,  701,  698,  696,
      695,  694,  693,  692,  689,  688,  687,  686,  685,  684,
      683,  680,  679,  678,  676,  675,  674,  673,  672,  671,
      670,  669,  668,  666,  665,  664,  661,  659,  658,  657,
      655,  654,  651,  650,  649,  648,  647,  646,  645,  644,
      641,  640,  639,  638,  637,  636,  634,  632,  631,  628,

      627,  626,  624,  622,  619,  616,  614,  613,  612,  608,
      607,  606,  602,  601,  596,  595,  594,  592,  591,  590,
      589,  586,  583,  582,  579,  578,  577,  576,  575,  574,
      573,  569,  568,  562,  561,  560,  559,  558,  557,  549,
      548,  547,  544,  543,  542,  541,  540,  539,  538,  536,
      535,  534,  532,  531,  528,  527,  526,  525,  524,  523,
      522,  521,  518,  517,  516,  515,  514,  513,  511,  509,
      508,  507,  506,  505,  504,  502,  499,  496,  494,  493,
      492,  489,  488,  487,  485,  484,  479,  478,  477,  476,
      475,  474,  473,  470,  469,  468,  465,  464,  463,  462,

      461,  460,  459,  455,  454,  453,  452,  450,  449,  445,
      444,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  430,  426,  425,  423,  421,  418,  417,  415,  414,
      413,  412,  408,  407,  404,  403,  402,  399,  398,  397,
      396,  393,  392,  390,  389,  388,  387,  386,  385,  380,
      379,  378,  375,  374,  373,  372,  371,  370,  364,  363,
      362,  360,  357,  356,  355,  354,  352,  351,  347,  346,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  330,  329,  327,  325,  322,  321,  319,  318,
      317,  316,  312,  311,  308,  307,  306,  305,  304,  303,

      302,  300,  299,  298,  296,  295,  294,  293,  292,  291,
      288,  287,  286,  285,  284,  282,  281,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  264,  263,  262,  261,  257,  256,  255,  252,  251,
      250,  249,  248,  245,  244,  243,  242,  240,  239,  238,
      236,  235,  234,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  214,  213,  212,
      211,  210,  209,  205,  204,  203,  202,  201,  199,  198,
      196,  195,  194,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  183,  181,  180,  179,  178,  174,  173,

      172,  169,  168,  167,  166,  165,  163,  162,  161,  160,
      159,  157,  156,  155,  153,  152,  151,  149,  139,  137,
      136,  130,  128,  125,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  108,  107,
      105,  100,   99,   97,   87,   85,   84,   78,   74,   67,
       66,   65,   62,   61,   59,   57,   56,   54,   53,   52,
       48,   43,   40,   32,   31,   27,   24,   22,   19,   14,
       13,    8,    7,    6,    5,    4,    3, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,

     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[359] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../../OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file OSparseosrl.l.1
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2014, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 *
 * in order to avoid duplication when parsing elements of auxiliary schemas,
 * such as OSgL, OSnL, etc. This is the first part of OSparseosrl.l.   
 */
#line 17 "../../../../OS/src/OSParsers/OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define OSRLPARSERDEBUG

#ifdef OSRLPARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 105 "../../../../OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2398 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 115 "../../../../OS/src/OSParsers/OSParseosrl.l"



#line 2654 "../../../../OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2646 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4278 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 118 "../../../../OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 122 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 124 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 125 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 127 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 143 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 147 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 148 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 149 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 150 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 151 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 152 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 153 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 154 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 155 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 156 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 157 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 158 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 159 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 160 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 161 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 162 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 163 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 164 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 165 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 166 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 168 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 169 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 170 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 171 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 172 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 176 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 177 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYROWMAJORATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 178 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 179 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ROWMAJORATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 180 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 181 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYBASETRANSPOSEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 182 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 183 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(BASETRANSPOSEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 184 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 185 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 186 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 187 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 188 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 190 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 191 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 192 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 193 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 194 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 195 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 196 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 197 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 198 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 199 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 200 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 201 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 202 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 203 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 204 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 205 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 206 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 207 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 208 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 209 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 210 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 211 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 212 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 213 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 216 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 217 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 218 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 220 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 221 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 230 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 235 "../../../../OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 236 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 237 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 239 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 240 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 242 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 243 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 245 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 246 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 248 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 249 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 251 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 252 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 325 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 326 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 327 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 328 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 329 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 330 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 331 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 332 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 333 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 334 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 335 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 336 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 337 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 338 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 339 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 340 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 341 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 342 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 343 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 344 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 345 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 346 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 347 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 348 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 349 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 350 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 351 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 352 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 353 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 354 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 355 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 356 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 357 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 358 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 359 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 360 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 361 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 362 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 363 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 364 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 365 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 366 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 367 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 368 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 369 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 370 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 371 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 372 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 373 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 374 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 375 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 376 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 377 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 378 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 379 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 380 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 381 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* include file OSParseosgl.l.patterns --- patterns for OSgL schema elements */
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 386 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXIDXATT);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 387 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTROWATT);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 388 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETMATRIXFIRSTCOLATT);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 389 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTROWATT);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXSTARTCOLATT);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDROWATT);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASEMATRIXENDCOLATT);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SCALARMULTIPLIERATT);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 394 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BLOCKROWIDXATT);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 395 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BLOCKCOLIDXATT);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 398 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 399 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MATRIXEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 400 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 401 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASEMATRIXEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSSTART);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 404 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKSTART);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 405 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BLOCKEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 406 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSSTART);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 407 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEMENTSEND);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 408 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSSTART);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 409 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CONSTANTELEMENTSEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 410 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSSTART);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 411 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARREFERENCEELEMENTSEND);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 412 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(LINEARELEMENTSSTART);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 413 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(LINEARELEMENTSEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 414 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(GENERALELEMENTSSTART);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 415 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(GENERALELEMENTSEND);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 416 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTORSTART);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 417 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(STARTVECTOREND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 418 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSSTART);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 419 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONZEROSEND);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 420 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESSTART);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 421 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INDEXESEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 422 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTART);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 423 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESEND);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 424 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(COLOFFSETSSTART);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 425 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(COLOFFSETSEND);}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 426 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ROWOFFSETSSTART);}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 427 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ROWOFFSETSEND);}
	YY_BREAK
/* The <item> element and the children of the file header are treated specially because they may legitimately contain special characters */
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 431 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 432 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 433 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 434 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 436 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 437 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 438 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 439 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 441 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 442 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 443 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 444 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 446 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 447 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 448 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 449 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 451 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 452 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 453 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 454 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 456 "../../../../OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 457 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 458 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 459 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* include file OSParseosnl.l.patterns --- patterns for OSnL schema elements */
/* patterns for <nonlinearExpressions> */
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 466 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 468 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 470 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 471 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 472 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 473 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 474 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 475 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 476 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 477 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 478 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 479 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 480 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 481 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 482 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 483 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 484 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 485 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 486 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 487 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 488 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 489 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 490 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 491 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 492 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 493 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 494 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 495 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 496 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 497 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 498 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 499 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 500 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 501 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 502 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 503 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 504 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 505 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 506 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 507 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 508 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 509 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 510 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 511 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 512 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 513 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 514 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 515 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 516 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 517 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 518 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 519 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 520 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 521 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* last section of OSParseosrl.l */
/* environments and comments */
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 529 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 530 "../../../../OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 532 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 347:
#line 534 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 534 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 535 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 537 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 351:
#line 539 "../../../../OS/src/OSParsers/OSParseosrl.l"
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 539 "../../../../OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 540 "../../../../OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 543 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 544 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 545 "../../../../OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 549 "../../../../OS/src/OSParsers/OSParseosrl.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 561 "../../../../OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 4922 "../../../../OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2646 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2646 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2645);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 561 "../../../../OS/src/OSParsers/OSParseosrl.l"





